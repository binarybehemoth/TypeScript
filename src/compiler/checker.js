"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signatureHasLiteralTypes = exports.signatureHasRestParameter = exports.createTypeChecker = exports.isInstantiatedModule = exports.getSymbolId = exports.getNodeId = void 0;
var ts_1 = require("./_namespaces/ts");
var moduleSpecifiers = require("./_namespaces/ts.moduleSpecifiers");
var performance = require("./_namespaces/ts.performance");
var ambientModuleSymbolRegex = /^".+"$/;
var anon = "(anonymous)";
var nextSymbolId = 1;
var nextNodeId = 1;
var nextMergeId = 1;
var nextFlowId = 1;
var typeofNEFacts = new Map(Object.entries({
    string: 256 /* TypeFacts.TypeofNEString */,
    number: 512 /* TypeFacts.TypeofNENumber */,
    bigint: 1024 /* TypeFacts.TypeofNEBigInt */,
    boolean: 2048 /* TypeFacts.TypeofNEBoolean */,
    symbol: 4096 /* TypeFacts.TypeofNESymbol */,
    undefined: 524288 /* TypeFacts.NEUndefined */,
    object: 8192 /* TypeFacts.TypeofNEObject */,
    function: 16384 /* TypeFacts.TypeofNEFunction */
}));
var isNotOverloadAndNotAccessor = (0, ts_1.and)(isNotOverload, isNotAccessor);
var intrinsicTypeKinds = new Map(Object.entries({
    Uppercase: 0 /* IntrinsicTypeKind.Uppercase */,
    Lowercase: 1 /* IntrinsicTypeKind.Lowercase */,
    Capitalize: 2 /* IntrinsicTypeKind.Capitalize */,
    Uncapitalize: 3 /* IntrinsicTypeKind.Uncapitalize */
}));
var SymbolLinks = /** @class */ (function () {
    function class_1() {
    }
    return class_1;
}());
function NodeLinks() {
    this.flags = 0 /* NodeCheckFlags.None */;
}
/** @internal */
function getNodeId(node) {
    if (!node.id) {
        node.id = nextNodeId;
        nextNodeId++;
    }
    return node.id;
}
exports.getNodeId = getNodeId;
/** @internal */
function getSymbolId(symbol) {
    if (!symbol.id) {
        symbol.id = nextSymbolId;
        nextSymbolId++;
    }
    return symbol.id;
}
exports.getSymbolId = getSymbolId;
/** @internal */
function isInstantiatedModule(node, preserveConstEnums) {
    var moduleState = (0, ts_1.getModuleInstanceState)(node);
    return moduleState === 1 /* ModuleInstanceState.Instantiated */ ||
        (preserveConstEnums && moduleState === 2 /* ModuleInstanceState.ConstEnumOnly */);
}
exports.isInstantiatedModule = isInstantiatedModule;
/** @internal */
function createTypeChecker(host) {
    // Why var? It avoids TDZ checks in the runtime which can be costly.
    // See: https://github.com/microsoft/TypeScript/issues/52924
    /* eslint-disable no-var */
    var deferredDiagnosticsCallbacks = [];
    var addLazyDiagnostic = function (arg) {
        deferredDiagnosticsCallbacks.push(arg);
    };
    // Cancellation that controls whether or not we can cancel in the middle of type checking.
    // In general cancelling is *not* safe for the type checker.  We might be in the middle of
    // computing something, and we will leave our internals in an inconsistent state.  Callers
    // who set the cancellation token should catch if a cancellation exception occurs, and
    // should throw away and create a new TypeChecker.
    //
    // Currently we only support setting the cancellation token when getting diagnostics.  This
    // is because diagnostics can be quite expensive, and we want to allow hosts to bail out if
    // they no longer need the information (for example, if the user started editing again).
    var cancellationToken;
    var requestedExternalEmitHelperNames = new Set();
    var requestedExternalEmitHelpers;
    var externalHelpersModule;
    var Symbol = ts_1.objectAllocator.getSymbolConstructor();
    var Type = ts_1.objectAllocator.getTypeConstructor();
    var Signature = ts_1.objectAllocator.getSignatureConstructor();
    var typeCount = 0;
    var symbolCount = 0;
    var totalInstantiationCount = 0;
    var instantiationCount = 0;
    var instantiationDepth = 0;
    var inlineLevel = 0;
    var currentNode;
    var varianceTypeParameter;
    var isInferencePartiallyBlocked = false;
    var emptySymbols = (0, ts_1.createSymbolTable)();
    var arrayVariances = [1 /* VarianceFlags.Covariant */];
    var compilerOptions = host.getCompilerOptions();
    var languageVersion = (0, ts_1.getEmitScriptTarget)(compilerOptions);
    var moduleKind = (0, ts_1.getEmitModuleKind)(compilerOptions);
    var legacyDecorators = !!compilerOptions.experimentalDecorators;
    var useDefineForClassFields = (0, ts_1.getUseDefineForClassFields)(compilerOptions);
    var allowSyntheticDefaultImports = (0, ts_1.getAllowSyntheticDefaultImports)(compilerOptions);
    var strictNullChecks = (0, ts_1.getStrictOptionValue)(compilerOptions, "strictNullChecks");
    var strictFunctionTypes = (0, ts_1.getStrictOptionValue)(compilerOptions, "strictFunctionTypes");
    var strictBindCallApply = (0, ts_1.getStrictOptionValue)(compilerOptions, "strictBindCallApply");
    var strictPropertyInitialization = (0, ts_1.getStrictOptionValue)(compilerOptions, "strictPropertyInitialization");
    var noImplicitAny = (0, ts_1.getStrictOptionValue)(compilerOptions, "noImplicitAny");
    var noImplicitThis = (0, ts_1.getStrictOptionValue)(compilerOptions, "noImplicitThis");
    var useUnknownInCatchVariables = (0, ts_1.getStrictOptionValue)(compilerOptions, "useUnknownInCatchVariables");
    var keyofStringsOnly = !!compilerOptions.keyofStringsOnly;
    var defaultIndexFlags = keyofStringsOnly ? 1 /* IndexFlags.StringsOnly */ : 0 /* IndexFlags.None */;
    var freshObjectLiteralFlag = compilerOptions.suppressExcessPropertyErrors ? 0 : 8192 /* ObjectFlags.FreshLiteral */;
    var exactOptionalPropertyTypes = compilerOptions.exactOptionalPropertyTypes;
    var checkBinaryExpression = createCheckBinaryExpression();
    var emitResolver = createResolver();
    var nodeBuilder = createNodeBuilder();
    var globals = (0, ts_1.createSymbolTable)();
    var undefinedSymbol = createSymbol(4 /* SymbolFlags.Property */, "undefined");
    undefinedSymbol.declarations = [];
    var globalThisSymbol = createSymbol(1536 /* SymbolFlags.Module */, "globalThis", 8 /* CheckFlags.Readonly */);
    globalThisSymbol.exports = globals;
    globalThisSymbol.declarations = [];
    globals.set(globalThisSymbol.escapedName, globalThisSymbol);
    var argumentsSymbol = createSymbol(4 /* SymbolFlags.Property */, "arguments");
    var requireSymbol = createSymbol(4 /* SymbolFlags.Property */, "require");
    var isolatedModulesLikeFlagName = compilerOptions.verbatimModuleSyntax ? "verbatimModuleSyntax" : "isolatedModules";
    // It is an error to use `importsNotUsedAsValues` alongside `verbatimModuleSyntax`, but we still need to not crash.
    // Given that, in such a scenario, `verbatimModuleSyntax` is basically disabled, as least as far as alias visibility tracking goes.
    var canCollectSymbolAliasAccessabilityData = !compilerOptions.verbatimModuleSyntax || !!compilerOptions.importsNotUsedAsValues;
    /** This will be set during calls to `getResolvedSignature` where services determines an apparent number of arguments greater than what is actually provided. */
    var apparentArgumentCount;
    // for public members that accept a Node or one of its subtypes, we must guard against
    // synthetic nodes created during transformations by calling `getParseTreeNode`.
    // for most of these, we perform the guard only on `checker` to avoid any possible
    // extra cost of calling `getParseTreeNode` when calling these functions from inside the
    // checker.
    var checker = {
        getNodeCount: function () { return (0, ts_1.reduceLeft)(host.getSourceFiles(), function (n, s) { return n + s.nodeCount; }, 0); },
        getIdentifierCount: function () { return (0, ts_1.reduceLeft)(host.getSourceFiles(), function (n, s) { return n + s.identifierCount; }, 0); },
        getSymbolCount: function () { return (0, ts_1.reduceLeft)(host.getSourceFiles(), function (n, s) { return n + s.symbolCount; }, symbolCount); },
        getTypeCount: function () { return typeCount; },
        getInstantiationCount: function () { return totalInstantiationCount; },
        getRelationCacheSizes: function () { return ({
            assignable: assignableRelation.size,
            identity: identityRelation.size,
            subtype: subtypeRelation.size,
            strictSubtype: strictSubtypeRelation.size,
        }); },
        isUndefinedSymbol: function (symbol) { return symbol === undefinedSymbol; },
        isArgumentsSymbol: function (symbol) { return symbol === argumentsSymbol; },
        isUnknownSymbol: function (symbol) { return symbol === unknownSymbol; },
        getMergedSymbol: getMergedSymbol,
        getDiagnostics: getDiagnostics,
        getGlobalDiagnostics: getGlobalDiagnostics,
        getRecursionIdentity: getRecursionIdentity,
        getUnmatchedProperties: getUnmatchedProperties,
        getTypeOfSymbolAtLocation: function (symbol, locationIn) {
            var location = (0, ts_1.getParseTreeNode)(locationIn);
            return location ? getTypeOfSymbolAtLocation(symbol, location) : errorType;
        },
        getTypeOfSymbol: getTypeOfSymbol,
        getSymbolsOfParameterPropertyDeclaration: function (parameterIn, parameterName) {
            var parameter = (0, ts_1.getParseTreeNode)(parameterIn, ts_1.isParameter);
            if (parameter === undefined)
                return ts_1.Debug.fail("Cannot get symbols of a synthetic parameter that cannot be resolved to a parse-tree node.");
            ts_1.Debug.assert((0, ts_1.isParameterPropertyDeclaration)(parameter, parameter.parent));
            return getSymbolsOfParameterPropertyDeclaration(parameter, (0, ts_1.escapeLeadingUnderscores)(parameterName));
        },
        getDeclaredTypeOfSymbol: getDeclaredTypeOfSymbol,
        getPropertiesOfType: getPropertiesOfType,
        getPropertyOfType: function (type, name) { return getPropertyOfType(type, (0, ts_1.escapeLeadingUnderscores)(name)); },
        getPrivateIdentifierPropertyOfType: function (leftType, name, location) {
            var node = (0, ts_1.getParseTreeNode)(location);
            if (!node) {
                return undefined;
            }
            var propName = (0, ts_1.escapeLeadingUnderscores)(name);
            var lexicallyScopedIdentifier = lookupSymbolForPrivateIdentifierDeclaration(propName, node);
            return lexicallyScopedIdentifier ? getPrivateIdentifierPropertyOfType(leftType, lexicallyScopedIdentifier) : undefined;
        },
        getTypeOfPropertyOfType: function (type, name) { return getTypeOfPropertyOfType(type, (0, ts_1.escapeLeadingUnderscores)(name)); },
        getIndexInfoOfType: function (type, kind) { return getIndexInfoOfType(type, kind === 0 /* IndexKind.String */ ? stringType : numberType); },
        getIndexInfosOfType: getIndexInfosOfType,
        getIndexInfosOfIndexSymbol: getIndexInfosOfIndexSymbol,
        getSignaturesOfType: getSignaturesOfType,
        getIndexTypeOfType: function (type, kind) { return getIndexTypeOfType(type, kind === 0 /* IndexKind.String */ ? stringType : numberType); },
        getIndexType: function (type) { return getIndexType(type); },
        getBaseTypes: getBaseTypes,
        getBaseTypeOfLiteralType: getBaseTypeOfLiteralType,
        getWidenedType: getWidenedType,
        getTypeFromTypeNode: function (nodeIn) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isTypeNode);
            return node ? getTypeFromTypeNode(node) : errorType;
        },
        getParameterType: getTypeAtPosition,
        getParameterIdentifierNameAtPosition: getParameterIdentifierNameAtPosition,
        getPromisedTypeOfPromise: getPromisedTypeOfPromise,
        getAwaitedType: function (type) { return getAwaitedType(type); },
        getReturnTypeOfSignature: getReturnTypeOfSignature,
        isNullableType: isNullableType,
        getNullableType: getNullableType,
        getNonNullableType: getNonNullableType,
        getNonOptionalType: removeOptionalTypeMarker,
        getTypeArguments: getTypeArguments,
        typeToTypeNode: nodeBuilder.typeToTypeNode,
        indexInfoToIndexSignatureDeclaration: nodeBuilder.indexInfoToIndexSignatureDeclaration,
        signatureToSignatureDeclaration: nodeBuilder.signatureToSignatureDeclaration,
        symbolToEntityName: nodeBuilder.symbolToEntityName,
        symbolToExpression: nodeBuilder.symbolToExpression,
        symbolToNode: nodeBuilder.symbolToNode,
        symbolToTypeParameterDeclarations: nodeBuilder.symbolToTypeParameterDeclarations,
        symbolToParameterDeclaration: nodeBuilder.symbolToParameterDeclaration,
        typeParameterToDeclaration: nodeBuilder.typeParameterToDeclaration,
        getSymbolsInScope: function (locationIn, meaning) {
            var location = (0, ts_1.getParseTreeNode)(locationIn);
            return location ? getSymbolsInScope(location, meaning) : [];
        },
        getSymbolAtLocation: function (nodeIn) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn);
            // set ignoreErrors: true because any lookups invoked by the API shouldn't cause any new errors
            return node ? getSymbolAtLocation(node, /*ignoreErrors*/ true) : undefined;
        },
        getIndexInfosAtLocation: function (nodeIn) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn);
            return node ? getIndexInfosAtLocation(node) : undefined;
        },
        getShorthandAssignmentValueSymbol: function (nodeIn) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn);
            return node ? getShorthandAssignmentValueSymbol(node) : undefined;
        },
        getExportSpecifierLocalTargetSymbol: function (nodeIn) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isExportSpecifier);
            return node ? getExportSpecifierLocalTargetSymbol(node) : undefined;
        },
        getExportSymbolOfSymbol: function (symbol) {
            return getMergedSymbol(symbol.exportSymbol || symbol);
        },
        getTypeAtLocation: function (nodeIn) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn);
            return node ? getTypeOfNode(node) : errorType;
        },
        getTypeOfAssignmentPattern: function (nodeIn) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isAssignmentPattern);
            return node && getTypeOfAssignmentPattern(node) || errorType;
        },
        getPropertySymbolOfDestructuringAssignment: function (locationIn) {
            var location = (0, ts_1.getParseTreeNode)(locationIn, ts_1.isIdentifier);
            return location ? getPropertySymbolOfDestructuringAssignment(location) : undefined;
        },
        signatureToString: function (signature, enclosingDeclaration, flags, kind) {
            return signatureToString(signature, (0, ts_1.getParseTreeNode)(enclosingDeclaration), flags, kind);
        },
        typeToString: function (type, enclosingDeclaration, flags) {
            return typeToString(type, (0, ts_1.getParseTreeNode)(enclosingDeclaration), flags);
        },
        symbolToString: function (symbol, enclosingDeclaration, meaning, flags) {
            return symbolToString(symbol, (0, ts_1.getParseTreeNode)(enclosingDeclaration), meaning, flags);
        },
        typePredicateToString: function (predicate, enclosingDeclaration, flags) {
            return typePredicateToString(predicate, (0, ts_1.getParseTreeNode)(enclosingDeclaration), flags);
        },
        writeSignature: function (signature, enclosingDeclaration, flags, kind, writer) {
            return signatureToString(signature, (0, ts_1.getParseTreeNode)(enclosingDeclaration), flags, kind, writer);
        },
        writeType: function (type, enclosingDeclaration, flags, writer) {
            return typeToString(type, (0, ts_1.getParseTreeNode)(enclosingDeclaration), flags, writer);
        },
        writeSymbol: function (symbol, enclosingDeclaration, meaning, flags, writer) {
            return symbolToString(symbol, (0, ts_1.getParseTreeNode)(enclosingDeclaration), meaning, flags, writer);
        },
        writeTypePredicate: function (predicate, enclosingDeclaration, flags, writer) {
            return typePredicateToString(predicate, (0, ts_1.getParseTreeNode)(enclosingDeclaration), flags, writer);
        },
        getAugmentedPropertiesOfType: getAugmentedPropertiesOfType,
        getRootSymbols: getRootSymbols,
        getSymbolOfExpando: getSymbolOfExpando,
        getContextualType: function (nodeIn, contextFlags) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isExpression);
            if (!node) {
                return undefined;
            }
            if (contextFlags & 4 /* ContextFlags.Completions */) {
                return runWithInferenceBlockedFromSourceNode(node, function () { return getContextualType(node, contextFlags); });
            }
            return getContextualType(node, contextFlags);
        },
        getContextualTypeForObjectLiteralElement: function (nodeIn) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isObjectLiteralElementLike);
            return node ? getContextualTypeForObjectLiteralElement(node, /*contextFlags*/ undefined) : undefined;
        },
        getContextualTypeForArgumentAtIndex: function (nodeIn, argIndex) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isCallLikeExpression);
            return node && getContextualTypeForArgumentAtIndex(node, argIndex);
        },
        getContextualTypeForJsxAttribute: function (nodeIn) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isJsxAttributeLike);
            return node && getContextualTypeForJsxAttribute(node, /*contextFlags*/ undefined);
        },
        isContextSensitive: isContextSensitive,
        getTypeOfPropertyOfContextualType: getTypeOfPropertyOfContextualType,
        getFullyQualifiedName: getFullyQualifiedName,
        getResolvedSignature: function (node, candidatesOutArray, argumentCount) {
            return getResolvedSignatureWorker(node, candidatesOutArray, argumentCount, 0 /* CheckMode.Normal */);
        },
        getResolvedSignatureForStringLiteralCompletions: function (call, editingArgument, candidatesOutArray, checkMode) {
            if (checkMode === void 0) { checkMode = 32 /* CheckMode.IsForStringLiteralArgumentCompletions */; }
            if (checkMode & 32 /* CheckMode.IsForStringLiteralArgumentCompletions */) {
                return runWithInferenceBlockedFromSourceNode(editingArgument, function () { return getResolvedSignatureWorker(call, candidatesOutArray, /*argumentCount*/ undefined, checkMode & ~32 /* CheckMode.IsForStringLiteralArgumentCompletions */); });
            }
            return runWithoutResolvedSignatureCaching(editingArgument, function () { return getResolvedSignatureWorker(call, candidatesOutArray, /*argumentCount*/ undefined, checkMode & ~32 /* CheckMode.IsForStringLiteralArgumentCompletions */); });
        },
        getResolvedSignatureForSignatureHelp: function (node, candidatesOutArray, argumentCount) {
            return runWithoutResolvedSignatureCaching(node, function () { return getResolvedSignatureWorker(node, candidatesOutArray, argumentCount, 16 /* CheckMode.IsForSignatureHelp */); });
        },
        getExpandedParameters: getExpandedParameters,
        hasEffectiveRestParameter: hasEffectiveRestParameter,
        containsArgumentsReference: containsArgumentsReference,
        getConstantValue: function (nodeIn) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn, canHaveConstantValue);
            return node ? getConstantValue(node) : undefined;
        },
        isValidPropertyAccess: function (nodeIn, propertyName) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isPropertyAccessOrQualifiedNameOrImportTypeNode);
            return !!node && isValidPropertyAccess(node, (0, ts_1.escapeLeadingUnderscores)(propertyName));
        },
        isValidPropertyAccessForCompletions: function (nodeIn, type, property) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isPropertyAccessExpression);
            return !!node && isValidPropertyAccessForCompletions(node, type, property);
        },
        getSignatureFromDeclaration: function (declarationIn) {
            var declaration = (0, ts_1.getParseTreeNode)(declarationIn, ts_1.isFunctionLike);
            return declaration ? getSignatureFromDeclaration(declaration) : undefined;
        },
        isImplementationOfOverload: function (nodeIn) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isFunctionLike);
            return node ? isImplementationOfOverload(node) : undefined;
        },
        getImmediateAliasedSymbol: getImmediateAliasedSymbol,
        getAliasedSymbol: resolveAlias,
        getEmitResolver: getEmitResolver,
        getExportsOfModule: getExportsOfModuleAsArray,
        getExportsAndPropertiesOfModule: getExportsAndPropertiesOfModule,
        forEachExportAndPropertyOfModule: forEachExportAndPropertyOfModule,
        getSymbolWalker: (0, ts_1.createGetSymbolWalker)(getRestTypeOfSignature, getTypePredicateOfSignature, getReturnTypeOfSignature, getBaseTypes, resolveStructuredTypeMembers, getTypeOfSymbol, getResolvedSymbol, getConstraintOfTypeParameter, ts_1.getFirstIdentifier, getTypeArguments),
        getAmbientModules: getAmbientModules,
        getJsxIntrinsicTagNamesAt: getJsxIntrinsicTagNamesAt,
        isOptionalParameter: function (nodeIn) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isParameter);
            return node ? isOptionalParameter(node) : false;
        },
        tryGetMemberInModuleExports: function (name, symbol) { return tryGetMemberInModuleExports((0, ts_1.escapeLeadingUnderscores)(name), symbol); },
        tryGetMemberInModuleExportsAndProperties: function (name, symbol) { return tryGetMemberInModuleExportsAndProperties((0, ts_1.escapeLeadingUnderscores)(name), symbol); },
        tryFindAmbientModule: function (moduleName) { return tryFindAmbientModule(moduleName, /*withAugmentations*/ true); },
        tryFindAmbientModuleWithoutAugmentations: function (moduleName) {
            // we deliberately exclude augmentations
            // since we are only interested in declarations of the module itself
            return tryFindAmbientModule(moduleName, /*withAugmentations*/ false);
        },
        getApparentType: getApparentType,
        getUnionType: getUnionType,
        isTypeAssignableTo: isTypeAssignableTo,
        createAnonymousType: createAnonymousType,
        createSignature: createSignature,
        createSymbol: createSymbol,
        createIndexInfo: createIndexInfo,
        getAnyType: function () { return anyType; },
        getStringType: function () { return stringType; },
        getStringLiteralType: getStringLiteralType,
        getNumberType: function () { return numberType; },
        getNumberLiteralType: getNumberLiteralType,
        getBigIntType: function () { return bigintType; },
        createPromiseType: createPromiseType,
        createArrayType: createArrayType,
        getElementTypeOfArrayType: getElementTypeOfArrayType,
        getBooleanType: function () { return booleanType; },
        getFalseType: function (fresh) { return fresh ? falseType : regularFalseType; },
        getTrueType: function (fresh) { return fresh ? trueType : regularTrueType; },
        getVoidType: function () { return voidType; },
        getUndefinedType: function () { return undefinedType; },
        getNullType: function () { return nullType; },
        getESSymbolType: function () { return esSymbolType; },
        getNeverType: function () { return neverType; },
        getOptionalType: function () { return optionalType; },
        getPromiseType: function () { return getGlobalPromiseType(/*reportErrors*/ false); },
        getPromiseLikeType: function () { return getGlobalPromiseLikeType(/*reportErrors*/ false); },
        getAsyncIterableType: function () {
            var type = getGlobalAsyncIterableType(/*reportErrors*/ false);
            if (type === emptyGenericType)
                return undefined;
            return type;
        },
        isSymbolAccessible: isSymbolAccessible,
        isArrayType: isArrayType,
        isTupleType: isTupleType,
        isArrayLikeType: isArrayLikeType,
        isEmptyAnonymousObjectType: isEmptyAnonymousObjectType,
        isTypeInvalidDueToUnionDiscriminant: isTypeInvalidDueToUnionDiscriminant,
        getExactOptionalProperties: getExactOptionalProperties,
        getAllPossiblePropertiesOfTypes: getAllPossiblePropertiesOfTypes,
        getSuggestedSymbolForNonexistentProperty: getSuggestedSymbolForNonexistentProperty,
        getSuggestionForNonexistentProperty: getSuggestionForNonexistentProperty,
        getSuggestedSymbolForNonexistentJSXAttribute: getSuggestedSymbolForNonexistentJSXAttribute,
        getSuggestedSymbolForNonexistentSymbol: function (location, name, meaning) { return getSuggestedSymbolForNonexistentSymbol(location, (0, ts_1.escapeLeadingUnderscores)(name), meaning); },
        getSuggestionForNonexistentSymbol: function (location, name, meaning) { return getSuggestionForNonexistentSymbol(location, (0, ts_1.escapeLeadingUnderscores)(name), meaning); },
        getSuggestedSymbolForNonexistentModule: getSuggestedSymbolForNonexistentModule,
        getSuggestionForNonexistentExport: getSuggestionForNonexistentExport,
        getSuggestedSymbolForNonexistentClassMember: getSuggestedSymbolForNonexistentClassMember,
        getBaseConstraintOfType: getBaseConstraintOfType,
        getDefaultFromTypeParameter: function (type) { return type && type.flags & 262144 /* TypeFlags.TypeParameter */ ? getDefaultFromTypeParameter(type) : undefined; },
        resolveName: function (name, location, meaning, excludeGlobals) {
            return resolveName(location, (0, ts_1.escapeLeadingUnderscores)(name), meaning, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ false, excludeGlobals);
        },
        getJsxNamespace: function (n) { return (0, ts_1.unescapeLeadingUnderscores)(getJsxNamespace(n)); },
        getJsxFragmentFactory: function (n) {
            var jsxFragmentFactory = getJsxFragmentFactoryEntity(n);
            return jsxFragmentFactory && (0, ts_1.unescapeLeadingUnderscores)((0, ts_1.getFirstIdentifier)(jsxFragmentFactory).escapedText);
        },
        getAccessibleSymbolChain: getAccessibleSymbolChain,
        getTypePredicateOfSignature: getTypePredicateOfSignature,
        resolveExternalModuleName: function (moduleSpecifierIn) {
            var moduleSpecifier = (0, ts_1.getParseTreeNode)(moduleSpecifierIn, ts_1.isExpression);
            return moduleSpecifier && resolveExternalModuleName(moduleSpecifier, moduleSpecifier, /*ignoreErrors*/ true);
        },
        resolveExternalModuleSymbol: resolveExternalModuleSymbol,
        tryGetThisTypeAt: function (nodeIn, includeGlobalThis, container) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn);
            return node && tryGetThisTypeAt(node, includeGlobalThis, container);
        },
        getTypeArgumentConstraint: function (nodeIn) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isTypeNode);
            return node && getTypeArgumentConstraint(node);
        },
        getSuggestionDiagnostics: function (fileIn, ct) {
            var file = (0, ts_1.getParseTreeNode)(fileIn, ts_1.isSourceFile) || ts_1.Debug.fail("Could not determine parsed source file.");
            if ((0, ts_1.skipTypeChecking)(file, compilerOptions, host)) {
                return ts_1.emptyArray;
            }
            var diagnostics;
            try {
                // Record the cancellation token so it can be checked later on during checkSourceElement.
                // Do this in a finally block so we can ensure that it gets reset back to nothing after
                // this call is done.
                cancellationToken = ct;
                // Ensure file is type checked, with _eager_ diagnostic production, so identifiers are registered as potentially unused
                checkSourceFileWithEagerDiagnostics(file);
                ts_1.Debug.assert(!!(getNodeLinks(file).flags & 1 /* NodeCheckFlags.TypeChecked */));
                diagnostics = (0, ts_1.addRange)(diagnostics, suggestionDiagnostics.getDiagnostics(file.fileName));
                checkUnusedIdentifiers(getPotentiallyUnusedIdentifiers(file), function (containingNode, kind, diag) {
                    if (!(0, ts_1.containsParseError)(containingNode) && !unusedIsError(kind, !!(containingNode.flags & 16777216 /* NodeFlags.Ambient */))) {
                        (diagnostics || (diagnostics = [])).push(__assign(__assign({}, diag), { category: ts_1.DiagnosticCategory.Suggestion }));
                    }
                });
                return diagnostics || ts_1.emptyArray;
            }
            finally {
                cancellationToken = undefined;
            }
        },
        runWithCancellationToken: function (token, callback) {
            try {
                cancellationToken = token;
                return callback(checker);
            }
            finally {
                cancellationToken = undefined;
            }
        },
        getLocalTypeParametersOfClassOrInterfaceOrTypeAlias: getLocalTypeParametersOfClassOrInterfaceOrTypeAlias,
        isDeclarationVisible: isDeclarationVisible,
        isPropertyAccessible: isPropertyAccessible,
        getTypeOnlyAliasDeclaration: getTypeOnlyAliasDeclaration,
        getMemberOverrideModifierStatus: getMemberOverrideModifierStatus,
        isTypeParameterPossiblyReferenced: isTypeParameterPossiblyReferenced,
        typeHasCallOrConstructSignatures: typeHasCallOrConstructSignatures,
    };
    function runWithoutResolvedSignatureCaching(node, fn) {
        var containingCall = (0, ts_1.findAncestor)(node, ts_1.isCallLikeExpression);
        var containingCallResolvedSignature = containingCall && getNodeLinks(containingCall).resolvedSignature;
        if (containingCall) {
            getNodeLinks(containingCall).resolvedSignature = undefined;
        }
        var result = fn();
        if (containingCall) {
            getNodeLinks(containingCall).resolvedSignature = containingCallResolvedSignature;
        }
        return result;
    }
    function runWithInferenceBlockedFromSourceNode(node, fn) {
        var containingCall = (0, ts_1.findAncestor)(node, ts_1.isCallLikeExpression);
        if (containingCall) {
            var toMarkSkip = node;
            do {
                getNodeLinks(toMarkSkip).skipDirectInference = true;
                toMarkSkip = toMarkSkip.parent;
            } while (toMarkSkip && toMarkSkip !== containingCall);
        }
        isInferencePartiallyBlocked = true;
        var result = runWithoutResolvedSignatureCaching(node, fn);
        isInferencePartiallyBlocked = false;
        if (containingCall) {
            var toMarkSkip = node;
            do {
                getNodeLinks(toMarkSkip).skipDirectInference = undefined;
                toMarkSkip = toMarkSkip.parent;
            } while (toMarkSkip && toMarkSkip !== containingCall);
        }
        return result;
    }
    function getResolvedSignatureWorker(nodeIn, candidatesOutArray, argumentCount, checkMode) {
        var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isCallLikeExpression);
        apparentArgumentCount = argumentCount;
        var res = !node ? undefined : getResolvedSignature(node, candidatesOutArray, checkMode);
        apparentArgumentCount = undefined;
        return res;
    }
    var tupleTypes = new Map();
    var unionTypes = new Map();
    var unionOfUnionTypes = new Map();
    var intersectionTypes = new Map();
    var stringLiteralTypes = new Map();
    var numberLiteralTypes = new Map();
    var bigIntLiteralTypes = new Map();
    var enumLiteralTypes = new Map();
    var indexedAccessTypes = new Map();
    var templateLiteralTypes = new Map();
    var stringMappingTypes = new Map();
    var substitutionTypes = new Map();
    var subtypeReductionCache = new Map();
    var decoratorContextOverrideTypeCache = new Map();
    var cachedTypes = new Map();
    var evolvingArrayTypes = [];
    var undefinedProperties = new Map();
    var markerTypes = new Set();
    var unknownSymbol = createSymbol(4 /* SymbolFlags.Property */, "unknown");
    var resolvingSymbol = createSymbol(0, "__resolving__" /* InternalSymbolName.Resolving */);
    var unresolvedSymbols = new Map();
    var errorTypes = new Map();
    // We specifically create the `undefined` and `null` types before any other types that can occur in
    // unions such that they are given low type IDs and occur first in the sorted list of union constituents.
    // We can then just examine the first constituent(s) of a union to check for their presence.
    var anyType = createIntrinsicType(1 /* TypeFlags.Any */, "any");
    var autoType = createIntrinsicType(1 /* TypeFlags.Any */, "any", 262144 /* ObjectFlags.NonInferrableType */);
    var wildcardType = createIntrinsicType(1 /* TypeFlags.Any */, "any");
    var errorType = createIntrinsicType(1 /* TypeFlags.Any */, "error");
    var unresolvedType = createIntrinsicType(1 /* TypeFlags.Any */, "unresolved");
    var nonInferrableAnyType = createIntrinsicType(1 /* TypeFlags.Any */, "any", 65536 /* ObjectFlags.ContainsWideningType */);
    var intrinsicMarkerType = createIntrinsicType(1 /* TypeFlags.Any */, "intrinsic");
    var unknownType = createIntrinsicType(2 /* TypeFlags.Unknown */, "unknown");
    var nonNullUnknownType = createIntrinsicType(2 /* TypeFlags.Unknown */, "unknown");
    var undefinedType = createIntrinsicType(32768 /* TypeFlags.Undefined */, "undefined");
    var undefinedWideningType = strictNullChecks ? undefinedType : createIntrinsicType(32768 /* TypeFlags.Undefined */, "undefined", 65536 /* ObjectFlags.ContainsWideningType */);
    var missingType = createIntrinsicType(32768 /* TypeFlags.Undefined */, "undefined");
    var undefinedOrMissingType = exactOptionalPropertyTypes ? missingType : undefinedType;
    var optionalType = createIntrinsicType(32768 /* TypeFlags.Undefined */, "undefined");
    var nullType = createIntrinsicType(65536 /* TypeFlags.Null */, "null");
    var nullWideningType = strictNullChecks ? nullType : createIntrinsicType(65536 /* TypeFlags.Null */, "null", 65536 /* ObjectFlags.ContainsWideningType */);
    var stringType = createIntrinsicType(4 /* TypeFlags.String */, "string");
    var numberType = createIntrinsicType(8 /* TypeFlags.Number */, "number");
    var bigintType = createIntrinsicType(64 /* TypeFlags.BigInt */, "bigint");
    var falseType = createIntrinsicType(512 /* TypeFlags.BooleanLiteral */, "false");
    var regularFalseType = createIntrinsicType(512 /* TypeFlags.BooleanLiteral */, "false");
    var trueType = createIntrinsicType(512 /* TypeFlags.BooleanLiteral */, "true");
    var regularTrueType = createIntrinsicType(512 /* TypeFlags.BooleanLiteral */, "true");
    trueType.regularType = regularTrueType;
    trueType.freshType = trueType;
    regularTrueType.regularType = regularTrueType;
    regularTrueType.freshType = trueType;
    falseType.regularType = regularFalseType;
    falseType.freshType = falseType;
    regularFalseType.regularType = regularFalseType;
    regularFalseType.freshType = falseType;
    var booleanType = getUnionType([regularFalseType, regularTrueType]);
    var esSymbolType = createIntrinsicType(4096 /* TypeFlags.ESSymbol */, "symbol");
    var voidType = createIntrinsicType(16384 /* TypeFlags.Void */, "void");
    var neverType = createIntrinsicType(131072 /* TypeFlags.Never */, "never");
    var silentNeverType = createIntrinsicType(131072 /* TypeFlags.Never */, "never", 262144 /* ObjectFlags.NonInferrableType */);
    var implicitNeverType = createIntrinsicType(131072 /* TypeFlags.Never */, "never");
    var unreachableNeverType = createIntrinsicType(131072 /* TypeFlags.Never */, "never");
    var nonPrimitiveType = createIntrinsicType(67108864 /* TypeFlags.NonPrimitive */, "object");
    var stringOrNumberType = getUnionType([stringType, numberType]);
    var stringNumberSymbolType = getUnionType([stringType, numberType, esSymbolType]);
    var keyofConstraintType = keyofStringsOnly ? stringType : stringNumberSymbolType;
    var numberOrBigIntType = getUnionType([numberType, bigintType]);
    var templateConstraintType = getUnionType([stringType, numberType, booleanType, bigintType, nullType, undefinedType]);
    var numericStringType = getTemplateLiteralType(["", ""], [numberType]); // The `${number}` type
    var restrictiveMapper = makeFunctionTypeMapper(function (t) { return t.flags & 262144 /* TypeFlags.TypeParameter */ ? getRestrictiveTypeParameter(t) : t; }, function () { return "(restrictive mapper)"; });
    var permissiveMapper = makeFunctionTypeMapper(function (t) { return t.flags & 262144 /* TypeFlags.TypeParameter */ ? wildcardType : t; }, function () { return "(permissive mapper)"; });
    var uniqueLiteralType = createIntrinsicType(131072 /* TypeFlags.Never */, "never"); // `uniqueLiteralType` is a special `never` flagged by union reduction to behave as a literal
    var uniqueLiteralMapper = makeFunctionTypeMapper(function (t) { return t.flags & 262144 /* TypeFlags.TypeParameter */ ? uniqueLiteralType : t; }, function () { return "(unique literal mapper)"; }); // replace all type parameters with the unique literal type (disregarding constraints)
    var outofbandVarianceMarkerHandler;
    var reportUnreliableMapper = makeFunctionTypeMapper(function (t) {
        if (outofbandVarianceMarkerHandler && (t === markerSuperType || t === markerSubType || t === markerOtherType)) {
            outofbandVarianceMarkerHandler(/*onlyUnreliable*/ true);
        }
        return t;
    }, function () { return "(unmeasurable reporter)"; });
    var reportUnmeasurableMapper = makeFunctionTypeMapper(function (t) {
        if (outofbandVarianceMarkerHandler && (t === markerSuperType || t === markerSubType || t === markerOtherType)) {
            outofbandVarianceMarkerHandler(/*onlyUnreliable*/ false);
        }
        return t;
    }, function () { return "(unreliable reporter)"; });
    var emptyObjectType = createAnonymousType(/*symbol*/ undefined, emptySymbols, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
    var emptyJsxObjectType = createAnonymousType(/*symbol*/ undefined, emptySymbols, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
    emptyJsxObjectType.objectFlags |= 2048 /* ObjectFlags.JsxAttributes */;
    var emptyTypeLiteralSymbol = createSymbol(2048 /* SymbolFlags.TypeLiteral */, "__type" /* InternalSymbolName.Type */);
    emptyTypeLiteralSymbol.members = (0, ts_1.createSymbolTable)();
    var emptyTypeLiteralType = createAnonymousType(emptyTypeLiteralSymbol, emptySymbols, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
    var unknownEmptyObjectType = createAnonymousType(/*symbol*/ undefined, emptySymbols, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
    var unknownUnionType = strictNullChecks ? getUnionType([undefinedType, nullType, unknownEmptyObjectType]) : unknownType;
    var emptyGenericType = createAnonymousType(/*symbol*/ undefined, emptySymbols, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
    emptyGenericType.instantiations = new Map();
    var anyFunctionType = createAnonymousType(/*symbol*/ undefined, emptySymbols, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
    // The anyFunctionType contains the anyFunctionType by definition. The flag is further propagated
    // in getPropagatingFlagsOfTypes, and it is checked in inferFromTypes.
    anyFunctionType.objectFlags |= 262144 /* ObjectFlags.NonInferrableType */;
    var noConstraintType = createAnonymousType(/*symbol*/ undefined, emptySymbols, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
    var circularConstraintType = createAnonymousType(/*symbol*/ undefined, emptySymbols, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
    var resolvingDefaultType = createAnonymousType(/*symbol*/ undefined, emptySymbols, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
    var markerSuperType = createTypeParameter();
    var markerSubType = createTypeParameter();
    markerSubType.constraint = markerSuperType;
    var markerOtherType = createTypeParameter();
    var markerSuperTypeForCheck = createTypeParameter();
    var markerSubTypeForCheck = createTypeParameter();
    markerSubTypeForCheck.constraint = markerSuperTypeForCheck;
    var noTypePredicate = createTypePredicate(1 /* TypePredicateKind.Identifier */, "<<unresolved>>", 0, anyType);
    var anySignature = createSignature(/*declaration*/ undefined, /*typeParameters*/ undefined, /*thisParameter*/ undefined, ts_1.emptyArray, anyType, /*resolvedTypePredicate*/ undefined, 0, 0 /* SignatureFlags.None */);
    var unknownSignature = createSignature(/*declaration*/ undefined, /*typeParameters*/ undefined, /*thisParameter*/ undefined, ts_1.emptyArray, errorType, /*resolvedTypePredicate*/ undefined, 0, 0 /* SignatureFlags.None */);
    var resolvingSignature = createSignature(/*declaration*/ undefined, /*typeParameters*/ undefined, /*thisParameter*/ undefined, ts_1.emptyArray, anyType, /*resolvedTypePredicate*/ undefined, 0, 0 /* SignatureFlags.None */);
    var silentNeverSignature = createSignature(/*declaration*/ undefined, /*typeParameters*/ undefined, /*thisParameter*/ undefined, ts_1.emptyArray, silentNeverType, /*resolvedTypePredicate*/ undefined, 0, 0 /* SignatureFlags.None */);
    var enumNumberIndexInfo = createIndexInfo(numberType, stringType, /*isReadonly*/ true);
    var iterationTypesCache = new Map(); // cache for common IterationTypes instances
    var noIterationTypes = {
        get yieldType() { return ts_1.Debug.fail("Not supported"); },
        get returnType() { return ts_1.Debug.fail("Not supported"); },
        get nextType() { return ts_1.Debug.fail("Not supported"); },
    };
    var anyIterationTypes = createIterationTypes(anyType, anyType, anyType);
    var anyIterationTypesExceptNext = createIterationTypes(anyType, anyType, unknownType);
    var defaultIterationTypes = createIterationTypes(neverType, anyType, undefinedType); // default iteration types for `Iterator`.
    var asyncIterationTypesResolver = {
        iterableCacheKey: "iterationTypesOfAsyncIterable",
        iteratorCacheKey: "iterationTypesOfAsyncIterator",
        iteratorSymbolName: "asyncIterator",
        getGlobalIteratorType: getGlobalAsyncIteratorType,
        getGlobalIterableType: getGlobalAsyncIterableType,
        getGlobalIterableIteratorType: getGlobalAsyncIterableIteratorType,
        getGlobalGeneratorType: getGlobalAsyncGeneratorType,
        resolveIterationType: function (type, errorNode) { return getAwaitedType(type, errorNode, ts_1.Diagnostics.Type_of_await_operand_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member); },
        mustHaveANextMethodDiagnostic: ts_1.Diagnostics.An_async_iterator_must_have_a_next_method,
        mustBeAMethodDiagnostic: ts_1.Diagnostics.The_0_property_of_an_async_iterator_must_be_a_method,
        mustHaveAValueDiagnostic: ts_1.Diagnostics.The_type_returned_by_the_0_method_of_an_async_iterator_must_be_a_promise_for_a_type_with_a_value_property,
    };
    var syncIterationTypesResolver = {
        iterableCacheKey: "iterationTypesOfIterable",
        iteratorCacheKey: "iterationTypesOfIterator",
        iteratorSymbolName: "iterator",
        getGlobalIteratorType: getGlobalIteratorType,
        getGlobalIterableType: getGlobalIterableType,
        getGlobalIterableIteratorType: getGlobalIterableIteratorType,
        getGlobalGeneratorType: getGlobalGeneratorType,
        resolveIterationType: function (type, _errorNode) { return type; },
        mustHaveANextMethodDiagnostic: ts_1.Diagnostics.An_iterator_must_have_a_next_method,
        mustBeAMethodDiagnostic: ts_1.Diagnostics.The_0_property_of_an_iterator_must_be_a_method,
        mustHaveAValueDiagnostic: ts_1.Diagnostics.The_type_returned_by_the_0_method_of_an_iterator_must_have_a_value_property,
    };
    /** Key is "/path/to/a.ts|/path/to/b.ts". */
    var amalgamatedDuplicates;
    var reverseMappedCache = new Map();
    var inInferTypeForHomomorphicMappedType = false;
    var ambientModulesCache;
    /**
     * List of every ambient module with a "*" wildcard.
     * Unlike other ambient modules, these can't be stored in `globals` because symbol tables only deal with exact matches.
     * This is only used if there is no exact match.
     */
    var patternAmbientModules;
    var patternAmbientModuleAugmentations;
    var globalObjectType;
    var globalFunctionType;
    var globalCallableFunctionType;
    var globalNewableFunctionType;
    var globalArrayType;
    var globalReadonlyArrayType;
    var globalStringType;
    var globalNumberType;
    var globalBooleanType;
    var globalRegExpType;
    var globalThisType;
    var anyArrayType;
    var autoArrayType;
    var anyReadonlyArrayType;
    var deferredGlobalNonNullableTypeAlias;
    // The library files are only loaded when the feature is used.
    // This allows users to just specify library files they want to used through --lib
    // and they will not get an error from not having unrelated library files
    var deferredGlobalESSymbolConstructorSymbol;
    var deferredGlobalESSymbolConstructorTypeSymbol;
    var deferredGlobalESSymbolType;
    var deferredGlobalTypedPropertyDescriptorType;
    var deferredGlobalPromiseType;
    var deferredGlobalPromiseLikeType;
    var deferredGlobalPromiseConstructorSymbol;
    var deferredGlobalPromiseConstructorLikeType;
    var deferredGlobalIterableType;
    var deferredGlobalIteratorType;
    var deferredGlobalIterableIteratorType;
    var deferredGlobalGeneratorType;
    var deferredGlobalIteratorYieldResultType;
    var deferredGlobalIteratorReturnResultType;
    var deferredGlobalAsyncIterableType;
    var deferredGlobalAsyncIteratorType;
    var deferredGlobalAsyncIterableIteratorType;
    var deferredGlobalAsyncGeneratorType;
    var deferredGlobalTemplateStringsArrayType;
    var deferredGlobalImportMetaType;
    var deferredGlobalImportMetaExpressionType;
    var deferredGlobalImportCallOptionsType;
    var deferredGlobalExtractSymbol;
    var deferredGlobalOmitSymbol;
    var deferredGlobalAwaitedSymbol;
    var deferredGlobalBigIntType;
    var deferredGlobalNaNSymbol;
    var deferredGlobalRecordSymbol;
    var deferredGlobalClassDecoratorContextType;
    var deferredGlobalClassMethodDecoratorContextType;
    var deferredGlobalClassGetterDecoratorContextType;
    var deferredGlobalClassSetterDecoratorContextType;
    var deferredGlobalClassAccessorDecoratorContextType;
    var deferredGlobalClassAccessorDecoratorTargetType;
    var deferredGlobalClassAccessorDecoratorResultType;
    var deferredGlobalClassFieldDecoratorContextType;
    var allPotentiallyUnusedIdentifiers = new Map(); // key is file name
    var flowLoopStart = 0;
    var flowLoopCount = 0;
    var sharedFlowCount = 0;
    var flowAnalysisDisabled = false;
    var flowInvocationCount = 0;
    var lastFlowNode;
    var lastFlowNodeReachable;
    var flowTypeCache;
    var contextualTypeNodes = [];
    var contextualTypes = [];
    var contextualIsCache = [];
    var contextualTypeCount = 0;
    var inferenceContextNodes = [];
    var inferenceContexts = [];
    var inferenceContextCount = 0;
    var emptyStringType = getStringLiteralType("");
    var zeroType = getNumberLiteralType(0);
    var zeroBigIntType = getBigIntLiteralType({ negative: false, base10Value: "0" });
    var resolutionTargets = [];
    var resolutionResults = [];
    var resolutionPropertyNames = [];
    var resolutionStart = 0;
    var inVarianceComputation = false;
    var suggestionCount = 0;
    var maximumSuggestionCount = 10;
    var mergedSymbols = [];
    var symbolLinks = [];
    var nodeLinks = [];
    var flowLoopCaches = [];
    var flowLoopNodes = [];
    var flowLoopKeys = [];
    var flowLoopTypes = [];
    var sharedFlowNodes = [];
    var sharedFlowTypes = [];
    var flowNodeReachable = [];
    var flowNodePostSuper = [];
    var potentialThisCollisions = [];
    var potentialNewTargetCollisions = [];
    var potentialWeakMapSetCollisions = [];
    var potentialReflectCollisions = [];
    var potentialUnusedRenamedBindingElementsInTypes = [];
    var awaitedTypeStack = [];
    var diagnostics = (0, ts_1.createDiagnosticCollection)();
    var suggestionDiagnostics = (0, ts_1.createDiagnosticCollection)();
    var typeofType = createTypeofType();
    var _jsxNamespace;
    var _jsxFactoryEntity;
    var subtypeRelation = new Map();
    var strictSubtypeRelation = new Map();
    var assignableRelation = new Map();
    var comparableRelation = new Map();
    var identityRelation = new Map();
    var enumRelation = new Map();
    var builtinGlobals = (0, ts_1.createSymbolTable)();
    builtinGlobals.set(undefinedSymbol.escapedName, undefinedSymbol);
    // Extensions suggested for path imports when module resolution is node16 or higher.
    // The first element of each tuple is the extension a file has.
    // The second element of each tuple is the extension that should be used in a path import.
    // e.g. if we want to import file `foo.mts`, we should write `import {} from "./foo.mjs".
    var suggestedExtensions = [
        [".mts", ".mjs"],
        [".ts", ".js"],
        [".cts", ".cjs"],
        [".mjs", ".mjs"],
        [".js", ".js"],
        [".cjs", ".cjs"],
        [".tsx", compilerOptions.jsx === 1 /* JsxEmit.Preserve */ ? ".jsx" : ".js"],
        [".jsx", ".jsx"],
        [".json", ".json"],
    ];
    /* eslint-enable no-var */
    initializeTypeChecker();
    return checker;
    function getCachedType(key) {
        return key ? cachedTypes.get(key) : undefined;
    }
    function setCachedType(key, type) {
        if (key)
            cachedTypes.set(key, type);
        return type;
    }
    function getJsxNamespace(location) {
        if (location) {
            var file = (0, ts_1.getSourceFileOfNode)(location);
            if (file) {
                if ((0, ts_1.isJsxOpeningFragment)(location)) {
                    if (file.localJsxFragmentNamespace) {
                        return file.localJsxFragmentNamespace;
                    }
                    var jsxFragmentPragma = file.pragmas.get("jsxfrag");
                    if (jsxFragmentPragma) {
                        var chosenPragma = (0, ts_1.isArray)(jsxFragmentPragma) ? jsxFragmentPragma[0] : jsxFragmentPragma;
                        file.localJsxFragmentFactory = (0, ts_1.parseIsolatedEntityName)(chosenPragma.arguments.factory, languageVersion);
                        (0, ts_1.visitNode)(file.localJsxFragmentFactory, markAsSynthetic, ts_1.isEntityName);
                        if (file.localJsxFragmentFactory) {
                            return file.localJsxFragmentNamespace = (0, ts_1.getFirstIdentifier)(file.localJsxFragmentFactory).escapedText;
                        }
                    }
                    var entity = getJsxFragmentFactoryEntity(location);
                    if (entity) {
                        file.localJsxFragmentFactory = entity;
                        return file.localJsxFragmentNamespace = (0, ts_1.getFirstIdentifier)(entity).escapedText;
                    }
                }
                else {
                    var localJsxNamespace = getLocalJsxNamespace(file);
                    if (localJsxNamespace) {
                        return file.localJsxNamespace = localJsxNamespace;
                    }
                }
            }
        }
        if (!_jsxNamespace) {
            _jsxNamespace = "React";
            if (compilerOptions.jsxFactory) {
                _jsxFactoryEntity = (0, ts_1.parseIsolatedEntityName)(compilerOptions.jsxFactory, languageVersion);
                (0, ts_1.visitNode)(_jsxFactoryEntity, markAsSynthetic);
                if (_jsxFactoryEntity) {
                    _jsxNamespace = (0, ts_1.getFirstIdentifier)(_jsxFactoryEntity).escapedText;
                }
            }
            else if (compilerOptions.reactNamespace) {
                _jsxNamespace = (0, ts_1.escapeLeadingUnderscores)(compilerOptions.reactNamespace);
            }
        }
        if (!_jsxFactoryEntity) {
            _jsxFactoryEntity = ts_1.factory.createQualifiedName(ts_1.factory.createIdentifier((0, ts_1.unescapeLeadingUnderscores)(_jsxNamespace)), "createElement");
        }
        return _jsxNamespace;
    }
    function getLocalJsxNamespace(file) {
        if (file.localJsxNamespace) {
            return file.localJsxNamespace;
        }
        var jsxPragma = file.pragmas.get("jsx");
        if (jsxPragma) {
            var chosenPragma = (0, ts_1.isArray)(jsxPragma) ? jsxPragma[0] : jsxPragma;
            file.localJsxFactory = (0, ts_1.parseIsolatedEntityName)(chosenPragma.arguments.factory, languageVersion);
            (0, ts_1.visitNode)(file.localJsxFactory, markAsSynthetic, ts_1.isEntityName);
            if (file.localJsxFactory) {
                return file.localJsxNamespace = (0, ts_1.getFirstIdentifier)(file.localJsxFactory).escapedText;
            }
        }
    }
    function markAsSynthetic(node) {
        (0, ts_1.setTextRangePosEnd)(node, -1, -1);
        return (0, ts_1.visitEachChild)(node, markAsSynthetic, ts_1.nullTransformationContext);
    }
    function getEmitResolver(sourceFile, cancellationToken) {
        // Ensure we have all the type information in place for this file so that all the
        // emitter questions of this resolver will return the right information.
        getDiagnostics(sourceFile, cancellationToken);
        return emitResolver;
    }
    function lookupOrIssueError(location, message) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var diagnostic = location
            ? ts_1.createDiagnosticForNode.apply(void 0, __spreadArray([location, message], args, false)) : ts_1.createCompilerDiagnostic.apply(void 0, __spreadArray([message], args, false));
        var existing = diagnostics.lookup(diagnostic);
        if (existing) {
            return existing;
        }
        else {
            diagnostics.add(diagnostic);
            return diagnostic;
        }
    }
    function errorSkippedOn(key, location, message) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        var diagnostic = error.apply(void 0, __spreadArray([location, message], args, false));
        diagnostic.skippedOn = key;
        return diagnostic;
    }
    function createError(location, message) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        return location
            ? ts_1.createDiagnosticForNode.apply(void 0, __spreadArray([location, message], args, false)) : ts_1.createCompilerDiagnostic.apply(void 0, __spreadArray([message], args, false));
    }
    function error(location, message) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var diagnostic = createError.apply(void 0, __spreadArray([location, message], args, false));
        diagnostics.add(diagnostic);
        return diagnostic;
    }
    function addErrorOrSuggestion(isError, diagnostic) {
        if (isError) {
            diagnostics.add(diagnostic);
        }
        else {
            suggestionDiagnostics.add(__assign(__assign({}, diagnostic), { category: ts_1.DiagnosticCategory.Suggestion }));
        }
    }
    function errorOrSuggestion(isError, location, message) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        // Pseudo-synthesized input node
        if (location.pos < 0 || location.end < 0) {
            if (!isError) {
                return; // Drop suggestions (we have no span to suggest on)
            }
            // Issue errors globally
            var file = (0, ts_1.getSourceFileOfNode)(location);
            addErrorOrSuggestion(isError, "message" in message ? ts_1.createFileDiagnostic.apply(void 0, __spreadArray([file, 0, 0, message], args, false)) : (0, ts_1.createDiagnosticForFileFromMessageChain)(file, message)); // eslint-disable-line local/no-in-operator
            return;
        }
        addErrorOrSuggestion(isError, "message" in message ? ts_1.createDiagnosticForNode.apply(void 0, __spreadArray([location, message], args, false)) : (0, ts_1.createDiagnosticForNodeFromMessageChain)((0, ts_1.getSourceFileOfNode)(location), location, message)); // eslint-disable-line local/no-in-operator
    }
    function errorAndMaybeSuggestAwait(location, maybeMissingAwait, message) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        var diagnostic = error.apply(void 0, __spreadArray([location, message], args, false));
        if (maybeMissingAwait) {
            var related = (0, ts_1.createDiagnosticForNode)(location, ts_1.Diagnostics.Did_you_forget_to_use_await);
            (0, ts_1.addRelatedInfo)(diagnostic, related);
        }
        return diagnostic;
    }
    function addDeprecatedSuggestionWorker(declarations, diagnostic) {
        var deprecatedTag = Array.isArray(declarations) ? (0, ts_1.forEach)(declarations, ts_1.getJSDocDeprecatedTag) : (0, ts_1.getJSDocDeprecatedTag)(declarations);
        if (deprecatedTag) {
            (0, ts_1.addRelatedInfo)(diagnostic, (0, ts_1.createDiagnosticForNode)(deprecatedTag, ts_1.Diagnostics.The_declaration_was_marked_as_deprecated_here));
        }
        // We call `addRelatedInfo()` before adding the diagnostic to prevent duplicates.
        suggestionDiagnostics.add(diagnostic);
        return diagnostic;
    }
    function isDeprecatedSymbol(symbol) {
        var parentSymbol = getParentOfSymbol(symbol);
        if (parentSymbol && (0, ts_1.length)(symbol.declarations) > 1) {
            return parentSymbol.flags & 64 /* SymbolFlags.Interface */ ? (0, ts_1.some)(symbol.declarations, isDeprecatedDeclaration) : (0, ts_1.every)(symbol.declarations, isDeprecatedDeclaration);
        }
        return !!symbol.valueDeclaration && isDeprecatedDeclaration(symbol.valueDeclaration)
            || (0, ts_1.length)(symbol.declarations) && (0, ts_1.every)(symbol.declarations, isDeprecatedDeclaration);
    }
    function isDeprecatedDeclaration(declaration) {
        return !!((0, ts_1.getCombinedNodeFlags)(declaration) & 268435456 /* NodeFlags.Deprecated */);
    }
    function addDeprecatedSuggestion(location, declarations, deprecatedEntity) {
        var diagnostic = (0, ts_1.createDiagnosticForNode)(location, ts_1.Diagnostics._0_is_deprecated, deprecatedEntity);
        return addDeprecatedSuggestionWorker(declarations, diagnostic);
    }
    function addDeprecatedSuggestionWithSignature(location, declaration, deprecatedEntity, signatureString) {
        var diagnostic = deprecatedEntity
            ? (0, ts_1.createDiagnosticForNode)(location, ts_1.Diagnostics.The_signature_0_of_1_is_deprecated, signatureString, deprecatedEntity)
            : (0, ts_1.createDiagnosticForNode)(location, ts_1.Diagnostics._0_is_deprecated, signatureString);
        return addDeprecatedSuggestionWorker(declaration, diagnostic);
    }
    function createSymbol(flags, name, checkFlags) {
        symbolCount++;
        var symbol = new Symbol(flags | 33554432 /* SymbolFlags.Transient */, name);
        symbol.links = new SymbolLinks();
        symbol.links.checkFlags = checkFlags || 0 /* CheckFlags.None */;
        return symbol;
    }
    function createParameter(name, type) {
        var symbol = createSymbol(1 /* SymbolFlags.FunctionScopedVariable */, name);
        symbol.links.type = type;
        return symbol;
    }
    function createProperty(name, type) {
        var symbol = createSymbol(4 /* SymbolFlags.Property */, name);
        symbol.links.type = type;
        return symbol;
    }
    function getExcludedSymbolFlags(flags) {
        var result = 0;
        if (flags & 2 /* SymbolFlags.BlockScopedVariable */)
            result |= 111551 /* SymbolFlags.BlockScopedVariableExcludes */;
        if (flags & 1 /* SymbolFlags.FunctionScopedVariable */)
            result |= 111550 /* SymbolFlags.FunctionScopedVariableExcludes */;
        if (flags & 4 /* SymbolFlags.Property */)
            result |= 0 /* SymbolFlags.PropertyExcludes */;
        if (flags & 8 /* SymbolFlags.EnumMember */)
            result |= 900095 /* SymbolFlags.EnumMemberExcludes */;
        if (flags & 16 /* SymbolFlags.Function */)
            result |= 110991 /* SymbolFlags.FunctionExcludes */;
        if (flags & 32 /* SymbolFlags.Class */)
            result |= 899503 /* SymbolFlags.ClassExcludes */;
        if (flags & 64 /* SymbolFlags.Interface */)
            result |= 788872 /* SymbolFlags.InterfaceExcludes */;
        if (flags & 256 /* SymbolFlags.RegularEnum */)
            result |= 899327 /* SymbolFlags.RegularEnumExcludes */;
        if (flags & 128 /* SymbolFlags.ConstEnum */)
            result |= 899967 /* SymbolFlags.ConstEnumExcludes */;
        if (flags & 512 /* SymbolFlags.ValueModule */)
            result |= 110735 /* SymbolFlags.ValueModuleExcludes */;
        if (flags & 8192 /* SymbolFlags.Method */)
            result |= 103359 /* SymbolFlags.MethodExcludes */;
        if (flags & 32768 /* SymbolFlags.GetAccessor */)
            result |= 46015 /* SymbolFlags.GetAccessorExcludes */;
        if (flags & 65536 /* SymbolFlags.SetAccessor */)
            result |= 78783 /* SymbolFlags.SetAccessorExcludes */;
        if (flags & 262144 /* SymbolFlags.TypeParameter */)
            result |= 526824 /* SymbolFlags.TypeParameterExcludes */;
        if (flags & 524288 /* SymbolFlags.TypeAlias */)
            result |= 788968 /* SymbolFlags.TypeAliasExcludes */;
        if (flags & 2097152 /* SymbolFlags.Alias */)
            result |= 2097152 /* SymbolFlags.AliasExcludes */;
        return result;
    }
    function recordMergedSymbol(target, source) {
        if (!source.mergeId) {
            source.mergeId = nextMergeId;
            nextMergeId++;
        }
        mergedSymbols[source.mergeId] = target;
    }
    function cloneSymbol(symbol) {
        var result = createSymbol(symbol.flags, symbol.escapedName);
        result.declarations = symbol.declarations ? symbol.declarations.slice() : [];
        result.parent = symbol.parent;
        if (symbol.valueDeclaration)
            result.valueDeclaration = symbol.valueDeclaration;
        if (symbol.constEnumOnlyModule)
            result.constEnumOnlyModule = true;
        if (symbol.members)
            result.members = new Map(symbol.members);
        if (symbol.exports)
            result.exports = new Map(symbol.exports);
        recordMergedSymbol(result, symbol);
        return result;
    }
    /**
     * Note: if target is transient, then it is mutable, and mergeSymbol with both mutate and return it.
     * If target is not transient, mergeSymbol will produce a transient clone, mutate that and return it.
     */
    function mergeSymbol(target, source, unidirectional) {
        if (unidirectional === void 0) { unidirectional = false; }
        if (!(target.flags & getExcludedSymbolFlags(source.flags)) ||
            (source.flags | target.flags) & 67108864 /* SymbolFlags.Assignment */) {
            if (source === target) {
                // This can happen when an export assigned namespace exports something also erroneously exported at the top level
                // See `declarationFileNoCrashOnExtraExportModifier` for an example
                return target;
            }
            if (!(target.flags & 33554432 /* SymbolFlags.Transient */)) {
                var resolvedTarget = resolveSymbol(target);
                if (resolvedTarget === unknownSymbol) {
                    return source;
                }
                target = cloneSymbol(resolvedTarget);
            }
            // Javascript static-property-assignment declarations always merge, even though they are also values
            if (source.flags & 512 /* SymbolFlags.ValueModule */ && target.flags & 512 /* SymbolFlags.ValueModule */ && target.constEnumOnlyModule && !source.constEnumOnlyModule) {
                // reset flag when merging instantiated module into value module that has only const enums
                target.constEnumOnlyModule = false;
            }
            target.flags |= source.flags;
            if (source.valueDeclaration) {
                (0, ts_1.setValueDeclaration)(target, source.valueDeclaration);
            }
            (0, ts_1.addRange)(target.declarations, source.declarations);
            if (source.members) {
                if (!target.members)
                    target.members = (0, ts_1.createSymbolTable)();
                mergeSymbolTable(target.members, source.members, unidirectional);
            }
            if (source.exports) {
                if (!target.exports)
                    target.exports = (0, ts_1.createSymbolTable)();
                mergeSymbolTable(target.exports, source.exports, unidirectional);
            }
            if (!unidirectional) {
                recordMergedSymbol(target, source);
            }
        }
        else if (target.flags & 1024 /* SymbolFlags.NamespaceModule */) {
            // Do not report an error when merging `var globalThis` with the built-in `globalThis`,
            // as we will already report a "Declaration name conflicts..." error, and this error
            // won't make much sense.
            if (target !== globalThisSymbol) {
                error(source.declarations && (0, ts_1.getNameOfDeclaration)(source.declarations[0]), ts_1.Diagnostics.Cannot_augment_module_0_with_value_exports_because_it_resolves_to_a_non_module_entity, symbolToString(target));
            }
        }
        else { // error
            var isEitherEnum = !!(target.flags & 384 /* SymbolFlags.Enum */ || source.flags & 384 /* SymbolFlags.Enum */);
            var isEitherBlockScoped_1 = !!(target.flags & 2 /* SymbolFlags.BlockScopedVariable */ || source.flags & 2 /* SymbolFlags.BlockScopedVariable */);
            var message = isEitherEnum ? ts_1.Diagnostics.Enum_declarations_can_only_merge_with_namespace_or_other_enum_declarations
                : isEitherBlockScoped_1 ? ts_1.Diagnostics.Cannot_redeclare_block_scoped_variable_0
                    : ts_1.Diagnostics.Duplicate_identifier_0;
            var sourceSymbolFile = source.declarations && (0, ts_1.getSourceFileOfNode)(source.declarations[0]);
            var targetSymbolFile = target.declarations && (0, ts_1.getSourceFileOfNode)(target.declarations[0]);
            var isSourcePlainJs = (0, ts_1.isPlainJsFile)(sourceSymbolFile, compilerOptions.checkJs);
            var isTargetPlainJs = (0, ts_1.isPlainJsFile)(targetSymbolFile, compilerOptions.checkJs);
            var symbolName_1 = symbolToString(source);
            // Collect top-level duplicate identifier errors into one mapping, so we can then merge their diagnostics if there are a bunch
            if (sourceSymbolFile && targetSymbolFile && amalgamatedDuplicates && !isEitherEnum && sourceSymbolFile !== targetSymbolFile) {
                var firstFile_1 = (0, ts_1.comparePaths)(sourceSymbolFile.path, targetSymbolFile.path) === -1 /* Comparison.LessThan */ ? sourceSymbolFile : targetSymbolFile;
                var secondFile_1 = firstFile_1 === sourceSymbolFile ? targetSymbolFile : sourceSymbolFile;
                var filesDuplicates = (0, ts_1.getOrUpdate)(amalgamatedDuplicates, "".concat(firstFile_1.path, "|").concat(secondFile_1.path), function () {
                    return ({ firstFile: firstFile_1, secondFile: secondFile_1, conflictingSymbols: new Map() });
                });
                var conflictingSymbolInfo = (0, ts_1.getOrUpdate)(filesDuplicates.conflictingSymbols, symbolName_1, function () {
                    return ({ isBlockScoped: isEitherBlockScoped_1, firstFileLocations: [], secondFileLocations: [] });
                });
                if (!isSourcePlainJs)
                    addDuplicateLocations(conflictingSymbolInfo.firstFileLocations, source);
                if (!isTargetPlainJs)
                    addDuplicateLocations(conflictingSymbolInfo.secondFileLocations, target);
            }
            else {
                if (!isSourcePlainJs)
                    addDuplicateDeclarationErrorsForSymbols(source, message, symbolName_1, target);
                if (!isTargetPlainJs)
                    addDuplicateDeclarationErrorsForSymbols(target, message, symbolName_1, source);
            }
        }
        return target;
        function addDuplicateLocations(locs, symbol) {
            if (symbol.declarations) {
                for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {
                    var decl = _a[_i];
                    (0, ts_1.pushIfUnique)(locs, decl);
                }
            }
        }
    }
    function addDuplicateDeclarationErrorsForSymbols(target, message, symbolName, source) {
        (0, ts_1.forEach)(target.declarations, function (node) {
            addDuplicateDeclarationError(node, message, symbolName, source.declarations);
        });
    }
    function addDuplicateDeclarationError(node, message, symbolName, relatedNodes) {
        var errorNode = ((0, ts_1.getExpandoInitializer)(node, /*isPrototypeAssignment*/ false) ? (0, ts_1.getNameOfExpando)(node) : (0, ts_1.getNameOfDeclaration)(node)) || node;
        var err = lookupOrIssueError(errorNode, message, symbolName);
        var _loop_1 = function (relatedNode) {
            var adjustedNode = ((0, ts_1.getExpandoInitializer)(relatedNode, /*isPrototypeAssignment*/ false) ? (0, ts_1.getNameOfExpando)(relatedNode) : (0, ts_1.getNameOfDeclaration)(relatedNode)) || relatedNode;
            if (adjustedNode === errorNode)
                return "continue";
            err.relatedInformation = err.relatedInformation || [];
            var leadingMessage = (0, ts_1.createDiagnosticForNode)(adjustedNode, ts_1.Diagnostics._0_was_also_declared_here, symbolName);
            var followOnMessage = (0, ts_1.createDiagnosticForNode)(adjustedNode, ts_1.Diagnostics.and_here);
            if ((0, ts_1.length)(err.relatedInformation) >= 5 || (0, ts_1.some)(err.relatedInformation, function (r) { return (0, ts_1.compareDiagnostics)(r, followOnMessage) === 0 /* Comparison.EqualTo */ || (0, ts_1.compareDiagnostics)(r, leadingMessage) === 0 /* Comparison.EqualTo */; }))
                return "continue";
            (0, ts_1.addRelatedInfo)(err, !(0, ts_1.length)(err.relatedInformation) ? leadingMessage : followOnMessage);
        };
        for (var _i = 0, _a = relatedNodes || ts_1.emptyArray; _i < _a.length; _i++) {
            var relatedNode = _a[_i];
            _loop_1(relatedNode);
        }
    }
    function combineSymbolTables(first, second) {
        if (!(first === null || first === void 0 ? void 0 : first.size))
            return second;
        if (!(second === null || second === void 0 ? void 0 : second.size))
            return first;
        var combined = (0, ts_1.createSymbolTable)();
        mergeSymbolTable(combined, first);
        mergeSymbolTable(combined, second);
        return combined;
    }
    function mergeSymbolTable(target, source, unidirectional) {
        if (unidirectional === void 0) { unidirectional = false; }
        source.forEach(function (sourceSymbol, id) {
            var targetSymbol = target.get(id);
            target.set(id, targetSymbol ? mergeSymbol(targetSymbol, sourceSymbol, unidirectional) : getMergedSymbol(sourceSymbol));
        });
    }
    function mergeModuleAugmentation(moduleName) {
        var _a, _b, _c;
        var moduleAugmentation = moduleName.parent;
        if (((_a = moduleAugmentation.symbol.declarations) === null || _a === void 0 ? void 0 : _a[0]) !== moduleAugmentation) {
            // this is a combined symbol for multiple augmentations within the same file.
            // its symbol already has accumulated information for all declarations
            // so we need to add it just once - do the work only for first declaration
            ts_1.Debug.assert(moduleAugmentation.symbol.declarations.length > 1);
            return;
        }
        if ((0, ts_1.isGlobalScopeAugmentation)(moduleAugmentation)) {
            mergeSymbolTable(globals, moduleAugmentation.symbol.exports);
        }
        else {
            // find a module that about to be augmented
            // do not validate names of augmentations that are defined in ambient context
            var moduleNotFoundError = !(moduleName.parent.parent.flags & 16777216 /* NodeFlags.Ambient */)
                ? ts_1.Diagnostics.Invalid_module_name_in_augmentation_module_0_cannot_be_found
                : undefined;
            var mainModule_1 = resolveExternalModuleNameWorker(moduleName, moduleName, moduleNotFoundError, /*isForAugmentation*/ true);
            if (!mainModule_1) {
                return;
            }
            // obtain item referenced by 'export='
            mainModule_1 = resolveExternalModuleSymbol(mainModule_1);
            if (mainModule_1.flags & 1920 /* SymbolFlags.Namespace */) {
                // If we're merging an augmentation to a pattern ambient module, we want to
                // perform the merge unidirectionally from the augmentation ('a.foo') to
                // the pattern ('*.foo'), so that 'getMergedSymbol()' on a.foo gives you
                // all the exports both from the pattern and from the augmentation, but
                // 'getMergedSymbol()' on *.foo only gives you exports from *.foo.
                if ((0, ts_1.some)(patternAmbientModules, function (module) { return mainModule_1 === module.symbol; })) {
                    var merged = mergeSymbol(moduleAugmentation.symbol, mainModule_1, /*unidirectional*/ true);
                    if (!patternAmbientModuleAugmentations) {
                        patternAmbientModuleAugmentations = new Map();
                    }
                    // moduleName will be a StringLiteral since this is not `declare global`.
                    patternAmbientModuleAugmentations.set(moduleName.text, merged);
                }
                else {
                    if (((_b = mainModule_1.exports) === null || _b === void 0 ? void 0 : _b.get("__export" /* InternalSymbolName.ExportStar */)) && ((_c = moduleAugmentation.symbol.exports) === null || _c === void 0 ? void 0 : _c.size)) {
                        // We may need to merge the module augmentation's exports into the target symbols of the resolved exports
                        var resolvedExports = getResolvedMembersOrExportsOfSymbol(mainModule_1, "resolvedExports" /* MembersOrExportsResolutionKind.resolvedExports */);
                        for (var _i = 0, _d = (0, ts_1.arrayFrom)(moduleAugmentation.symbol.exports.entries()); _i < _d.length; _i++) {
                            var _e = _d[_i], key = _e[0], value = _e[1];
                            if (resolvedExports.has(key) && !mainModule_1.exports.has(key)) {
                                mergeSymbol(resolvedExports.get(key), value);
                            }
                        }
                    }
                    mergeSymbol(mainModule_1, moduleAugmentation.symbol);
                }
            }
            else {
                // moduleName will be a StringLiteral since this is not `declare global`.
                error(moduleName, ts_1.Diagnostics.Cannot_augment_module_0_because_it_resolves_to_a_non_module_entity, moduleName.text);
            }
        }
    }
    function addToSymbolTable(target, source, message) {
        source.forEach(function (sourceSymbol, id) {
            var targetSymbol = target.get(id);
            if (targetSymbol) {
                // Error on redeclarations
                (0, ts_1.forEach)(targetSymbol.declarations, addDeclarationDiagnostic((0, ts_1.unescapeLeadingUnderscores)(id), message));
            }
            else {
                target.set(id, sourceSymbol);
            }
        });
        function addDeclarationDiagnostic(id, message) {
            return function (declaration) { return diagnostics.add((0, ts_1.createDiagnosticForNode)(declaration, message, id)); };
        }
    }
    function getSymbolLinks(symbol) {
        var _a;
        if (symbol.flags & 33554432 /* SymbolFlags.Transient */)
            return symbol.links;
        var id = getSymbolId(symbol);
        return (_a = symbolLinks[id]) !== null && _a !== void 0 ? _a : (symbolLinks[id] = new SymbolLinks());
    }
    function getNodeLinks(node) {
        var nodeId = getNodeId(node);
        return nodeLinks[nodeId] || (nodeLinks[nodeId] = new NodeLinks());
    }
    function isGlobalSourceFile(node) {
        return node.kind === 311 /* SyntaxKind.SourceFile */ && !(0, ts_1.isExternalOrCommonJsModule)(node);
    }
    function getSymbol(symbols, name, meaning) {
        if (meaning) {
            var symbol = getMergedSymbol(symbols.get(name));
            if (symbol) {
                ts_1.Debug.assert(((0, ts_1.getCheckFlags)(symbol) & 1 /* CheckFlags.Instantiated */) === 0, "Should never get an instantiated symbol here.");
                if (symbol.flags & meaning) {
                    return symbol;
                }
                if (symbol.flags & 2097152 /* SymbolFlags.Alias */) {
                    var targetFlags = getAllSymbolFlags(symbol);
                    // `targetFlags` will be `SymbolFlags.All` if an error occurred in alias resolution; this avoids cascading errors
                    if (targetFlags & meaning) {
                        return symbol;
                    }
                }
            }
        }
        // return undefined if we can't find a symbol.
    }
    /**
     * Get symbols that represent parameter-property-declaration as parameter and as property declaration
     * @param parameter a parameterDeclaration node
     * @param parameterName a name of the parameter to get the symbols for.
     * @return a tuple of two symbols
     */
    function getSymbolsOfParameterPropertyDeclaration(parameter, parameterName) {
        var constructorDeclaration = parameter.parent;
        var classDeclaration = parameter.parent.parent;
        var parameterSymbol = getSymbol(constructorDeclaration.locals, parameterName, 111551 /* SymbolFlags.Value */);
        var propertySymbol = getSymbol(getMembersOfSymbol(classDeclaration.symbol), parameterName, 111551 /* SymbolFlags.Value */);
        if (parameterSymbol && propertySymbol) {
            return [parameterSymbol, propertySymbol];
        }
        return ts_1.Debug.fail("There should exist two symbols, one as property declaration and one as parameter declaration");
    }
    function isBlockScopedNameDeclaredBeforeUse(declaration, usage) {
        var declarationFile = (0, ts_1.getSourceFileOfNode)(declaration);
        var useFile = (0, ts_1.getSourceFileOfNode)(usage);
        var declContainer = (0, ts_1.getEnclosingBlockScopeContainer)(declaration);
        if (declarationFile !== useFile) {
            if ((moduleKind && (declarationFile.externalModuleIndicator || useFile.externalModuleIndicator)) ||
                (!(0, ts_1.outFile)(compilerOptions)) ||
                isInTypeQuery(usage) ||
                declaration.flags & 16777216 /* NodeFlags.Ambient */) {
                // nodes are in different files and order cannot be determined
                return true;
            }
            // declaration is after usage
            // can be legal if usage is deferred (i.e. inside function or in initializer of instance property)
            if (isUsedInFunctionOrInstanceProperty(usage, declaration)) {
                return true;
            }
            var sourceFiles = host.getSourceFiles();
            return sourceFiles.indexOf(declarationFile) <= sourceFiles.indexOf(useFile);
        }
        if (declaration.pos <= usage.pos && !((0, ts_1.isPropertyDeclaration)(declaration) && (0, ts_1.isThisProperty)(usage.parent) && !declaration.initializer && !declaration.exclamationToken)) {
            // declaration is before usage
            if (declaration.kind === 207 /* SyntaxKind.BindingElement */) {
                // still might be illegal if declaration and usage are both binding elements (eg var [a = b, b = b] = [1, 2])
                var errorBindingElement = (0, ts_1.getAncestor)(usage, 207 /* SyntaxKind.BindingElement */);
                if (errorBindingElement) {
                    return (0, ts_1.findAncestor)(errorBindingElement, ts_1.isBindingElement) !== (0, ts_1.findAncestor)(declaration, ts_1.isBindingElement) ||
                        declaration.pos < errorBindingElement.pos;
                }
                // or it might be illegal if usage happens before parent variable is declared (eg var [a] = a)
                return isBlockScopedNameDeclaredBeforeUse((0, ts_1.getAncestor)(declaration, 259 /* SyntaxKind.VariableDeclaration */), usage);
            }
            else if (declaration.kind === 259 /* SyntaxKind.VariableDeclaration */) {
                // still might be illegal if usage is in the initializer of the variable declaration (eg var a = a)
                return !isImmediatelyUsedInInitializerOfBlockScopedVariable(declaration, usage);
            }
            else if ((0, ts_1.isClassDeclaration)(declaration)) {
                // still might be illegal if the usage is within a computed property name in the class (eg class A { static p = "a"; [A.p]() {} })
                return !(0, ts_1.findAncestor)(usage, function (n) { return (0, ts_1.isComputedPropertyName)(n) && n.parent.parent === declaration; });
            }
            else if ((0, ts_1.isPropertyDeclaration)(declaration)) {
                // still might be illegal if a self-referencing property initializer (eg private x = this.x)
                return !isPropertyImmediatelyReferencedWithinDeclaration(declaration, usage, /*stopAtAnyPropertyDeclaration*/ false);
            }
            else if ((0, ts_1.isParameterPropertyDeclaration)(declaration, declaration.parent)) {
                // foo = this.bar is illegal in esnext+useDefineForClassFields when bar is a parameter property
                return !((0, ts_1.getEmitScriptTarget)(compilerOptions) === 99 /* ScriptTarget.ESNext */ && useDefineForClassFields
                    && (0, ts_1.getContainingClass)(declaration) === (0, ts_1.getContainingClass)(usage)
                    && isUsedInFunctionOrInstanceProperty(usage, declaration));
            }
            return true;
        }
        // declaration is after usage, but it can still be legal if usage is deferred:
        // 1. inside an export specifier
        // 2. inside a function
        // 3. inside an instance property initializer, a reference to a non-instance property
        //    (except when target: "esnext" and useDefineForClassFields: true and the reference is to a parameter property)
        // 4. inside a static property initializer, a reference to a static method in the same class
        // 5. inside a TS export= declaration (since we will move the export statement during emit to avoid TDZ)
        // or if usage is in a type context:
        // 1. inside a type query (typeof in type position)
        // 2. inside a jsdoc comment
        if (usage.parent.kind === 280 /* SyntaxKind.ExportSpecifier */ || (usage.parent.kind === 276 /* SyntaxKind.ExportAssignment */ && usage.parent.isExportEquals)) {
            // export specifiers do not use the variable, they only make it available for use
            return true;
        }
        // When resolving symbols for exports, the `usage` location passed in can be the export site directly
        if (usage.kind === 276 /* SyntaxKind.ExportAssignment */ && usage.isExportEquals) {
            return true;
        }
        if (!!(usage.flags & 8388608 /* NodeFlags.JSDoc */) || isInTypeQuery(usage) || isInAmbientOrTypeNode(usage)) {
            return true;
        }
        if (isUsedInFunctionOrInstanceProperty(usage, declaration)) {
            if ((0, ts_1.getEmitScriptTarget)(compilerOptions) >= 9 /* ScriptTarget.ES2022 */ && useDefineForClassFields
                && (0, ts_1.getContainingClass)(declaration)
                && ((0, ts_1.isPropertyDeclaration)(declaration) || (0, ts_1.isParameterPropertyDeclaration)(declaration, declaration.parent))) {
                return !isPropertyImmediatelyReferencedWithinDeclaration(declaration, usage, /*stopAtAnyPropertyDeclaration*/ true);
            }
            else {
                return true;
            }
        }
        return false;
        function isImmediatelyUsedInInitializerOfBlockScopedVariable(declaration, usage) {
            switch (declaration.parent.parent.kind) {
                case 242 /* SyntaxKind.VariableStatement */:
                case 247 /* SyntaxKind.ForStatement */:
                case 249 /* SyntaxKind.ForOfStatement */:
                    // variable statement/for/for-of statement case,
                    // use site should not be inside variable declaration (initializer of declaration or binding element)
                    if (isSameScopeDescendentOf(usage, declaration, declContainer)) {
                        return true;
                    }
                    break;
            }
            // ForIn/ForOf case - use site should not be used in expression part
            var grandparent = declaration.parent.parent;
            return (0, ts_1.isForInOrOfStatement)(grandparent) && isSameScopeDescendentOf(usage, grandparent.expression, declContainer);
        }
        function isUsedInFunctionOrInstanceProperty(usage, declaration) {
            return !!(0, ts_1.findAncestor)(usage, function (current) {
                if (current === declContainer) {
                    return "quit";
                }
                if ((0, ts_1.isFunctionLike)(current)) {
                    return true;
                }
                if ((0, ts_1.isClassStaticBlockDeclaration)(current)) {
                    return declaration.pos < usage.pos;
                }
                var propertyDeclaration = (0, ts_1.tryCast)(current.parent, ts_1.isPropertyDeclaration);
                if (propertyDeclaration) {
                    var initializerOfProperty = propertyDeclaration.initializer === current;
                    if (initializerOfProperty) {
                        if ((0, ts_1.isStatic)(current.parent)) {
                            if (declaration.kind === 173 /* SyntaxKind.MethodDeclaration */) {
                                return true;
                            }
                            if ((0, ts_1.isPropertyDeclaration)(declaration) && (0, ts_1.getContainingClass)(usage) === (0, ts_1.getContainingClass)(declaration)) {
                                var propName = declaration.name;
                                if ((0, ts_1.isIdentifier)(propName) || (0, ts_1.isPrivateIdentifier)(propName)) {
                                    var type = getTypeOfSymbol(getSymbolOfDeclaration(declaration));
                                    var staticBlocks = (0, ts_1.filter)(declaration.parent.members, ts_1.isClassStaticBlockDeclaration);
                                    if (isPropertyInitializedInStaticBlocks(propName, type, staticBlocks, declaration.parent.pos, current.pos)) {
                                        return true;
                                    }
                                }
                            }
                        }
                        else {
                            var isDeclarationInstanceProperty = declaration.kind === 171 /* SyntaxKind.PropertyDeclaration */ && !(0, ts_1.isStatic)(declaration);
                            if (!isDeclarationInstanceProperty || (0, ts_1.getContainingClass)(usage) !== (0, ts_1.getContainingClass)(declaration)) {
                                return true;
                            }
                        }
                    }
                }
                return false;
            });
        }
        /** stopAtAnyPropertyDeclaration is used for detecting ES-standard class field use-before-def errors */
        function isPropertyImmediatelyReferencedWithinDeclaration(declaration, usage, stopAtAnyPropertyDeclaration) {
            // always legal if usage is after declaration
            if (usage.end > declaration.end) {
                return false;
            }
            // still might be legal if usage is deferred (e.g. x: any = () => this.x)
            // otherwise illegal if immediately referenced within the declaration (e.g. x: any = this.x)
            var ancestorChangingReferenceScope = (0, ts_1.findAncestor)(usage, function (node) {
                if (node === declaration) {
                    return "quit";
                }
                switch (node.kind) {
                    case 218 /* SyntaxKind.ArrowFunction */:
                        return true;
                    case 171 /* SyntaxKind.PropertyDeclaration */:
                        // even when stopping at any property declaration, they need to come from the same class
                        return stopAtAnyPropertyDeclaration &&
                            ((0, ts_1.isPropertyDeclaration)(declaration) && node.parent === declaration.parent
                                || (0, ts_1.isParameterPropertyDeclaration)(declaration, declaration.parent) && node.parent === declaration.parent.parent)
                            ? "quit" : true;
                    case 240 /* SyntaxKind.Block */:
                        switch (node.parent.kind) {
                            case 176 /* SyntaxKind.GetAccessor */:
                            case 173 /* SyntaxKind.MethodDeclaration */:
                            case 177 /* SyntaxKind.SetAccessor */:
                                return true;
                            default:
                                return false;
                        }
                    default:
                        return false;
                }
            });
            return ancestorChangingReferenceScope === undefined;
        }
    }
    function useOuterVariableScopeInParameter(result, location, lastLocation) {
        var target = (0, ts_1.getEmitScriptTarget)(compilerOptions);
        var functionLocation = location;
        if ((0, ts_1.isParameter)(lastLocation)
            && functionLocation.body
            && result.valueDeclaration
            && result.valueDeclaration.pos >= functionLocation.body.pos
            && result.valueDeclaration.end <= functionLocation.body.end) {
            // check for several cases where we introduce temporaries that require moving the name/initializer of the parameter to the body
            // - static field in a class expression
            // - optional chaining pre-es2020
            // - nullish coalesce pre-es2020
            // - spread assignment in binding pattern pre-es2017
            if (target >= 2 /* ScriptTarget.ES2015 */) {
                var links = getNodeLinks(functionLocation);
                if (links.declarationRequiresScopeChange === undefined) {
                    links.declarationRequiresScopeChange = (0, ts_1.forEach)(functionLocation.parameters, requiresScopeChange) || false;
                }
                return !links.declarationRequiresScopeChange;
            }
        }
        return false;
        function requiresScopeChange(node) {
            return requiresScopeChangeWorker(node.name)
                || !!node.initializer && requiresScopeChangeWorker(node.initializer);
        }
        function requiresScopeChangeWorker(node) {
            switch (node.kind) {
                case 218 /* SyntaxKind.ArrowFunction */:
                case 217 /* SyntaxKind.FunctionExpression */:
                case 261 /* SyntaxKind.FunctionDeclaration */:
                case 175 /* SyntaxKind.Constructor */:
                    // do not descend into these
                    return false;
                case 173 /* SyntaxKind.MethodDeclaration */:
                case 176 /* SyntaxKind.GetAccessor */:
                case 177 /* SyntaxKind.SetAccessor */:
                case 302 /* SyntaxKind.PropertyAssignment */:
                    return requiresScopeChangeWorker(node.name);
                case 171 /* SyntaxKind.PropertyDeclaration */:
                    // static properties in classes introduce temporary variables
                    if ((0, ts_1.hasStaticModifier)(node)) {
                        return target < 99 /* ScriptTarget.ESNext */ || !useDefineForClassFields;
                    }
                    return requiresScopeChangeWorker(node.name);
                default:
                    // null coalesce and optional chain pre-es2020 produce temporary variables
                    if ((0, ts_1.isNullishCoalesce)(node) || (0, ts_1.isOptionalChain)(node)) {
                        return target < 7 /* ScriptTarget.ES2020 */;
                    }
                    if ((0, ts_1.isBindingElement)(node) && node.dotDotDotToken && (0, ts_1.isObjectBindingPattern)(node.parent)) {
                        return target < 4 /* ScriptTarget.ES2017 */;
                    }
                    if ((0, ts_1.isTypeNode)(node))
                        return false;
                    return (0, ts_1.forEachChild)(node, requiresScopeChangeWorker) || false;
            }
        }
    }
    function isConstAssertion(location) {
        return ((0, ts_1.isAssertionExpression)(location) && (0, ts_1.isConstTypeReference)(location.type))
            || ((0, ts_1.isJSDocTypeTag)(location) && (0, ts_1.isConstTypeReference)(location.typeExpression));
    }
    /**
     * Resolve a given name for a given meaning at a given location. An error is reported if the name was not found and
     * the nameNotFoundMessage argument is not undefined. Returns the resolved symbol, or undefined if no symbol with
     * the given name can be found.
     *
     * @param nameNotFoundMessage If defined, we will report errors found during resolve.
     * @param isUse If true, this will count towards --noUnusedLocals / --noUnusedParameters.
     */
    function resolveName(location, name, meaning, nameNotFoundMessage, nameArg, isUse, excludeGlobals, getSpellingSuggestions) {
        if (excludeGlobals === void 0) { excludeGlobals = false; }
        if (getSpellingSuggestions === void 0) { getSpellingSuggestions = true; }
        return resolveNameHelper(location, name, meaning, nameNotFoundMessage, nameArg, isUse, excludeGlobals, getSpellingSuggestions, getSymbol);
    }
    function resolveNameHelper(location, name, meaning, nameNotFoundMessage, nameArg, isUse, excludeGlobals, getSpellingSuggestions, lookup) {
        var _a, _b, _c;
        var originalLocation = location; // needed for did-you-mean error reporting, which gathers candidates starting from the original location
        var result;
        var lastLocation;
        var lastSelfReferenceLocation;
        var propertyWithInvalidInitializer;
        var associatedDeclarationForContainingInitializerOrBindingName;
        var withinDeferredContext = false;
        var errorLocation = location;
        var grandparent;
        var isInExternalModule = false;
        loop: while (location) {
            if (name === "const" && isConstAssertion(location)) {
                // `const` in an `as const` has no symbol, but issues no error because there is no *actual* lookup of the type
                // (it refers to the constant type of the expression instead)
                return undefined;
            }
            if ((0, ts_1.isModuleDeclaration)(location) && lastLocation && location.name === lastLocation) {
                // If this is the name of a namespace, skip the parent since it will have is own locals that could
                // conflict.
                lastLocation = location;
                location = location.parent;
            }
            // Locals of a source file are not in scope (because they get merged into the global symbol table)
            if ((0, ts_1.canHaveLocals)(location) && location.locals && !isGlobalSourceFile(location)) {
                if (result = lookup(location.locals, name, meaning)) {
                    var useResult = true;
                    if ((0, ts_1.isFunctionLike)(location) && lastLocation && lastLocation !== location.body) {
                        // symbol lookup restrictions for function-like declarations
                        // - Type parameters of a function are in scope in the entire function declaration, including the parameter
                        //   list and return type. However, local types are only in scope in the function body.
                        // - parameters are only in the scope of function body
                        // This restriction does not apply to JSDoc comment types because they are parented
                        // at a higher level than type parameters would normally be
                        if (meaning & result.flags & 788968 /* SymbolFlags.Type */ && lastLocation.kind !== 326 /* SyntaxKind.JSDoc */) {
                            useResult = result.flags & 262144 /* SymbolFlags.TypeParameter */
                                // type parameters are visible in parameter list, return type and type parameter list
                                ? lastLocation === location.type ||
                                    lastLocation.kind === 168 /* SyntaxKind.Parameter */ ||
                                    lastLocation.kind === 347 /* SyntaxKind.JSDocParameterTag */ ||
                                    lastLocation.kind === 348 /* SyntaxKind.JSDocReturnTag */ ||
                                    lastLocation.kind === 167 /* SyntaxKind.TypeParameter */
                                // local types not visible outside the function body
                                : false;
                        }
                        if (meaning & result.flags & 3 /* SymbolFlags.Variable */) {
                            // expression inside parameter will lookup as normal variable scope when targeting es2015+
                            if (useOuterVariableScopeInParameter(result, location, lastLocation)) {
                                useResult = false;
                            }
                            else if (result.flags & 1 /* SymbolFlags.FunctionScopedVariable */) {
                                // parameters are visible only inside function body, parameter list and return type
                                // technically for parameter list case here we might mix parameters and variables declared in function,
                                // however it is detected separately when checking initializers of parameters
                                // to make sure that they reference no variables declared after them.
                                useResult =
                                    lastLocation.kind === 168 /* SyntaxKind.Parameter */ ||
                                        (lastLocation === location.type &&
                                            !!(0, ts_1.findAncestor)(result.valueDeclaration, ts_1.isParameter));
                            }
                        }
                    }
                    else if (location.kind === 193 /* SyntaxKind.ConditionalType */) {
                        // A type parameter declared using 'infer T' in a conditional type is visible only in
                        // the true branch of the conditional type.
                        useResult = lastLocation === location.trueType;
                    }
                    if (useResult) {
                        break loop;
                    }
                    else {
                        result = undefined;
                    }
                }
            }
            withinDeferredContext = withinDeferredContext || getIsDeferredContext(location, lastLocation);
            switch (location.kind) {
                case 311 /* SyntaxKind.SourceFile */:
                    if (!(0, ts_1.isExternalOrCommonJsModule)(location))
                        break;
                    isInExternalModule = true;
                // falls through
                case 266 /* SyntaxKind.ModuleDeclaration */:
                    var moduleExports = ((_a = getSymbolOfDeclaration(location)) === null || _a === void 0 ? void 0 : _a.exports) || emptySymbols;
                    if (location.kind === 311 /* SyntaxKind.SourceFile */ || ((0, ts_1.isModuleDeclaration)(location) && location.flags & 16777216 /* NodeFlags.Ambient */ && !(0, ts_1.isGlobalScopeAugmentation)(location))) {
                        // It's an external module. First see if the module has an export default and if the local
                        // name of that export default matches.
                        if (result = moduleExports.get("default" /* InternalSymbolName.Default */)) {
                            var localSymbol = (0, ts_1.getLocalSymbolForExportDefault)(result);
                            if (localSymbol && (result.flags & meaning) && localSymbol.escapedName === name) {
                                break loop;
                            }
                            result = undefined;
                        }
                        // Because of module/namespace merging, a module's exports are in scope,
                        // yet we never want to treat an export specifier as putting a member in scope.
                        // Therefore, if the name we find is purely an export specifier, it is not actually considered in scope.
                        // Two things to note about this:
                        //     1. We have to check this without calling getSymbol. The problem with calling getSymbol
                        //        on an export specifier is that it might find the export specifier itself, and try to
                        //        resolve it as an alias. This will cause the checker to consider the export specifier
                        //        a circular alias reference when it might not be.
                        //     2. We check === SymbolFlags.Alias in order to check that the symbol is *purely*
                        //        an alias. If we used &, we'd be throwing out symbols that have non alias aspects,
                        //        which is not the desired behavior.
                        var moduleExport = moduleExports.get(name);
                        if (moduleExport &&
                            moduleExport.flags === 2097152 /* SymbolFlags.Alias */ &&
                            ((0, ts_1.getDeclarationOfKind)(moduleExport, 280 /* SyntaxKind.ExportSpecifier */) || (0, ts_1.getDeclarationOfKind)(moduleExport, 279 /* SyntaxKind.NamespaceExport */))) {
                            break;
                        }
                    }
                    // ES6 exports are also visible locally (except for 'default'), but commonjs exports are not (except typedefs)
                    if (name !== "default" /* InternalSymbolName.Default */ && (result = lookup(moduleExports, name, meaning & 2623475 /* SymbolFlags.ModuleMember */))) {
                        if ((0, ts_1.isSourceFile)(location) && location.commonJsModuleIndicator && !((_b = result.declarations) === null || _b === void 0 ? void 0 : _b.some(ts_1.isJSDocTypeAlias))) {
                            result = undefined;
                        }
                        else {
                            break loop;
                        }
                    }
                    break;
                case 265 /* SyntaxKind.EnumDeclaration */:
                    if (result = lookup(((_c = getSymbolOfDeclaration(location)) === null || _c === void 0 ? void 0 : _c.exports) || emptySymbols, name, meaning & 8 /* SymbolFlags.EnumMember */)) {
                        if (nameNotFoundMessage && (0, ts_1.getIsolatedModules)(compilerOptions) && !(location.flags & 16777216 /* NodeFlags.Ambient */) && (0, ts_1.getSourceFileOfNode)(location) !== (0, ts_1.getSourceFileOfNode)(result.valueDeclaration)) {
                            error(errorLocation, ts_1.Diagnostics.Cannot_access_0_from_another_file_without_qualification_when_1_is_enabled_Use_2_instead, (0, ts_1.unescapeLeadingUnderscores)(name), isolatedModulesLikeFlagName, "".concat((0, ts_1.unescapeLeadingUnderscores)(getSymbolOfNode(location).escapedName), ".").concat((0, ts_1.unescapeLeadingUnderscores)(name)));
                        }
                        break loop;
                    }
                    break;
                case 171 /* SyntaxKind.PropertyDeclaration */:
                    // TypeScript 1.0 spec (April 2014): 8.4.1
                    // Initializer expressions for instance member variables are evaluated in the scope
                    // of the class constructor body but are not permitted to reference parameters or
                    // local variables of the constructor. This effectively means that entities from outer scopes
                    // by the same name as a constructor parameter or local variable are inaccessible
                    // in initializer expressions for instance member variables.
                    if (!(0, ts_1.isStatic)(location)) {
                        var ctor = findConstructorDeclaration(location.parent);
                        if (ctor && ctor.locals) {
                            if (lookup(ctor.locals, name, meaning & 111551 /* SymbolFlags.Value */)) {
                                // Remember the property node, it will be used later to report appropriate error
                                ts_1.Debug.assertNode(location, ts_1.isPropertyDeclaration);
                                propertyWithInvalidInitializer = location;
                            }
                        }
                    }
                    break;
                case 262 /* SyntaxKind.ClassDeclaration */:
                case 230 /* SyntaxKind.ClassExpression */:
                case 263 /* SyntaxKind.InterfaceDeclaration */:
                    // The below is used to lookup type parameters within a class or interface, as they are added to the class/interface locals
                    // These can never be latebound, so the symbol's raw members are sufficient. `getMembersOfNode` cannot be used, as it would
                    // trigger resolving late-bound names, which we may already be in the process of doing while we're here!
                    if (result = lookup(getSymbolOfDeclaration(location).members || emptySymbols, name, meaning & 788968 /* SymbolFlags.Type */)) {
                        if (!isTypeParameterSymbolDeclaredInContainer(result, location)) {
                            // ignore type parameters not declared in this container
                            result = undefined;
                            break;
                        }
                        if (lastLocation && (0, ts_1.isStatic)(lastLocation)) {
                            // TypeScript 1.0 spec (April 2014): 3.4.1
                            // The scope of a type parameter extends over the entire declaration with which the type
                            // parameter list is associated, with the exception of static member declarations in classes.
                            if (nameNotFoundMessage) {
                                error(errorLocation, ts_1.Diagnostics.Static_members_cannot_reference_class_type_parameters);
                            }
                            return undefined;
                        }
                        break loop;
                    }
                    if ((0, ts_1.isClassExpression)(location) && meaning & 32 /* SymbolFlags.Class */) {
                        var className = location.name;
                        if (className && name === className.escapedText) {
                            result = location.symbol;
                            break loop;
                        }
                    }
                    break;
                case 232 /* SyntaxKind.ExpressionWithTypeArguments */:
                    // The type parameters of a class are not in scope in the base class expression.
                    if (lastLocation === location.expression && location.parent.token === 96 /* SyntaxKind.ExtendsKeyword */) {
                        var container = location.parent.parent;
                        if ((0, ts_1.isClassLike)(container) && (result = lookup(getSymbolOfDeclaration(container).members, name, meaning & 788968 /* SymbolFlags.Type */))) {
                            if (nameNotFoundMessage) {
                                error(errorLocation, ts_1.Diagnostics.Base_class_expressions_cannot_reference_class_type_parameters);
                            }
                            return undefined;
                        }
                    }
                    break;
                // It is not legal to reference a class's own type parameters from a computed property name that
                // belongs to the class. For example:
                //
                //   function foo<T>() { return '' }
                //   class C<T> { // <-- Class's own type parameter T
                //       [foo<T>()]() { } // <-- Reference to T from class's own computed property
                //   }
                //
                case 166 /* SyntaxKind.ComputedPropertyName */:
                    grandparent = location.parent.parent;
                    if ((0, ts_1.isClassLike)(grandparent) || grandparent.kind === 263 /* SyntaxKind.InterfaceDeclaration */) {
                        // A reference to this grandparent's type parameters would be an error
                        if (result = lookup(getSymbolOfDeclaration(grandparent).members, name, meaning & 788968 /* SymbolFlags.Type */)) {
                            if (nameNotFoundMessage) {
                                error(errorLocation, ts_1.Diagnostics.A_computed_property_name_cannot_reference_a_type_parameter_from_its_containing_type);
                            }
                            return undefined;
                        }
                    }
                    break;
                case 218 /* SyntaxKind.ArrowFunction */:
                    // when targeting ES6 or higher there is no 'arguments' in an arrow function
                    // for lower compile targets the resolved symbol is used to emit an error
                    if ((0, ts_1.getEmitScriptTarget)(compilerOptions) >= 2 /* ScriptTarget.ES2015 */) {
                        break;
                    }
                // falls through
                case 173 /* SyntaxKind.MethodDeclaration */:
                case 175 /* SyntaxKind.Constructor */:
                case 176 /* SyntaxKind.GetAccessor */:
                case 177 /* SyntaxKind.SetAccessor */:
                case 261 /* SyntaxKind.FunctionDeclaration */:
                    if (meaning & 3 /* SymbolFlags.Variable */ && name === "arguments") {
                        result = argumentsSymbol;
                        break loop;
                    }
                    break;
                case 217 /* SyntaxKind.FunctionExpression */:
                    if (meaning & 3 /* SymbolFlags.Variable */ && name === "arguments") {
                        result = argumentsSymbol;
                        break loop;
                    }
                    if (meaning & 16 /* SymbolFlags.Function */) {
                        var functionName = location.name;
                        if (functionName && name === functionName.escapedText) {
                            result = location.symbol;
                            break loop;
                        }
                    }
                    break;
                case 169 /* SyntaxKind.Decorator */:
                    // Decorators are resolved at the class declaration. Resolving at the parameter
                    // or member would result in looking up locals in the method.
                    //
                    //   function y() {}
                    //   class C {
                    //       method(@y x, y) {} // <-- decorator y should be resolved at the class declaration, not the parameter.
                    //   }
                    //
                    if (location.parent && location.parent.kind === 168 /* SyntaxKind.Parameter */) {
                        location = location.parent;
                    }
                    //
                    //   function y() {}
                    //   class C {
                    //       @y method(x, y) {} // <-- decorator y should be resolved at the class declaration, not the method.
                    //   }
                    //
                    // class Decorators are resolved outside of the class to avoid referencing type parameters of that class.
                    //
                    //   type T = number;
                    //   declare function y(x: T): any;
                    //   @param(1 as T) // <-- T should resolve to the type alias outside of class C
                    //   class C<T> {}
                    if (location.parent && ((0, ts_1.isClassElement)(location.parent) || location.parent.kind === 262 /* SyntaxKind.ClassDeclaration */)) {
                        location = location.parent;
                    }
                    break;
                case 352 /* SyntaxKind.JSDocTypedefTag */:
                case 344 /* SyntaxKind.JSDocCallbackTag */:
                case 346 /* SyntaxKind.JSDocEnumTag */:
                    // js type aliases do not resolve names from their host, so skip past it
                    var root = (0, ts_1.getJSDocRoot)(location);
                    if (root) {
                        location = root.parent;
                    }
                    break;
                case 168 /* SyntaxKind.Parameter */:
                    if (lastLocation && (lastLocation === location.initializer ||
                        lastLocation === location.name && (0, ts_1.isBindingPattern)(lastLocation))) {
                        if (!associatedDeclarationForContainingInitializerOrBindingName) {
                            associatedDeclarationForContainingInitializerOrBindingName = location;
                        }
                    }
                    break;
                case 207 /* SyntaxKind.BindingElement */:
                    if (lastLocation && (lastLocation === location.initializer ||
                        lastLocation === location.name && (0, ts_1.isBindingPattern)(lastLocation))) {
                        if ((0, ts_1.isParameterDeclaration)(location) && !associatedDeclarationForContainingInitializerOrBindingName) {
                            associatedDeclarationForContainingInitializerOrBindingName = location;
                        }
                    }
                    break;
                case 194 /* SyntaxKind.InferType */:
                    if (meaning & 262144 /* SymbolFlags.TypeParameter */) {
                        var parameterName = location.typeParameter.name;
                        if (parameterName && name === parameterName.escapedText) {
                            result = location.typeParameter.symbol;
                            break loop;
                        }
                    }
                    break;
                case 280 /* SyntaxKind.ExportSpecifier */:
                    // External module export bindings shouldn't be resolved to local symbols.
                    if (lastLocation &&
                        lastLocation === location.propertyName &&
                        location.parent.parent.moduleSpecifier) {
                        location = location.parent.parent.parent;
                    }
                    break;
            }
            if (isSelfReferenceLocation(location)) {
                lastSelfReferenceLocation = location;
            }
            lastLocation = location;
            location = (0, ts_1.isJSDocTemplateTag)(location) ? (0, ts_1.getEffectiveContainerForJSDocTemplateTag)(location) || location.parent :
                (0, ts_1.isJSDocParameterTag)(location) || (0, ts_1.isJSDocReturnTag)(location) ? (0, ts_1.getHostSignatureFromJSDoc)(location) || location.parent :
                    location.parent;
        }
        // We just climbed up parents looking for the name, meaning that we started in a descendant node of `lastLocation`.
        // If `result === lastSelfReferenceLocation.symbol`, that means that we are somewhere inside `lastSelfReferenceLocation` looking up a name, and resolving to `lastLocation` itself.
        // That means that this is a self-reference of `lastLocation`, and shouldn't count this when considering whether `lastLocation` is used.
        if (isUse && result && (!lastSelfReferenceLocation || result !== lastSelfReferenceLocation.symbol)) {
            result.isReferenced |= meaning;
        }
        if (!result) {
            if (lastLocation) {
                ts_1.Debug.assertNode(lastLocation, ts_1.isSourceFile);
                if (lastLocation.commonJsModuleIndicator && name === "exports" && meaning & lastLocation.symbol.flags) {
                    return lastLocation.symbol;
                }
            }
            if (!excludeGlobals) {
                result = lookup(globals, name, meaning);
            }
        }
        if (!result) {
            if (originalLocation && (0, ts_1.isInJSFile)(originalLocation) && originalLocation.parent) {
                if ((0, ts_1.isRequireCall)(originalLocation.parent, /*requireStringLiteralLikeArgument*/ false)) {
                    return requireSymbol;
                }
            }
        }
        // The invalid initializer error is needed in two situation:
        // 1. When result is undefined, after checking for a missing "this."
        // 2. When result is defined
        function checkAndReportErrorForInvalidInitializer() {
            if (propertyWithInvalidInitializer && !(useDefineForClassFields && (0, ts_1.getEmitScriptTarget)(compilerOptions) >= 9 /* ScriptTarget.ES2022 */)) {
                // We have a match, but the reference occurred within a property initializer and the identifier also binds
                // to a local variable in the constructor where the code will be emitted. Note that this is actually allowed
                // with ESNext+useDefineForClassFields because the scope semantics are different.
                error(errorLocation, errorLocation && propertyWithInvalidInitializer.type && (0, ts_1.textRangeContainsPositionInclusive)(propertyWithInvalidInitializer.type, errorLocation.pos)
                    ? ts_1.Diagnostics.Type_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor
                    : ts_1.Diagnostics.Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor, (0, ts_1.declarationNameToString)(propertyWithInvalidInitializer.name), diagnosticName(nameArg));
                return true;
            }
            return false;
        }
        if (!result) {
            if (nameNotFoundMessage) {
                addLazyDiagnostic(function () {
                    if (!errorLocation ||
                        errorLocation.parent.kind !== 330 /* SyntaxKind.JSDocLink */ &&
                            !checkAndReportErrorForMissingPrefix(errorLocation, name, nameArg) && // TODO: GH#18217
                            !checkAndReportErrorForInvalidInitializer() &&
                            !checkAndReportErrorForExtendingInterface(errorLocation) &&
                            !checkAndReportErrorForUsingTypeAsNamespace(errorLocation, name, meaning) &&
                            !checkAndReportErrorForExportingPrimitiveType(errorLocation, name) &&
                            !checkAndReportErrorForUsingNamespaceAsTypeOrValue(errorLocation, name, meaning) &&
                            !checkAndReportErrorForUsingTypeAsValue(errorLocation, name, meaning) &&
                            !checkAndReportErrorForUsingValueAsType(errorLocation, name, meaning)) {
                        var suggestion = void 0;
                        var suggestedLib = void 0;
                        // Report missing lib first
                        if (nameArg) {
                            suggestedLib = getSuggestedLibForNonExistentName(nameArg);
                            if (suggestedLib) {
                                error(errorLocation, nameNotFoundMessage, diagnosticName(nameArg), suggestedLib);
                            }
                        }
                        // then spelling suggestions
                        if (!suggestedLib && getSpellingSuggestions && suggestionCount < maximumSuggestionCount) {
                            suggestion = getSuggestedSymbolForNonexistentSymbol(originalLocation, name, meaning);
                            var isGlobalScopeAugmentationDeclaration = (suggestion === null || suggestion === void 0 ? void 0 : suggestion.valueDeclaration) && (0, ts_1.isAmbientModule)(suggestion.valueDeclaration) && (0, ts_1.isGlobalScopeAugmentation)(suggestion.valueDeclaration);
                            if (isGlobalScopeAugmentationDeclaration) {
                                suggestion = undefined;
                            }
                            if (suggestion) {
                                var suggestionName = symbolToString(suggestion);
                                var isUncheckedJS = isUncheckedJSSuggestion(originalLocation, suggestion, /*excludeClasses*/ false);
                                var message = meaning === 1920 /* SymbolFlags.Namespace */ || nameArg && typeof nameArg !== "string" && (0, ts_1.nodeIsSynthesized)(nameArg) ? ts_1.Diagnostics.Cannot_find_namespace_0_Did_you_mean_1
                                    : isUncheckedJS ? ts_1.Diagnostics.Could_not_find_name_0_Did_you_mean_1
                                        : ts_1.Diagnostics.Cannot_find_name_0_Did_you_mean_1;
                                var diagnostic = createError(errorLocation, message, diagnosticName(nameArg), suggestionName);
                                addErrorOrSuggestion(!isUncheckedJS, diagnostic);
                                if (suggestion.valueDeclaration) {
                                    (0, ts_1.addRelatedInfo)(diagnostic, (0, ts_1.createDiagnosticForNode)(suggestion.valueDeclaration, ts_1.Diagnostics._0_is_declared_here, suggestionName));
                                }
                            }
                        }
                        // And then fall back to unspecified "not found"
                        if (!suggestion && !suggestedLib && nameArg) {
                            error(errorLocation, nameNotFoundMessage, diagnosticName(nameArg));
                        }
                        suggestionCount++;
                    }
                });
            }
            return undefined;
        }
        else if (nameNotFoundMessage && checkAndReportErrorForInvalidInitializer()) {
            return undefined;
        }
        // Perform extra checks only if error reporting was requested
        if (nameNotFoundMessage) {
            addLazyDiagnostic(function () {
                // Only check for block-scoped variable if we have an error location and are looking for the
                // name with variable meaning
                //      For example,
                //          declare module foo {
                //              interface bar {}
                //          }
                //      const foo/*1*/: foo/*2*/.bar;
                // The foo at /*1*/ and /*2*/ will share same symbol with two meanings:
                // block-scoped variable and namespace module. However, only when we
                // try to resolve name in /*1*/ which is used in variable position,
                // we want to check for block-scoped
                if (errorLocation &&
                    (meaning & 2 /* SymbolFlags.BlockScopedVariable */ ||
                        ((meaning & 32 /* SymbolFlags.Class */ || meaning & 384 /* SymbolFlags.Enum */) && (meaning & 111551 /* SymbolFlags.Value */) === 111551 /* SymbolFlags.Value */))) {
                    var exportOrLocalSymbol = getExportSymbolOfValueSymbolIfExported(result);
                    if (exportOrLocalSymbol.flags & 2 /* SymbolFlags.BlockScopedVariable */ || exportOrLocalSymbol.flags & 32 /* SymbolFlags.Class */ || exportOrLocalSymbol.flags & 384 /* SymbolFlags.Enum */) {
                        checkResolvedBlockScopedVariable(exportOrLocalSymbol, errorLocation);
                    }
                }
                // If we're in an external module, we can't reference value symbols created from UMD export declarations
                if (result && isInExternalModule && (meaning & 111551 /* SymbolFlags.Value */) === 111551 /* SymbolFlags.Value */ && !(originalLocation.flags & 8388608 /* NodeFlags.JSDoc */)) {
                    var merged = getMergedSymbol(result);
                    if ((0, ts_1.length)(merged.declarations) && (0, ts_1.every)(merged.declarations, function (d) { return (0, ts_1.isNamespaceExportDeclaration)(d) || (0, ts_1.isSourceFile)(d) && !!d.symbol.globalExports; })) {
                        errorOrSuggestion(!compilerOptions.allowUmdGlobalAccess, errorLocation, ts_1.Diagnostics._0_refers_to_a_UMD_global_but_the_current_file_is_a_module_Consider_adding_an_import_instead, (0, ts_1.unescapeLeadingUnderscores)(name));
                    }
                }
                // If we're in a parameter initializer or binding name, we can't reference the values of the parameter whose initializer we're within or parameters to the right
                if (result && associatedDeclarationForContainingInitializerOrBindingName && !withinDeferredContext && (meaning & 111551 /* SymbolFlags.Value */) === 111551 /* SymbolFlags.Value */) {
                    var candidate = getMergedSymbol(getLateBoundSymbol(result));
                    var root = (0, ts_1.getRootDeclaration)(associatedDeclarationForContainingInitializerOrBindingName);
                    // A parameter initializer or binding pattern initializer within a parameter cannot refer to itself
                    if (candidate === getSymbolOfDeclaration(associatedDeclarationForContainingInitializerOrBindingName)) {
                        error(errorLocation, ts_1.Diagnostics.Parameter_0_cannot_reference_itself, (0, ts_1.declarationNameToString)(associatedDeclarationForContainingInitializerOrBindingName.name));
                    }
                    // And it cannot refer to any declarations which come after it
                    else if (candidate.valueDeclaration && candidate.valueDeclaration.pos > associatedDeclarationForContainingInitializerOrBindingName.pos && root.parent.locals && lookup(root.parent.locals, candidate.escapedName, meaning) === candidate) {
                        error(errorLocation, ts_1.Diagnostics.Parameter_0_cannot_reference_identifier_1_declared_after_it, (0, ts_1.declarationNameToString)(associatedDeclarationForContainingInitializerOrBindingName.name), (0, ts_1.declarationNameToString)(errorLocation));
                    }
                }
                if (result && errorLocation && meaning & 111551 /* SymbolFlags.Value */ && result.flags & 2097152 /* SymbolFlags.Alias */ && !(result.flags & 111551 /* SymbolFlags.Value */) && !(0, ts_1.isValidTypeOnlyAliasUseSite)(errorLocation)) {
                    var typeOnlyDeclaration = getTypeOnlyAliasDeclaration(result, 111551 /* SymbolFlags.Value */);
                    if (typeOnlyDeclaration) {
                        var message = typeOnlyDeclaration.kind === 280 /* SyntaxKind.ExportSpecifier */ || typeOnlyDeclaration.kind === 277 /* SyntaxKind.ExportDeclaration */ || typeOnlyDeclaration.kind === 279 /* SyntaxKind.NamespaceExport */
                            ? ts_1.Diagnostics._0_cannot_be_used_as_a_value_because_it_was_exported_using_export_type
                            : ts_1.Diagnostics._0_cannot_be_used_as_a_value_because_it_was_imported_using_import_type;
                        var unescapedName = (0, ts_1.unescapeLeadingUnderscores)(name);
                        addTypeOnlyDeclarationRelatedInfo(error(errorLocation, message, unescapedName), typeOnlyDeclaration, unescapedName);
                    }
                }
            });
        }
        return result;
    }
    function addTypeOnlyDeclarationRelatedInfo(diagnostic, typeOnlyDeclaration, unescapedName) {
        if (!typeOnlyDeclaration)
            return diagnostic;
        return (0, ts_1.addRelatedInfo)(diagnostic, (0, ts_1.createDiagnosticForNode)(typeOnlyDeclaration, typeOnlyDeclaration.kind === 280 /* SyntaxKind.ExportSpecifier */ || typeOnlyDeclaration.kind === 277 /* SyntaxKind.ExportDeclaration */ || typeOnlyDeclaration.kind === 279 /* SyntaxKind.NamespaceExport */
            ? ts_1.Diagnostics._0_was_exported_here
            : ts_1.Diagnostics._0_was_imported_here, unescapedName));
    }
    function getIsDeferredContext(location, lastLocation) {
        if (location.kind !== 218 /* SyntaxKind.ArrowFunction */ && location.kind !== 217 /* SyntaxKind.FunctionExpression */) {
            // initializers in instance property declaration of class like entities are executed in constructor and thus deferred
            return (0, ts_1.isTypeQueryNode)(location) || (((0, ts_1.isFunctionLikeDeclaration)(location) ||
                (location.kind === 171 /* SyntaxKind.PropertyDeclaration */ && !(0, ts_1.isStatic)(location))) && (!lastLocation || lastLocation !== location.name)); // A name is evaluated within the enclosing scope - so it shouldn't count as deferred
        }
        if (lastLocation && lastLocation === location.name) {
            return false;
        }
        // generator functions and async functions are not inlined in control flow when immediately invoked
        if (location.asteriskToken || (0, ts_1.hasSyntacticModifier)(location, 512 /* ModifierFlags.Async */)) {
            return true;
        }
        return !(0, ts_1.getImmediatelyInvokedFunctionExpression)(location);
    }
    function isSelfReferenceLocation(node) {
        switch (node.kind) {
            case 261 /* SyntaxKind.FunctionDeclaration */:
            case 262 /* SyntaxKind.ClassDeclaration */:
            case 263 /* SyntaxKind.InterfaceDeclaration */:
            case 265 /* SyntaxKind.EnumDeclaration */:
            case 264 /* SyntaxKind.TypeAliasDeclaration */:
            case 266 /* SyntaxKind.ModuleDeclaration */: // For `namespace N { N; }`
                return true;
            default:
                return false;
        }
    }
    function diagnosticName(nameArg) {
        return (0, ts_1.isString)(nameArg) ? (0, ts_1.unescapeLeadingUnderscores)(nameArg) : (0, ts_1.declarationNameToString)(nameArg);
    }
    function isTypeParameterSymbolDeclaredInContainer(symbol, container) {
        if (symbol.declarations) {
            for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {
                var decl = _a[_i];
                if (decl.kind === 167 /* SyntaxKind.TypeParameter */) {
                    var parent_1 = (0, ts_1.isJSDocTemplateTag)(decl.parent) ? (0, ts_1.getJSDocHost)(decl.parent) : decl.parent;
                    if (parent_1 === container) {
                        return !((0, ts_1.isJSDocTemplateTag)(decl.parent) && (0, ts_1.find)(decl.parent.parent.tags, ts_1.isJSDocTypeAlias));
                    }
                }
            }
        }
        return false;
    }
    function checkAndReportErrorForMissingPrefix(errorLocation, name, nameArg) {
        if (!(0, ts_1.isIdentifier)(errorLocation) || errorLocation.escapedText !== name || isTypeReferenceIdentifier(errorLocation) || isInTypeQuery(errorLocation)) {
            return false;
        }
        var container = (0, ts_1.getThisContainer)(errorLocation, /*includeArrowFunctions*/ false, /*includeClassComputedPropertyName*/ false);
        var location = container;
        while (location) {
            if ((0, ts_1.isClassLike)(location.parent)) {
                var classSymbol = getSymbolOfDeclaration(location.parent);
                if (!classSymbol) {
                    break;
                }
                // Check to see if a static member exists.
                var constructorType = getTypeOfSymbol(classSymbol);
                if (getPropertyOfType(constructorType, name)) {
                    error(errorLocation, ts_1.Diagnostics.Cannot_find_name_0_Did_you_mean_the_static_member_1_0, diagnosticName(nameArg), symbolToString(classSymbol));
                    return true;
                }
                // No static member is present.
                // Check if we're in an instance method and look for a relevant instance member.
                if (location === container && !(0, ts_1.isStatic)(location)) {
                    var instanceType = getDeclaredTypeOfSymbol(classSymbol).thisType; // TODO: GH#18217
                    if (getPropertyOfType(instanceType, name)) {
                        error(errorLocation, ts_1.Diagnostics.Cannot_find_name_0_Did_you_mean_the_instance_member_this_0, diagnosticName(nameArg));
                        return true;
                    }
                }
            }
            location = location.parent;
        }
        return false;
    }
    function checkAndReportErrorForExtendingInterface(errorLocation) {
        var expression = getEntityNameForExtendingInterface(errorLocation);
        if (expression && resolveEntityName(expression, 64 /* SymbolFlags.Interface */, /*ignoreErrors*/ true)) {
            error(errorLocation, ts_1.Diagnostics.Cannot_extend_an_interface_0_Did_you_mean_implements, (0, ts_1.getTextOfNode)(expression));
            return true;
        }
        return false;
    }
    /**
     * Climbs up parents to an ExpressionWithTypeArguments, and returns its expression,
     * but returns undefined if that expression is not an EntityNameExpression.
     */
    function getEntityNameForExtendingInterface(node) {
        switch (node.kind) {
            case 80 /* SyntaxKind.Identifier */:
            case 210 /* SyntaxKind.PropertyAccessExpression */:
                return node.parent ? getEntityNameForExtendingInterface(node.parent) : undefined;
            case 232 /* SyntaxKind.ExpressionWithTypeArguments */:
                if ((0, ts_1.isEntityNameExpression)(node.expression)) {
                    return node.expression;
                }
            // falls through
            default:
                return undefined;
        }
    }
    function checkAndReportErrorForUsingTypeAsNamespace(errorLocation, name, meaning) {
        var namespaceMeaning = 1920 /* SymbolFlags.Namespace */ | ((0, ts_1.isInJSFile)(errorLocation) ? 111551 /* SymbolFlags.Value */ : 0);
        if (meaning === namespaceMeaning) {
            var symbol = resolveSymbol(resolveName(errorLocation, name, 788968 /* SymbolFlags.Type */ & ~namespaceMeaning, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ false));
            var parent_2 = errorLocation.parent;
            if (symbol) {
                if ((0, ts_1.isQualifiedName)(parent_2)) {
                    ts_1.Debug.assert(parent_2.left === errorLocation, "Should only be resolving left side of qualified name as a namespace");
                    var propName = parent_2.right.escapedText;
                    var propType = getPropertyOfType(getDeclaredTypeOfSymbol(symbol), propName);
                    if (propType) {
                        error(parent_2, ts_1.Diagnostics.Cannot_access_0_1_because_0_is_a_type_but_not_a_namespace_Did_you_mean_to_retrieve_the_type_of_the_property_1_in_0_with_0_1, (0, ts_1.unescapeLeadingUnderscores)(name), (0, ts_1.unescapeLeadingUnderscores)(propName));
                        return true;
                    }
                }
                error(errorLocation, ts_1.Diagnostics._0_only_refers_to_a_type_but_is_being_used_as_a_namespace_here, (0, ts_1.unescapeLeadingUnderscores)(name));
                return true;
            }
        }
        return false;
    }
    function checkAndReportErrorForUsingValueAsType(errorLocation, name, meaning) {
        if (meaning & (788968 /* SymbolFlags.Type */ & ~1920 /* SymbolFlags.Namespace */)) {
            var symbol = resolveSymbol(resolveName(errorLocation, name, ~788968 /* SymbolFlags.Type */ & 111551 /* SymbolFlags.Value */, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ false));
            if (symbol && !(symbol.flags & 1920 /* SymbolFlags.Namespace */)) {
                error(errorLocation, ts_1.Diagnostics._0_refers_to_a_value_but_is_being_used_as_a_type_here_Did_you_mean_typeof_0, (0, ts_1.unescapeLeadingUnderscores)(name));
                return true;
            }
        }
        return false;
    }
    function isPrimitiveTypeName(name) {
        return name === "any" || name === "string" || name === "number" || name === "boolean" || name === "never" || name === "unknown";
    }
    function checkAndReportErrorForExportingPrimitiveType(errorLocation, name) {
        if (isPrimitiveTypeName(name) && errorLocation.parent.kind === 280 /* SyntaxKind.ExportSpecifier */) {
            error(errorLocation, ts_1.Diagnostics.Cannot_export_0_Only_local_declarations_can_be_exported_from_a_module, name);
            return true;
        }
        return false;
    }
    function checkAndReportErrorForUsingTypeAsValue(errorLocation, name, meaning) {
        if (meaning & 111551 /* SymbolFlags.Value */) {
            if (isPrimitiveTypeName(name)) {
                if (isExtendedByInterface(errorLocation)) {
                    error(errorLocation, ts_1.Diagnostics.An_interface_cannot_extend_a_primitive_type_like_0_an_interface_can_only_extend_named_types_and_classes, (0, ts_1.unescapeLeadingUnderscores)(name));
                }
                else {
                    error(errorLocation, ts_1.Diagnostics._0_only_refers_to_a_type_but_is_being_used_as_a_value_here, (0, ts_1.unescapeLeadingUnderscores)(name));
                }
                return true;
            }
            var symbol = resolveSymbol(resolveName(errorLocation, name, 788968 /* SymbolFlags.Type */ & ~111551 /* SymbolFlags.Value */, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ false));
            var allFlags = symbol && getAllSymbolFlags(symbol);
            if (symbol && allFlags !== undefined && !(allFlags & 111551 /* SymbolFlags.Value */)) {
                var rawName = (0, ts_1.unescapeLeadingUnderscores)(name);
                if (isES2015OrLaterConstructorName(name)) {
                    error(errorLocation, ts_1.Diagnostics._0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_es2015_or_later, rawName);
                }
                else if (maybeMappedType(errorLocation, symbol)) {
                    error(errorLocation, ts_1.Diagnostics._0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Did_you_mean_to_use_1_in_0, rawName, rawName === "K" ? "P" : "K");
                }
                else {
                    error(errorLocation, ts_1.Diagnostics._0_only_refers_to_a_type_but_is_being_used_as_a_value_here, rawName);
                }
                return true;
            }
        }
        return false;
    }
    function isExtendedByInterface(node) {
        var grandparent = node.parent.parent;
        var parentOfGrandparent = grandparent.parent;
        if (grandparent && parentOfGrandparent) {
            var isExtending = (0, ts_1.isHeritageClause)(grandparent) && grandparent.token === 96 /* SyntaxKind.ExtendsKeyword */;
            var isInterface = (0, ts_1.isInterfaceDeclaration)(parentOfGrandparent);
            return isExtending && isInterface;
        }
        return false;
    }
    function maybeMappedType(node, symbol) {
        var container = (0, ts_1.findAncestor)(node.parent, function (n) {
            return (0, ts_1.isComputedPropertyName)(n) || (0, ts_1.isPropertySignature)(n) ? false : (0, ts_1.isTypeLiteralNode)(n) || "quit";
        });
        if (container && container.members.length === 1) {
            var type = getDeclaredTypeOfSymbol(symbol);
            return !!(type.flags & 1048576 /* TypeFlags.Union */) && allTypesAssignableToKind(type, 384 /* TypeFlags.StringOrNumberLiteral */, /*strict*/ true);
        }
        return false;
    }
    function isES2015OrLaterConstructorName(n) {
        switch (n) {
            case "Promise":
            case "Symbol":
            case "Map":
            case "WeakMap":
            case "Set":
            case "WeakSet":
                return true;
        }
        return false;
    }
    function checkAndReportErrorForUsingNamespaceAsTypeOrValue(errorLocation, name, meaning) {
        if (meaning & (111551 /* SymbolFlags.Value */ & ~788968 /* SymbolFlags.Type */)) {
            var symbol = resolveSymbol(resolveName(errorLocation, name, 1024 /* SymbolFlags.NamespaceModule */, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ false));
            if (symbol) {
                error(errorLocation, ts_1.Diagnostics.Cannot_use_namespace_0_as_a_value, (0, ts_1.unescapeLeadingUnderscores)(name));
                return true;
            }
        }
        else if (meaning & (788968 /* SymbolFlags.Type */ & ~111551 /* SymbolFlags.Value */)) {
            var symbol = resolveSymbol(resolveName(errorLocation, name, 1536 /* SymbolFlags.Module */, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ false));
            if (symbol) {
                error(errorLocation, ts_1.Diagnostics.Cannot_use_namespace_0_as_a_type, (0, ts_1.unescapeLeadingUnderscores)(name));
                return true;
            }
        }
        return false;
    }
    function checkResolvedBlockScopedVariable(result, errorLocation) {
        var _a;
        ts_1.Debug.assert(!!(result.flags & 2 /* SymbolFlags.BlockScopedVariable */ || result.flags & 32 /* SymbolFlags.Class */ || result.flags & 384 /* SymbolFlags.Enum */));
        if (result.flags & (16 /* SymbolFlags.Function */ | 1 /* SymbolFlags.FunctionScopedVariable */ | 67108864 /* SymbolFlags.Assignment */) && result.flags & 32 /* SymbolFlags.Class */) {
            // constructor functions aren't block scoped
            return;
        }
        // Block-scoped variables cannot be used before their definition
        var declaration = (_a = result.declarations) === null || _a === void 0 ? void 0 : _a.find(function (d) { return (0, ts_1.isBlockOrCatchScoped)(d) || (0, ts_1.isClassLike)(d) || (d.kind === 265 /* SyntaxKind.EnumDeclaration */); });
        if (declaration === undefined)
            return ts_1.Debug.fail("checkResolvedBlockScopedVariable could not find block-scoped declaration");
        if (!(declaration.flags & 16777216 /* NodeFlags.Ambient */) && !isBlockScopedNameDeclaredBeforeUse(declaration, errorLocation)) {
            var diagnosticMessage = void 0;
            var declarationName = (0, ts_1.declarationNameToString)((0, ts_1.getNameOfDeclaration)(declaration));
            if (result.flags & 2 /* SymbolFlags.BlockScopedVariable */) {
                diagnosticMessage = error(errorLocation, ts_1.Diagnostics.Block_scoped_variable_0_used_before_its_declaration, declarationName);
            }
            else if (result.flags & 32 /* SymbolFlags.Class */) {
                diagnosticMessage = error(errorLocation, ts_1.Diagnostics.Class_0_used_before_its_declaration, declarationName);
            }
            else if (result.flags & 256 /* SymbolFlags.RegularEnum */) {
                diagnosticMessage = error(errorLocation, ts_1.Diagnostics.Enum_0_used_before_its_declaration, declarationName);
            }
            if (diagnosticMessage) {
                (0, ts_1.addRelatedInfo)(diagnosticMessage, (0, ts_1.createDiagnosticForNode)(declaration, ts_1.Diagnostics._0_is_declared_here, declarationName));
            }
        }
    }
    /* Starting from 'initial' node walk up the parent chain until 'stopAt' node is reached.
     * If at any point current node is equal to 'parent' node - return true.
     * If current node is an IIFE, continue walking up.
     * Return false if 'stopAt' node is reached or isFunctionLike(current) === true.
     */
    function isSameScopeDescendentOf(initial, parent, stopAt) {
        return !!parent && !!(0, ts_1.findAncestor)(initial, function (n) { return n === parent
            || (n === stopAt || (0, ts_1.isFunctionLike)(n) && (!(0, ts_1.getImmediatelyInvokedFunctionExpression)(n) || (0, ts_1.isAsyncFunction)(n)) ? "quit" : false); });
    }
    function getAnyImportSyntax(node) {
        switch (node.kind) {
            case 270 /* SyntaxKind.ImportEqualsDeclaration */:
                return node;
            case 272 /* SyntaxKind.ImportClause */:
                return node.parent;
            case 273 /* SyntaxKind.NamespaceImport */:
                return node.parent.parent;
            case 275 /* SyntaxKind.ImportSpecifier */:
                return node.parent.parent.parent;
            default:
                return undefined;
        }
    }
    function getDeclarationOfAliasSymbol(symbol) {
        return symbol.declarations && (0, ts_1.findLast)(symbol.declarations, isAliasSymbolDeclaration);
    }
    /**
     * An alias symbol is created by one of the following declarations:
     * import <symbol> = ...
     * import <symbol> from ...
     * import * as <symbol> from ...
     * import { x as <symbol> } from ...
     * export { x as <symbol> } from ...
     * export * as ns <symbol> from ...
     * export = <EntityNameExpression>
     * export default <EntityNameExpression>
     * module.exports = <EntityNameExpression>
     * {<Identifier>}
     * {name: <EntityNameExpression>}
     * const { x } = require ...
     */
    function isAliasSymbolDeclaration(node) {
        return node.kind === 270 /* SyntaxKind.ImportEqualsDeclaration */
            || node.kind === 269 /* SyntaxKind.NamespaceExportDeclaration */
            || node.kind === 272 /* SyntaxKind.ImportClause */ && !!node.name
            || node.kind === 273 /* SyntaxKind.NamespaceImport */
            || node.kind === 279 /* SyntaxKind.NamespaceExport */
            || node.kind === 275 /* SyntaxKind.ImportSpecifier */
            || node.kind === 280 /* SyntaxKind.ExportSpecifier */
            || node.kind === 276 /* SyntaxKind.ExportAssignment */ && (0, ts_1.exportAssignmentIsAlias)(node)
            || (0, ts_1.isBinaryExpression)(node) && (0, ts_1.getAssignmentDeclarationKind)(node) === 2 /* AssignmentDeclarationKind.ModuleExports */ && (0, ts_1.exportAssignmentIsAlias)(node)
            || (0, ts_1.isAccessExpression)(node)
                && (0, ts_1.isBinaryExpression)(node.parent)
                && node.parent.left === node
                && node.parent.operatorToken.kind === 64 /* SyntaxKind.EqualsToken */
                && isAliasableOrJsExpression(node.parent.right)
            || node.kind === 303 /* SyntaxKind.ShorthandPropertyAssignment */
            || node.kind === 302 /* SyntaxKind.PropertyAssignment */ && isAliasableOrJsExpression(node.initializer)
            || node.kind === 259 /* SyntaxKind.VariableDeclaration */ && (0, ts_1.isVariableDeclarationInitializedToBareOrAccessedRequire)(node)
            || node.kind === 207 /* SyntaxKind.BindingElement */ && (0, ts_1.isVariableDeclarationInitializedToBareOrAccessedRequire)(node.parent.parent);
    }
    function isAliasableOrJsExpression(e) {
        return (0, ts_1.isAliasableExpression)(e) || (0, ts_1.isFunctionExpression)(e) && isJSConstructor(e);
    }
    function getTargetOfImportEqualsDeclaration(node, dontResolveAlias) {
        var commonJSPropertyAccess = getCommonJSPropertyAccess(node);
        if (commonJSPropertyAccess) {
            var name_1 = (0, ts_1.getLeftmostAccessExpression)(commonJSPropertyAccess.expression).arguments[0];
            return (0, ts_1.isIdentifier)(commonJSPropertyAccess.name)
                ? resolveSymbol(getPropertyOfType(resolveExternalModuleTypeByLiteral(name_1), commonJSPropertyAccess.name.escapedText))
                : undefined;
        }
        if ((0, ts_1.isVariableDeclaration)(node) || node.moduleReference.kind === 282 /* SyntaxKind.ExternalModuleReference */) {
            var immediate = resolveExternalModuleName(node, (0, ts_1.getExternalModuleRequireArgument)(node) || (0, ts_1.getExternalModuleImportEqualsDeclarationExpression)(node));
            var resolved_1 = resolveExternalModuleSymbol(immediate);
            markSymbolOfAliasDeclarationIfTypeOnly(node, immediate, resolved_1, /*overwriteEmpty*/ false);
            return resolved_1;
        }
        var resolved = getSymbolOfPartOfRightHandSideOfImportEquals(node.moduleReference, dontResolveAlias);
        checkAndReportErrorForResolvingImportAliasToTypeOnlySymbol(node, resolved);
        return resolved;
    }
    function checkAndReportErrorForResolvingImportAliasToTypeOnlySymbol(node, resolved) {
        if (markSymbolOfAliasDeclarationIfTypeOnly(node, /*immediateTarget*/ undefined, resolved, /*overwriteEmpty*/ false) && !node.isTypeOnly) {
            var typeOnlyDeclaration = getTypeOnlyAliasDeclaration(getSymbolOfDeclaration(node));
            var isExport = typeOnlyDeclaration.kind === 280 /* SyntaxKind.ExportSpecifier */ || typeOnlyDeclaration.kind === 277 /* SyntaxKind.ExportDeclaration */;
            var message = isExport
                ? ts_1.Diagnostics.An_import_alias_cannot_reference_a_declaration_that_was_exported_using_export_type
                : ts_1.Diagnostics.An_import_alias_cannot_reference_a_declaration_that_was_imported_using_import_type;
            var relatedMessage = isExport
                ? ts_1.Diagnostics._0_was_exported_here
                : ts_1.Diagnostics._0_was_imported_here;
            // TODO: how to get name for export *?
            var name_2 = typeOnlyDeclaration.kind === 277 /* SyntaxKind.ExportDeclaration */ ? "*" : (0, ts_1.unescapeLeadingUnderscores)(typeOnlyDeclaration.name.escapedText);
            (0, ts_1.addRelatedInfo)(error(node.moduleReference, message), (0, ts_1.createDiagnosticForNode)(typeOnlyDeclaration, relatedMessage, name_2));
        }
    }
    function resolveExportByName(moduleSymbol, name, sourceNode, dontResolveAlias) {
        var exportValue = moduleSymbol.exports.get("export=" /* InternalSymbolName.ExportEquals */);
        var exportSymbol = exportValue
            ? getPropertyOfType(getTypeOfSymbol(exportValue), name, /*skipObjectFunctionPropertyAugment*/ true)
            : moduleSymbol.exports.get(name);
        var resolved = resolveSymbol(exportSymbol, dontResolveAlias);
        markSymbolOfAliasDeclarationIfTypeOnly(sourceNode, exportSymbol, resolved, /*overwriteEmpty*/ false);
        return resolved;
    }
    function isSyntacticDefault(node) {
        return (((0, ts_1.isExportAssignment)(node) && !node.isExportEquals) || (0, ts_1.hasSyntacticModifier)(node, 1024 /* ModifierFlags.Default */) || (0, ts_1.isExportSpecifier)(node));
    }
    function getUsageModeForExpression(usage) {
        return (0, ts_1.isStringLiteralLike)(usage) ? (0, ts_1.getModeForUsageLocation)((0, ts_1.getSourceFileOfNode)(usage), usage) : undefined;
    }
    function isESMFormatImportImportingCommonjsFormatFile(usageMode, targetMode) {
        return usageMode === ts_1.ModuleKind.ESNext && targetMode === ts_1.ModuleKind.CommonJS;
    }
    function isOnlyImportedAsDefault(usage) {
        var usageMode = getUsageModeForExpression(usage);
        return usageMode === ts_1.ModuleKind.ESNext && (0, ts_1.endsWith)(usage.text, ".json" /* Extension.Json */);
    }
    function canHaveSyntheticDefault(file, moduleSymbol, dontResolveAlias, usage) {
        var usageMode = file && getUsageModeForExpression(usage);
        if (file && usageMode !== undefined) {
            var result = isESMFormatImportImportingCommonjsFormatFile(usageMode, file.impliedNodeFormat);
            if (usageMode === ts_1.ModuleKind.ESNext || result) {
                return result;
            }
            // fallthrough on cjs usages so we imply defaults for interop'd imports, too
        }
        if (!allowSyntheticDefaultImports) {
            return false;
        }
        // Declaration files (and ambient modules)
        if (!file || file.isDeclarationFile) {
            // Definitely cannot have a synthetic default if they have a syntactic default member specified
            var defaultExportSymbol = resolveExportByName(moduleSymbol, "default" /* InternalSymbolName.Default */, /*sourceNode*/ undefined, /*dontResolveAlias*/ true); // Dont resolve alias because we want the immediately exported symbol's declaration
            if (defaultExportSymbol && (0, ts_1.some)(defaultExportSymbol.declarations, isSyntacticDefault)) {
                return false;
            }
            // It _might_ still be incorrect to assume there is no __esModule marker on the import at runtime, even if there is no `default` member
            // So we check a bit more,
            if (resolveExportByName(moduleSymbol, (0, ts_1.escapeLeadingUnderscores)("__esModule"), /*sourceNode*/ undefined, dontResolveAlias)) {
                // If there is an `__esModule` specified in the declaration (meaning someone explicitly added it or wrote it in their code),
                // it definitely is a module and does not have a synthetic default
                return false;
            }
            // There are _many_ declaration files not written with esmodules in mind that still get compiled into a format with __esModule set
            // Meaning there may be no default at runtime - however to be on the permissive side, we allow access to a synthetic default member
            // as there is no marker to indicate if the accompanying JS has `__esModule` or not, or is even native esm
            return true;
        }
        // TypeScript files never have a synthetic default (as they are always emitted with an __esModule marker) _unless_ they contain an export= statement
        if (!(0, ts_1.isSourceFileJS)(file)) {
            return hasExportAssignmentSymbol(moduleSymbol);
        }
        // JS files have a synthetic default if they do not contain ES2015+ module syntax (export = is not valid in js) _and_ do not have an __esModule marker
        return typeof file.externalModuleIndicator !== "object" && !resolveExportByName(moduleSymbol, (0, ts_1.escapeLeadingUnderscores)("__esModule"), /*sourceNode*/ undefined, dontResolveAlias);
    }
    function getTargetOfImportClause(node, dontResolveAlias) {
        var moduleSymbol = resolveExternalModuleName(node, node.parent.moduleSpecifier);
        if (moduleSymbol) {
            return getTargetofModuleDefault(moduleSymbol, node, dontResolveAlias);
        }
    }
    function getTargetofModuleDefault(moduleSymbol, node, dontResolveAlias) {
        var _a;
        var exportDefaultSymbol;
        if ((0, ts_1.isShorthandAmbientModuleSymbol)(moduleSymbol)) {
            exportDefaultSymbol = moduleSymbol;
        }
        else {
            exportDefaultSymbol = resolveExportByName(moduleSymbol, "default" /* InternalSymbolName.Default */, node, dontResolveAlias);
        }
        var file = (_a = moduleSymbol.declarations) === null || _a === void 0 ? void 0 : _a.find(ts_1.isSourceFile);
        var specifier = getModuleSpecifierForImportOrExport(node);
        if (!specifier) {
            return exportDefaultSymbol;
        }
        var hasDefaultOnly = isOnlyImportedAsDefault(specifier);
        var hasSyntheticDefault = canHaveSyntheticDefault(file, moduleSymbol, dontResolveAlias, specifier);
        if (!exportDefaultSymbol && !hasSyntheticDefault && !hasDefaultOnly) {
            if (hasExportAssignmentSymbol(moduleSymbol) && !allowSyntheticDefaultImports) {
                var compilerOptionName = moduleKind >= ts_1.ModuleKind.ES2015 ? "allowSyntheticDefaultImports" : "esModuleInterop";
                var exportEqualsSymbol = moduleSymbol.exports.get("export=" /* InternalSymbolName.ExportEquals */);
                var exportAssignment = exportEqualsSymbol.valueDeclaration;
                var err = error(node.name, ts_1.Diagnostics.Module_0_can_only_be_default_imported_using_the_1_flag, symbolToString(moduleSymbol), compilerOptionName);
                if (exportAssignment) {
                    (0, ts_1.addRelatedInfo)(err, (0, ts_1.createDiagnosticForNode)(exportAssignment, ts_1.Diagnostics.This_module_is_declared_with_export_and_can_only_be_used_with_a_default_import_when_using_the_0_flag, compilerOptionName));
                }
            }
            else if ((0, ts_1.isImportClause)(node)) {
                reportNonDefaultExport(moduleSymbol, node);
            }
            else {
                errorNoModuleMemberSymbol(moduleSymbol, moduleSymbol, node, (0, ts_1.isImportOrExportSpecifier)(node) && node.propertyName || node.name);
            }
        }
        else if (hasSyntheticDefault || hasDefaultOnly) {
            // per emit behavior, a synthetic default overrides a "real" .default member if `__esModule` is not present
            var resolved = resolveExternalModuleSymbol(moduleSymbol, dontResolveAlias) || resolveSymbol(moduleSymbol, dontResolveAlias);
            markSymbolOfAliasDeclarationIfTypeOnly(node, moduleSymbol, resolved, /*overwriteEmpty*/ false);
            return resolved;
        }
        markSymbolOfAliasDeclarationIfTypeOnly(node, exportDefaultSymbol, /*finalTarget*/ undefined, /*overwriteEmpty*/ false);
        return exportDefaultSymbol;
    }
    function getModuleSpecifierForImportOrExport(node) {
        switch (node.kind) {
            case 272 /* SyntaxKind.ImportClause */: return node.parent.moduleSpecifier;
            case 270 /* SyntaxKind.ImportEqualsDeclaration */: return (0, ts_1.isExternalModuleReference)(node.moduleReference) ? node.moduleReference.expression : undefined;
            case 273 /* SyntaxKind.NamespaceImport */: return node.parent.parent.moduleSpecifier;
            case 275 /* SyntaxKind.ImportSpecifier */: return node.parent.parent.parent.moduleSpecifier;
            case 280 /* SyntaxKind.ExportSpecifier */: return node.parent.parent.moduleSpecifier;
            default: return ts_1.Debug.assertNever(node);
        }
    }
    function reportNonDefaultExport(moduleSymbol, node) {
        var _a, _b, _c;
        if ((_a = moduleSymbol.exports) === null || _a === void 0 ? void 0 : _a.has(node.symbol.escapedName)) {
            error(node.name, ts_1.Diagnostics.Module_0_has_no_default_export_Did_you_mean_to_use_import_1_from_0_instead, symbolToString(moduleSymbol), symbolToString(node.symbol));
        }
        else {
            var diagnostic = error(node.name, ts_1.Diagnostics.Module_0_has_no_default_export, symbolToString(moduleSymbol));
            var exportStar = (_b = moduleSymbol.exports) === null || _b === void 0 ? void 0 : _b.get("__export" /* InternalSymbolName.ExportStar */);
            if (exportStar) {
                var defaultExport = (_c = exportStar.declarations) === null || _c === void 0 ? void 0 : _c.find(function (decl) {
                    var _a, _b;
                    return !!((0, ts_1.isExportDeclaration)(decl) && decl.moduleSpecifier &&
                        ((_b = (_a = resolveExternalModuleName(decl, decl.moduleSpecifier)) === null || _a === void 0 ? void 0 : _a.exports) === null || _b === void 0 ? void 0 : _b.has("default" /* InternalSymbolName.Default */)));
                });
                if (defaultExport) {
                    (0, ts_1.addRelatedInfo)(diagnostic, (0, ts_1.createDiagnosticForNode)(defaultExport, ts_1.Diagnostics.export_Asterisk_does_not_re_export_a_default));
                }
            }
        }
    }
    function getTargetOfNamespaceImport(node, dontResolveAlias) {
        var moduleSpecifier = node.parent.parent.moduleSpecifier;
        var immediate = resolveExternalModuleName(node, moduleSpecifier);
        var resolved = resolveESModuleSymbol(immediate, moduleSpecifier, dontResolveAlias, /*suppressInteropError*/ false);
        markSymbolOfAliasDeclarationIfTypeOnly(node, immediate, resolved, /*overwriteEmpty*/ false);
        return resolved;
    }
    function getTargetOfNamespaceExport(node, dontResolveAlias) {
        var moduleSpecifier = node.parent.moduleSpecifier;
        var immediate = moduleSpecifier && resolveExternalModuleName(node, moduleSpecifier);
        var resolved = moduleSpecifier && resolveESModuleSymbol(immediate, moduleSpecifier, dontResolveAlias, /*suppressInteropError*/ false);
        markSymbolOfAliasDeclarationIfTypeOnly(node, immediate, resolved, /*overwriteEmpty*/ false);
        return resolved;
    }
    // This function creates a synthetic symbol that combines the value side of one symbol with the
    // type/namespace side of another symbol. Consider this example:
    //
    //   declare module graphics {
    //       interface Point {
    //           x: number;
    //           y: number;
    //       }
    //   }
    //   declare var graphics: {
    //       Point: new (x: number, y: number) => graphics.Point;
    //   }
    //   declare module "graphics" {
    //       export = graphics;
    //   }
    //
    // An 'import { Point } from "graphics"' needs to create a symbol that combines the value side 'Point'
    // property with the type/namespace side interface 'Point'.
    function combineValueAndTypeSymbols(valueSymbol, typeSymbol) {
        if (valueSymbol === unknownSymbol && typeSymbol === unknownSymbol) {
            return unknownSymbol;
        }
        if (valueSymbol.flags & (788968 /* SymbolFlags.Type */ | 1920 /* SymbolFlags.Namespace */)) {
            return valueSymbol;
        }
        var result = createSymbol(valueSymbol.flags | typeSymbol.flags, valueSymbol.escapedName);
        ts_1.Debug.assert(valueSymbol.declarations || typeSymbol.declarations);
        result.declarations = (0, ts_1.deduplicate)((0, ts_1.concatenate)(valueSymbol.declarations, typeSymbol.declarations), ts_1.equateValues);
        result.parent = valueSymbol.parent || typeSymbol.parent;
        if (valueSymbol.valueDeclaration)
            result.valueDeclaration = valueSymbol.valueDeclaration;
        if (typeSymbol.members)
            result.members = new Map(typeSymbol.members);
        if (valueSymbol.exports)
            result.exports = new Map(valueSymbol.exports);
        return result;
    }
    function getExportOfModule(symbol, name, specifier, dontResolveAlias) {
        var _a;
        if (symbol.flags & 1536 /* SymbolFlags.Module */) {
            var exportSymbol = getExportsOfSymbol(symbol).get(name.escapedText);
            var resolved = resolveSymbol(exportSymbol, dontResolveAlias);
            var exportStarDeclaration = (_a = getSymbolLinks(symbol).typeOnlyExportStarMap) === null || _a === void 0 ? void 0 : _a.get(name.escapedText);
            markSymbolOfAliasDeclarationIfTypeOnly(specifier, exportSymbol, resolved, /*overwriteEmpty*/ false, exportStarDeclaration, name.escapedText);
            return resolved;
        }
    }
    function getPropertyOfVariable(symbol, name) {
        if (symbol.flags & 3 /* SymbolFlags.Variable */) {
            var typeAnnotation = symbol.valueDeclaration.type;
            if (typeAnnotation) {
                return resolveSymbol(getPropertyOfType(getTypeFromTypeNode(typeAnnotation), name));
            }
        }
    }
    function getExternalModuleMember(node, specifier, dontResolveAlias) {
        var _a;
        if (dontResolveAlias === void 0) { dontResolveAlias = false; }
        var moduleSpecifier = (0, ts_1.getExternalModuleRequireArgument)(node) || node.moduleSpecifier;
        var moduleSymbol = resolveExternalModuleName(node, moduleSpecifier); // TODO: GH#18217
        var name = !(0, ts_1.isPropertyAccessExpression)(specifier) && specifier.propertyName || specifier.name;
        if (!(0, ts_1.isIdentifier)(name)) {
            return undefined;
        }
        var suppressInteropError = name.escapedText === "default" /* InternalSymbolName.Default */ && allowSyntheticDefaultImports;
        var targetSymbol = resolveESModuleSymbol(moduleSymbol, moduleSpecifier, /*dontResolveAlias*/ false, suppressInteropError);
        if (targetSymbol) {
            if (name.escapedText) {
                if ((0, ts_1.isShorthandAmbientModuleSymbol)(moduleSymbol)) {
                    return moduleSymbol;
                }
                var symbolFromVariable = void 0;
                // First check if module was specified with "export=". If so, get the member from the resolved type
                if (moduleSymbol && moduleSymbol.exports && moduleSymbol.exports.get("export=" /* InternalSymbolName.ExportEquals */)) {
                    symbolFromVariable = getPropertyOfType(getTypeOfSymbol(targetSymbol), name.escapedText, /*skipObjectFunctionPropertyAugment*/ true);
                }
                else {
                    symbolFromVariable = getPropertyOfVariable(targetSymbol, name.escapedText);
                }
                // if symbolFromVariable is export - get its final target
                symbolFromVariable = resolveSymbol(symbolFromVariable, dontResolveAlias);
                var symbolFromModule = getExportOfModule(targetSymbol, name, specifier, dontResolveAlias);
                if (symbolFromModule === undefined && name.escapedText === "default" /* InternalSymbolName.Default */) {
                    var file = (_a = moduleSymbol.declarations) === null || _a === void 0 ? void 0 : _a.find(ts_1.isSourceFile);
                    if (isOnlyImportedAsDefault(moduleSpecifier) || canHaveSyntheticDefault(file, moduleSymbol, dontResolveAlias, moduleSpecifier)) {
                        symbolFromModule = resolveExternalModuleSymbol(moduleSymbol, dontResolveAlias) || resolveSymbol(moduleSymbol, dontResolveAlias);
                    }
                }
                var symbol = symbolFromModule && symbolFromVariable && symbolFromModule !== symbolFromVariable ?
                    combineValueAndTypeSymbols(symbolFromVariable, symbolFromModule) :
                    symbolFromModule || symbolFromVariable;
                if (!symbol) {
                    errorNoModuleMemberSymbol(moduleSymbol, targetSymbol, node, name);
                }
                return symbol;
            }
        }
    }
    function errorNoModuleMemberSymbol(moduleSymbol, targetSymbol, node, name) {
        var _a;
        var moduleName = getFullyQualifiedName(moduleSymbol, node);
        var declarationName = (0, ts_1.declarationNameToString)(name);
        var suggestion = getSuggestedSymbolForNonexistentModule(name, targetSymbol);
        if (suggestion !== undefined) {
            var suggestionName = symbolToString(suggestion);
            var diagnostic = error(name, ts_1.Diagnostics._0_has_no_exported_member_named_1_Did_you_mean_2, moduleName, declarationName, suggestionName);
            if (suggestion.valueDeclaration) {
                (0, ts_1.addRelatedInfo)(diagnostic, (0, ts_1.createDiagnosticForNode)(suggestion.valueDeclaration, ts_1.Diagnostics._0_is_declared_here, suggestionName));
            }
        }
        else {
            if ((_a = moduleSymbol.exports) === null || _a === void 0 ? void 0 : _a.has("default" /* InternalSymbolName.Default */)) {
                error(name, ts_1.Diagnostics.Module_0_has_no_exported_member_1_Did_you_mean_to_use_import_1_from_0_instead, moduleName, declarationName);
            }
            else {
                reportNonExportedMember(node, name, declarationName, moduleSymbol, moduleName);
            }
        }
    }
    function reportNonExportedMember(node, name, declarationName, moduleSymbol, moduleName) {
        var _a, _b;
        var localSymbol = (_b = (_a = (0, ts_1.tryCast)(moduleSymbol.valueDeclaration, ts_1.canHaveLocals)) === null || _a === void 0 ? void 0 : _a.locals) === null || _b === void 0 ? void 0 : _b.get(name.escapedText);
        var exports = moduleSymbol.exports;
        if (localSymbol) {
            var exportedEqualsSymbol = exports === null || exports === void 0 ? void 0 : exports.get("export=" /* InternalSymbolName.ExportEquals */);
            if (exportedEqualsSymbol) {
                getSymbolIfSameReference(exportedEqualsSymbol, localSymbol) ? reportInvalidImportEqualsExportMember(node, name, declarationName, moduleName) :
                    error(name, ts_1.Diagnostics.Module_0_has_no_exported_member_1, moduleName, declarationName);
            }
            else {
                var exportedSymbol = exports ? (0, ts_1.find)(symbolsToArray(exports), function (symbol) { return !!getSymbolIfSameReference(symbol, localSymbol); }) : undefined;
                var diagnostic = exportedSymbol ? error(name, ts_1.Diagnostics.Module_0_declares_1_locally_but_it_is_exported_as_2, moduleName, declarationName, symbolToString(exportedSymbol)) :
                    error(name, ts_1.Diagnostics.Module_0_declares_1_locally_but_it_is_not_exported, moduleName, declarationName);
                if (localSymbol.declarations) {
                    ts_1.addRelatedInfo.apply(void 0, __spreadArray([diagnostic], (0, ts_1.map)(localSymbol.declarations, function (decl, index) {
                        return (0, ts_1.createDiagnosticForNode)(decl, index === 0 ? ts_1.Diagnostics._0_is_declared_here : ts_1.Diagnostics.and_here, declarationName);
                    }), false));
                }
            }
        }
        else {
            error(name, ts_1.Diagnostics.Module_0_has_no_exported_member_1, moduleName, declarationName);
        }
    }
    function reportInvalidImportEqualsExportMember(node, name, declarationName, moduleName) {
        if (moduleKind >= ts_1.ModuleKind.ES2015) {
            var message = (0, ts_1.getESModuleInterop)(compilerOptions) ? ts_1.Diagnostics._0_can_only_be_imported_by_using_a_default_import :
                ts_1.Diagnostics._0_can_only_be_imported_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import;
            error(name, message, declarationName);
        }
        else {
            if ((0, ts_1.isInJSFile)(node)) {
                var message = (0, ts_1.getESModuleInterop)(compilerOptions) ? ts_1.Diagnostics._0_can_only_be_imported_by_using_a_require_call_or_by_using_a_default_import :
                    ts_1.Diagnostics._0_can_only_be_imported_by_using_a_require_call_or_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import;
                error(name, message, declarationName);
            }
            else {
                var message = (0, ts_1.getESModuleInterop)(compilerOptions) ? ts_1.Diagnostics._0_can_only_be_imported_by_using_import_1_require_2_or_a_default_import :
                    ts_1.Diagnostics._0_can_only_be_imported_by_using_import_1_require_2_or_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import;
                error(name, message, declarationName, declarationName, moduleName);
            }
        }
    }
    function getTargetOfImportSpecifier(node, dontResolveAlias) {
        if ((0, ts_1.isImportSpecifier)(node) && (0, ts_1.idText)(node.propertyName || node.name) === "default" /* InternalSymbolName.Default */) {
            var specifier = getModuleSpecifierForImportOrExport(node);
            var moduleSymbol = specifier && resolveExternalModuleName(node, specifier);
            if (moduleSymbol) {
                return getTargetofModuleDefault(moduleSymbol, node, dontResolveAlias);
            }
        }
        var root = (0, ts_1.isBindingElement)(node) ? (0, ts_1.getRootDeclaration)(node) : node.parent.parent.parent;
        var commonJSPropertyAccess = getCommonJSPropertyAccess(root);
        var resolved = getExternalModuleMember(root, commonJSPropertyAccess || node, dontResolveAlias);
        var name = node.propertyName || node.name;
        if (commonJSPropertyAccess && resolved && (0, ts_1.isIdentifier)(name)) {
            return resolveSymbol(getPropertyOfType(getTypeOfSymbol(resolved), name.escapedText), dontResolveAlias);
        }
        markSymbolOfAliasDeclarationIfTypeOnly(node, /*immediateTarget*/ undefined, resolved, /*overwriteEmpty*/ false);
        return resolved;
    }
    function getCommonJSPropertyAccess(node) {
        if ((0, ts_1.isVariableDeclaration)(node) && node.initializer && (0, ts_1.isPropertyAccessExpression)(node.initializer)) {
            return node.initializer;
        }
    }
    function getTargetOfNamespaceExportDeclaration(node, dontResolveAlias) {
        if ((0, ts_1.canHaveSymbol)(node.parent)) {
            var resolved = resolveExternalModuleSymbol(node.parent.symbol, dontResolveAlias);
            markSymbolOfAliasDeclarationIfTypeOnly(node, /*immediateTarget*/ undefined, resolved, /*overwriteEmpty*/ false);
            return resolved;
        }
    }
    function getTargetOfExportSpecifier(node, meaning, dontResolveAlias) {
        if ((0, ts_1.idText)(node.propertyName || node.name) === "default" /* InternalSymbolName.Default */) {
            var specifier = getModuleSpecifierForImportOrExport(node);
            var moduleSymbol = specifier && resolveExternalModuleName(node, specifier);
            if (moduleSymbol) {
                return getTargetofModuleDefault(moduleSymbol, node, !!dontResolveAlias);
            }
        }
        var resolved = node.parent.parent.moduleSpecifier ?
            getExternalModuleMember(node.parent.parent, node, dontResolveAlias) :
            resolveEntityName(node.propertyName || node.name, meaning, /*ignoreErrors*/ false, dontResolveAlias);
        markSymbolOfAliasDeclarationIfTypeOnly(node, /*immediateTarget*/ undefined, resolved, /*overwriteEmpty*/ false);
        return resolved;
    }
    function getTargetOfExportAssignment(node, dontResolveAlias) {
        var expression = (0, ts_1.isExportAssignment)(node) ? node.expression : node.right;
        var resolved = getTargetOfAliasLikeExpression(expression, dontResolveAlias);
        markSymbolOfAliasDeclarationIfTypeOnly(node, /*immediateTarget*/ undefined, resolved, /*overwriteEmpty*/ false);
        return resolved;
    }
    function getTargetOfAliasLikeExpression(expression, dontResolveAlias) {
        if ((0, ts_1.isClassExpression)(expression)) {
            return checkExpressionCached(expression).symbol;
        }
        if (!(0, ts_1.isEntityName)(expression) && !(0, ts_1.isEntityNameExpression)(expression)) {
            return undefined;
        }
        var aliasLike = resolveEntityName(expression, 111551 /* SymbolFlags.Value */ | 788968 /* SymbolFlags.Type */ | 1920 /* SymbolFlags.Namespace */, /*ignoreErrors*/ true, dontResolveAlias);
        if (aliasLike) {
            return aliasLike;
        }
        checkExpressionCached(expression);
        return getNodeLinks(expression).resolvedSymbol;
    }
    function getTargetOfAccessExpression(node, dontRecursivelyResolve) {
        if (!((0, ts_1.isBinaryExpression)(node.parent) && node.parent.left === node && node.parent.operatorToken.kind === 64 /* SyntaxKind.EqualsToken */)) {
            return undefined;
        }
        return getTargetOfAliasLikeExpression(node.parent.right, dontRecursivelyResolve);
    }
    function getTargetOfAliasDeclaration(node, dontRecursivelyResolve) {
        if (dontRecursivelyResolve === void 0) { dontRecursivelyResolve = false; }
        switch (node.kind) {
            case 270 /* SyntaxKind.ImportEqualsDeclaration */:
            case 259 /* SyntaxKind.VariableDeclaration */:
                return getTargetOfImportEqualsDeclaration(node, dontRecursivelyResolve);
            case 272 /* SyntaxKind.ImportClause */:
                return getTargetOfImportClause(node, dontRecursivelyResolve);
            case 273 /* SyntaxKind.NamespaceImport */:
                return getTargetOfNamespaceImport(node, dontRecursivelyResolve);
            case 279 /* SyntaxKind.NamespaceExport */:
                return getTargetOfNamespaceExport(node, dontRecursivelyResolve);
            case 275 /* SyntaxKind.ImportSpecifier */:
            case 207 /* SyntaxKind.BindingElement */:
                return getTargetOfImportSpecifier(node, dontRecursivelyResolve);
            case 280 /* SyntaxKind.ExportSpecifier */:
                return getTargetOfExportSpecifier(node, 111551 /* SymbolFlags.Value */ | 788968 /* SymbolFlags.Type */ | 1920 /* SymbolFlags.Namespace */, dontRecursivelyResolve);
            case 276 /* SyntaxKind.ExportAssignment */:
            case 225 /* SyntaxKind.BinaryExpression */:
                return getTargetOfExportAssignment(node, dontRecursivelyResolve);
            case 269 /* SyntaxKind.NamespaceExportDeclaration */:
                return getTargetOfNamespaceExportDeclaration(node, dontRecursivelyResolve);
            case 303 /* SyntaxKind.ShorthandPropertyAssignment */:
                return resolveEntityName(node.name, 111551 /* SymbolFlags.Value */ | 788968 /* SymbolFlags.Type */ | 1920 /* SymbolFlags.Namespace */, /*ignoreErrors*/ true, dontRecursivelyResolve);
            case 302 /* SyntaxKind.PropertyAssignment */:
                return getTargetOfAliasLikeExpression(node.initializer, dontRecursivelyResolve);
            case 211 /* SyntaxKind.ElementAccessExpression */:
            case 210 /* SyntaxKind.PropertyAccessExpression */:
                return getTargetOfAccessExpression(node, dontRecursivelyResolve);
            default:
                return ts_1.Debug.fail();
        }
    }
    /**
     * Indicates that a symbol is an alias that does not merge with a local declaration.
     * OR Is a JSContainer which may merge an alias with a local declaration
     */
    function isNonLocalAlias(symbol, excludes) {
        if (excludes === void 0) { excludes = 111551 /* SymbolFlags.Value */ | 788968 /* SymbolFlags.Type */ | 1920 /* SymbolFlags.Namespace */; }
        if (!symbol)
            return false;
        return (symbol.flags & (2097152 /* SymbolFlags.Alias */ | excludes)) === 2097152 /* SymbolFlags.Alias */ || !!(symbol.flags & 2097152 /* SymbolFlags.Alias */ && symbol.flags & 67108864 /* SymbolFlags.Assignment */);
    }
    function resolveSymbol(symbol, dontResolveAlias) {
        return !dontResolveAlias && isNonLocalAlias(symbol) ? resolveAlias(symbol) : symbol;
    }
    function resolveAlias(symbol) {
        ts_1.Debug.assert((symbol.flags & 2097152 /* SymbolFlags.Alias */) !== 0, "Should only get Alias here.");
        var links = getSymbolLinks(symbol);
        if (!links.aliasTarget) {
            links.aliasTarget = resolvingSymbol;
            var node = getDeclarationOfAliasSymbol(symbol);
            if (!node)
                return ts_1.Debug.fail();
            var target = getTargetOfAliasDeclaration(node);
            if (links.aliasTarget === resolvingSymbol) {
                links.aliasTarget = target || unknownSymbol;
            }
            else {
                error(node, ts_1.Diagnostics.Circular_definition_of_import_alias_0, symbolToString(symbol));
            }
        }
        else if (links.aliasTarget === resolvingSymbol) {
            links.aliasTarget = unknownSymbol;
        }
        return links.aliasTarget;
    }
    function tryResolveAlias(symbol) {
        var links = getSymbolLinks(symbol);
        if (links.aliasTarget !== resolvingSymbol) {
            return resolveAlias(symbol);
        }
        return undefined;
    }
    /**
     * Gets combined flags of a `symbol` and all alias targets it resolves to. `resolveAlias`
     * is typically recursive over chains of aliases, but stops mid-chain if an alias is merged
     * with another exported symbol, e.g.
     * ```ts
     * // a.ts
     * export const a = 0;
     * // b.ts
     * export { a } from "./a";
     * export type a = number;
     * // c.ts
     * import { a } from "./b";
     * ```
     * Calling `resolveAlias` on the `a` in c.ts would stop at the merged symbol exported
     * from b.ts, even though there is still more alias to resolve. Consequently, if we were
     * trying to determine if the `a` in c.ts has a value meaning, looking at the flags on
     * the local symbol and on the symbol returned by `resolveAlias` is not enough.
     * @returns SymbolFlags.All if `symbol` is an alias that ultimately resolves to `unknown`;
     * combined flags of all alias targets otherwise.
     */
    function getAllSymbolFlags(symbol) {
        var flags = symbol.flags;
        var seenSymbols;
        while (symbol.flags & 2097152 /* SymbolFlags.Alias */) {
            var target = resolveAlias(symbol);
            if (target === unknownSymbol) {
                return 67108863 /* SymbolFlags.All */;
            }
            // Optimizations - try to avoid creating or adding to
            // `seenSymbols` if possible
            if (target === symbol || (seenSymbols === null || seenSymbols === void 0 ? void 0 : seenSymbols.has(target))) {
                break;
            }
            if (target.flags & 2097152 /* SymbolFlags.Alias */) {
                if (seenSymbols) {
                    seenSymbols.add(target);
                }
                else {
                    seenSymbols = new Set([symbol, target]);
                }
            }
            flags |= target.flags;
            symbol = target;
        }
        return flags;
    }
    /**
     * Marks a symbol as type-only if its declaration is syntactically type-only.
     * If it is not itself marked type-only, but resolves to a type-only alias
     * somewhere in its resolution chain, save a reference to the type-only alias declaration
     * so the alias _not_ marked type-only can be identified as _transitively_ type-only.
     *
     * This function is called on each alias declaration that could be type-only or resolve to
     * another type-only alias during `resolveAlias`, so that later, when an alias is used in a
     * JS-emitting expression, we can quickly determine if that symbol is effectively type-only
     * and issue an error if so.
     *
     * @param aliasDeclaration The alias declaration not marked as type-only
     * @param immediateTarget The symbol to which the alias declaration immediately resolves
     * @param finalTarget The symbol to which the alias declaration ultimately resolves
     * @param overwriteEmpty Checks `resolvesToSymbol` for type-only declarations even if `aliasDeclaration`
     * has already been marked as not resolving to a type-only alias. Used when recursively resolving qualified
     * names of import aliases, e.g. `import C = a.b.C`. If namespace `a` is not found to be type-only, the
     * import declaration will initially be marked as not resolving to a type-only symbol. But, namespace `b`
     * must still be checked for a type-only marker, overwriting the previous negative result if found.
     */
    function markSymbolOfAliasDeclarationIfTypeOnly(aliasDeclaration, immediateTarget, finalTarget, overwriteEmpty, exportStarDeclaration, exportStarName) {
        if (!aliasDeclaration || (0, ts_1.isPropertyAccessExpression)(aliasDeclaration))
            return false;
        // If the declaration itself is type-only, mark it and return.
        // No need to check what it resolves to.
        var sourceSymbol = getSymbolOfDeclaration(aliasDeclaration);
        if ((0, ts_1.isTypeOnlyImportOrExportDeclaration)(aliasDeclaration)) {
            var links_1 = getSymbolLinks(sourceSymbol);
            links_1.typeOnlyDeclaration = aliasDeclaration;
            return true;
        }
        if (exportStarDeclaration) {
            var links_2 = getSymbolLinks(sourceSymbol);
            links_2.typeOnlyDeclaration = exportStarDeclaration;
            if (sourceSymbol.escapedName !== exportStarName) {
                links_2.typeOnlyExportStarName = exportStarName;
            }
            return true;
        }
        var links = getSymbolLinks(sourceSymbol);
        return markSymbolOfAliasDeclarationIfTypeOnlyWorker(links, immediateTarget, overwriteEmpty)
            || markSymbolOfAliasDeclarationIfTypeOnlyWorker(links, finalTarget, overwriteEmpty);
    }
    function markSymbolOfAliasDeclarationIfTypeOnlyWorker(aliasDeclarationLinks, target, overwriteEmpty) {
        var _a, _b, _c;
        if (target && (aliasDeclarationLinks.typeOnlyDeclaration === undefined || overwriteEmpty && aliasDeclarationLinks.typeOnlyDeclaration === false)) {
            var exportSymbol = (_b = (_a = target.exports) === null || _a === void 0 ? void 0 : _a.get("export=" /* InternalSymbolName.ExportEquals */)) !== null && _b !== void 0 ? _b : target;
            var typeOnly = exportSymbol.declarations && (0, ts_1.find)(exportSymbol.declarations, ts_1.isTypeOnlyImportOrExportDeclaration);
            aliasDeclarationLinks.typeOnlyDeclaration = (_c = typeOnly !== null && typeOnly !== void 0 ? typeOnly : getSymbolLinks(exportSymbol).typeOnlyDeclaration) !== null && _c !== void 0 ? _c : false;
        }
        return !!aliasDeclarationLinks.typeOnlyDeclaration;
    }
    /** Indicates that a symbol directly or indirectly resolves to a type-only import or export. */
    function getTypeOnlyAliasDeclaration(symbol, include) {
        if (!(symbol.flags & 2097152 /* SymbolFlags.Alias */)) {
            return undefined;
        }
        var links = getSymbolLinks(symbol);
        if (include === undefined) {
            return links.typeOnlyDeclaration || undefined;
        }
        if (links.typeOnlyDeclaration) {
            var resolved = links.typeOnlyDeclaration.kind === 277 /* SyntaxKind.ExportDeclaration */
                ? resolveSymbol(getExportsOfModule(links.typeOnlyDeclaration.symbol.parent).get(links.typeOnlyExportStarName || symbol.escapedName))
                : resolveAlias(links.typeOnlyDeclaration.symbol);
            return getAllSymbolFlags(resolved) & include ? links.typeOnlyDeclaration : undefined;
        }
        return undefined;
    }
    function markExportAsReferenced(node) {
        if (!canCollectSymbolAliasAccessabilityData) {
            return;
        }
        var symbol = getSymbolOfDeclaration(node);
        var target = resolveAlias(symbol);
        if (target) {
            var markAlias = target === unknownSymbol ||
                ((getAllSymbolFlags(target) & 111551 /* SymbolFlags.Value */) && !isConstEnumOrConstEnumOnlyModule(target) && !getTypeOnlyAliasDeclaration(symbol, 111551 /* SymbolFlags.Value */));
            if (markAlias) {
                markAliasSymbolAsReferenced(symbol);
            }
        }
    }
    // When an alias symbol is referenced, we need to mark the entity it references as referenced and in turn repeat that until
    // we reach a non-alias or an exported entity (which is always considered referenced). We do this by checking the target of
    // the alias as an expression (which recursively takes us back here if the target references another alias).
    function markAliasSymbolAsReferenced(symbol) {
        ts_1.Debug.assert(canCollectSymbolAliasAccessabilityData);
        var links = getSymbolLinks(symbol);
        if (!links.referenced) {
            links.referenced = true;
            var node = getDeclarationOfAliasSymbol(symbol);
            if (!node)
                return ts_1.Debug.fail();
            // We defer checking of the reference of an `import =` until the import itself is referenced,
            // This way a chain of imports can be elided if ultimately the final input is only used in a type
            // position.
            if ((0, ts_1.isInternalModuleImportEqualsDeclaration)(node)) {
                if (getAllSymbolFlags(resolveSymbol(symbol)) & 111551 /* SymbolFlags.Value */) {
                    // import foo = <symbol>
                    checkExpressionCached(node.moduleReference);
                }
            }
        }
    }
    // Aliases that resolve to const enums are not marked as referenced because they are not emitted,
    // but their usage in value positions must be tracked to determine if the import can be type-only.
    function markConstEnumAliasAsReferenced(symbol) {
        var links = getSymbolLinks(symbol);
        if (!links.constEnumReferenced) {
            links.constEnumReferenced = true;
        }
    }
    // This function is only for imports with entity names
    function getSymbolOfPartOfRightHandSideOfImportEquals(entityName, dontResolveAlias) {
        // There are three things we might try to look for. In the following examples,
        // the search term is enclosed in |...|:
        //
        //     import a = |b|; // Namespace
        //     import a = |b.c|; // Value, type, namespace
        //     import a = |b.c|.d; // Namespace
        if (entityName.kind === 80 /* SyntaxKind.Identifier */ && (0, ts_1.isRightSideOfQualifiedNameOrPropertyAccess)(entityName)) {
            entityName = entityName.parent;
        }
        // Check for case 1 and 3 in the above example
        if (entityName.kind === 80 /* SyntaxKind.Identifier */ || entityName.parent.kind === 165 /* SyntaxKind.QualifiedName */) {
            return resolveEntityName(entityName, 1920 /* SymbolFlags.Namespace */, /*ignoreErrors*/ false, dontResolveAlias);
        }
        else {
            // Case 2 in above example
            // entityName.kind could be a QualifiedName or a Missing identifier
            ts_1.Debug.assert(entityName.parent.kind === 270 /* SyntaxKind.ImportEqualsDeclaration */);
            return resolveEntityName(entityName, 111551 /* SymbolFlags.Value */ | 788968 /* SymbolFlags.Type */ | 1920 /* SymbolFlags.Namespace */, /*ignoreErrors*/ false, dontResolveAlias);
        }
    }
    function getFullyQualifiedName(symbol, containingLocation) {
        return symbol.parent ? getFullyQualifiedName(symbol.parent, containingLocation) + "." + symbolToString(symbol) : symbolToString(symbol, containingLocation, /*meaning*/ undefined, 32 /* SymbolFormatFlags.DoNotIncludeSymbolChain */ | 4 /* SymbolFormatFlags.AllowAnyNodeKind */);
    }
    function getContainingQualifiedNameNode(node) {
        while ((0, ts_1.isQualifiedName)(node.parent)) {
            node = node.parent;
        }
        return node;
    }
    function tryGetQualifiedNameAsValue(node) {
        var left = (0, ts_1.getFirstIdentifier)(node);
        var symbol = resolveName(left, left.escapedText, 111551 /* SymbolFlags.Value */, /*nameNotFoundMessage*/ undefined, left, /*isUse*/ true);
        if (!symbol) {
            return undefined;
        }
        while ((0, ts_1.isQualifiedName)(left.parent)) {
            var type = getTypeOfSymbol(symbol);
            symbol = getPropertyOfType(type, left.parent.right.escapedText);
            if (!symbol) {
                return undefined;
            }
            left = left.parent;
        }
        return symbol;
    }
    /**
     * Resolves a qualified name and any involved aliases.
     */
    function resolveEntityName(name, meaning, ignoreErrors, dontResolveAlias, location) {
        if ((0, ts_1.nodeIsMissing)(name)) {
            return undefined;
        }
        var namespaceMeaning = 1920 /* SymbolFlags.Namespace */ | ((0, ts_1.isInJSFile)(name) ? meaning & 111551 /* SymbolFlags.Value */ : 0);
        var symbol;
        if (name.kind === 80 /* SyntaxKind.Identifier */) {
            var message = meaning === namespaceMeaning || (0, ts_1.nodeIsSynthesized)(name) ? ts_1.Diagnostics.Cannot_find_namespace_0 : getCannotFindNameDiagnosticForName((0, ts_1.getFirstIdentifier)(name));
            var symbolFromJSPrototype = (0, ts_1.isInJSFile)(name) && !(0, ts_1.nodeIsSynthesized)(name) ? resolveEntityNameFromAssignmentDeclaration(name, meaning) : undefined;
            symbol = getMergedSymbol(resolveName(location || name, name.escapedText, meaning, ignoreErrors || symbolFromJSPrototype ? undefined : message, name, /*isUse*/ true, /*excludeGlobals*/ false));
            if (!symbol) {
                return getMergedSymbol(symbolFromJSPrototype);
            }
        }
        else if (name.kind === 165 /* SyntaxKind.QualifiedName */ || name.kind === 210 /* SyntaxKind.PropertyAccessExpression */) {
            var left = name.kind === 165 /* SyntaxKind.QualifiedName */ ? name.left : name.expression;
            var right = name.kind === 165 /* SyntaxKind.QualifiedName */ ? name.right : name.name;
            var namespace = resolveEntityName(left, namespaceMeaning, ignoreErrors, /*dontResolveAlias*/ false, location);
            if (!namespace || (0, ts_1.nodeIsMissing)(right)) {
                return undefined;
            }
            else if (namespace === unknownSymbol) {
                return namespace;
            }
            if (namespace.valueDeclaration &&
                (0, ts_1.isInJSFile)(namespace.valueDeclaration) &&
                (0, ts_1.getEmitModuleResolutionKind)(compilerOptions) !== ts_1.ModuleResolutionKind.Bundler &&
                (0, ts_1.isVariableDeclaration)(namespace.valueDeclaration) &&
                namespace.valueDeclaration.initializer &&
                isCommonJsRequire(namespace.valueDeclaration.initializer)) {
                var moduleName = namespace.valueDeclaration.initializer.arguments[0];
                var moduleSym = resolveExternalModuleName(moduleName, moduleName);
                if (moduleSym) {
                    var resolvedModuleSymbol = resolveExternalModuleSymbol(moduleSym);
                    if (resolvedModuleSymbol) {
                        namespace = resolvedModuleSymbol;
                    }
                }
            }
            symbol = getMergedSymbol(getSymbol(getExportsOfSymbol(namespace), right.escapedText, meaning));
            if (!symbol && (namespace.flags & 2097152 /* SymbolFlags.Alias */)) {
                // `namespace` can be resolved further if there was a symbol merge with a re-export
                symbol = getMergedSymbol(getSymbol(getExportsOfSymbol(resolveAlias(namespace)), right.escapedText, meaning));
            }
            if (!symbol) {
                if (!ignoreErrors) {
                    var namespaceName = getFullyQualifiedName(namespace);
                    var declarationName = (0, ts_1.declarationNameToString)(right);
                    var suggestionForNonexistentModule = getSuggestedSymbolForNonexistentModule(right, namespace);
                    if (suggestionForNonexistentModule) {
                        error(right, ts_1.Diagnostics._0_has_no_exported_member_named_1_Did_you_mean_2, namespaceName, declarationName, symbolToString(suggestionForNonexistentModule));
                        return undefined;
                    }
                    var containingQualifiedName = (0, ts_1.isQualifiedName)(name) && getContainingQualifiedNameNode(name);
                    var canSuggestTypeof = globalObjectType // <-- can't pull on types if global types aren't initialized yet
                        && (meaning & 788968 /* SymbolFlags.Type */)
                        && containingQualifiedName
                        && !(0, ts_1.isTypeOfExpression)(containingQualifiedName.parent)
                        && tryGetQualifiedNameAsValue(containingQualifiedName);
                    if (canSuggestTypeof) {
                        error(containingQualifiedName, ts_1.Diagnostics._0_refers_to_a_value_but_is_being_used_as_a_type_here_Did_you_mean_typeof_0, (0, ts_1.entityNameToString)(containingQualifiedName));
                        return undefined;
                    }
                    if (meaning & 1920 /* SymbolFlags.Namespace */ && (0, ts_1.isQualifiedName)(name.parent)) {
                        var exportedTypeSymbol = getMergedSymbol(getSymbol(getExportsOfSymbol(namespace), right.escapedText, 788968 /* SymbolFlags.Type */));
                        if (exportedTypeSymbol) {
                            error(name.parent.right, ts_1.Diagnostics.Cannot_access_0_1_because_0_is_a_type_but_not_a_namespace_Did_you_mean_to_retrieve_the_type_of_the_property_1_in_0_with_0_1, symbolToString(exportedTypeSymbol), (0, ts_1.unescapeLeadingUnderscores)(name.parent.right.escapedText));
                            return undefined;
                        }
                    }
                    error(right, ts_1.Diagnostics.Namespace_0_has_no_exported_member_1, namespaceName, declarationName);
                }
                return undefined;
            }
        }
        else {
            ts_1.Debug.assertNever(name, "Unknown entity name kind.");
        }
        ts_1.Debug.assert(((0, ts_1.getCheckFlags)(symbol) & 1 /* CheckFlags.Instantiated */) === 0, "Should never get an instantiated symbol here.");
        if (!(0, ts_1.nodeIsSynthesized)(name) && (0, ts_1.isEntityName)(name) && (symbol.flags & 2097152 /* SymbolFlags.Alias */ || name.parent.kind === 276 /* SyntaxKind.ExportAssignment */)) {
            markSymbolOfAliasDeclarationIfTypeOnly((0, ts_1.getAliasDeclarationFromName)(name), symbol, /*finalTarget*/ undefined, /*overwriteEmpty*/ true);
        }
        return (symbol.flags & meaning) || dontResolveAlias ? symbol : resolveAlias(symbol);
    }
    /**
     * 1. For prototype-property methods like `A.prototype.m = function () ...`, try to resolve names in the scope of `A` too.
     * Note that prototype-property assignment to locations outside the current file (eg globals) doesn't work, so
     * name resolution won't work either.
     * 2. For property assignments like `{ x: function f () { } }`, try to resolve names in the scope of `f` too.
     */
    function resolveEntityNameFromAssignmentDeclaration(name, meaning) {
        if (isJSDocTypeReference(name.parent)) {
            var secondaryLocation = getAssignmentDeclarationLocation(name.parent);
            if (secondaryLocation) {
                return resolveName(secondaryLocation, name.escapedText, meaning, /*nameNotFoundMessage*/ undefined, name, /*isUse*/ true);
            }
        }
    }
    function getAssignmentDeclarationLocation(node) {
        var typeAlias = (0, ts_1.findAncestor)(node, function (node) { return !((0, ts_1.isJSDocNode)(node) || node.flags & 8388608 /* NodeFlags.JSDoc */) ? "quit" : (0, ts_1.isJSDocTypeAlias)(node); });
        if (typeAlias) {
            return;
        }
        var host = (0, ts_1.getJSDocHost)(node);
        if (host && (0, ts_1.isExpressionStatement)(host) && (0, ts_1.isPrototypePropertyAssignment)(host.expression)) {
            // /** @param {K} p */ X.prototype.m = function () { } <-- look for K on X's declaration
            var symbol = getSymbolOfDeclaration(host.expression.left);
            if (symbol) {
                return getDeclarationOfJSPrototypeContainer(symbol);
            }
        }
        if (host && (0, ts_1.isFunctionExpression)(host) && (0, ts_1.isPrototypePropertyAssignment)(host.parent) && (0, ts_1.isExpressionStatement)(host.parent.parent)) {
            // X.prototype.m = /** @param {K} p */ function () { } <-- look for K on X's declaration
            var symbol = getSymbolOfDeclaration(host.parent.left);
            if (symbol) {
                return getDeclarationOfJSPrototypeContainer(symbol);
            }
        }
        if (host && ((0, ts_1.isObjectLiteralMethod)(host) || (0, ts_1.isPropertyAssignment)(host)) &&
            (0, ts_1.isBinaryExpression)(host.parent.parent) &&
            (0, ts_1.getAssignmentDeclarationKind)(host.parent.parent) === 6 /* AssignmentDeclarationKind.Prototype */) {
            // X.prototype = { /** @param {K} p */m() { } } <-- look for K on X's declaration
            var symbol = getSymbolOfDeclaration(host.parent.parent.left);
            if (symbol) {
                return getDeclarationOfJSPrototypeContainer(symbol);
            }
        }
        var sig = (0, ts_1.getEffectiveJSDocHost)(node);
        if (sig && (0, ts_1.isFunctionLike)(sig)) {
            var symbol = getSymbolOfDeclaration(sig);
            return symbol && symbol.valueDeclaration;
        }
    }
    function getDeclarationOfJSPrototypeContainer(symbol) {
        var decl = symbol.parent.valueDeclaration;
        if (!decl) {
            return undefined;
        }
        var initializer = (0, ts_1.isAssignmentDeclaration)(decl) ? (0, ts_1.getAssignedExpandoInitializer)(decl) :
            (0, ts_1.hasOnlyExpressionInitializer)(decl) ? (0, ts_1.getDeclaredExpandoInitializer)(decl) :
                undefined;
        return initializer || decl;
    }
    /**
     * Get the real symbol of a declaration with an expando initializer.
     *
     * Normally, declarations have an associated symbol, but when a declaration has an expando
     * initializer, the expando's symbol is the one that has all the members merged into it.
     */
    function getExpandoSymbol(symbol) {
        var decl = symbol.valueDeclaration;
        if (!decl || !(0, ts_1.isInJSFile)(decl) || symbol.flags & 524288 /* SymbolFlags.TypeAlias */ || (0, ts_1.getExpandoInitializer)(decl, /*isPrototypeAssignment*/ false)) {
            return undefined;
        }
        var init = (0, ts_1.isVariableDeclaration)(decl) ? (0, ts_1.getDeclaredExpandoInitializer)(decl) : (0, ts_1.getAssignedExpandoInitializer)(decl);
        if (init) {
            var initSymbol = getSymbolOfNode(init);
            if (initSymbol) {
                return mergeJSSymbols(initSymbol, symbol);
            }
        }
    }
    function resolveExternalModuleName(location, moduleReferenceExpression, ignoreErrors) {
        var isClassic = (0, ts_1.getEmitModuleResolutionKind)(compilerOptions) === ts_1.ModuleResolutionKind.Classic;
        var errorMessage = isClassic ?
            ts_1.Diagnostics.Cannot_find_module_0_Did_you_mean_to_set_the_moduleResolution_option_to_nodenext_or_to_add_aliases_to_the_paths_option
            : ts_1.Diagnostics.Cannot_find_module_0_or_its_corresponding_type_declarations;
        return resolveExternalModuleNameWorker(location, moduleReferenceExpression, ignoreErrors ? undefined : errorMessage);
    }
    function resolveExternalModuleNameWorker(location, moduleReferenceExpression, moduleNotFoundError, isForAugmentation) {
        if (isForAugmentation === void 0) { isForAugmentation = false; }
        return (0, ts_1.isStringLiteralLike)(moduleReferenceExpression)
            ? resolveExternalModule(location, moduleReferenceExpression.text, moduleNotFoundError, moduleReferenceExpression, isForAugmentation)
            : undefined;
    }
    function resolveExternalModule(location, moduleReference, moduleNotFoundError, errorNode, isForAugmentation) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        if (isForAugmentation === void 0) { isForAugmentation = false; }
        if ((0, ts_1.startsWith)(moduleReference, "@types/")) {
            var diag = ts_1.Diagnostics.Cannot_import_type_declaration_files_Consider_importing_0_instead_of_1;
            var withoutAtTypePrefix = (0, ts_1.removePrefix)(moduleReference, "@types/");
            error(errorNode, diag, withoutAtTypePrefix, moduleReference);
        }
        var ambientModule = tryFindAmbientModule(moduleReference, /*withAugmentations*/ true);
        if (ambientModule) {
            return ambientModule;
        }
        var currentSourceFile = (0, ts_1.getSourceFileOfNode)(location);
        var contextSpecifier = (0, ts_1.isStringLiteralLike)(location)
            ? location
            : ((_a = (0, ts_1.findAncestor)(location, ts_1.isImportCall)) === null || _a === void 0 ? void 0 : _a.arguments[0]) ||
                ((_b = (0, ts_1.findAncestor)(location, ts_1.isImportDeclaration)) === null || _b === void 0 ? void 0 : _b.moduleSpecifier) ||
                ((_c = (0, ts_1.findAncestor)(location, ts_1.isExternalModuleImportEqualsDeclaration)) === null || _c === void 0 ? void 0 : _c.moduleReference.expression) ||
                ((_d = (0, ts_1.findAncestor)(location, ts_1.isExportDeclaration)) === null || _d === void 0 ? void 0 : _d.moduleSpecifier) ||
                ((_e = ((0, ts_1.isModuleDeclaration)(location) ? location : location.parent && (0, ts_1.isModuleDeclaration)(location.parent) && location.parent.name === location ? location.parent : undefined)) === null || _e === void 0 ? void 0 : _e.name) ||
                ((_f = ((0, ts_1.isLiteralImportTypeNode)(location) ? location : undefined)) === null || _f === void 0 ? void 0 : _f.argument.literal);
        var mode = contextSpecifier && (0, ts_1.isStringLiteralLike)(contextSpecifier) ? (0, ts_1.getModeForUsageLocation)(currentSourceFile, contextSpecifier) : currentSourceFile.impliedNodeFormat;
        var moduleResolutionKind = (0, ts_1.getEmitModuleResolutionKind)(compilerOptions);
        var resolvedModule = (0, ts_1.getResolvedModule)(currentSourceFile, moduleReference, mode);
        var resolutionDiagnostic = resolvedModule && (0, ts_1.getResolutionDiagnostic)(compilerOptions, resolvedModule, currentSourceFile);
        var sourceFile = resolvedModule
            && (!resolutionDiagnostic || resolutionDiagnostic === ts_1.Diagnostics.Module_0_was_resolved_to_1_but_jsx_is_not_set)
            && host.getSourceFile(resolvedModule.resolvedFileName);
        if (sourceFile) {
            // If there's a resolutionDiagnostic we need to report it even if a sourceFile is found.
            if (resolutionDiagnostic) {
                error(errorNode, resolutionDiagnostic, moduleReference, resolvedModule.resolvedFileName);
            }
            if (resolvedModule.resolvedUsingTsExtension && (0, ts_1.isDeclarationFileName)(moduleReference)) {
                var importOrExport = ((_g = (0, ts_1.findAncestor)(location, ts_1.isImportDeclaration)) === null || _g === void 0 ? void 0 : _g.importClause) ||
                    (0, ts_1.findAncestor)(location, (0, ts_1.or)(ts_1.isImportEqualsDeclaration, ts_1.isExportDeclaration));
                if (importOrExport && !importOrExport.isTypeOnly || (0, ts_1.findAncestor)(location, ts_1.isImportCall)) {
                    error(errorNode, ts_1.Diagnostics.A_declaration_file_cannot_be_imported_without_import_type_Did_you_mean_to_import_an_implementation_file_0_instead, getSuggestedImportSource(ts_1.Debug.checkDefined((0, ts_1.tryExtractTSExtension)(moduleReference))));
                }
            }
            else if (resolvedModule.resolvedUsingTsExtension && !(0, ts_1.shouldAllowImportingTsExtension)(compilerOptions, currentSourceFile.fileName)) {
                var tsExtension = ts_1.Debug.checkDefined((0, ts_1.tryExtractTSExtension)(moduleReference));
                error(errorNode, ts_1.Diagnostics.An_import_path_can_only_end_with_a_0_extension_when_allowImportingTsExtensions_is_enabled, tsExtension);
            }
            if (sourceFile.symbol) {
                if (resolvedModule.isExternalLibraryImport && !(0, ts_1.resolutionExtensionIsTSOrJson)(resolvedModule.extension)) {
                    errorOnImplicitAnyModule(/*isError*/ false, errorNode, currentSourceFile, mode, resolvedModule, moduleReference);
                }
                if (moduleResolutionKind === ts_1.ModuleResolutionKind.Node16 || moduleResolutionKind === ts_1.ModuleResolutionKind.NodeNext) {
                    var isSyncImport = (currentSourceFile.impliedNodeFormat === ts_1.ModuleKind.CommonJS && !(0, ts_1.findAncestor)(location, ts_1.isImportCall)) || !!(0, ts_1.findAncestor)(location, ts_1.isImportEqualsDeclaration);
                    var overrideClauseHost = (0, ts_1.findAncestor)(location, function (l) { return (0, ts_1.isImportTypeNode)(l) || (0, ts_1.isExportDeclaration)(l) || (0, ts_1.isImportDeclaration)(l); });
                    var overrideClause = overrideClauseHost && (0, ts_1.isImportTypeNode)(overrideClauseHost) ? (_h = overrideClauseHost.assertions) === null || _h === void 0 ? void 0 : _h.assertClause : overrideClauseHost === null || overrideClauseHost === void 0 ? void 0 : overrideClauseHost.assertClause;
                    // An override clause will take effect for type-only imports and import types, and allows importing the types across formats, regardless of
                    // normal mode restrictions
                    if (isSyncImport && sourceFile.impliedNodeFormat === ts_1.ModuleKind.ESNext && !(0, ts_1.getResolutionModeOverrideForClause)(overrideClause)) {
                        if ((0, ts_1.findAncestor)(location, ts_1.isImportEqualsDeclaration)) {
                            // ImportEquals in a ESM file resolving to another ESM file
                            error(errorNode, ts_1.Diagnostics.Module_0_cannot_be_imported_using_this_construct_The_specifier_only_resolves_to_an_ES_module_which_cannot_be_imported_with_require_Use_an_ECMAScript_import_instead, moduleReference);
                        }
                        else {
                            // CJS file resolving to an ESM file
                            var diagnosticDetails = void 0;
                            var ext = (0, ts_1.tryGetExtensionFromPath)(currentSourceFile.fileName);
                            if (ext === ".ts" /* Extension.Ts */ || ext === ".js" /* Extension.Js */ || ext === ".tsx" /* Extension.Tsx */ || ext === ".jsx" /* Extension.Jsx */) {
                                var scope = currentSourceFile.packageJsonScope;
                                var targetExt = ext === ".ts" /* Extension.Ts */ ? ".mts" /* Extension.Mts */ : ext === ".js" /* Extension.Js */ ? ".mjs" /* Extension.Mjs */ : undefined;
                                if (scope && !scope.contents.packageJsonContent.type) {
                                    if (targetExt) {
                                        diagnosticDetails = (0, ts_1.chainDiagnosticMessages)(
                                        /*details*/ undefined, ts_1.Diagnostics.To_convert_this_file_to_an_ECMAScript_module_change_its_file_extension_to_0_or_add_the_field_type_Colon_module_to_1, targetExt, (0, ts_1.combinePaths)(scope.packageDirectory, "package.json"));
                                    }
                                    else {
                                        diagnosticDetails = (0, ts_1.chainDiagnosticMessages)(
                                        /*details*/ undefined, ts_1.Diagnostics.To_convert_this_file_to_an_ECMAScript_module_add_the_field_type_Colon_module_to_0, (0, ts_1.combinePaths)(scope.packageDirectory, "package.json"));
                                    }
                                }
                                else {
                                    if (targetExt) {
                                        diagnosticDetails = (0, ts_1.chainDiagnosticMessages)(
                                        /*details*/ undefined, ts_1.Diagnostics.To_convert_this_file_to_an_ECMAScript_module_change_its_file_extension_to_0_or_create_a_local_package_json_file_with_type_Colon_module, targetExt);
                                    }
                                    else {
                                        diagnosticDetails = (0, ts_1.chainDiagnosticMessages)(
                                        /*details*/ undefined, ts_1.Diagnostics.To_convert_this_file_to_an_ECMAScript_module_create_a_local_package_json_file_with_type_Colon_module);
                                    }
                                }
                            }
                            diagnostics.add((0, ts_1.createDiagnosticForNodeFromMessageChain)((0, ts_1.getSourceFileOfNode)(errorNode), errorNode, (0, ts_1.chainDiagnosticMessages)(diagnosticDetails, ts_1.Diagnostics.The_current_file_is_a_CommonJS_module_whose_imports_will_produce_require_calls_however_the_referenced_file_is_an_ECMAScript_module_and_cannot_be_imported_with_require_Consider_writing_a_dynamic_import_0_call_instead, moduleReference)));
                        }
                    }
                }
                // merged symbol is module declaration symbol combined with all augmentations
                return getMergedSymbol(sourceFile.symbol);
            }
            if (moduleNotFoundError) {
                // report errors only if it was requested
                error(errorNode, ts_1.Diagnostics.File_0_is_not_a_module, sourceFile.fileName);
            }
            return undefined;
        }
        if (patternAmbientModules) {
            var pattern = (0, ts_1.findBestPatternMatch)(patternAmbientModules, function (_) { return _.pattern; }, moduleReference);
            if (pattern) {
                // If the module reference matched a pattern ambient module ('*.foo') but there's also a
                // module augmentation by the specific name requested ('a.foo'), we store the merged symbol
                // by the augmentation name ('a.foo'), because asking for *.foo should not give you exports
                // from a.foo.
                var augmentation = patternAmbientModuleAugmentations && patternAmbientModuleAugmentations.get(moduleReference);
                if (augmentation) {
                    return getMergedSymbol(augmentation);
                }
                return getMergedSymbol(pattern.symbol);
            }
        }
        // May be an untyped module. If so, ignore resolutionDiagnostic.
        if (resolvedModule && !(0, ts_1.resolutionExtensionIsTSOrJson)(resolvedModule.extension) && resolutionDiagnostic === undefined || resolutionDiagnostic === ts_1.Diagnostics.Could_not_find_a_declaration_file_for_module_0_1_implicitly_has_an_any_type) {
            if (isForAugmentation) {
                var diag = ts_1.Diagnostics.Invalid_module_name_in_augmentation_Module_0_resolves_to_an_untyped_module_at_1_which_cannot_be_augmented;
                error(errorNode, diag, moduleReference, resolvedModule.resolvedFileName);
            }
            else {
                errorOnImplicitAnyModule(/*isError*/ noImplicitAny && !!moduleNotFoundError, errorNode, currentSourceFile, mode, resolvedModule, moduleReference);
            }
            // Failed imports and untyped modules are both treated in an untyped manner; only difference is whether we give a diagnostic first.
            return undefined;
        }
        if (moduleNotFoundError) {
            // See if this was possibly a projectReference redirect
            if (resolvedModule) {
                var redirect = host.getProjectReferenceRedirect(resolvedModule.resolvedFileName);
                if (redirect) {
                    error(errorNode, ts_1.Diagnostics.Output_file_0_has_not_been_built_from_source_file_1, redirect, resolvedModule.resolvedFileName);
                    return undefined;
                }
            }
            if (resolutionDiagnostic) {
                error(errorNode, resolutionDiagnostic, moduleReference, resolvedModule.resolvedFileName);
            }
            else {
                var isExtensionlessRelativePathImport = (0, ts_1.pathIsRelative)(moduleReference) && !(0, ts_1.hasExtension)(moduleReference);
                var resolutionIsNode16OrNext = moduleResolutionKind === ts_1.ModuleResolutionKind.Node16 ||
                    moduleResolutionKind === ts_1.ModuleResolutionKind.NodeNext;
                if (!(0, ts_1.getResolveJsonModule)(compilerOptions) &&
                    (0, ts_1.fileExtensionIs)(moduleReference, ".json" /* Extension.Json */) &&
                    moduleResolutionKind !== ts_1.ModuleResolutionKind.Classic &&
                    (0, ts_1.hasJsonModuleEmitEnabled)(compilerOptions)) {
                    error(errorNode, ts_1.Diagnostics.Cannot_find_module_0_Consider_using_resolveJsonModule_to_import_module_with_json_extension, moduleReference);
                }
                else if (mode === ts_1.ModuleKind.ESNext && resolutionIsNode16OrNext && isExtensionlessRelativePathImport) {
                    var absoluteRef_1 = (0, ts_1.getNormalizedAbsolutePath)(moduleReference, (0, ts_1.getDirectoryPath)(currentSourceFile.path));
                    var suggestedExt = (_j = suggestedExtensions.find(function (_a) {
                        var actualExt = _a[0], _importExt = _a[1];
                        return host.fileExists(absoluteRef_1 + actualExt);
                    })) === null || _j === void 0 ? void 0 : _j[1];
                    if (suggestedExt) {
                        error(errorNode, ts_1.Diagnostics.Relative_import_paths_need_explicit_file_extensions_in_EcmaScript_imports_when_moduleResolution_is_node16_or_nodenext_Did_you_mean_0, moduleReference + suggestedExt);
                    }
                    else {
                        error(errorNode, ts_1.Diagnostics.Relative_import_paths_need_explicit_file_extensions_in_EcmaScript_imports_when_moduleResolution_is_node16_or_nodenext_Consider_adding_an_extension_to_the_import_path);
                    }
                }
                else {
                    error(errorNode, moduleNotFoundError, moduleReference);
                }
            }
        }
        return undefined;
        function getSuggestedImportSource(tsExtension) {
            var importSourceWithoutExtension = (0, ts_1.removeExtension)(moduleReference, tsExtension);
            /**
             * Direct users to import source with .js extension if outputting an ES module.
             * @see https://github.com/microsoft/TypeScript/issues/42151
             */
            if ((0, ts_1.emitModuleKindIsNonNodeESM)(moduleKind) || mode === ts_1.ModuleKind.ESNext) {
                var preferTs = (0, ts_1.isDeclarationFileName)(moduleReference) && (0, ts_1.shouldAllowImportingTsExtension)(compilerOptions);
                var ext = tsExtension === ".mts" /* Extension.Mts */ || tsExtension === ".d.mts" /* Extension.Dmts */ ? preferTs ? ".mts" : ".mjs" :
                    tsExtension === ".cts" /* Extension.Cts */ || tsExtension === ".d.mts" /* Extension.Dmts */ ? preferTs ? ".cts" : ".cjs" :
                        preferTs ? ".ts" : ".js";
                return importSourceWithoutExtension + ext;
            }
            return importSourceWithoutExtension;
        }
    }
    function errorOnImplicitAnyModule(isError, errorNode, sourceFile, mode, _a, moduleReference) {
        var packageId = _a.packageId, resolvedFileName = _a.resolvedFileName;
        var errorInfo;
        if (!(0, ts_1.isExternalModuleNameRelative)(moduleReference) && packageId) {
            errorInfo = (0, ts_1.createModuleNotFoundChain)(sourceFile, host, moduleReference, mode, packageId.name);
        }
        errorOrSuggestion(isError, errorNode, (0, ts_1.chainDiagnosticMessages)(errorInfo, ts_1.Diagnostics.Could_not_find_a_declaration_file_for_module_0_1_implicitly_has_an_any_type, moduleReference, resolvedFileName));
    }
    function resolveExternalModuleSymbol(moduleSymbol, dontResolveAlias) {
        if (moduleSymbol === null || moduleSymbol === void 0 ? void 0 : moduleSymbol.exports) {
            var exportEquals = resolveSymbol(moduleSymbol.exports.get("export=" /* InternalSymbolName.ExportEquals */), dontResolveAlias);
            var exported = getCommonJsExportEquals(getMergedSymbol(exportEquals), getMergedSymbol(moduleSymbol));
            return getMergedSymbol(exported) || moduleSymbol;
        }
        return undefined;
    }
    function getCommonJsExportEquals(exported, moduleSymbol) {
        if (!exported || exported === unknownSymbol || exported === moduleSymbol || moduleSymbol.exports.size === 1 || exported.flags & 2097152 /* SymbolFlags.Alias */) {
            return exported;
        }
        var links = getSymbolLinks(exported);
        if (links.cjsExportMerged) {
            return links.cjsExportMerged;
        }
        var merged = exported.flags & 33554432 /* SymbolFlags.Transient */ ? exported : cloneSymbol(exported);
        merged.flags = merged.flags | 512 /* SymbolFlags.ValueModule */;
        if (merged.exports === undefined) {
            merged.exports = (0, ts_1.createSymbolTable)();
        }
        moduleSymbol.exports.forEach(function (s, name) {
            if (name === "export=" /* InternalSymbolName.ExportEquals */)
                return;
            merged.exports.set(name, merged.exports.has(name) ? mergeSymbol(merged.exports.get(name), s) : s);
        });
        if (merged === exported) {
            // We just mutated a symbol, reset any cached links we may have already set
            // (Notably required to make late bound members appear)
            getSymbolLinks(merged).resolvedExports = undefined;
            getSymbolLinks(merged).resolvedMembers = undefined;
        }
        getSymbolLinks(merged).cjsExportMerged = merged;
        return links.cjsExportMerged = merged;
    }
    // An external module with an 'export =' declaration may be referenced as an ES6 module provided the 'export ='
    // references a symbol that is at least declared as a module or a variable. The target of the 'export =' may
    // combine other declarations with the module or variable (e.g. a class/module, function/module, interface/variable).
    function resolveESModuleSymbol(moduleSymbol, referencingLocation, dontResolveAlias, suppressInteropError) {
        var _a;
        var symbol = resolveExternalModuleSymbol(moduleSymbol, dontResolveAlias);
        if (!dontResolveAlias && symbol) {
            if (!suppressInteropError && !(symbol.flags & (1536 /* SymbolFlags.Module */ | 3 /* SymbolFlags.Variable */)) && !(0, ts_1.getDeclarationOfKind)(symbol, 311 /* SyntaxKind.SourceFile */)) {
                var compilerOptionName = moduleKind >= ts_1.ModuleKind.ES2015
                    ? "allowSyntheticDefaultImports"
                    : "esModuleInterop";
                error(referencingLocation, ts_1.Diagnostics.This_module_can_only_be_referenced_with_ECMAScript_imports_Slashexports_by_turning_on_the_0_flag_and_referencing_its_default_export, compilerOptionName);
                return symbol;
            }
            var referenceParent = referencingLocation.parent;
            if (((0, ts_1.isImportDeclaration)(referenceParent) && (0, ts_1.getNamespaceDeclarationNode)(referenceParent)) ||
                (0, ts_1.isImportCall)(referenceParent)) {
                var reference = (0, ts_1.isImportCall)(referenceParent) ? referenceParent.arguments[0] : referenceParent.moduleSpecifier;
                var type = getTypeOfSymbol(symbol);
                var defaultOnlyType = getTypeWithSyntheticDefaultOnly(type, symbol, moduleSymbol, reference);
                if (defaultOnlyType) {
                    return cloneTypeAsModuleType(symbol, defaultOnlyType, referenceParent);
                }
                var targetFile = (_a = moduleSymbol === null || moduleSymbol === void 0 ? void 0 : moduleSymbol.declarations) === null || _a === void 0 ? void 0 : _a.find(ts_1.isSourceFile);
                var isEsmCjsRef = targetFile && isESMFormatImportImportingCommonjsFormatFile(getUsageModeForExpression(reference), targetFile.impliedNodeFormat);
                if ((0, ts_1.getESModuleInterop)(compilerOptions) || isEsmCjsRef) {
                    var sigs = getSignaturesOfStructuredType(type, 0 /* SignatureKind.Call */);
                    if (!sigs || !sigs.length) {
                        sigs = getSignaturesOfStructuredType(type, 1 /* SignatureKind.Construct */);
                    }
                    if ((sigs && sigs.length) ||
                        getPropertyOfType(type, "default" /* InternalSymbolName.Default */, /*skipObjectFunctionPropertyAugment*/ true) ||
                        isEsmCjsRef) {
                        var moduleType = type.flags & 3670016 /* TypeFlags.StructuredType */
                            ? getTypeWithSyntheticDefaultImportType(type, symbol, moduleSymbol, reference)
                            : createDefaultPropertyWrapperForModule(symbol, symbol.parent);
                        return cloneTypeAsModuleType(symbol, moduleType, referenceParent);
                    }
                }
            }
        }
        return symbol;
    }
    /**
     * Create a new symbol which has the module's type less the call and construct signatures
     */
    function cloneTypeAsModuleType(symbol, moduleType, referenceParent) {
        var result = createSymbol(symbol.flags, symbol.escapedName);
        result.declarations = symbol.declarations ? symbol.declarations.slice() : [];
        result.parent = symbol.parent;
        result.links.target = symbol;
        result.links.originatingImport = referenceParent;
        if (symbol.valueDeclaration)
            result.valueDeclaration = symbol.valueDeclaration;
        if (symbol.constEnumOnlyModule)
            result.constEnumOnlyModule = true;
        if (symbol.members)
            result.members = new Map(symbol.members);
        if (symbol.exports)
            result.exports = new Map(symbol.exports);
        var resolvedModuleType = resolveStructuredTypeMembers(moduleType); // Should already be resolved from the signature checks above
        result.links.type = createAnonymousType(result, resolvedModuleType.members, ts_1.emptyArray, ts_1.emptyArray, resolvedModuleType.indexInfos);
        return result;
    }
    function hasExportAssignmentSymbol(moduleSymbol) {
        return moduleSymbol.exports.get("export=" /* InternalSymbolName.ExportEquals */) !== undefined;
    }
    function getExportsOfModuleAsArray(moduleSymbol) {
        return symbolsToArray(getExportsOfModule(moduleSymbol));
    }
    function getExportsAndPropertiesOfModule(moduleSymbol) {
        var exports = getExportsOfModuleAsArray(moduleSymbol);
        var exportEquals = resolveExternalModuleSymbol(moduleSymbol);
        if (exportEquals !== moduleSymbol) {
            var type = getTypeOfSymbol(exportEquals);
            if (shouldTreatPropertiesOfExternalModuleAsExports(type)) {
                (0, ts_1.addRange)(exports, getPropertiesOfType(type));
            }
        }
        return exports;
    }
    function forEachExportAndPropertyOfModule(moduleSymbol, cb) {
        var exports = getExportsOfModule(moduleSymbol);
        exports.forEach(function (symbol, key) {
            if (!isReservedMemberName(key)) {
                cb(symbol, key);
            }
        });
        var exportEquals = resolveExternalModuleSymbol(moduleSymbol);
        if (exportEquals !== moduleSymbol) {
            var type = getTypeOfSymbol(exportEquals);
            if (shouldTreatPropertiesOfExternalModuleAsExports(type)) {
                forEachPropertyOfType(type, function (symbol, escapedName) {
                    cb(symbol, escapedName);
                });
            }
        }
    }
    function tryGetMemberInModuleExports(memberName, moduleSymbol) {
        var symbolTable = getExportsOfModule(moduleSymbol);
        if (symbolTable) {
            return symbolTable.get(memberName);
        }
    }
    function tryGetMemberInModuleExportsAndProperties(memberName, moduleSymbol) {
        var symbol = tryGetMemberInModuleExports(memberName, moduleSymbol);
        if (symbol) {
            return symbol;
        }
        var exportEquals = resolveExternalModuleSymbol(moduleSymbol);
        if (exportEquals === moduleSymbol) {
            return undefined;
        }
        var type = getTypeOfSymbol(exportEquals);
        return shouldTreatPropertiesOfExternalModuleAsExports(type) ? getPropertyOfType(type, memberName) : undefined;
    }
    function shouldTreatPropertiesOfExternalModuleAsExports(resolvedExternalModuleType) {
        return !(resolvedExternalModuleType.flags & 402784252 /* TypeFlags.Primitive */ ||
            (0, ts_1.getObjectFlags)(resolvedExternalModuleType) & 1 /* ObjectFlags.Class */ ||
            // `isArrayOrTupleLikeType` is too expensive to use in this auto-imports hot path
            isArrayType(resolvedExternalModuleType) ||
            isTupleType(resolvedExternalModuleType));
    }
    function getExportsOfSymbol(symbol) {
        return symbol.flags & 6256 /* SymbolFlags.LateBindingContainer */ ? getResolvedMembersOrExportsOfSymbol(symbol, "resolvedExports" /* MembersOrExportsResolutionKind.resolvedExports */) :
            symbol.flags & 1536 /* SymbolFlags.Module */ ? getExportsOfModule(symbol) :
                symbol.exports || emptySymbols;
    }
    function getExportsOfModule(moduleSymbol) {
        var links = getSymbolLinks(moduleSymbol);
        if (!links.resolvedExports) {
            var _a = getExportsOfModuleWorker(moduleSymbol), exports = _a.exports, typeOnlyExportStarMap = _a.typeOnlyExportStarMap;
            links.resolvedExports = exports;
            links.typeOnlyExportStarMap = typeOnlyExportStarMap;
        }
        return links.resolvedExports;
    }
    /**
     * Extends one symbol table with another while collecting information on name collisions for error message generation into the `lookupTable` argument
     * Not passing `lookupTable` and `exportNode` disables this collection, and just extends the tables
     */
    function extendExportSymbols(target, source, lookupTable, exportNode) {
        if (!source)
            return;
        source.forEach(function (sourceSymbol, id) {
            if (id === "default" /* InternalSymbolName.Default */)
                return;
            var targetSymbol = target.get(id);
            if (!targetSymbol) {
                target.set(id, sourceSymbol);
                if (lookupTable && exportNode) {
                    lookupTable.set(id, {
                        specifierText: (0, ts_1.getTextOfNode)(exportNode.moduleSpecifier)
                    });
                }
            }
            else if (lookupTable && exportNode && targetSymbol && resolveSymbol(targetSymbol) !== resolveSymbol(sourceSymbol)) {
                var collisionTracker = lookupTable.get(id);
                if (!collisionTracker.exportsWithDuplicate) {
                    collisionTracker.exportsWithDuplicate = [exportNode];
                }
                else {
                    collisionTracker.exportsWithDuplicate.push(exportNode);
                }
            }
        });
    }
    function getExportsOfModuleWorker(moduleSymbol) {
        var visitedSymbols = [];
        var typeOnlyExportStarMap;
        var nonTypeOnlyNames = new Set();
        // A module defined by an 'export=' consists of one export that needs to be resolved
        moduleSymbol = resolveExternalModuleSymbol(moduleSymbol);
        var exports = visit(moduleSymbol) || emptySymbols;
        if (typeOnlyExportStarMap) {
            nonTypeOnlyNames.forEach(function (name) { return typeOnlyExportStarMap.delete(name); });
        }
        return {
            exports: exports,
            typeOnlyExportStarMap: typeOnlyExportStarMap,
        };
        // The ES6 spec permits export * declarations in a module to circularly reference the module itself. For example,
        // module 'a' can 'export * from "b"' and 'b' can 'export * from "a"' without error.
        function visit(symbol, exportStar, isTypeOnly) {
            if (!isTypeOnly && (symbol === null || symbol === void 0 ? void 0 : symbol.exports)) {
                // Add non-type-only names before checking if we've visited this module,
                // because we might have visited it via an 'export type *', and visiting
                // again with 'export *' will override the type-onlyness of its exports.
                symbol.exports.forEach(function (_, name) { return nonTypeOnlyNames.add(name); });
            }
            if (!(symbol && symbol.exports && (0, ts_1.pushIfUnique)(visitedSymbols, symbol))) {
                return;
            }
            var symbols = new Map(symbol.exports);
            // All export * declarations are collected in an __export symbol by the binder
            var exportStars = symbol.exports.get("__export" /* InternalSymbolName.ExportStar */);
            if (exportStars) {
                var nestedSymbols = (0, ts_1.createSymbolTable)();
                var lookupTable_1 = new Map();
                if (exportStars.declarations) {
                    for (var _i = 0, _a = exportStars.declarations; _i < _a.length; _i++) {
                        var node = _a[_i];
                        var resolvedModule = resolveExternalModuleName(node, node.moduleSpecifier);
                        var exportedSymbols = visit(resolvedModule, node, isTypeOnly || node.isTypeOnly);
                        extendExportSymbols(nestedSymbols, exportedSymbols, lookupTable_1, node);
                    }
                }
                lookupTable_1.forEach(function (_a, id) {
                    var exportsWithDuplicate = _a.exportsWithDuplicate;
                    // It's not an error if the file with multiple `export *`s with duplicate names exports a member with that name itself
                    if (id === "export=" || !(exportsWithDuplicate && exportsWithDuplicate.length) || symbols.has(id)) {
                        return;
                    }
                    for (var _i = 0, exportsWithDuplicate_1 = exportsWithDuplicate; _i < exportsWithDuplicate_1.length; _i++) {
                        var node = exportsWithDuplicate_1[_i];
                        diagnostics.add((0, ts_1.createDiagnosticForNode)(node, ts_1.Diagnostics.Module_0_has_already_exported_a_member_named_1_Consider_explicitly_re_exporting_to_resolve_the_ambiguity, lookupTable_1.get(id).specifierText, (0, ts_1.unescapeLeadingUnderscores)(id)));
                    }
                });
                extendExportSymbols(symbols, nestedSymbols);
            }
            if (exportStar === null || exportStar === void 0 ? void 0 : exportStar.isTypeOnly) {
                typeOnlyExportStarMap !== null && typeOnlyExportStarMap !== void 0 ? typeOnlyExportStarMap : (typeOnlyExportStarMap = new Map());
                symbols.forEach(function (_, escapedName) { return typeOnlyExportStarMap.set(escapedName, exportStar); });
            }
            return symbols;
        }
    }
    function getMergedSymbol(symbol) {
        var merged;
        return symbol && symbol.mergeId && (merged = mergedSymbols[symbol.mergeId]) ? merged : symbol;
    }
    function getSymbolOfDeclaration(node) {
        return getMergedSymbol(node.symbol && getLateBoundSymbol(node.symbol));
    }
    /**
     * Get the merged symbol for a node. If you know the node is a `Declaration`, it is faster and more type safe to
     * use use `getSymbolOfDeclaration` instead.
     */
    function getSymbolOfNode(node) {
        return (0, ts_1.canHaveSymbol)(node) ? getSymbolOfDeclaration(node) : undefined;
    }
    function getParentOfSymbol(symbol) {
        return getMergedSymbol(symbol.parent && getLateBoundSymbol(symbol.parent));
    }
    function getAlternativeContainingModules(symbol, enclosingDeclaration) {
        var containingFile = (0, ts_1.getSourceFileOfNode)(enclosingDeclaration);
        var id = getNodeId(containingFile);
        var links = getSymbolLinks(symbol);
        var results;
        if (links.extendedContainersByFile && (results = links.extendedContainersByFile.get(id))) {
            return results;
        }
        if (containingFile && containingFile.imports) {
            // Try to make an import using an import already in the enclosing file, if possible
            for (var _i = 0, _a = containingFile.imports; _i < _a.length; _i++) {
                var importRef = _a[_i];
                if ((0, ts_1.nodeIsSynthesized)(importRef))
                    continue; // Synthetic names can't be resolved by `resolveExternalModuleName` - they'll cause a debug assert if they error
                var resolvedModule = resolveExternalModuleName(enclosingDeclaration, importRef, /*ignoreErrors*/ true);
                if (!resolvedModule)
                    continue;
                var ref = getAliasForSymbolInContainer(resolvedModule, symbol);
                if (!ref)
                    continue;
                results = (0, ts_1.append)(results, resolvedModule);
            }
            if ((0, ts_1.length)(results)) {
                (links.extendedContainersByFile || (links.extendedContainersByFile = new Map())).set(id, results);
                return results;
            }
        }
        if (links.extendedContainers) {
            return links.extendedContainers;
        }
        // No results from files already being imported by this file - expand search (expensive, but not location-specific, so cached)
        var otherFiles = host.getSourceFiles();
        for (var _b = 0, otherFiles_1 = otherFiles; _b < otherFiles_1.length; _b++) {
            var file = otherFiles_1[_b];
            if (!(0, ts_1.isExternalModule)(file))
                continue;
            var sym = getSymbolOfDeclaration(file);
            var ref = getAliasForSymbolInContainer(sym, symbol);
            if (!ref)
                continue;
            results = (0, ts_1.append)(results, sym);
        }
        return links.extendedContainers = results || ts_1.emptyArray;
    }
    /**
     * Attempts to find the symbol corresponding to the container a symbol is in - usually this
     * is just its' `.parent`, but for locals, this value is `undefined`
     */
    function getContainersOfSymbol(symbol, enclosingDeclaration, meaning) {
        var container = getParentOfSymbol(symbol);
        // Type parameters end up in the `members` lists but are not externally visible
        if (container && !(symbol.flags & 262144 /* SymbolFlags.TypeParameter */)) {
            var additionalContainers = (0, ts_1.mapDefined)(container.declarations, fileSymbolIfFileSymbolExportEqualsContainer);
            var reexportContainers = enclosingDeclaration && getAlternativeContainingModules(symbol, enclosingDeclaration);
            var objectLiteralContainer = getVariableDeclarationOfObjectLiteral(container, meaning);
            if (enclosingDeclaration &&
                container.flags & getQualifiedLeftMeaning(meaning) &&
                getAccessibleSymbolChain(container, enclosingDeclaration, 1920 /* SymbolFlags.Namespace */, /*useOnlyExternalAliasing*/ false)) {
                return (0, ts_1.append)((0, ts_1.concatenate)((0, ts_1.concatenate)([container], additionalContainers), reexportContainers), objectLiteralContainer); // This order expresses a preference for the real container if it is in scope
            }
            // we potentially have a symbol which is a member of the instance side of something - look for a variable in scope with the container's type
            // which may be acting like a namespace (eg, `Symbol` acts like a namespace when looking up `Symbol.toStringTag`)
            var firstVariableMatch = !(container.flags & getQualifiedLeftMeaning(meaning))
                && container.flags & 788968 /* SymbolFlags.Type */
                && getDeclaredTypeOfSymbol(container).flags & 524288 /* TypeFlags.Object */
                && meaning === 111551 /* SymbolFlags.Value */
                ? forEachSymbolTableInScope(enclosingDeclaration, function (t) {
                    return (0, ts_1.forEachEntry)(t, function (s) {
                        if (s.flags & getQualifiedLeftMeaning(meaning) && getTypeOfSymbol(s) === getDeclaredTypeOfSymbol(container)) {
                            return s;
                        }
                    });
                }) : undefined;
            var res = firstVariableMatch ? __spreadArray(__spreadArray([firstVariableMatch], additionalContainers, true), [container], false) : __spreadArray(__spreadArray([], additionalContainers, true), [container], false);
            res = (0, ts_1.append)(res, objectLiteralContainer);
            res = (0, ts_1.addRange)(res, reexportContainers);
            return res;
        }
        var candidates = (0, ts_1.mapDefined)(symbol.declarations, function (d) {
            if (!(0, ts_1.isAmbientModule)(d) && d.parent) {
                // direct children of a module
                if (hasNonGlobalAugmentationExternalModuleSymbol(d.parent)) {
                    return getSymbolOfDeclaration(d.parent);
                }
                // export ='d member of an ambient module
                if ((0, ts_1.isModuleBlock)(d.parent) && d.parent.parent && resolveExternalModuleSymbol(getSymbolOfDeclaration(d.parent.parent)) === symbol) {
                    return getSymbolOfDeclaration(d.parent.parent);
                }
            }
            if ((0, ts_1.isClassExpression)(d) && (0, ts_1.isBinaryExpression)(d.parent) && d.parent.operatorToken.kind === 64 /* SyntaxKind.EqualsToken */ && (0, ts_1.isAccessExpression)(d.parent.left) && (0, ts_1.isEntityNameExpression)(d.parent.left.expression)) {
                if ((0, ts_1.isModuleExportsAccessExpression)(d.parent.left) || (0, ts_1.isExportsIdentifier)(d.parent.left.expression)) {
                    return getSymbolOfDeclaration((0, ts_1.getSourceFileOfNode)(d));
                }
                checkExpressionCached(d.parent.left.expression);
                return getNodeLinks(d.parent.left.expression).resolvedSymbol;
            }
        });
        if (!(0, ts_1.length)(candidates)) {
            return undefined;
        }
        return (0, ts_1.mapDefined)(candidates, function (candidate) { return getAliasForSymbolInContainer(candidate, symbol) ? candidate : undefined; });
        function fileSymbolIfFileSymbolExportEqualsContainer(d) {
            return container && getFileSymbolIfFileSymbolExportEqualsContainer(d, container);
        }
    }
    function getVariableDeclarationOfObjectLiteral(symbol, meaning) {
        // If we're trying to reference some object literal in, eg `var a = { x: 1 }`, the symbol for the literal, `__object`, is distinct
        // from the symbol of the declaration it is being assigned to. Since we can use the declaration to refer to the literal, however,
        // we'd like to make that connection here - potentially causing us to paint the declaration's visibility, and therefore the literal.
        var firstDecl = !!(0, ts_1.length)(symbol.declarations) && (0, ts_1.first)(symbol.declarations);
        if (meaning & 111551 /* SymbolFlags.Value */ && firstDecl && firstDecl.parent && (0, ts_1.isVariableDeclaration)(firstDecl.parent)) {
            if ((0, ts_1.isObjectLiteralExpression)(firstDecl) && firstDecl === firstDecl.parent.initializer || (0, ts_1.isTypeLiteralNode)(firstDecl) && firstDecl === firstDecl.parent.type) {
                return getSymbolOfDeclaration(firstDecl.parent);
            }
        }
    }
    function getFileSymbolIfFileSymbolExportEqualsContainer(d, container) {
        var fileSymbol = getExternalModuleContainer(d);
        var exported = fileSymbol && fileSymbol.exports && fileSymbol.exports.get("export=" /* InternalSymbolName.ExportEquals */);
        return exported && getSymbolIfSameReference(exported, container) ? fileSymbol : undefined;
    }
    function getAliasForSymbolInContainer(container, symbol) {
        if (container === getParentOfSymbol(symbol)) {
            // fast path, `symbol` is either already the alias or isn't aliased
            return symbol;
        }
        // Check if container is a thing with an `export=` which points directly at `symbol`, and if so, return
        // the container itself as the alias for the symbol
        var exportEquals = container.exports && container.exports.get("export=" /* InternalSymbolName.ExportEquals */);
        if (exportEquals && getSymbolIfSameReference(exportEquals, symbol)) {
            return container;
        }
        var exports = getExportsOfSymbol(container);
        var quick = exports.get(symbol.escapedName);
        if (quick && getSymbolIfSameReference(quick, symbol)) {
            return quick;
        }
        return (0, ts_1.forEachEntry)(exports, function (exported) {
            if (getSymbolIfSameReference(exported, symbol)) {
                return exported;
            }
        });
    }
    /**
     * Checks if two symbols, through aliasing and/or merging, refer to the same thing
     */
    function getSymbolIfSameReference(s1, s2) {
        if (getMergedSymbol(resolveSymbol(getMergedSymbol(s1))) === getMergedSymbol(resolveSymbol(getMergedSymbol(s2)))) {
            return s1;
        }
    }
    function getExportSymbolOfValueSymbolIfExported(symbol) {
        return getMergedSymbol(symbol && (symbol.flags & 1048576 /* SymbolFlags.ExportValue */) !== 0 && symbol.exportSymbol || symbol);
    }
    function symbolIsValue(symbol, includeTypeOnlyMembers) {
        return !!(symbol.flags & 111551 /* SymbolFlags.Value */ ||
            symbol.flags & 2097152 /* SymbolFlags.Alias */ && getAllSymbolFlags(symbol) & 111551 /* SymbolFlags.Value */ && (includeTypeOnlyMembers || !getTypeOnlyAliasDeclaration(symbol)));
    }
    function findConstructorDeclaration(node) {
        var members = node.members;
        for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {
            var member = members_1[_i];
            if (member.kind === 175 /* SyntaxKind.Constructor */ && (0, ts_1.nodeIsPresent)(member.body)) {
                return member;
            }
        }
    }
    function createType(flags) {
        var result = new Type(checker, flags);
        typeCount++;
        result.id = typeCount;
        ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.recordType(result);
        return result;
    }
    function createTypeWithSymbol(flags, symbol) {
        var result = createType(flags);
        result.symbol = symbol;
        return result;
    }
    function createOriginType(flags) {
        return new Type(checker, flags);
    }
    function createIntrinsicType(kind, intrinsicName, objectFlags) {
        if (objectFlags === void 0) { objectFlags = 0 /* ObjectFlags.None */; }
        var type = createType(kind);
        type.intrinsicName = intrinsicName;
        type.objectFlags = objectFlags | 524288 /* ObjectFlags.CouldContainTypeVariablesComputed */ | 2097152 /* ObjectFlags.IsGenericTypeComputed */ | 33554432 /* ObjectFlags.IsUnknownLikeUnionComputed */ | 16777216 /* ObjectFlags.IsNeverIntersectionComputed */;
        return type;
    }
    function createObjectType(objectFlags, symbol) {
        var type = createTypeWithSymbol(524288 /* TypeFlags.Object */, symbol);
        type.objectFlags = objectFlags;
        type.members = undefined;
        type.properties = undefined;
        type.callSignatures = undefined;
        type.constructSignatures = undefined;
        type.indexInfos = undefined;
        return type;
    }
    function createTypeofType() {
        return getUnionType((0, ts_1.arrayFrom)(typeofNEFacts.keys(), getStringLiteralType));
    }
    function createTypeParameter(symbol) {
        return createTypeWithSymbol(262144 /* TypeFlags.TypeParameter */, symbol);
    }
    // A reserved member name starts with two underscores, but the third character cannot be an underscore,
    // @, or #. A third underscore indicates an escaped form of an identifier that started
    // with at least two underscores. The @ character indicates that the name is denoted by a well known ES
    // Symbol instance and the # character indicates that the name is a PrivateIdentifier.
    function isReservedMemberName(name) {
        return name.charCodeAt(0) === 95 /* CharacterCodes._ */ &&
            name.charCodeAt(1) === 95 /* CharacterCodes._ */ &&
            name.charCodeAt(2) !== 95 /* CharacterCodes._ */ &&
            name.charCodeAt(2) !== 64 /* CharacterCodes.at */ &&
            name.charCodeAt(2) !== 35 /* CharacterCodes.hash */;
    }
    function getNamedMembers(members) {
        var result;
        members.forEach(function (symbol, id) {
            if (isNamedMember(symbol, id)) {
                (result || (result = [])).push(symbol);
            }
        });
        return result || ts_1.emptyArray;
    }
    function isNamedMember(member, escapedName) {
        return !isReservedMemberName(escapedName) && symbolIsValue(member);
    }
    function getNamedOrIndexSignatureMembers(members) {
        var result = getNamedMembers(members);
        var index = getIndexSymbolFromSymbolTable(members);
        return index ? (0, ts_1.concatenate)(result, [index]) : result;
    }
    function setStructuredTypeMembers(type, members, callSignatures, constructSignatures, indexInfos) {
        var resolved = type;
        resolved.members = members;
        resolved.properties = ts_1.emptyArray;
        resolved.callSignatures = callSignatures;
        resolved.constructSignatures = constructSignatures;
        resolved.indexInfos = indexInfos;
        // This can loop back to getPropertyOfType() which would crash if `callSignatures` & `constructSignatures` are not initialized.
        if (members !== emptySymbols)
            resolved.properties = getNamedMembers(members);
        return resolved;
    }
    function createAnonymousType(symbol, members, callSignatures, constructSignatures, indexInfos) {
        return setStructuredTypeMembers(createObjectType(16 /* ObjectFlags.Anonymous */, symbol), members, callSignatures, constructSignatures, indexInfos);
    }
    function getResolvedTypeWithoutAbstractConstructSignatures(type) {
        if (type.constructSignatures.length === 0)
            return type;
        if (type.objectTypeWithoutAbstractConstructSignatures)
            return type.objectTypeWithoutAbstractConstructSignatures;
        var constructSignatures = (0, ts_1.filter)(type.constructSignatures, function (signature) { return !(signature.flags & 4 /* SignatureFlags.Abstract */); });
        if (type.constructSignatures === constructSignatures)
            return type;
        var typeCopy = createAnonymousType(type.symbol, type.members, type.callSignatures, (0, ts_1.some)(constructSignatures) ? constructSignatures : ts_1.emptyArray, type.indexInfos);
        type.objectTypeWithoutAbstractConstructSignatures = typeCopy;
        typeCopy.objectTypeWithoutAbstractConstructSignatures = typeCopy;
        return typeCopy;
    }
    function forEachSymbolTableInScope(enclosingDeclaration, callback) {
        var result;
        var _loop_2 = function (location_1) {
            // Locals of a source file are not in scope (because they get merged into the global symbol table)
            if ((0, ts_1.canHaveLocals)(location_1) && location_1.locals && !isGlobalSourceFile(location_1)) {
                if (result = callback(location_1.locals, /*ignoreQualification*/ undefined, /*isLocalNameLookup*/ true, location_1)) {
                    return { value: result };
                }
            }
            switch (location_1.kind) {
                case 311 /* SyntaxKind.SourceFile */:
                    if (!(0, ts_1.isExternalOrCommonJsModule)(location_1)) {
                        break;
                    }
                // falls through
                case 266 /* SyntaxKind.ModuleDeclaration */:
                    var sym = getSymbolOfDeclaration(location_1);
                    // `sym` may not have exports if this module declaration is backed by the symbol for a `const` that's being rewritten
                    // into a namespace - in such cases, it's best to just let the namespace appear empty (the const members couldn't have referred
                    // to one another anyway)
                    if (result = callback((sym === null || sym === void 0 ? void 0 : sym.exports) || emptySymbols, /*ignoreQualification*/ undefined, /*isLocalNameLookup*/ true, location_1)) {
                        return { value: result };
                    }
                    break;
                case 262 /* SyntaxKind.ClassDeclaration */:
                case 230 /* SyntaxKind.ClassExpression */:
                case 263 /* SyntaxKind.InterfaceDeclaration */:
                    // Type parameters are bound into `members` lists so they can merge across declarations
                    // This is troublesome, since in all other respects, they behave like locals :cries:
                    // TODO: the below is shared with similar code in `resolveName` - in fact, rephrasing all this symbol
                    // lookup logic in terms of `resolveName` would be nice
                    // The below is used to lookup type parameters within a class or interface, as they are added to the class/interface locals
                    // These can never be latebound, so the symbol's raw members are sufficient. `getMembersOfNode` cannot be used, as it would
                    // trigger resolving late-bound names, which we may already be in the process of doing while we're here!
                    var table_1;
                    // TODO: Should this filtered table be cached in some way?
                    (getSymbolOfDeclaration(location_1).members || emptySymbols).forEach(function (memberSymbol, key) {
                        if (memberSymbol.flags & (788968 /* SymbolFlags.Type */ & ~67108864 /* SymbolFlags.Assignment */)) {
                            (table_1 || (table_1 = (0, ts_1.createSymbolTable)())).set(key, memberSymbol);
                        }
                    });
                    if (table_1 && (result = callback(table_1, /*ignoreQualification*/ undefined, /*isLocalNameLookup*/ false, location_1))) {
                        return { value: result };
                    }
                    break;
            }
        };
        for (var location_1 = enclosingDeclaration; location_1; location_1 = location_1.parent) {
            var state_1 = _loop_2(location_1);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        return callback(globals, /*ignoreQualification*/ undefined, /*isLocalNameLookup*/ true);
    }
    function getQualifiedLeftMeaning(rightMeaning) {
        // If we are looking in value space, the parent meaning is value, other wise it is namespace
        return rightMeaning === 111551 /* SymbolFlags.Value */ ? 111551 /* SymbolFlags.Value */ : 1920 /* SymbolFlags.Namespace */;
    }
    function getAccessibleSymbolChain(symbol, enclosingDeclaration, meaning, useOnlyExternalAliasing, visitedSymbolTablesMap) {
        if (visitedSymbolTablesMap === void 0) { visitedSymbolTablesMap = new Map(); }
        if (!(symbol && !isPropertyOrMethodDeclarationSymbol(symbol))) {
            return undefined;
        }
        var links = getSymbolLinks(symbol);
        var cache = (links.accessibleChainCache || (links.accessibleChainCache = new Map()));
        // Go from enclosingDeclaration to the first scope we check, so the cache is keyed off the scope and thus shared more
        var firstRelevantLocation = forEachSymbolTableInScope(enclosingDeclaration, function (_, __, ___, node) { return node; });
        var key = "".concat(useOnlyExternalAliasing ? 0 : 1, "|").concat(firstRelevantLocation && getNodeId(firstRelevantLocation), "|").concat(meaning);
        if (cache.has(key)) {
            return cache.get(key);
        }
        var id = getSymbolId(symbol);
        var visitedSymbolTables = visitedSymbolTablesMap.get(id);
        if (!visitedSymbolTables) {
            visitedSymbolTablesMap.set(id, visitedSymbolTables = []);
        }
        var result = forEachSymbolTableInScope(enclosingDeclaration, getAccessibleSymbolChainFromSymbolTable);
        cache.set(key, result);
        return result;
        /**
         * @param {ignoreQualification} boolean Set when a symbol is being looked for through the exports of another symbol (meaning we have a route to qualify it already)
         */
        function getAccessibleSymbolChainFromSymbolTable(symbols, ignoreQualification, isLocalNameLookup) {
            if (!(0, ts_1.pushIfUnique)(visitedSymbolTables, symbols)) {
                return undefined;
            }
            var result = trySymbolTable(symbols, ignoreQualification, isLocalNameLookup);
            visitedSymbolTables.pop();
            return result;
        }
        function canQualifySymbol(symbolFromSymbolTable, meaning) {
            // If the symbol is equivalent and doesn't need further qualification, this symbol is accessible
            return !needsQualification(symbolFromSymbolTable, enclosingDeclaration, meaning) ||
                // If symbol needs qualification, make sure that parent is accessible, if it is then this symbol is accessible too
                !!getAccessibleSymbolChain(symbolFromSymbolTable.parent, enclosingDeclaration, getQualifiedLeftMeaning(meaning), useOnlyExternalAliasing, visitedSymbolTablesMap);
        }
        function isAccessible(symbolFromSymbolTable, resolvedAliasSymbol, ignoreQualification) {
            return (symbol === (resolvedAliasSymbol || symbolFromSymbolTable) || getMergedSymbol(symbol) === getMergedSymbol(resolvedAliasSymbol || symbolFromSymbolTable)) &&
                // if the symbolFromSymbolTable is not external module (it could be if it was determined as ambient external module and would be in globals table)
                // and if symbolFromSymbolTable or alias resolution matches the symbol,
                // check the symbol can be qualified, it is only then this symbol is accessible
                !(0, ts_1.some)(symbolFromSymbolTable.declarations, hasNonGlobalAugmentationExternalModuleSymbol) &&
                (ignoreQualification || canQualifySymbol(getMergedSymbol(symbolFromSymbolTable), meaning));
        }
        function trySymbolTable(symbols, ignoreQualification, isLocalNameLookup) {
            // If symbol is directly available by its name in the symbol table
            if (isAccessible(symbols.get(symbol.escapedName), /*resolvedAliasSymbol*/ undefined, ignoreQualification)) {
                return [symbol];
            }
            // Check if symbol is any of the aliases in scope
            var result = (0, ts_1.forEachEntry)(symbols, function (symbolFromSymbolTable) {
                if (symbolFromSymbolTable.flags & 2097152 /* SymbolFlags.Alias */
                    && symbolFromSymbolTable.escapedName !== "export=" /* InternalSymbolName.ExportEquals */
                    && symbolFromSymbolTable.escapedName !== "default" /* InternalSymbolName.Default */
                    && !((0, ts_1.isUMDExportSymbol)(symbolFromSymbolTable) && enclosingDeclaration && (0, ts_1.isExternalModule)((0, ts_1.getSourceFileOfNode)(enclosingDeclaration)))
                    // If `!useOnlyExternalAliasing`, we can use any type of alias to get the name
                    && (!useOnlyExternalAliasing || (0, ts_1.some)(symbolFromSymbolTable.declarations, ts_1.isExternalModuleImportEqualsDeclaration))
                    // If we're looking up a local name to reference directly, omit namespace reexports, otherwise when we're trawling through an export list to make a dotted name, we can keep it
                    && (isLocalNameLookup ? !(0, ts_1.some)(symbolFromSymbolTable.declarations, ts_1.isNamespaceReexportDeclaration) : true)
                    // While exports are generally considered to be in scope, export-specifier declared symbols are _not_
                    // See similar comment in `resolveName` for details
                    && (ignoreQualification || !(0, ts_1.getDeclarationOfKind)(symbolFromSymbolTable, 280 /* SyntaxKind.ExportSpecifier */))) {
                    var resolvedImportedSymbol = resolveAlias(symbolFromSymbolTable);
                    var candidate = getCandidateListForSymbol(symbolFromSymbolTable, resolvedImportedSymbol, ignoreQualification);
                    if (candidate) {
                        return candidate;
                    }
                }
                if (symbolFromSymbolTable.escapedName === symbol.escapedName && symbolFromSymbolTable.exportSymbol) {
                    if (isAccessible(getMergedSymbol(symbolFromSymbolTable.exportSymbol), /*resolvedAliasSymbol*/ undefined, ignoreQualification)) {
                        return [symbol];
                    }
                }
            });
            // If there's no result and we're looking at the global symbol table, treat `globalThis` like an alias and try to lookup thru that
            return result || (symbols === globals ? getCandidateListForSymbol(globalThisSymbol, globalThisSymbol, ignoreQualification) : undefined);
        }
        function getCandidateListForSymbol(symbolFromSymbolTable, resolvedImportedSymbol, ignoreQualification) {
            if (isAccessible(symbolFromSymbolTable, resolvedImportedSymbol, ignoreQualification)) {
                return [symbolFromSymbolTable];
            }
            // Look in the exported members, if we can find accessibleSymbolChain, symbol is accessible using this chain
            // but only if the symbolFromSymbolTable can be qualified
            var candidateTable = getExportsOfSymbol(resolvedImportedSymbol);
            var accessibleSymbolsFromExports = candidateTable && getAccessibleSymbolChainFromSymbolTable(candidateTable, /*ignoreQualification*/ true);
            if (accessibleSymbolsFromExports && canQualifySymbol(symbolFromSymbolTable, getQualifiedLeftMeaning(meaning))) {
                return [symbolFromSymbolTable].concat(accessibleSymbolsFromExports);
            }
        }
    }
    function needsQualification(symbol, enclosingDeclaration, meaning) {
        var qualify = false;
        forEachSymbolTableInScope(enclosingDeclaration, function (symbolTable) {
            // If symbol of this name is not available in the symbol table we are ok
            var symbolFromSymbolTable = getMergedSymbol(symbolTable.get(symbol.escapedName));
            if (!symbolFromSymbolTable) {
                // Continue to the next symbol table
                return false;
            }
            // If the symbol with this name is present it should refer to the symbol
            if (symbolFromSymbolTable === symbol) {
                // No need to qualify
                return true;
            }
            // Qualify if the symbol from symbol table has same meaning as expected
            var shouldResolveAlias = (symbolFromSymbolTable.flags & 2097152 /* SymbolFlags.Alias */ && !(0, ts_1.getDeclarationOfKind)(symbolFromSymbolTable, 280 /* SyntaxKind.ExportSpecifier */));
            symbolFromSymbolTable = shouldResolveAlias ? resolveAlias(symbolFromSymbolTable) : symbolFromSymbolTable;
            var flags = shouldResolveAlias ? getAllSymbolFlags(symbolFromSymbolTable) : symbolFromSymbolTable.flags;
            if (flags & meaning) {
                qualify = true;
                return true;
            }
            // Continue to the next symbol table
            return false;
        });
        return qualify;
    }
    function isPropertyOrMethodDeclarationSymbol(symbol) {
        if (symbol.declarations && symbol.declarations.length) {
            for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {
                var declaration = _a[_i];
                switch (declaration.kind) {
                    case 171 /* SyntaxKind.PropertyDeclaration */:
                    case 173 /* SyntaxKind.MethodDeclaration */:
                    case 176 /* SyntaxKind.GetAccessor */:
                    case 177 /* SyntaxKind.SetAccessor */:
                        continue;
                    default:
                        return false;
                }
            }
            return true;
        }
        return false;
    }
    function isTypeSymbolAccessible(typeSymbol, enclosingDeclaration) {
        var access = isSymbolAccessibleWorker(typeSymbol, enclosingDeclaration, 788968 /* SymbolFlags.Type */, /*shouldComputeAliasesToMakeVisible*/ false, /*allowModules*/ true);
        return access.accessibility === 0 /* SymbolAccessibility.Accessible */;
    }
    function isValueSymbolAccessible(typeSymbol, enclosingDeclaration) {
        var access = isSymbolAccessibleWorker(typeSymbol, enclosingDeclaration, 111551 /* SymbolFlags.Value */, /*shouldComputeAliasesToMakeVisible*/ false, /*allowModules*/ true);
        return access.accessibility === 0 /* SymbolAccessibility.Accessible */;
    }
    function isSymbolAccessibleByFlags(typeSymbol, enclosingDeclaration, flags) {
        var access = isSymbolAccessibleWorker(typeSymbol, enclosingDeclaration, flags, /*shouldComputeAliasesToMakeVisible*/ false, /*allowModules*/ false);
        return access.accessibility === 0 /* SymbolAccessibility.Accessible */;
    }
    function isAnySymbolAccessible(symbols, enclosingDeclaration, initialSymbol, meaning, shouldComputeAliasesToMakeVisible, allowModules) {
        if (!(0, ts_1.length)(symbols))
            return;
        var hadAccessibleChain;
        var earlyModuleBail = false;
        for (var _i = 0, _a = symbols; _i < _a.length; _i++) {
            var symbol = _a[_i];
            // Symbol is accessible if it by itself is accessible
            var accessibleSymbolChain = getAccessibleSymbolChain(symbol, enclosingDeclaration, meaning, /*useOnlyExternalAliasing*/ false);
            if (accessibleSymbolChain) {
                hadAccessibleChain = symbol;
                var hasAccessibleDeclarations = hasVisibleDeclarations(accessibleSymbolChain[0], shouldComputeAliasesToMakeVisible);
                if (hasAccessibleDeclarations) {
                    return hasAccessibleDeclarations;
                }
            }
            if (allowModules) {
                if ((0, ts_1.some)(symbol.declarations, hasNonGlobalAugmentationExternalModuleSymbol)) {
                    if (shouldComputeAliasesToMakeVisible) {
                        earlyModuleBail = true;
                        // Generally speaking, we want to use the aliases that already exist to refer to a module, if present
                        // In order to do so, we need to find those aliases in order to retain them in declaration emit; so
                        // if we are in declaration emit, we cannot use the fast path for module visibility until we've exhausted
                        // all other visibility options (in order to capture the possible aliases used to reference the module)
                        continue;
                    }
                    // Any meaning of a module symbol is always accessible via an `import` type
                    return {
                        accessibility: 0 /* SymbolAccessibility.Accessible */
                    };
                }
            }
            // If we haven't got the accessible symbol, it doesn't mean the symbol is actually inaccessible.
            // It could be a qualified symbol and hence verify the path
            // e.g.:
            // module m {
            //     export class c {
            //     }
            // }
            // const x: typeof m.c
            // In the above example when we start with checking if typeof m.c symbol is accessible,
            // we are going to see if c can be accessed in scope directly.
            // But it can't, hence the accessible is going to be undefined, but that doesn't mean m.c is inaccessible
            // It is accessible if the parent m is accessible because then m.c can be accessed through qualification
            var containers = getContainersOfSymbol(symbol, enclosingDeclaration, meaning);
            var parentResult = isAnySymbolAccessible(containers, enclosingDeclaration, initialSymbol, initialSymbol === symbol ? getQualifiedLeftMeaning(meaning) : meaning, shouldComputeAliasesToMakeVisible, allowModules);
            if (parentResult) {
                return parentResult;
            }
        }
        if (earlyModuleBail) {
            return {
                accessibility: 0 /* SymbolAccessibility.Accessible */
            };
        }
        if (hadAccessibleChain) {
            return {
                accessibility: 1 /* SymbolAccessibility.NotAccessible */,
                errorSymbolName: symbolToString(initialSymbol, enclosingDeclaration, meaning),
                errorModuleName: hadAccessibleChain !== initialSymbol ? symbolToString(hadAccessibleChain, enclosingDeclaration, 1920 /* SymbolFlags.Namespace */) : undefined,
            };
        }
    }
    /**
     * Check if the given symbol in given enclosing declaration is accessible and mark all associated alias to be visible if requested
     *
     * @param symbol a Symbol to check if accessible
     * @param enclosingDeclaration a Node containing reference to the symbol
     * @param meaning a SymbolFlags to check if such meaning of the symbol is accessible
     * @param shouldComputeAliasToMakeVisible a boolean value to indicate whether to return aliases to be mark visible in case the symbol is accessible
     */
    function isSymbolAccessible(symbol, enclosingDeclaration, meaning, shouldComputeAliasesToMakeVisible) {
        return isSymbolAccessibleWorker(symbol, enclosingDeclaration, meaning, shouldComputeAliasesToMakeVisible, /*allowModules*/ true);
    }
    function isSymbolAccessibleWorker(symbol, enclosingDeclaration, meaning, shouldComputeAliasesToMakeVisible, allowModules) {
        if (symbol && enclosingDeclaration) {
            var result = isAnySymbolAccessible([symbol], enclosingDeclaration, symbol, meaning, shouldComputeAliasesToMakeVisible, allowModules);
            if (result) {
                return result;
            }
            // This could be a symbol that is not exported in the external module
            // or it could be a symbol from different external module that is not aliased and hence cannot be named
            var symbolExternalModule = (0, ts_1.forEach)(symbol.declarations, getExternalModuleContainer);
            if (symbolExternalModule) {
                var enclosingExternalModule = getExternalModuleContainer(enclosingDeclaration);
                if (symbolExternalModule !== enclosingExternalModule) {
                    // name from different external module that is not visible
                    return {
                        accessibility: 2 /* SymbolAccessibility.CannotBeNamed */,
                        errorSymbolName: symbolToString(symbol, enclosingDeclaration, meaning),
                        errorModuleName: symbolToString(symbolExternalModule),
                        errorNode: (0, ts_1.isInJSFile)(enclosingDeclaration) ? enclosingDeclaration : undefined,
                    };
                }
            }
            // Just a local name that is not accessible
            return {
                accessibility: 1 /* SymbolAccessibility.NotAccessible */,
                errorSymbolName: symbolToString(symbol, enclosingDeclaration, meaning),
            };
        }
        return { accessibility: 0 /* SymbolAccessibility.Accessible */ };
    }
    function getExternalModuleContainer(declaration) {
        var node = (0, ts_1.findAncestor)(declaration, hasExternalModuleSymbol);
        return node && getSymbolOfDeclaration(node);
    }
    function hasExternalModuleSymbol(declaration) {
        return (0, ts_1.isAmbientModule)(declaration) || (declaration.kind === 311 /* SyntaxKind.SourceFile */ && (0, ts_1.isExternalOrCommonJsModule)(declaration));
    }
    function hasNonGlobalAugmentationExternalModuleSymbol(declaration) {
        return (0, ts_1.isModuleWithStringLiteralName)(declaration) || (declaration.kind === 311 /* SyntaxKind.SourceFile */ && (0, ts_1.isExternalOrCommonJsModule)(declaration));
    }
    function hasVisibleDeclarations(symbol, shouldComputeAliasToMakeVisible) {
        var aliasesToMakeVisible;
        if (!(0, ts_1.every)((0, ts_1.filter)(symbol.declarations, function (d) { return d.kind !== 80 /* SyntaxKind.Identifier */; }), getIsDeclarationVisible)) {
            return undefined;
        }
        return { accessibility: 0 /* SymbolAccessibility.Accessible */, aliasesToMakeVisible: aliasesToMakeVisible };
        function getIsDeclarationVisible(declaration) {
            var _a, _b;
            if (!isDeclarationVisible(declaration)) {
                // Mark the unexported alias as visible if its parent is visible
                // because these kind of aliases can be used to name types in declaration file
                var anyImportSyntax = getAnyImportSyntax(declaration);
                if (anyImportSyntax &&
                    !(0, ts_1.hasSyntacticModifier)(anyImportSyntax, 1 /* ModifierFlags.Export */) && // import clause without export
                    isDeclarationVisible(anyImportSyntax.parent)) {
                    return addVisibleAlias(declaration, anyImportSyntax);
                }
                else if ((0, ts_1.isVariableDeclaration)(declaration) && (0, ts_1.isVariableStatement)(declaration.parent.parent) &&
                    !(0, ts_1.hasSyntacticModifier)(declaration.parent.parent, 1 /* ModifierFlags.Export */) && // unexported variable statement
                    isDeclarationVisible(declaration.parent.parent.parent)) {
                    return addVisibleAlias(declaration, declaration.parent.parent);
                }
                else if ((0, ts_1.isLateVisibilityPaintedStatement)(declaration) // unexported top-level statement
                    && !(0, ts_1.hasSyntacticModifier)(declaration, 1 /* ModifierFlags.Export */)
                    && isDeclarationVisible(declaration.parent)) {
                    return addVisibleAlias(declaration, declaration);
                }
                else if ((0, ts_1.isBindingElement)(declaration)) {
                    if (symbol.flags & 2097152 /* SymbolFlags.Alias */ && (0, ts_1.isInJSFile)(declaration) && ((_a = declaration.parent) === null || _a === void 0 ? void 0 : _a.parent) // exported import-like top-level JS require statement
                        && (0, ts_1.isVariableDeclaration)(declaration.parent.parent)
                        && ((_b = declaration.parent.parent.parent) === null || _b === void 0 ? void 0 : _b.parent) && (0, ts_1.isVariableStatement)(declaration.parent.parent.parent.parent)
                        && !(0, ts_1.hasSyntacticModifier)(declaration.parent.parent.parent.parent, 1 /* ModifierFlags.Export */)
                        && declaration.parent.parent.parent.parent.parent // check if the thing containing the variable statement is visible (ie, the file)
                        && isDeclarationVisible(declaration.parent.parent.parent.parent.parent)) {
                        return addVisibleAlias(declaration, declaration.parent.parent.parent.parent);
                    }
                    else if (symbol.flags & 2 /* SymbolFlags.BlockScopedVariable */) {
                        var variableStatement = (0, ts_1.findAncestor)(declaration, ts_1.isVariableStatement);
                        if ((0, ts_1.hasSyntacticModifier)(variableStatement, 1 /* ModifierFlags.Export */)) {
                            return true;
                        }
                        if (!isDeclarationVisible(variableStatement.parent)) {
                            return false;
                        }
                        return addVisibleAlias(declaration, variableStatement);
                    }
                }
                // Declaration is not visible
                return false;
            }
            return true;
        }
        function addVisibleAlias(declaration, aliasingStatement) {
            // In function "buildTypeDisplay" where we decide whether to write type-alias or serialize types,
            // we want to just check if type- alias is accessible or not but we don't care about emitting those alias at that time
            // since we will do the emitting later in trackSymbol.
            if (shouldComputeAliasToMakeVisible) {
                getNodeLinks(declaration).isVisible = true;
                aliasesToMakeVisible = (0, ts_1.appendIfUnique)(aliasesToMakeVisible, aliasingStatement);
            }
            return true;
        }
    }
    function isEntityNameVisible(entityName, enclosingDeclaration) {
        // get symbol of the first identifier of the entityName
        var meaning;
        if (entityName.parent.kind === 185 /* SyntaxKind.TypeQuery */ ||
            entityName.parent.kind === 232 /* SyntaxKind.ExpressionWithTypeArguments */ && !(0, ts_1.isPartOfTypeNode)(entityName.parent) ||
            entityName.parent.kind === 166 /* SyntaxKind.ComputedPropertyName */) {
            // Typeof value
            meaning = 111551 /* SymbolFlags.Value */ | 1048576 /* SymbolFlags.ExportValue */;
        }
        else if (entityName.kind === 165 /* SyntaxKind.QualifiedName */ || entityName.kind === 210 /* SyntaxKind.PropertyAccessExpression */ ||
            entityName.parent.kind === 270 /* SyntaxKind.ImportEqualsDeclaration */) {
            // Left identifier from type reference or TypeAlias
            // Entity name of the import declaration
            meaning = 1920 /* SymbolFlags.Namespace */;
        }
        else {
            // Type Reference or TypeAlias entity = Identifier
            meaning = 788968 /* SymbolFlags.Type */;
        }
        var firstIdentifier = (0, ts_1.getFirstIdentifier)(entityName);
        var symbol = resolveName(enclosingDeclaration, firstIdentifier.escapedText, meaning, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ false);
        if (symbol && symbol.flags & 262144 /* SymbolFlags.TypeParameter */ && meaning & 788968 /* SymbolFlags.Type */) {
            return { accessibility: 0 /* SymbolAccessibility.Accessible */ };
        }
        if (!symbol && (0, ts_1.isThisIdentifier)(firstIdentifier) && isSymbolAccessible(getSymbolOfDeclaration((0, ts_1.getThisContainer)(firstIdentifier, /*includeArrowFunctions*/ false, /*includeClassComputedPropertyName*/ false)), firstIdentifier, meaning, /*shouldComputeAliasesToMakeVisible*/ false).accessibility === 0 /* SymbolAccessibility.Accessible */) {
            return { accessibility: 0 /* SymbolAccessibility.Accessible */ };
        }
        // Verify if the symbol is accessible
        return (symbol && hasVisibleDeclarations(symbol, /*shouldComputeAliasToMakeVisible*/ true)) || {
            accessibility: 1 /* SymbolAccessibility.NotAccessible */,
            errorSymbolName: (0, ts_1.getTextOfNode)(firstIdentifier),
            errorNode: firstIdentifier
        };
    }
    function symbolToString(symbol, enclosingDeclaration, meaning, flags, writer) {
        if (flags === void 0) { flags = 4 /* SymbolFormatFlags.AllowAnyNodeKind */; }
        var nodeFlags = 70221824 /* NodeBuilderFlags.IgnoreErrors */;
        if (flags & 2 /* SymbolFormatFlags.UseOnlyExternalAliasing */) {
            nodeFlags |= 128 /* NodeBuilderFlags.UseOnlyExternalAliasing */;
        }
        if (flags & 1 /* SymbolFormatFlags.WriteTypeParametersOrArguments */) {
            nodeFlags |= 512 /* NodeBuilderFlags.WriteTypeParametersInQualifiedName */;
        }
        if (flags & 8 /* SymbolFormatFlags.UseAliasDefinedOutsideCurrentScope */) {
            nodeFlags |= 16384 /* NodeBuilderFlags.UseAliasDefinedOutsideCurrentScope */;
        }
        if (flags & 32 /* SymbolFormatFlags.DoNotIncludeSymbolChain */) {
            nodeFlags |= 134217728 /* NodeBuilderFlags.DoNotIncludeSymbolChain */;
        }
        if (flags & 16 /* SymbolFormatFlags.WriteComputedProps */) {
            nodeFlags |= 1073741824 /* NodeBuilderFlags.WriteComputedProps */;
        }
        var builder = flags & 4 /* SymbolFormatFlags.AllowAnyNodeKind */ ? nodeBuilder.symbolToNode : nodeBuilder.symbolToEntityName;
        return writer ? symbolToStringWorker(writer).getText() : (0, ts_1.usingSingleLineStringWriter)(symbolToStringWorker);
        function symbolToStringWorker(writer) {
            var entity = builder(symbol, meaning, enclosingDeclaration, nodeFlags); // TODO: GH#18217
            // add neverAsciiEscape for GH#39027
            var printer = (enclosingDeclaration === null || enclosingDeclaration === void 0 ? void 0 : enclosingDeclaration.kind) === 311 /* SyntaxKind.SourceFile */
                ? (0, ts_1.createPrinterWithRemoveCommentsNeverAsciiEscape)()
                : (0, ts_1.createPrinterWithRemoveComments)();
            var sourceFile = enclosingDeclaration && (0, ts_1.getSourceFileOfNode)(enclosingDeclaration);
            printer.writeNode(4 /* EmitHint.Unspecified */, entity, /*sourceFile*/ sourceFile, writer);
            return writer;
        }
    }
    function signatureToString(signature, enclosingDeclaration, flags, kind, writer) {
        if (flags === void 0) { flags = 0 /* TypeFormatFlags.None */; }
        return writer ? signatureToStringWorker(writer).getText() : (0, ts_1.usingSingleLineStringWriter)(signatureToStringWorker);
        function signatureToStringWorker(writer) {
            var sigOutput;
            if (flags & 262144 /* TypeFormatFlags.WriteArrowStyleSignature */) {
                sigOutput = kind === 1 /* SignatureKind.Construct */ ? 184 /* SyntaxKind.ConstructorType */ : 183 /* SyntaxKind.FunctionType */;
            }
            else {
                sigOutput = kind === 1 /* SignatureKind.Construct */ ? 179 /* SyntaxKind.ConstructSignature */ : 178 /* SyntaxKind.CallSignature */;
            }
            var sig = nodeBuilder.signatureToSignatureDeclaration(signature, sigOutput, enclosingDeclaration, toNodeBuilderFlags(flags) | 70221824 /* NodeBuilderFlags.IgnoreErrors */ | 512 /* NodeBuilderFlags.WriteTypeParametersInQualifiedName */);
            var printer = (0, ts_1.createPrinterWithRemoveCommentsOmitTrailingSemicolon)();
            var sourceFile = enclosingDeclaration && (0, ts_1.getSourceFileOfNode)(enclosingDeclaration);
            printer.writeNode(4 /* EmitHint.Unspecified */, sig, /*sourceFile*/ sourceFile, (0, ts_1.getTrailingSemicolonDeferringWriter)(writer)); // TODO: GH#18217
            return writer;
        }
    }
    function typeToString(type, enclosingDeclaration, flags, writer) {
        if (flags === void 0) { flags = 1048576 /* TypeFormatFlags.AllowUniqueESSymbolType */ | 16384 /* TypeFormatFlags.UseAliasDefinedOutsideCurrentScope */; }
        if (writer === void 0) { writer = (0, ts_1.createTextWriter)(""); }
        var noTruncation = compilerOptions.noErrorTruncation || flags & 1 /* TypeFormatFlags.NoTruncation */;
        var typeNode = nodeBuilder.typeToTypeNode(type, enclosingDeclaration, toNodeBuilderFlags(flags) | 70221824 /* NodeBuilderFlags.IgnoreErrors */ | (noTruncation ? 1 /* NodeBuilderFlags.NoTruncation */ : 0));
        if (typeNode === undefined)
            return ts_1.Debug.fail("should always get typenode");
        // The unresolved type gets a synthesized comment on `any` to hint to users that it's not a plain `any`.
        // Otherwise, we always strip comments out.
        var printer = type !== unresolvedType ? (0, ts_1.createPrinterWithRemoveComments)() : (0, ts_1.createPrinterWithDefaults)();
        var sourceFile = enclosingDeclaration && (0, ts_1.getSourceFileOfNode)(enclosingDeclaration);
        printer.writeNode(4 /* EmitHint.Unspecified */, typeNode, /*sourceFile*/ sourceFile, writer);
        var result = writer.getText();
        var maxLength = noTruncation ? ts_1.noTruncationMaximumTruncationLength * 2 : ts_1.defaultMaximumTruncationLength * 2;
        if (maxLength && result && result.length >= maxLength) {
            return result.substr(0, maxLength - "...".length) + "...";
        }
        return result;
    }
    function getTypeNamesForErrorDisplay(left, right) {
        var leftStr = symbolValueDeclarationIsContextSensitive(left.symbol) ? typeToString(left, left.symbol.valueDeclaration) : typeToString(left);
        var rightStr = symbolValueDeclarationIsContextSensitive(right.symbol) ? typeToString(right, right.symbol.valueDeclaration) : typeToString(right);
        if (leftStr === rightStr) {
            leftStr = getTypeNameForErrorDisplay(left);
            rightStr = getTypeNameForErrorDisplay(right);
        }
        return [leftStr, rightStr];
    }
    function getTypeNameForErrorDisplay(type) {
        return typeToString(type, /*enclosingDeclaration*/ undefined, 64 /* TypeFormatFlags.UseFullyQualifiedType */);
    }
    function symbolValueDeclarationIsContextSensitive(symbol) {
        return symbol && !!symbol.valueDeclaration && (0, ts_1.isExpression)(symbol.valueDeclaration) && !isContextSensitive(symbol.valueDeclaration);
    }
    function toNodeBuilderFlags(flags) {
        if (flags === void 0) { flags = 0 /* TypeFormatFlags.None */; }
        return flags & 848330091 /* TypeFormatFlags.NodeBuilderFlagsMask */;
    }
    function isClassInstanceSide(type) {
        return !!type.symbol && !!(type.symbol.flags & 32 /* SymbolFlags.Class */) && (type === getDeclaredTypeOfClassOrInterface(type.symbol) || (!!(type.flags & 524288 /* TypeFlags.Object */) && !!((0, ts_1.getObjectFlags)(type) & 16777216 /* ObjectFlags.IsClassInstanceClone */)));
    }
    function createNodeBuilder() {
        return {
            typeToTypeNode: function (type, enclosingDeclaration, flags, tracker) {
                return withContext(enclosingDeclaration, flags, tracker, function (context) { return typeToTypeNodeHelper(type, context); });
            },
            indexInfoToIndexSignatureDeclaration: function (indexInfo, enclosingDeclaration, flags, tracker) {
                return withContext(enclosingDeclaration, flags, tracker, function (context) { return indexInfoToIndexSignatureDeclarationHelper(indexInfo, context, /*typeNode*/ undefined); });
            },
            signatureToSignatureDeclaration: function (signature, kind, enclosingDeclaration, flags, tracker) {
                return withContext(enclosingDeclaration, flags, tracker, function (context) { return signatureToSignatureDeclarationHelper(signature, kind, context); });
            },
            symbolToEntityName: function (symbol, meaning, enclosingDeclaration, flags, tracker) {
                return withContext(enclosingDeclaration, flags, tracker, function (context) { return symbolToName(symbol, context, meaning, /*expectsIdentifier*/ false); });
            },
            symbolToExpression: function (symbol, meaning, enclosingDeclaration, flags, tracker) {
                return withContext(enclosingDeclaration, flags, tracker, function (context) { return symbolToExpression(symbol, context, meaning); });
            },
            symbolToTypeParameterDeclarations: function (symbol, enclosingDeclaration, flags, tracker) {
                return withContext(enclosingDeclaration, flags, tracker, function (context) { return typeParametersToTypeParameterDeclarations(symbol, context); });
            },
            symbolToParameterDeclaration: function (symbol, enclosingDeclaration, flags, tracker) {
                return withContext(enclosingDeclaration, flags, tracker, function (context) { return symbolToParameterDeclaration(symbol, context); });
            },
            typeParameterToDeclaration: function (parameter, enclosingDeclaration, flags, tracker) {
                return withContext(enclosingDeclaration, flags, tracker, function (context) { return typeParameterToDeclaration(parameter, context); });
            },
            symbolTableToDeclarationStatements: function (symbolTable, enclosingDeclaration, flags, tracker, bundled) {
                return withContext(enclosingDeclaration, flags, tracker, function (context) { return symbolTableToDeclarationStatements(symbolTable, context, bundled); });
            },
            symbolToNode: function (symbol, meaning, enclosingDeclaration, flags, tracker) {
                return withContext(enclosingDeclaration, flags, tracker, function (context) { return symbolToNode(symbol, context, meaning); });
            },
        };
        function symbolToNode(symbol, context, meaning) {
            if (context.flags & 1073741824 /* NodeBuilderFlags.WriteComputedProps */) {
                if (symbol.valueDeclaration) {
                    var name_3 = (0, ts_1.getNameOfDeclaration)(symbol.valueDeclaration);
                    if (name_3 && (0, ts_1.isComputedPropertyName)(name_3))
                        return name_3;
                }
                var nameType = getSymbolLinks(symbol).nameType;
                if (nameType && nameType.flags & (1024 /* TypeFlags.EnumLiteral */ | 8192 /* TypeFlags.UniqueESSymbol */)) {
                    context.enclosingDeclaration = nameType.symbol.valueDeclaration;
                    return ts_1.factory.createComputedPropertyName(symbolToExpression(nameType.symbol, context, meaning));
                }
            }
            return symbolToExpression(symbol, context, meaning);
        }
        function withContext(enclosingDeclaration, flags, tracker, cb) {
            ts_1.Debug.assert(enclosingDeclaration === undefined || (enclosingDeclaration.flags & 8 /* NodeFlags.Synthesized */) === 0);
            var moduleResolverHost = (tracker === null || tracker === void 0 ? void 0 : tracker.trackSymbol) ? tracker.moduleResolverHost :
                flags & 134217728 /* NodeBuilderFlags.DoNotIncludeSymbolChain */ ? createBasicNodeBuilderModuleSpecifierResolutionHost(host) :
                    undefined;
            var context = {
                enclosingDeclaration: enclosingDeclaration,
                flags: flags || 0 /* NodeBuilderFlags.None */,
                tracker: undefined,
                encounteredError: false,
                reportedDiagnostic: false,
                visitedTypes: undefined,
                symbolDepth: undefined,
                inferTypeParameters: undefined,
                approximateLength: 0
            };
            context.tracker = new SymbolTrackerImpl(context, tracker, moduleResolverHost);
            var resultingNode = cb(context);
            if (context.truncating && context.flags & 1 /* NodeBuilderFlags.NoTruncation */) {
                context.tracker.reportTruncationError();
            }
            return context.encounteredError ? undefined : resultingNode;
        }
        function checkTruncationLength(context) {
            if (context.truncating)
                return context.truncating;
            return context.truncating = context.approximateLength > ((context.flags & 1 /* NodeBuilderFlags.NoTruncation */) ? ts_1.noTruncationMaximumTruncationLength : ts_1.defaultMaximumTruncationLength);
        }
        function typeToTypeNodeHelper(type, context) {
            var savedFlags = context.flags;
            var typeNode = typeToTypeNodeWorker(type, context);
            context.flags = savedFlags;
            return typeNode;
        }
        function typeToTypeNodeWorker(type, context) {
            var _a, _b;
            if (cancellationToken && cancellationToken.throwIfCancellationRequested) {
                cancellationToken.throwIfCancellationRequested();
            }
            var inTypeAlias = context.flags & 8388608 /* NodeBuilderFlags.InTypeAlias */;
            context.flags &= ~8388608 /* NodeBuilderFlags.InTypeAlias */;
            if (!type) {
                if (!(context.flags & 262144 /* NodeBuilderFlags.AllowEmptyUnionOrIntersection */)) {
                    context.encounteredError = true;
                    return undefined; // TODO: GH#18217
                }
                context.approximateLength += 3;
                return ts_1.factory.createKeywordTypeNode(133 /* SyntaxKind.AnyKeyword */);
            }
            if (!(context.flags & 536870912 /* NodeBuilderFlags.NoTypeReduction */)) {
                type = getReducedType(type);
            }
            if (type.flags & 1 /* TypeFlags.Any */) {
                if (type.aliasSymbol) {
                    return ts_1.factory.createTypeReferenceNode(symbolToEntityNameNode(type.aliasSymbol), mapToTypeNodes(type.aliasTypeArguments, context));
                }
                if (type === unresolvedType) {
                    return (0, ts_1.addSyntheticLeadingComment)(ts_1.factory.createKeywordTypeNode(133 /* SyntaxKind.AnyKeyword */), 3 /* SyntaxKind.MultiLineCommentTrivia */, "unresolved");
                }
                context.approximateLength += 3;
                return ts_1.factory.createKeywordTypeNode(type === intrinsicMarkerType ? 141 /* SyntaxKind.IntrinsicKeyword */ : 133 /* SyntaxKind.AnyKeyword */);
            }
            if (type.flags & 2 /* TypeFlags.Unknown */) {
                return ts_1.factory.createKeywordTypeNode(159 /* SyntaxKind.UnknownKeyword */);
            }
            if (type.flags & 4 /* TypeFlags.String */) {
                context.approximateLength += 6;
                return ts_1.factory.createKeywordTypeNode(154 /* SyntaxKind.StringKeyword */);
            }
            if (type.flags & 8 /* TypeFlags.Number */) {
                context.approximateLength += 6;
                return ts_1.factory.createKeywordTypeNode(150 /* SyntaxKind.NumberKeyword */);
            }
            if (type.flags & 64 /* TypeFlags.BigInt */) {
                context.approximateLength += 6;
                return ts_1.factory.createKeywordTypeNode(162 /* SyntaxKind.BigIntKeyword */);
            }
            if (type.flags & 16 /* TypeFlags.Boolean */ && !type.aliasSymbol) {
                context.approximateLength += 7;
                return ts_1.factory.createKeywordTypeNode(136 /* SyntaxKind.BooleanKeyword */);
            }
            if (type.flags & 1056 /* TypeFlags.EnumLike */) {
                if (type.symbol.flags & 8 /* SymbolFlags.EnumMember */) {
                    var parentSymbol = getParentOfSymbol(type.symbol);
                    var parentName = symbolToTypeNode(parentSymbol, context, 788968 /* SymbolFlags.Type */);
                    if (getDeclaredTypeOfSymbol(parentSymbol) === type) {
                        return parentName;
                    }
                    var memberName = (0, ts_1.symbolName)(type.symbol);
                    if ((0, ts_1.isIdentifierText)(memberName, 0 /* ScriptTarget.ES3 */)) {
                        return appendReferenceToType(parentName, ts_1.factory.createTypeReferenceNode(memberName, /*typeArguments*/ undefined));
                    }
                    if ((0, ts_1.isImportTypeNode)(parentName)) {
                        parentName.isTypeOf = true; // mutably update, node is freshly manufactured anyhow
                        return ts_1.factory.createIndexedAccessTypeNode(parentName, ts_1.factory.createLiteralTypeNode(ts_1.factory.createStringLiteral(memberName)));
                    }
                    else if ((0, ts_1.isTypeReferenceNode)(parentName)) {
                        return ts_1.factory.createIndexedAccessTypeNode(ts_1.factory.createTypeQueryNode(parentName.typeName), ts_1.factory.createLiteralTypeNode(ts_1.factory.createStringLiteral(memberName)));
                    }
                    else {
                        return ts_1.Debug.fail("Unhandled type node kind returned from `symbolToTypeNode`.");
                    }
                }
                return symbolToTypeNode(type.symbol, context, 788968 /* SymbolFlags.Type */);
            }
            if (type.flags & 128 /* TypeFlags.StringLiteral */) {
                context.approximateLength += (type.value.length + 2);
                return ts_1.factory.createLiteralTypeNode((0, ts_1.setEmitFlags)(ts_1.factory.createStringLiteral(type.value, !!(context.flags & 268435456 /* NodeBuilderFlags.UseSingleQuotesForStringLiteralType */)), 16777216 /* EmitFlags.NoAsciiEscaping */));
            }
            if (type.flags & 256 /* TypeFlags.NumberLiteral */) {
                var value = type.value;
                context.approximateLength += ("" + value).length;
                return ts_1.factory.createLiteralTypeNode(value < 0 ? ts_1.factory.createPrefixUnaryExpression(41 /* SyntaxKind.MinusToken */, ts_1.factory.createNumericLiteral(-value)) : ts_1.factory.createNumericLiteral(value));
            }
            if (type.flags & 2048 /* TypeFlags.BigIntLiteral */) {
                context.approximateLength += ((0, ts_1.pseudoBigIntToString)(type.value).length) + 1;
                return ts_1.factory.createLiteralTypeNode((ts_1.factory.createBigIntLiteral(type.value)));
            }
            if (type.flags & 512 /* TypeFlags.BooleanLiteral */) {
                context.approximateLength += type.intrinsicName.length;
                return ts_1.factory.createLiteralTypeNode(type.intrinsicName === "true" ? ts_1.factory.createTrue() : ts_1.factory.createFalse());
            }
            if (type.flags & 8192 /* TypeFlags.UniqueESSymbol */) {
                if (!(context.flags & 1048576 /* NodeBuilderFlags.AllowUniqueESSymbolType */)) {
                    if (isValueSymbolAccessible(type.symbol, context.enclosingDeclaration)) {
                        context.approximateLength += 6;
                        return symbolToTypeNode(type.symbol, context, 111551 /* SymbolFlags.Value */);
                    }
                    if (context.tracker.reportInaccessibleUniqueSymbolError) {
                        context.tracker.reportInaccessibleUniqueSymbolError();
                    }
                }
                context.approximateLength += 13;
                return ts_1.factory.createTypeOperatorNode(158 /* SyntaxKind.UniqueKeyword */, ts_1.factory.createKeywordTypeNode(155 /* SyntaxKind.SymbolKeyword */));
            }
            if (type.flags & 16384 /* TypeFlags.Void */) {
                context.approximateLength += 4;
                return ts_1.factory.createKeywordTypeNode(116 /* SyntaxKind.VoidKeyword */);
            }
            if (type.flags & 32768 /* TypeFlags.Undefined */) {
                context.approximateLength += 9;
                return ts_1.factory.createKeywordTypeNode(157 /* SyntaxKind.UndefinedKeyword */);
            }
            if (type.flags & 65536 /* TypeFlags.Null */) {
                context.approximateLength += 4;
                return ts_1.factory.createLiteralTypeNode(ts_1.factory.createNull());
            }
            if (type.flags & 131072 /* TypeFlags.Never */) {
                context.approximateLength += 5;
                return ts_1.factory.createKeywordTypeNode(146 /* SyntaxKind.NeverKeyword */);
            }
            if (type.flags & 4096 /* TypeFlags.ESSymbol */) {
                context.approximateLength += 6;
                return ts_1.factory.createKeywordTypeNode(155 /* SyntaxKind.SymbolKeyword */);
            }
            if (type.flags & 67108864 /* TypeFlags.NonPrimitive */) {
                context.approximateLength += 6;
                return ts_1.factory.createKeywordTypeNode(151 /* SyntaxKind.ObjectKeyword */);
            }
            if ((0, ts_1.isThisTypeParameter)(type)) {
                if (context.flags & 4194304 /* NodeBuilderFlags.InObjectTypeLiteral */) {
                    if (!context.encounteredError && !(context.flags & 32768 /* NodeBuilderFlags.AllowThisInObjectLiteral */)) {
                        context.encounteredError = true;
                    }
                    (_b = (_a = context.tracker).reportInaccessibleThisError) === null || _b === void 0 ? void 0 : _b.call(_a);
                }
                context.approximateLength += 4;
                return ts_1.factory.createThisTypeNode();
            }
            if (!inTypeAlias && type.aliasSymbol && (context.flags & 16384 /* NodeBuilderFlags.UseAliasDefinedOutsideCurrentScope */ || isTypeSymbolAccessible(type.aliasSymbol, context.enclosingDeclaration))) {
                var typeArgumentNodes = mapToTypeNodes(type.aliasTypeArguments, context);
                if (isReservedMemberName(type.aliasSymbol.escapedName) && !(type.aliasSymbol.flags & 32 /* SymbolFlags.Class */))
                    return ts_1.factory.createTypeReferenceNode(ts_1.factory.createIdentifier(""), typeArgumentNodes);
                if ((0, ts_1.length)(typeArgumentNodes) === 1 && type.aliasSymbol === globalArrayType.symbol) {
                    return ts_1.factory.createArrayTypeNode(typeArgumentNodes[0]);
                }
                return symbolToTypeNode(type.aliasSymbol, context, 788968 /* SymbolFlags.Type */, typeArgumentNodes);
            }
            var objectFlags = (0, ts_1.getObjectFlags)(type);
            if (objectFlags & 4 /* ObjectFlags.Reference */) {
                ts_1.Debug.assert(!!(type.flags & 524288 /* TypeFlags.Object */));
                return type.node ? visitAndTransformType(type, typeReferenceToTypeNode) : typeReferenceToTypeNode(type);
            }
            if (type.flags & 262144 /* TypeFlags.TypeParameter */ || objectFlags & 3 /* ObjectFlags.ClassOrInterface */) {
                if (type.flags & 262144 /* TypeFlags.TypeParameter */ && (0, ts_1.contains)(context.inferTypeParameters, type)) {
                    context.approximateLength += ((0, ts_1.symbolName)(type.symbol).length + 6);
                    var constraintNode = void 0;
                    var constraint = getConstraintOfTypeParameter(type);
                    if (constraint) {
                        // If the infer type has a constraint that is not the same as the constraint
                        // we would have normally inferred based on context, we emit the constraint
                        // using `infer T extends ?`. We omit inferred constraints from type references
                        // as they may be elided.
                        var inferredConstraint = getInferredTypeParameterConstraint(type, /*omitTypeReferences*/ true);
                        if (!(inferredConstraint && isTypeIdenticalTo(constraint, inferredConstraint))) {
                            context.approximateLength += 9;
                            constraintNode = constraint && typeToTypeNodeHelper(constraint, context);
                        }
                    }
                    return ts_1.factory.createInferTypeNode(typeParameterToDeclarationWithConstraint(type, context, constraintNode));
                }
                if (context.flags & 4 /* NodeBuilderFlags.GenerateNamesForShadowedTypeParams */ &&
                    type.flags & 262144 /* TypeFlags.TypeParameter */ &&
                    !isTypeSymbolAccessible(type.symbol, context.enclosingDeclaration)) {
                    var name_4 = typeParameterToName(type, context);
                    context.approximateLength += (0, ts_1.idText)(name_4).length;
                    return ts_1.factory.createTypeReferenceNode(ts_1.factory.createIdentifier((0, ts_1.idText)(name_4)), /*typeArguments*/ undefined);
                }
                // Ignore constraint/default when creating a usage (as opposed to declaration) of a type parameter.
                if (type.symbol) {
                    return symbolToTypeNode(type.symbol, context, 788968 /* SymbolFlags.Type */);
                }
                var name_5 = (type === markerSuperTypeForCheck || type === markerSubTypeForCheck) && varianceTypeParameter && varianceTypeParameter.symbol ?
                    (type === markerSubTypeForCheck ? "sub-" : "super-") + (0, ts_1.symbolName)(varianceTypeParameter.symbol) : "?";
                return ts_1.factory.createTypeReferenceNode(ts_1.factory.createIdentifier(name_5), /*typeArguments*/ undefined);
            }
            if (type.flags & 1048576 /* TypeFlags.Union */ && type.origin) {
                type = type.origin;
            }
            if (type.flags & (1048576 /* TypeFlags.Union */ | 2097152 /* TypeFlags.Intersection */)) {
                var types = type.flags & 1048576 /* TypeFlags.Union */ ? formatUnionTypes(type.types) : type.types;
                if ((0, ts_1.length)(types) === 1) {
                    return typeToTypeNodeHelper(types[0], context);
                }
                var typeNodes = mapToTypeNodes(types, context, /*isBareList*/ true);
                if (typeNodes && typeNodes.length > 0) {
                    return type.flags & 1048576 /* TypeFlags.Union */ ? ts_1.factory.createUnionTypeNode(typeNodes) : ts_1.factory.createIntersectionTypeNode(typeNodes);
                }
                else {
                    if (!context.encounteredError && !(context.flags & 262144 /* NodeBuilderFlags.AllowEmptyUnionOrIntersection */)) {
                        context.encounteredError = true;
                    }
                    return undefined; // TODO: GH#18217
                }
            }
            if (objectFlags & (16 /* ObjectFlags.Anonymous */ | 32 /* ObjectFlags.Mapped */)) {
                ts_1.Debug.assert(!!(type.flags & 524288 /* TypeFlags.Object */));
                // The type is an object literal type.
                return createAnonymousTypeNode(type);
            }
            if (type.flags & 4194304 /* TypeFlags.Index */) {
                var indexedType = type.type;
                context.approximateLength += 6;
                var indexTypeNode = typeToTypeNodeHelper(indexedType, context);
                return ts_1.factory.createTypeOperatorNode(143 /* SyntaxKind.KeyOfKeyword */, indexTypeNode);
            }
            if (type.flags & 134217728 /* TypeFlags.TemplateLiteral */) {
                var texts_1 = type.texts;
                var types_1 = type.types;
                var templateHead = ts_1.factory.createTemplateHead(texts_1[0]);
                var templateSpans = ts_1.factory.createNodeArray((0, ts_1.map)(types_1, function (t, i) { return ts_1.factory.createTemplateLiteralTypeSpan(typeToTypeNodeHelper(t, context), (i < types_1.length - 1 ? ts_1.factory.createTemplateMiddle : ts_1.factory.createTemplateTail)(texts_1[i + 1])); }));
                context.approximateLength += 2;
                return ts_1.factory.createTemplateLiteralType(templateHead, templateSpans);
            }
            if (type.flags & 268435456 /* TypeFlags.StringMapping */) {
                var typeNode = typeToTypeNodeHelper(type.type, context);
                return symbolToTypeNode(type.symbol, context, 788968 /* SymbolFlags.Type */, [typeNode]);
            }
            if (type.flags & 8388608 /* TypeFlags.IndexedAccess */) {
                var objectTypeNode = typeToTypeNodeHelper(type.objectType, context);
                var indexTypeNode = typeToTypeNodeHelper(type.indexType, context);
                context.approximateLength += 2;
                return ts_1.factory.createIndexedAccessTypeNode(objectTypeNode, indexTypeNode);
            }
            if (type.flags & 16777216 /* TypeFlags.Conditional */) {
                return visitAndTransformType(type, function (type) { return conditionalTypeToTypeNode(type); });
            }
            if (type.flags & 33554432 /* TypeFlags.Substitution */) {
                return typeToTypeNodeHelper(type.baseType, context);
            }
            return ts_1.Debug.fail("Should be unreachable.");
            function conditionalTypeToTypeNode(type) {
                var checkTypeNode = typeToTypeNodeHelper(type.checkType, context);
                context.approximateLength += 15;
                if (context.flags & 4 /* NodeBuilderFlags.GenerateNamesForShadowedTypeParams */ && type.root.isDistributive && !(type.checkType.flags & 262144 /* TypeFlags.TypeParameter */)) {
                    var newParam = createTypeParameter(createSymbol(262144 /* SymbolFlags.TypeParameter */, "T"));
                    var name_6 = typeParameterToName(newParam, context);
                    var newTypeVariable = ts_1.factory.createTypeReferenceNode(name_6);
                    context.approximateLength += 37; // 15 each for two added conditionals, 7 for an added infer type
                    var newMapper = prependTypeMapping(type.root.checkType, newParam, type.mapper);
                    var saveInferTypeParameters_1 = context.inferTypeParameters;
                    context.inferTypeParameters = type.root.inferTypeParameters;
                    var extendsTypeNode_1 = typeToTypeNodeHelper(instantiateType(type.root.extendsType, newMapper), context);
                    context.inferTypeParameters = saveInferTypeParameters_1;
                    var trueTypeNode_1 = typeToTypeNodeOrCircularityElision(instantiateType(getTypeFromTypeNode(type.root.node.trueType), newMapper));
                    var falseTypeNode_1 = typeToTypeNodeOrCircularityElision(instantiateType(getTypeFromTypeNode(type.root.node.falseType), newMapper));
                    // outermost conditional makes `T` a type parameter, allowing the inner conditionals to be distributive
                    // second conditional makes `T` have `T & checkType` substitution, so it is correctly usable as the checkType
                    // inner conditional runs the check the user provided on the check type (distributively) and returns the result
                    // checkType extends infer T ? T extends checkType ? T extends extendsType<T> ? trueType<T> : falseType<T> : never : never;
                    // this is potentially simplifiable to
                    // checkType extends infer T ? T extends checkType & extendsType<T> ? trueType<T> : falseType<T> : never;
                    // but that may confuse users who read the output more.
                    // On the other hand,
                    // checkType extends infer T extends checkType ? T extends extendsType<T> ? trueType<T> : falseType<T> : never;
                    // may also work with `infer ... extends ...` in, but would produce declarations only compatible with the latest TS.
                    return ts_1.factory.createConditionalTypeNode(checkTypeNode, ts_1.factory.createInferTypeNode(ts_1.factory.createTypeParameterDeclaration(/*modifiers*/ undefined, ts_1.factory.cloneNode(newTypeVariable.typeName))), ts_1.factory.createConditionalTypeNode(ts_1.factory.createTypeReferenceNode(ts_1.factory.cloneNode(name_6)), typeToTypeNodeHelper(type.checkType, context), ts_1.factory.createConditionalTypeNode(newTypeVariable, extendsTypeNode_1, trueTypeNode_1, falseTypeNode_1), ts_1.factory.createKeywordTypeNode(146 /* SyntaxKind.NeverKeyword */)), ts_1.factory.createKeywordTypeNode(146 /* SyntaxKind.NeverKeyword */));
                }
                var saveInferTypeParameters = context.inferTypeParameters;
                context.inferTypeParameters = type.root.inferTypeParameters;
                var extendsTypeNode = typeToTypeNodeHelper(type.extendsType, context);
                context.inferTypeParameters = saveInferTypeParameters;
                var trueTypeNode = typeToTypeNodeOrCircularityElision(getTrueTypeFromConditionalType(type));
                var falseTypeNode = typeToTypeNodeOrCircularityElision(getFalseTypeFromConditionalType(type));
                return ts_1.factory.createConditionalTypeNode(checkTypeNode, extendsTypeNode, trueTypeNode, falseTypeNode);
            }
            function typeToTypeNodeOrCircularityElision(type) {
                var _a, _b, _c;
                if (type.flags & 1048576 /* TypeFlags.Union */) {
                    if ((_a = context.visitedTypes) === null || _a === void 0 ? void 0 : _a.has(getTypeId(type))) {
                        if (!(context.flags & 131072 /* NodeBuilderFlags.AllowAnonymousIdentifier */)) {
                            context.encounteredError = true;
                            (_c = (_b = context.tracker) === null || _b === void 0 ? void 0 : _b.reportCyclicStructureError) === null || _c === void 0 ? void 0 : _c.call(_b);
                        }
                        return createElidedInformationPlaceholder(context);
                    }
                    return visitAndTransformType(type, function (type) { return typeToTypeNodeHelper(type, context); });
                }
                return typeToTypeNodeHelper(type, context);
            }
            function isMappedTypeHomomorphic(type) {
                return !!getHomomorphicTypeVariable(type);
            }
            function isHomomorphicMappedTypeWithNonHomomorphicInstantiation(type) {
                return !!type.target && isMappedTypeHomomorphic(type.target) && !isMappedTypeHomomorphic(type);
            }
            function createMappedTypeNodeFromType(type) {
                ts_1.Debug.assert(!!(type.flags & 524288 /* TypeFlags.Object */));
                var readonlyToken = type.declaration.readonlyToken ? ts_1.factory.createToken(type.declaration.readonlyToken.kind) : undefined;
                var questionToken = type.declaration.questionToken ? ts_1.factory.createToken(type.declaration.questionToken.kind) : undefined;
                var appropriateConstraintTypeNode;
                var newTypeVariable;
                if (isMappedTypeWithKeyofConstraintDeclaration(type)) {
                    // We have a { [P in keyof T]: X }
                    // We do this to ensure we retain the toplevel keyof-ness of the type which may be lost due to keyof distribution during `getConstraintTypeFromMappedType`
                    if (isHomomorphicMappedTypeWithNonHomomorphicInstantiation(type) && context.flags & 4 /* NodeBuilderFlags.GenerateNamesForShadowedTypeParams */) {
                        var newParam = createTypeParameter(createSymbol(262144 /* SymbolFlags.TypeParameter */, "T"));
                        var name_7 = typeParameterToName(newParam, context);
                        newTypeVariable = ts_1.factory.createTypeReferenceNode(name_7);
                    }
                    appropriateConstraintTypeNode = ts_1.factory.createTypeOperatorNode(143 /* SyntaxKind.KeyOfKeyword */, newTypeVariable || typeToTypeNodeHelper(getModifiersTypeFromMappedType(type), context));
                }
                else {
                    appropriateConstraintTypeNode = typeToTypeNodeHelper(getConstraintTypeFromMappedType(type), context);
                }
                var typeParameterNode = typeParameterToDeclarationWithConstraint(getTypeParameterFromMappedType(type), context, appropriateConstraintTypeNode);
                var nameTypeNode = type.declaration.nameType ? typeToTypeNodeHelper(getNameTypeFromMappedType(type), context) : undefined;
                var templateTypeNode = typeToTypeNodeHelper(removeMissingType(getTemplateTypeFromMappedType(type), !!(getMappedTypeModifiers(type) & 4 /* MappedTypeModifiers.IncludeOptional */)), context);
                var mappedTypeNode = ts_1.factory.createMappedTypeNode(readonlyToken, typeParameterNode, nameTypeNode, questionToken, templateTypeNode, /*members*/ undefined);
                context.approximateLength += 10;
                var result = (0, ts_1.setEmitFlags)(mappedTypeNode, 1 /* EmitFlags.SingleLine */);
                if (isHomomorphicMappedTypeWithNonHomomorphicInstantiation(type) && context.flags & 4 /* NodeBuilderFlags.GenerateNamesForShadowedTypeParams */) {
                    // homomorphic mapped type with a non-homomorphic naive inlining
                    // wrap it with a conditional like `SomeModifiersType extends infer U ? {..the mapped type...} : never` to ensure the resulting
                    // type stays homomorphic
                    var originalConstraint = instantiateType(getConstraintOfTypeParameter(getTypeFromTypeNode(type.declaration.typeParameter.constraint.type)) || unknownType, type.mapper);
                    return ts_1.factory.createConditionalTypeNode(typeToTypeNodeHelper(getModifiersTypeFromMappedType(type), context), ts_1.factory.createInferTypeNode(ts_1.factory.createTypeParameterDeclaration(/*modifiers*/ undefined, ts_1.factory.cloneNode(newTypeVariable.typeName), originalConstraint.flags & 2 /* TypeFlags.Unknown */ ? undefined : typeToTypeNodeHelper(originalConstraint, context))), result, ts_1.factory.createKeywordTypeNode(146 /* SyntaxKind.NeverKeyword */));
                }
                return result;
            }
            function createAnonymousTypeNode(type) {
                var _a, _b;
                var typeId = type.id;
                var symbol = type.symbol;
                if (symbol) {
                    var isInstanceType = isClassInstanceSide(type) ? 788968 /* SymbolFlags.Type */ : 111551 /* SymbolFlags.Value */;
                    if (isJSConstructor(symbol.valueDeclaration)) {
                        // Instance and static types share the same symbol; only add 'typeof' for the static side.
                        return symbolToTypeNode(symbol, context, isInstanceType);
                    }
                    // Always use 'typeof T' for type of class, enum, and module objects
                    else if (symbol.flags & 32 /* SymbolFlags.Class */
                        && !getBaseTypeVariableOfClass(symbol)
                        && !(symbol.valueDeclaration && (0, ts_1.isClassLike)(symbol.valueDeclaration) && context.flags & 2048 /* NodeBuilderFlags.WriteClassExpressionAsTypeLiteral */ && (!(0, ts_1.isClassDeclaration)(symbol.valueDeclaration) || isSymbolAccessible(symbol, context.enclosingDeclaration, isInstanceType, /*shouldComputeAliasesToMakeVisible*/ false).accessibility !== 0 /* SymbolAccessibility.Accessible */)) ||
                        symbol.flags & (384 /* SymbolFlags.Enum */ | 512 /* SymbolFlags.ValueModule */) ||
                        shouldWriteTypeOfFunctionSymbol()) {
                        return symbolToTypeNode(symbol, context, isInstanceType);
                    }
                    else if ((_a = context.visitedTypes) === null || _a === void 0 ? void 0 : _a.has(typeId)) {
                        // If type is an anonymous type literal in a type alias declaration, use type alias name
                        var typeAlias = getTypeAliasForTypeLiteral(type);
                        if (typeAlias) {
                            // The specified symbol flags need to be reinterpreted as type flags
                            return symbolToTypeNode(typeAlias, context, 788968 /* SymbolFlags.Type */);
                        }
                        else {
                            return createElidedInformationPlaceholder(context);
                        }
                    }
                    else {
                        return visitAndTransformType(type, createTypeNodeFromObjectType);
                    }
                }
                else {
                    var isInstantiationExpressionType = !!((0, ts_1.getObjectFlags)(type) & 8388608 /* ObjectFlags.InstantiationExpressionType */);
                    if (isInstantiationExpressionType) {
                        var instantiationExpressionType = type;
                        if ((0, ts_1.isTypeQueryNode)(instantiationExpressionType.node)) {
                            var typeNode = serializeExistingTypeNode(context, instantiationExpressionType.node);
                            if (typeNode) {
                                return typeNode;
                            }
                        }
                        if ((_b = context.visitedTypes) === null || _b === void 0 ? void 0 : _b.has(typeId)) {
                            return createElidedInformationPlaceholder(context);
                        }
                        return visitAndTransformType(type, createTypeNodeFromObjectType);
                    }
                    // Anonymous types without a symbol are never circular.
                    return createTypeNodeFromObjectType(type);
                }
                function shouldWriteTypeOfFunctionSymbol() {
                    var _a;
                    var isStaticMethodSymbol = !!(symbol.flags & 8192 /* SymbolFlags.Method */) && // typeof static method
                        (0, ts_1.some)(symbol.declarations, function (declaration) { return (0, ts_1.isStatic)(declaration); });
                    var isNonLocalFunctionSymbol = !!(symbol.flags & 16 /* SymbolFlags.Function */) &&
                        (symbol.parent || // is exported function symbol
                            (0, ts_1.forEach)(symbol.declarations, function (declaration) {
                                return declaration.parent.kind === 311 /* SyntaxKind.SourceFile */ || declaration.parent.kind === 267 /* SyntaxKind.ModuleBlock */;
                            }));
                    if (isStaticMethodSymbol || isNonLocalFunctionSymbol) {
                        // typeof is allowed only for static/non local functions
                        return (!!(context.flags & 4096 /* NodeBuilderFlags.UseTypeOfFunction */) || ((_a = context.visitedTypes) === null || _a === void 0 ? void 0 : _a.has(typeId))) && // it is type of the symbol uses itself recursively
                            (!(context.flags & 8 /* NodeBuilderFlags.UseStructuralFallback */) || isValueSymbolAccessible(symbol, context.enclosingDeclaration)); // And the build is going to succeed without visibility error or there is no structural fallback allowed
                    }
                }
            }
            function visitAndTransformType(type, transform) {
                var _a, _b;
                var typeId = type.id;
                var isConstructorObject = (0, ts_1.getObjectFlags)(type) & 16 /* ObjectFlags.Anonymous */ && type.symbol && type.symbol.flags & 32 /* SymbolFlags.Class */;
                var id = (0, ts_1.getObjectFlags)(type) & 4 /* ObjectFlags.Reference */ && type.node ? "N" + getNodeId(type.node) :
                    type.flags & 16777216 /* TypeFlags.Conditional */ ? "N" + getNodeId(type.root.node) :
                        type.symbol ? (isConstructorObject ? "+" : "") + getSymbolId(type.symbol) :
                            undefined;
                // Since instantiations of the same anonymous type have the same symbol, tracking symbols instead
                // of types allows us to catch circular references to instantiations of the same anonymous type
                if (!context.visitedTypes) {
                    context.visitedTypes = new Set();
                }
                if (id && !context.symbolDepth) {
                    context.symbolDepth = new Map();
                }
                var links = context.enclosingDeclaration && getNodeLinks(context.enclosingDeclaration);
                var key = "".concat(getTypeId(type), "|").concat(context.flags);
                if (links) {
                    links.serializedTypes || (links.serializedTypes = new Map());
                }
                var cachedResult = (_a = links === null || links === void 0 ? void 0 : links.serializedTypes) === null || _a === void 0 ? void 0 : _a.get(key);
                if (cachedResult) {
                    if (cachedResult.truncating) {
                        context.truncating = true;
                    }
                    context.approximateLength += cachedResult.addedLength;
                    return deepCloneOrReuseNode(cachedResult.node);
                }
                var depth;
                if (id) {
                    depth = context.symbolDepth.get(id) || 0;
                    if (depth > 10) {
                        return createElidedInformationPlaceholder(context);
                    }
                    context.symbolDepth.set(id, depth + 1);
                }
                context.visitedTypes.add(typeId);
                var startLength = context.approximateLength;
                var result = transform(type);
                var addedLength = context.approximateLength - startLength;
                if (!context.reportedDiagnostic && !context.encounteredError) {
                    (_b = links === null || links === void 0 ? void 0 : links.serializedTypes) === null || _b === void 0 ? void 0 : _b.set(key, { node: result, truncating: context.truncating, addedLength: addedLength });
                }
                context.visitedTypes.delete(typeId);
                if (id) {
                    context.symbolDepth.set(id, depth);
                }
                return result;
                function deepCloneOrReuseNode(node) {
                    if (!(0, ts_1.nodeIsSynthesized)(node) && (0, ts_1.getParseTreeNode)(node) === node) {
                        return node;
                    }
                    return (0, ts_1.setTextRange)(ts_1.factory.cloneNode((0, ts_1.visitEachChild)(node, deepCloneOrReuseNode, ts_1.nullTransformationContext, deepCloneOrReuseNodes)), node);
                }
                function deepCloneOrReuseNodes(nodes, visitor, test, start, count) {
                    if (nodes && nodes.length === 0) {
                        // Ensure we explicitly make a copy of an empty array; visitNodes will not do this unless the array has elements,
                        // which can lead to us reusing the same empty NodeArray more than once within the same AST during type noding.
                        return (0, ts_1.setTextRange)(ts_1.factory.createNodeArray(/*elements*/ undefined, nodes.hasTrailingComma), nodes);
                    }
                    return (0, ts_1.visitNodes)(nodes, visitor, test, start, count);
                }
            }
            function createTypeNodeFromObjectType(type) {
                if (isGenericMappedType(type) || type.containsError) {
                    return createMappedTypeNodeFromType(type);
                }
                var resolved = resolveStructuredTypeMembers(type);
                if (!resolved.properties.length && !resolved.indexInfos.length) {
                    if (!resolved.callSignatures.length && !resolved.constructSignatures.length) {
                        context.approximateLength += 2;
                        return (0, ts_1.setEmitFlags)(ts_1.factory.createTypeLiteralNode(/*members*/ undefined), 1 /* EmitFlags.SingleLine */);
                    }
                    if (resolved.callSignatures.length === 1 && !resolved.constructSignatures.length) {
                        var signature = resolved.callSignatures[0];
                        var signatureNode = signatureToSignatureDeclarationHelper(signature, 183 /* SyntaxKind.FunctionType */, context);
                        return signatureNode;
                    }
                    if (resolved.constructSignatures.length === 1 && !resolved.callSignatures.length) {
                        var signature = resolved.constructSignatures[0];
                        var signatureNode = signatureToSignatureDeclarationHelper(signature, 184 /* SyntaxKind.ConstructorType */, context);
                        return signatureNode;
                    }
                }
                var abstractSignatures = (0, ts_1.filter)(resolved.constructSignatures, function (signature) { return !!(signature.flags & 4 /* SignatureFlags.Abstract */); });
                if ((0, ts_1.some)(abstractSignatures)) {
                    var types = (0, ts_1.map)(abstractSignatures, getOrCreateTypeFromSignature);
                    // count the number of type elements excluding abstract constructors
                    var typeElementCount = resolved.callSignatures.length +
                        (resolved.constructSignatures.length - abstractSignatures.length) +
                        resolved.indexInfos.length +
                        // exclude `prototype` when writing a class expression as a type literal, as per
                        // the logic in `createTypeNodesFromResolvedType`.
                        (context.flags & 2048 /* NodeBuilderFlags.WriteClassExpressionAsTypeLiteral */ ?
                            (0, ts_1.countWhere)(resolved.properties, function (p) { return !(p.flags & 4194304 /* SymbolFlags.Prototype */); }) :
                            (0, ts_1.length)(resolved.properties));
                    // don't include an empty object literal if there were no other static-side
                    // properties to write, i.e. `abstract class C { }` becomes `abstract new () => {}`
                    // and not `(abstract new () => {}) & {}`
                    if (typeElementCount) {
                        // create a copy of the object type without any abstract construct signatures.
                        types.push(getResolvedTypeWithoutAbstractConstructSignatures(resolved));
                    }
                    return typeToTypeNodeHelper(getIntersectionType(types), context);
                }
                var savedFlags = context.flags;
                context.flags |= 4194304 /* NodeBuilderFlags.InObjectTypeLiteral */;
                var members = createTypeNodesFromResolvedType(resolved);
                context.flags = savedFlags;
                var typeLiteralNode = ts_1.factory.createTypeLiteralNode(members);
                context.approximateLength += 2;
                (0, ts_1.setEmitFlags)(typeLiteralNode, (context.flags & 1024 /* NodeBuilderFlags.MultilineObjectLiterals */) ? 0 : 1 /* EmitFlags.SingleLine */);
                return typeLiteralNode;
            }
            function typeReferenceToTypeNode(type) {
                var typeArguments = getTypeArguments(type);
                if (type.target === globalArrayType || type.target === globalReadonlyArrayType) {
                    if (context.flags & 2 /* NodeBuilderFlags.WriteArrayAsGenericType */) {
                        var typeArgumentNode = typeToTypeNodeHelper(typeArguments[0], context);
                        return ts_1.factory.createTypeReferenceNode(type.target === globalArrayType ? "Array" : "ReadonlyArray", [typeArgumentNode]);
                    }
                    var elementType = typeToTypeNodeHelper(typeArguments[0], context);
                    var arrayType = ts_1.factory.createArrayTypeNode(elementType);
                    return type.target === globalArrayType ? arrayType : ts_1.factory.createTypeOperatorNode(148 /* SyntaxKind.ReadonlyKeyword */, arrayType);
                }
                else if (type.target.objectFlags & 8 /* ObjectFlags.Tuple */) {
                    typeArguments = (0, ts_1.sameMap)(typeArguments, function (t, i) { return removeMissingType(t, !!(type.target.elementFlags[i] & 2 /* ElementFlags.Optional */)); });
                    if (typeArguments.length > 0) {
                        var arity = getTypeReferenceArity(type);
                        var tupleConstituentNodes = mapToTypeNodes(typeArguments.slice(0, arity), context);
                        if (tupleConstituentNodes) {
                            if (type.target.labeledElementDeclarations) {
                                for (var i = 0; i < tupleConstituentNodes.length; i++) {
                                    var flags = type.target.elementFlags[i];
                                    tupleConstituentNodes[i] = ts_1.factory.createNamedTupleMember(flags & 12 /* ElementFlags.Variable */ ? ts_1.factory.createToken(26 /* SyntaxKind.DotDotDotToken */) : undefined, ts_1.factory.createIdentifier((0, ts_1.unescapeLeadingUnderscores)(getTupleElementLabel(type.target.labeledElementDeclarations[i]))), flags & 2 /* ElementFlags.Optional */ ? ts_1.factory.createToken(58 /* SyntaxKind.QuestionToken */) : undefined, flags & 4 /* ElementFlags.Rest */ ? ts_1.factory.createArrayTypeNode(tupleConstituentNodes[i]) :
                                        tupleConstituentNodes[i]);
                                }
                            }
                            else {
                                for (var i = 0; i < Math.min(arity, tupleConstituentNodes.length); i++) {
                                    var flags = type.target.elementFlags[i];
                                    tupleConstituentNodes[i] =
                                        flags & 12 /* ElementFlags.Variable */ ? ts_1.factory.createRestTypeNode(flags & 4 /* ElementFlags.Rest */ ? ts_1.factory.createArrayTypeNode(tupleConstituentNodes[i]) : tupleConstituentNodes[i]) :
                                            flags & 2 /* ElementFlags.Optional */ ? ts_1.factory.createOptionalTypeNode(tupleConstituentNodes[i]) :
                                                tupleConstituentNodes[i];
                                }
                            }
                            var tupleTypeNode = (0, ts_1.setEmitFlags)(ts_1.factory.createTupleTypeNode(tupleConstituentNodes), 1 /* EmitFlags.SingleLine */);
                            return type.target.readonly ? ts_1.factory.createTypeOperatorNode(148 /* SyntaxKind.ReadonlyKeyword */, tupleTypeNode) : tupleTypeNode;
                        }
                    }
                    if (context.encounteredError || (context.flags & 524288 /* NodeBuilderFlags.AllowEmptyTuple */)) {
                        var tupleTypeNode = (0, ts_1.setEmitFlags)(ts_1.factory.createTupleTypeNode([]), 1 /* EmitFlags.SingleLine */);
                        return type.target.readonly ? ts_1.factory.createTypeOperatorNode(148 /* SyntaxKind.ReadonlyKeyword */, tupleTypeNode) : tupleTypeNode;
                    }
                    context.encounteredError = true;
                    return undefined; // TODO: GH#18217
                }
                else if (context.flags & 2048 /* NodeBuilderFlags.WriteClassExpressionAsTypeLiteral */ &&
                    type.symbol.valueDeclaration &&
                    (0, ts_1.isClassLike)(type.symbol.valueDeclaration) &&
                    !isValueSymbolAccessible(type.symbol, context.enclosingDeclaration)) {
                    return createAnonymousTypeNode(type);
                }
                else {
                    var outerTypeParameters = type.target.outerTypeParameters;
                    var i = 0;
                    var resultType = void 0;
                    if (outerTypeParameters) {
                        var length_1 = outerTypeParameters.length;
                        while (i < length_1) {
                            // Find group of type arguments for type parameters with the same declaring container.
                            var start = i;
                            var parent_3 = getParentSymbolOfTypeParameter(outerTypeParameters[i]);
                            do {
                                i++;
                            } while (i < length_1 && getParentSymbolOfTypeParameter(outerTypeParameters[i]) === parent_3);
                            // When type parameters are their own type arguments for the whole group (i.e. we have
                            // the default outer type arguments), we don't show the group.
                            if (!(0, ts_1.rangeEquals)(outerTypeParameters, typeArguments, start, i)) {
                                var typeArgumentSlice = mapToTypeNodes(typeArguments.slice(start, i), context);
                                var flags_1 = context.flags;
                                context.flags |= 16 /* NodeBuilderFlags.ForbidIndexedAccessSymbolReferences */;
                                var ref = symbolToTypeNode(parent_3, context, 788968 /* SymbolFlags.Type */, typeArgumentSlice);
                                context.flags = flags_1;
                                resultType = !resultType ? ref : appendReferenceToType(resultType, ref);
                            }
                        }
                    }
                    var typeArgumentNodes = void 0;
                    if (typeArguments.length > 0) {
                        var typeParameterCount = (type.target.typeParameters || ts_1.emptyArray).length;
                        typeArgumentNodes = mapToTypeNodes(typeArguments.slice(i, typeParameterCount), context);
                    }
                    var flags = context.flags;
                    context.flags |= 16 /* NodeBuilderFlags.ForbidIndexedAccessSymbolReferences */;
                    var finalRef = symbolToTypeNode(type.symbol, context, 788968 /* SymbolFlags.Type */, typeArgumentNodes);
                    context.flags = flags;
                    return !resultType ? finalRef : appendReferenceToType(resultType, finalRef);
                }
            }
            function appendReferenceToType(root, ref) {
                if ((0, ts_1.isImportTypeNode)(root)) {
                    // first shift type arguments
                    var typeArguments = root.typeArguments;
                    var qualifier = root.qualifier;
                    if (qualifier) {
                        if ((0, ts_1.isIdentifier)(qualifier)) {
                            if (typeArguments !== (0, ts_1.getIdentifierTypeArguments)(qualifier)) {
                                qualifier = (0, ts_1.setIdentifierTypeArguments)(ts_1.factory.cloneNode(qualifier), typeArguments);
                            }
                        }
                        else {
                            if (typeArguments !== (0, ts_1.getIdentifierTypeArguments)(qualifier.right)) {
                                qualifier = ts_1.factory.updateQualifiedName(qualifier, qualifier.left, (0, ts_1.setIdentifierTypeArguments)(ts_1.factory.cloneNode(qualifier.right), typeArguments));
                            }
                        }
                    }
                    typeArguments = ref.typeArguments;
                    // then move qualifiers
                    var ids = getAccessStack(ref);
                    for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
                        var id = ids_1[_i];
                        qualifier = qualifier ? ts_1.factory.createQualifiedName(qualifier, id) : id;
                    }
                    return ts_1.factory.updateImportTypeNode(root, root.argument, root.assertions, qualifier, typeArguments, root.isTypeOf);
                }
                else {
                    // first shift type arguments
                    var typeArguments = root.typeArguments;
                    var typeName = root.typeName;
                    if ((0, ts_1.isIdentifier)(typeName)) {
                        if (typeArguments !== (0, ts_1.getIdentifierTypeArguments)(typeName)) {
                            typeName = (0, ts_1.setIdentifierTypeArguments)(ts_1.factory.cloneNode(typeName), typeArguments);
                        }
                    }
                    else {
                        if (typeArguments !== (0, ts_1.getIdentifierTypeArguments)(typeName.right)) {
                            typeName = ts_1.factory.updateQualifiedName(typeName, typeName.left, (0, ts_1.setIdentifierTypeArguments)(ts_1.factory.cloneNode(typeName.right), typeArguments));
                        }
                    }
                    typeArguments = ref.typeArguments;
                    // then move qualifiers
                    var ids = getAccessStack(ref);
                    for (var _a = 0, ids_2 = ids; _a < ids_2.length; _a++) {
                        var id = ids_2[_a];
                        typeName = ts_1.factory.createQualifiedName(typeName, id);
                    }
                    return ts_1.factory.updateTypeReferenceNode(root, typeName, typeArguments);
                }
            }
            function getAccessStack(ref) {
                var state = ref.typeName;
                var ids = [];
                while (!(0, ts_1.isIdentifier)(state)) {
                    ids.unshift(state.right);
                    state = state.left;
                }
                ids.unshift(state);
                return ids;
            }
            function createTypeNodesFromResolvedType(resolvedType) {
                if (checkTruncationLength(context)) {
                    return [ts_1.factory.createPropertySignature(/*modifiers*/ undefined, "...", /*questionToken*/ undefined, /*type*/ undefined)];
                }
                var typeElements = [];
                for (var _i = 0, _a = resolvedType.callSignatures; _i < _a.length; _i++) {
                    var signature = _a[_i];
                    typeElements.push(signatureToSignatureDeclarationHelper(signature, 178 /* SyntaxKind.CallSignature */, context));
                }
                for (var _b = 0, _c = resolvedType.constructSignatures; _b < _c.length; _b++) {
                    var signature = _c[_b];
                    if (signature.flags & 4 /* SignatureFlags.Abstract */)
                        continue;
                    typeElements.push(signatureToSignatureDeclarationHelper(signature, 179 /* SyntaxKind.ConstructSignature */, context));
                }
                for (var _d = 0, _e = resolvedType.indexInfos; _d < _e.length; _d++) {
                    var info = _e[_d];
                    typeElements.push(indexInfoToIndexSignatureDeclarationHelper(info, context, resolvedType.objectFlags & 1024 /* ObjectFlags.ReverseMapped */ ? createElidedInformationPlaceholder(context) : undefined));
                }
                var properties = resolvedType.properties;
                if (!properties) {
                    return typeElements;
                }
                var i = 0;
                for (var _f = 0, properties_1 = properties; _f < properties_1.length; _f++) {
                    var propertySymbol = properties_1[_f];
                    i++;
                    if (context.flags & 2048 /* NodeBuilderFlags.WriteClassExpressionAsTypeLiteral */) {
                        if (propertySymbol.flags & 4194304 /* SymbolFlags.Prototype */) {
                            continue;
                        }
                        if ((0, ts_1.getDeclarationModifierFlagsFromSymbol)(propertySymbol) & (8 /* ModifierFlags.Private */ | 16 /* ModifierFlags.Protected */) && context.tracker.reportPrivateInBaseOfClassExpression) {
                            context.tracker.reportPrivateInBaseOfClassExpression((0, ts_1.unescapeLeadingUnderscores)(propertySymbol.escapedName));
                        }
                    }
                    if (checkTruncationLength(context) && (i + 2 < properties.length - 1)) {
                        typeElements.push(ts_1.factory.createPropertySignature(/*modifiers*/ undefined, "... ".concat(properties.length - i, " more ..."), /*questionToken*/ undefined, /*type*/ undefined));
                        addPropertyToElementList(properties[properties.length - 1], context, typeElements);
                        break;
                    }
                    addPropertyToElementList(propertySymbol, context, typeElements);
                }
                return typeElements.length ? typeElements : undefined;
            }
        }
        function createElidedInformationPlaceholder(context) {
            context.approximateLength += 3;
            if (!(context.flags & 1 /* NodeBuilderFlags.NoTruncation */)) {
                return ts_1.factory.createTypeReferenceNode(ts_1.factory.createIdentifier("..."), /*typeArguments*/ undefined);
            }
            return ts_1.factory.createKeywordTypeNode(133 /* SyntaxKind.AnyKeyword */);
        }
        function shouldUsePlaceholderForProperty(propertySymbol, context) {
            var _a;
            // Use placeholders for reverse mapped types we've either already descended into, or which
            // are nested reverse mappings within a mapping over a non-anonymous type. The later is a restriction mostly just to
            // reduce the blowup in printback size from doing, eg, a deep reverse mapping over `Window`.
            // Since anonymous types usually come from expressions, this allows us to preserve the output
            // for deep mappings which likely come from expressions, while truncating those parts which
            // come from mappings over library functions.
            return !!((0, ts_1.getCheckFlags)(propertySymbol) & 8192 /* CheckFlags.ReverseMapped */)
                && ((0, ts_1.contains)(context.reverseMappedStack, propertySymbol)
                    || (((_a = context.reverseMappedStack) === null || _a === void 0 ? void 0 : _a[0])
                        && !((0, ts_1.getObjectFlags)((0, ts_1.last)(context.reverseMappedStack).links.propertyType) & 16 /* ObjectFlags.Anonymous */)));
        }
        function addPropertyToElementList(propertySymbol, context, typeElements) {
            var _a;
            var propertyIsReverseMapped = !!((0, ts_1.getCheckFlags)(propertySymbol) & 8192 /* CheckFlags.ReverseMapped */);
            var propertyType = shouldUsePlaceholderForProperty(propertySymbol, context) ?
                anyType : getNonMissingTypeOfSymbol(propertySymbol);
            var saveEnclosingDeclaration = context.enclosingDeclaration;
            context.enclosingDeclaration = undefined;
            if (context.tracker.canTrackSymbol && isLateBoundName(propertySymbol.escapedName)) {
                if (propertySymbol.declarations) {
                    var decl = (0, ts_1.first)(propertySymbol.declarations);
                    if (hasLateBindableName(decl)) {
                        if ((0, ts_1.isBinaryExpression)(decl)) {
                            var name_8 = (0, ts_1.getNameOfDeclaration)(decl);
                            if (name_8 && (0, ts_1.isElementAccessExpression)(name_8) && (0, ts_1.isPropertyAccessEntityNameExpression)(name_8.argumentExpression)) {
                                trackComputedName(name_8.argumentExpression, saveEnclosingDeclaration, context);
                            }
                        }
                        else {
                            trackComputedName(decl.name.expression, saveEnclosingDeclaration, context);
                        }
                    }
                }
                else {
                    context.tracker.reportNonSerializableProperty(symbolToString(propertySymbol));
                }
            }
            context.enclosingDeclaration = propertySymbol.valueDeclaration || ((_a = propertySymbol.declarations) === null || _a === void 0 ? void 0 : _a[0]) || saveEnclosingDeclaration;
            var propertyName = getPropertyNameNodeForSymbol(propertySymbol, context);
            context.enclosingDeclaration = saveEnclosingDeclaration;
            context.approximateLength += ((0, ts_1.symbolName)(propertySymbol).length + 1);
            var optionalToken = propertySymbol.flags & 16777216 /* SymbolFlags.Optional */ ? ts_1.factory.createToken(58 /* SyntaxKind.QuestionToken */) : undefined;
            if (propertySymbol.flags & (16 /* SymbolFlags.Function */ | 8192 /* SymbolFlags.Method */) && !getPropertiesOfObjectType(propertyType).length && !isReadonlySymbol(propertySymbol)) {
                var signatures = getSignaturesOfType(filterType(propertyType, function (t) { return !(t.flags & 32768 /* TypeFlags.Undefined */); }), 0 /* SignatureKind.Call */);
                for (var _i = 0, signatures_1 = signatures; _i < signatures_1.length; _i++) {
                    var signature = signatures_1[_i];
                    var methodDeclaration = signatureToSignatureDeclarationHelper(signature, 172 /* SyntaxKind.MethodSignature */, context, { name: propertyName, questionToken: optionalToken });
                    typeElements.push(preserveCommentsOn(methodDeclaration));
                }
                if (signatures.length || !optionalToken) {
                    return;
                }
            }
            var propertyTypeNode;
            if (shouldUsePlaceholderForProperty(propertySymbol, context)) {
                propertyTypeNode = createElidedInformationPlaceholder(context);
            }
            else {
                if (propertyIsReverseMapped) {
                    context.reverseMappedStack || (context.reverseMappedStack = []);
                    context.reverseMappedStack.push(propertySymbol);
                }
                propertyTypeNode = propertyType ? serializeTypeForDeclaration(context, propertyType, propertySymbol, saveEnclosingDeclaration) : ts_1.factory.createKeywordTypeNode(133 /* SyntaxKind.AnyKeyword */);
                if (propertyIsReverseMapped) {
                    context.reverseMappedStack.pop();
                }
            }
            var modifiers = isReadonlySymbol(propertySymbol) ? [ts_1.factory.createToken(148 /* SyntaxKind.ReadonlyKeyword */)] : undefined;
            if (modifiers) {
                context.approximateLength += 9;
            }
            var propertySignature = ts_1.factory.createPropertySignature(modifiers, propertyName, optionalToken, propertyTypeNode);
            typeElements.push(preserveCommentsOn(propertySignature));
            function preserveCommentsOn(node) {
                var _a;
                if ((0, ts_1.some)(propertySymbol.declarations, function (d) { return d.kind === 354 /* SyntaxKind.JSDocPropertyTag */; })) {
                    var d = (_a = propertySymbol.declarations) === null || _a === void 0 ? void 0 : _a.find(function (d) { return d.kind === 354 /* SyntaxKind.JSDocPropertyTag */; });
                    var commentText = (0, ts_1.getTextOfJSDocComment)(d.comment);
                    if (commentText) {
                        (0, ts_1.setSyntheticLeadingComments)(node, [{ kind: 3 /* SyntaxKind.MultiLineCommentTrivia */, text: "*\n * " + commentText.replace(/\n/g, "\n * ") + "\n ", pos: -1, end: -1, hasTrailingNewLine: true }]);
                    }
                }
                else if (propertySymbol.valueDeclaration) {
                    // Copy comments to node for declaration emit
                    (0, ts_1.setCommentRange)(node, propertySymbol.valueDeclaration);
                }
                return node;
            }
        }
        function mapToTypeNodes(types, context, isBareList) {
            if ((0, ts_1.some)(types)) {
                if (checkTruncationLength(context)) {
                    if (!isBareList) {
                        return [ts_1.factory.createTypeReferenceNode("...", /*typeArguments*/ undefined)];
                    }
                    else if (types.length > 2) {
                        return [
                            typeToTypeNodeHelper(types[0], context),
                            ts_1.factory.createTypeReferenceNode("... ".concat(types.length - 2, " more ..."), /*typeArguments*/ undefined),
                            typeToTypeNodeHelper(types[types.length - 1], context)
                        ];
                    }
                }
                var mayHaveNameCollisions = !(context.flags & 64 /* NodeBuilderFlags.UseFullyQualifiedType */);
                /** Map from type reference identifier text to [type, index in `result` where the type node is] */
                var seenNames = mayHaveNameCollisions ? (0, ts_1.createMultiMap)() : undefined;
                var result_1 = [];
                var i = 0;
                for (var _i = 0, types_2 = types; _i < types_2.length; _i++) {
                    var type = types_2[_i];
                    i++;
                    if (checkTruncationLength(context) && (i + 2 < types.length - 1)) {
                        result_1.push(ts_1.factory.createTypeReferenceNode("... ".concat(types.length - i, " more ..."), /*typeArguments*/ undefined));
                        var typeNode_1 = typeToTypeNodeHelper(types[types.length - 1], context);
                        if (typeNode_1) {
                            result_1.push(typeNode_1);
                        }
                        break;
                    }
                    context.approximateLength += 2; // Account for whitespace + separator
                    var typeNode = typeToTypeNodeHelper(type, context);
                    if (typeNode) {
                        result_1.push(typeNode);
                        if (seenNames && (0, ts_1.isIdentifierTypeReference)(typeNode)) {
                            seenNames.add(typeNode.typeName.escapedText, [type, result_1.length - 1]);
                        }
                    }
                }
                if (seenNames) {
                    // To avoid printing types like `[Foo, Foo]` or `Bar & Bar` where
                    // occurrences of the same name actually come from different
                    // namespaces, go through the single-identifier type reference nodes
                    // we just generated, and see if any names were generated more than
                    // once while referring to different types. If so, regenerate the
                    // type node for each entry by that name with the
                    // `UseFullyQualifiedType` flag enabled.
                    var saveContextFlags = context.flags;
                    context.flags |= 64 /* NodeBuilderFlags.UseFullyQualifiedType */;
                    seenNames.forEach(function (types) {
                        if (!(0, ts_1.arrayIsHomogeneous)(types, function (_a, _b) {
                            var a = _a[0];
                            var b = _b[0];
                            return typesAreSameReference(a, b);
                        })) {
                            for (var _i = 0, types_3 = types; _i < types_3.length; _i++) {
                                var _a = types_3[_i], type = _a[0], resultIndex = _a[1];
                                result_1[resultIndex] = typeToTypeNodeHelper(type, context);
                            }
                        }
                    });
                    context.flags = saveContextFlags;
                }
                return result_1;
            }
        }
        function typesAreSameReference(a, b) {
            return a === b
                || !!a.symbol && a.symbol === b.symbol
                || !!a.aliasSymbol && a.aliasSymbol === b.aliasSymbol;
        }
        function indexInfoToIndexSignatureDeclarationHelper(indexInfo, context, typeNode) {
            var name = (0, ts_1.getNameFromIndexInfo)(indexInfo) || "x";
            var indexerTypeNode = typeToTypeNodeHelper(indexInfo.keyType, context);
            var indexingParameter = ts_1.factory.createParameterDeclaration(
            /*modifiers*/ undefined, 
            /*dotDotDotToken*/ undefined, name, 
            /*questionToken*/ undefined, indexerTypeNode, 
            /*initializer*/ undefined);
            if (!typeNode) {
                typeNode = typeToTypeNodeHelper(indexInfo.type || anyType, context);
            }
            if (!indexInfo.type && !(context.flags & 2097152 /* NodeBuilderFlags.AllowEmptyIndexInfoType */)) {
                context.encounteredError = true;
            }
            context.approximateLength += (name.length + 4);
            return ts_1.factory.createIndexSignature(indexInfo.isReadonly ? [ts_1.factory.createToken(148 /* SyntaxKind.ReadonlyKeyword */)] : undefined, [indexingParameter], typeNode);
        }
        function signatureToSignatureDeclarationHelper(signature, kind, context, options) {
            var _a, _b, _c, _d, _e;
            var suppressAny = context.flags & 256 /* NodeBuilderFlags.SuppressAnyReturnType */;
            if (suppressAny)
                context.flags &= ~256 /* NodeBuilderFlags.SuppressAnyReturnType */; // suppress only toplevel `any`s
            context.approximateLength += 3; // Usually a signature contributes a few more characters than this, but 3 is the minimum
            var typeParameters;
            var typeArguments;
            if (context.flags & 32 /* NodeBuilderFlags.WriteTypeArgumentsOfSignature */ && signature.target && signature.mapper && signature.target.typeParameters) {
                typeArguments = signature.target.typeParameters.map(function (parameter) { return typeToTypeNodeHelper(instantiateType(parameter, signature.mapper), context); });
            }
            else {
                typeParameters = signature.typeParameters && signature.typeParameters.map(function (parameter) { return typeParameterToDeclaration(parameter, context); });
            }
            var expandedParams = getExpandedParameters(signature, /*skipUnionExpanding*/ true)[0];
            // For regular function/method declarations, the enclosing declaration will already be signature.declaration,
            // so this is a no-op, but for arrow functions and function expressions, the enclosing declaration will be
            // the declaration that the arrow function / function expression is assigned to.
            //
            // If the parameters or return type include "typeof globalThis.paramName", using the wrong scope will lead
            // us to believe that we can emit "typeof paramName" instead, even though that would refer to the parameter,
            // not the global. Make sure we are in the right scope by changing the enclosingDeclaration to the function.
            //
            // We can't use the declaration directly; it may be in another file and so we may lose access to symbols
            // accessible to the current enclosing declaration, or gain access to symbols not accessible to the current
            // enclosing declaration. To keep this chain accurate, insert a fake scope into the chain which makes the
            // function's parameters visible.
            //
            // If the declaration is in a JS file, then we don't need to do this at all, as there are no annotations besides
            // JSDoc, which are always outside the function declaration, so are not in the parameter scope.
            var cleanup;
            if (context.enclosingDeclaration
                && signature.declaration
                && signature.declaration !== context.enclosingDeclaration
                && !(0, ts_1.isInJSFile)(signature.declaration)
                && (0, ts_1.some)(expandedParams)) {
                // As a performance optimization, reuse the same fake scope within this chain.
                // This is especially needed when we are working on an excessively deep type;
                // if we don't do this, then we spend all of our time adding more and more
                // scopes that need to be searched in isSymbolAccessible later. Since all we
                // really want to do is to mark certain names as unavailable, we can just keep
                // all of the names we're introducing in one large table and push/pop from it as
                // needed; isSymbolAccessible will walk upward and find the closest "fake" scope,
                // which will conveniently report on any and all faked scopes in the chain.
                //
                // It'd likely be better to store this somewhere else for isSymbolAccessible, but
                // since that API _only_ uses the enclosing declaration (and its parents), this is
                // seems like the best way to inject names into that search process.
                //
                // Note that we only check the most immediate enclosingDeclaration; the only place we
                // could potentially add another fake scope into the chain is right here, so we don't
                // traverse all ancestors.
                var existingFakeScope = getNodeLinks(context.enclosingDeclaration).fakeScopeForSignatureDeclaration ? context.enclosingDeclaration : undefined;
                ts_1.Debug.assertOptionalNode(existingFakeScope, ts_1.isBlock);
                var locals_1 = (_a = existingFakeScope === null || existingFakeScope === void 0 ? void 0 : existingFakeScope.locals) !== null && _a !== void 0 ? _a : (0, ts_1.createSymbolTable)();
                var newLocals_1;
                for (var _i = 0, expandedParams_1 = expandedParams; _i < expandedParams_1.length; _i++) {
                    var param = expandedParams_1[_i];
                    if (!locals_1.has(param.escapedName)) {
                        newLocals_1 = (0, ts_1.append)(newLocals_1, param.escapedName);
                        locals_1.set(param.escapedName, param);
                    }
                }
                if (newLocals_1) {
                    function removeNewLocals() {
                        (0, ts_1.forEach)(newLocals_1, function (s) { return locals_1.delete(s); });
                    }
                    if (existingFakeScope) {
                        cleanup = removeNewLocals;
                    }
                    else {
                        // Use a Block for this; the type of the node doesn't matter so long as it
                        // has locals, and this is cheaper/easier than using a function-ish Node.
                        var fakeScope = ts_1.parseNodeFactory.createBlock(ts_1.emptyArray);
                        getNodeLinks(fakeScope).fakeScopeForSignatureDeclaration = true;
                        fakeScope.locals = locals_1;
                        var saveEnclosingDeclaration_1 = context.enclosingDeclaration;
                        (0, ts_1.setParent)(fakeScope, saveEnclosingDeclaration_1);
                        context.enclosingDeclaration = fakeScope;
                        cleanup = function () {
                            context.enclosingDeclaration = saveEnclosingDeclaration_1;
                            removeNewLocals();
                        };
                    }
                }
            }
            // If the expanded parameter list had a variadic in a non-trailing position, don't expand it
            var parameters = ((0, ts_1.some)(expandedParams, function (p) { return p !== expandedParams[expandedParams.length - 1] && !!((0, ts_1.getCheckFlags)(p) & 32768 /* CheckFlags.RestParameter */); }) ? signature.parameters : expandedParams).map(function (parameter) { return symbolToParameterDeclaration(parameter, context, kind === 175 /* SyntaxKind.Constructor */, options === null || options === void 0 ? void 0 : options.privateSymbolVisitor, options === null || options === void 0 ? void 0 : options.bundledImports); });
            var thisParameter = context.flags & 33554432 /* NodeBuilderFlags.OmitThisParameter */ ? undefined : tryGetThisParameterDeclaration(signature, context);
            if (thisParameter) {
                parameters.unshift(thisParameter);
            }
            var returnTypeNode;
            var typePredicate = getTypePredicateOfSignature(signature);
            if (typePredicate) {
                var assertsModifier = typePredicate.kind === 2 /* TypePredicateKind.AssertsThis */ || typePredicate.kind === 3 /* TypePredicateKind.AssertsIdentifier */ ?
                    ts_1.factory.createToken(131 /* SyntaxKind.AssertsKeyword */) :
                    undefined;
                var parameterName = typePredicate.kind === 1 /* TypePredicateKind.Identifier */ || typePredicate.kind === 3 /* TypePredicateKind.AssertsIdentifier */ ?
                    (0, ts_1.setEmitFlags)(ts_1.factory.createIdentifier(typePredicate.parameterName), 16777216 /* EmitFlags.NoAsciiEscaping */) :
                    ts_1.factory.createThisTypeNode();
                var typeNode = typePredicate.type && typeToTypeNodeHelper(typePredicate.type, context);
                returnTypeNode = ts_1.factory.createTypePredicateNode(assertsModifier, parameterName, typeNode);
            }
            else {
                var returnType = getReturnTypeOfSignature(signature);
                if (returnType && !(suppressAny && isTypeAny(returnType))) {
                    returnTypeNode = serializeReturnTypeForSignature(context, returnType, signature, options === null || options === void 0 ? void 0 : options.privateSymbolVisitor, options === null || options === void 0 ? void 0 : options.bundledImports);
                }
                else if (!suppressAny) {
                    returnTypeNode = ts_1.factory.createKeywordTypeNode(133 /* SyntaxKind.AnyKeyword */);
                }
            }
            var modifiers = options === null || options === void 0 ? void 0 : options.modifiers;
            if ((kind === 184 /* SyntaxKind.ConstructorType */) && signature.flags & 4 /* SignatureFlags.Abstract */) {
                var flags = (0, ts_1.modifiersToFlags)(modifiers);
                modifiers = ts_1.factory.createModifiersFromModifierFlags(flags | 256 /* ModifierFlags.Abstract */);
            }
            var node = kind === 178 /* SyntaxKind.CallSignature */ ? ts_1.factory.createCallSignature(typeParameters, parameters, returnTypeNode) :
                kind === 179 /* SyntaxKind.ConstructSignature */ ? ts_1.factory.createConstructSignature(typeParameters, parameters, returnTypeNode) :
                    kind === 172 /* SyntaxKind.MethodSignature */ ? ts_1.factory.createMethodSignature(modifiers, (_b = options === null || options === void 0 ? void 0 : options.name) !== null && _b !== void 0 ? _b : ts_1.factory.createIdentifier(""), options === null || options === void 0 ? void 0 : options.questionToken, typeParameters, parameters, returnTypeNode) :
                        kind === 173 /* SyntaxKind.MethodDeclaration */ ? ts_1.factory.createMethodDeclaration(modifiers, /*asteriskToken*/ undefined, (_c = options === null || options === void 0 ? void 0 : options.name) !== null && _c !== void 0 ? _c : ts_1.factory.createIdentifier(""), /*questionToken*/ undefined, typeParameters, parameters, returnTypeNode, /*body*/ undefined) :
                            kind === 175 /* SyntaxKind.Constructor */ ? ts_1.factory.createConstructorDeclaration(modifiers, parameters, /*body*/ undefined) :
                                kind === 176 /* SyntaxKind.GetAccessor */ ? ts_1.factory.createGetAccessorDeclaration(modifiers, (_d = options === null || options === void 0 ? void 0 : options.name) !== null && _d !== void 0 ? _d : ts_1.factory.createIdentifier(""), parameters, returnTypeNode, /*body*/ undefined) :
                                    kind === 177 /* SyntaxKind.SetAccessor */ ? ts_1.factory.createSetAccessorDeclaration(modifiers, (_e = options === null || options === void 0 ? void 0 : options.name) !== null && _e !== void 0 ? _e : ts_1.factory.createIdentifier(""), parameters, /*body*/ undefined) :
                                        kind === 180 /* SyntaxKind.IndexSignature */ ? ts_1.factory.createIndexSignature(modifiers, parameters, returnTypeNode) :
                                            kind === 323 /* SyntaxKind.JSDocFunctionType */ ? ts_1.factory.createJSDocFunctionType(parameters, returnTypeNode) :
                                                kind === 183 /* SyntaxKind.FunctionType */ ? ts_1.factory.createFunctionTypeNode(typeParameters, parameters, returnTypeNode !== null && returnTypeNode !== void 0 ? returnTypeNode : ts_1.factory.createTypeReferenceNode(ts_1.factory.createIdentifier(""))) :
                                                    kind === 184 /* SyntaxKind.ConstructorType */ ? ts_1.factory.createConstructorTypeNode(modifiers, typeParameters, parameters, returnTypeNode !== null && returnTypeNode !== void 0 ? returnTypeNode : ts_1.factory.createTypeReferenceNode(ts_1.factory.createIdentifier(""))) :
                                                        kind === 261 /* SyntaxKind.FunctionDeclaration */ ? ts_1.factory.createFunctionDeclaration(modifiers, /*asteriskToken*/ undefined, (options === null || options === void 0 ? void 0 : options.name) ? (0, ts_1.cast)(options.name, ts_1.isIdentifier) : ts_1.factory.createIdentifier(""), typeParameters, parameters, returnTypeNode, /*body*/ undefined) :
                                                            kind === 217 /* SyntaxKind.FunctionExpression */ ? ts_1.factory.createFunctionExpression(modifiers, /*asteriskToken*/ undefined, (options === null || options === void 0 ? void 0 : options.name) ? (0, ts_1.cast)(options.name, ts_1.isIdentifier) : ts_1.factory.createIdentifier(""), typeParameters, parameters, returnTypeNode, ts_1.factory.createBlock([])) :
                                                                kind === 218 /* SyntaxKind.ArrowFunction */ ? ts_1.factory.createArrowFunction(modifiers, typeParameters, parameters, returnTypeNode, /*equalsGreaterThanToken*/ undefined, ts_1.factory.createBlock([])) :
                                                                    ts_1.Debug.assertNever(kind);
            if (typeArguments) {
                node.typeArguments = ts_1.factory.createNodeArray(typeArguments);
            }
            cleanup === null || cleanup === void 0 ? void 0 : cleanup();
            return node;
        }
        function tryGetThisParameterDeclaration(signature, context) {
            if (signature.thisParameter) {
                return symbolToParameterDeclaration(signature.thisParameter, context);
            }
            if (signature.declaration && (0, ts_1.isInJSFile)(signature.declaration)) {
                var thisTag = (0, ts_1.getJSDocThisTag)(signature.declaration);
                if (thisTag && thisTag.typeExpression) {
                    return ts_1.factory.createParameterDeclaration(
                    /*modifiers*/ undefined, 
                    /*dotDotDotToken*/ undefined, "this", 
                    /*questionToken*/ undefined, typeToTypeNodeHelper(getTypeFromTypeNode(thisTag.typeExpression), context));
                }
            }
        }
        function typeParameterToDeclarationWithConstraint(type, context, constraintNode) {
            var savedContextFlags = context.flags;
            context.flags &= ~512 /* NodeBuilderFlags.WriteTypeParametersInQualifiedName */; // Avoids potential infinite loop when building for a claimspace with a generic
            var modifiers = ts_1.factory.createModifiersFromModifierFlags(getTypeParameterModifiers(type));
            var name = typeParameterToName(type, context);
            var defaultParameter = getDefaultFromTypeParameter(type);
            var defaultParameterNode = defaultParameter && typeToTypeNodeHelper(defaultParameter, context);
            context.flags = savedContextFlags;
            return ts_1.factory.createTypeParameterDeclaration(modifiers, name, constraintNode, defaultParameterNode);
        }
        function typeParameterToDeclaration(type, context, constraint) {
            if (constraint === void 0) { constraint = getConstraintOfTypeParameter(type); }
            var constraintNode = constraint && typeToTypeNodeHelper(constraint, context);
            return typeParameterToDeclarationWithConstraint(type, context, constraintNode);
        }
        function symbolToParameterDeclaration(parameterSymbol, context, preserveModifierFlags, privateSymbolVisitor, bundledImports) {
            var parameterDeclaration = (0, ts_1.getDeclarationOfKind)(parameterSymbol, 168 /* SyntaxKind.Parameter */);
            if (!parameterDeclaration && !(0, ts_1.isTransientSymbol)(parameterSymbol)) {
                parameterDeclaration = (0, ts_1.getDeclarationOfKind)(parameterSymbol, 347 /* SyntaxKind.JSDocParameterTag */);
            }
            var parameterType = getTypeOfSymbol(parameterSymbol);
            if (parameterDeclaration && isRequiredInitializedParameter(parameterDeclaration)) {
                parameterType = getOptionalType(parameterType);
            }
            var parameterTypeNode = serializeTypeForDeclaration(context, parameterType, parameterSymbol, context.enclosingDeclaration, privateSymbolVisitor, bundledImports);
            var modifiers = !(context.flags & 8192 /* NodeBuilderFlags.OmitParameterModifiers */) && preserveModifierFlags && parameterDeclaration && (0, ts_1.canHaveModifiers)(parameterDeclaration) ? (0, ts_1.map)((0, ts_1.getModifiers)(parameterDeclaration), ts_1.factory.cloneNode) : undefined;
            var isRest = parameterDeclaration && (0, ts_1.isRestParameter)(parameterDeclaration) || (0, ts_1.getCheckFlags)(parameterSymbol) & 32768 /* CheckFlags.RestParameter */;
            var dotDotDotToken = isRest ? ts_1.factory.createToken(26 /* SyntaxKind.DotDotDotToken */) : undefined;
            var name = parameterDeclaration ? parameterDeclaration.name ?
                parameterDeclaration.name.kind === 80 /* SyntaxKind.Identifier */ ? (0, ts_1.setEmitFlags)(ts_1.factory.cloneNode(parameterDeclaration.name), 16777216 /* EmitFlags.NoAsciiEscaping */) :
                    parameterDeclaration.name.kind === 165 /* SyntaxKind.QualifiedName */ ? (0, ts_1.setEmitFlags)(ts_1.factory.cloneNode(parameterDeclaration.name.right), 16777216 /* EmitFlags.NoAsciiEscaping */) :
                        cloneBindingName(parameterDeclaration.name) :
                (0, ts_1.symbolName)(parameterSymbol) :
                (0, ts_1.symbolName)(parameterSymbol);
            var isOptional = parameterDeclaration && isOptionalParameter(parameterDeclaration) || (0, ts_1.getCheckFlags)(parameterSymbol) & 16384 /* CheckFlags.OptionalParameter */;
            var questionToken = isOptional ? ts_1.factory.createToken(58 /* SyntaxKind.QuestionToken */) : undefined;
            var parameterNode = ts_1.factory.createParameterDeclaration(modifiers, dotDotDotToken, name, questionToken, parameterTypeNode, 
            /*initializer*/ undefined);
            context.approximateLength += (0, ts_1.symbolName)(parameterSymbol).length + 3;
            return parameterNode;
            function cloneBindingName(node) {
                return elideInitializerAndSetEmitFlags(node);
                function elideInitializerAndSetEmitFlags(node) {
                    if (context.tracker.canTrackSymbol && (0, ts_1.isComputedPropertyName)(node) && isLateBindableName(node)) {
                        trackComputedName(node.expression, context.enclosingDeclaration, context);
                    }
                    var visited = (0, ts_1.visitEachChild)(node, elideInitializerAndSetEmitFlags, ts_1.nullTransformationContext, /*nodesVisitor*/ undefined, elideInitializerAndSetEmitFlags);
                    if ((0, ts_1.isBindingElement)(visited)) {
                        visited = ts_1.factory.updateBindingElement(visited, visited.dotDotDotToken, visited.propertyName, visited.name, 
                        /*initializer*/ undefined);
                    }
                    if (!(0, ts_1.nodeIsSynthesized)(visited)) {
                        visited = ts_1.factory.cloneNode(visited);
                    }
                    return (0, ts_1.setEmitFlags)(visited, 1 /* EmitFlags.SingleLine */ | 16777216 /* EmitFlags.NoAsciiEscaping */);
                }
            }
        }
        function trackComputedName(accessExpression, enclosingDeclaration, context) {
            if (!context.tracker.canTrackSymbol)
                return;
            // get symbol of the first identifier of the entityName
            var firstIdentifier = (0, ts_1.getFirstIdentifier)(accessExpression);
            var name = resolveName(firstIdentifier, firstIdentifier.escapedText, 111551 /* SymbolFlags.Value */ | 1048576 /* SymbolFlags.ExportValue */, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ true);
            if (name) {
                context.tracker.trackSymbol(name, enclosingDeclaration, 111551 /* SymbolFlags.Value */);
            }
        }
        function lookupSymbolChain(symbol, context, meaning, yieldModuleSymbol) {
            context.tracker.trackSymbol(symbol, context.enclosingDeclaration, meaning);
            return lookupSymbolChainWorker(symbol, context, meaning, yieldModuleSymbol);
        }
        function lookupSymbolChainWorker(symbol, context, meaning, yieldModuleSymbol) {
            // Try to get qualified name if the symbol is not a type parameter and there is an enclosing declaration.
            var chain;
            var isTypeParameter = symbol.flags & 262144 /* SymbolFlags.TypeParameter */;
            if (!isTypeParameter && (context.enclosingDeclaration || context.flags & 64 /* NodeBuilderFlags.UseFullyQualifiedType */) && !(context.flags & 134217728 /* NodeBuilderFlags.DoNotIncludeSymbolChain */)) {
                chain = ts_1.Debug.checkDefined(getSymbolChain(symbol, meaning, /*endOfChain*/ true));
                ts_1.Debug.assert(chain && chain.length > 0);
            }
            else {
                chain = [symbol];
            }
            return chain;
            /** @param endOfChain Set to false for recursive calls; non-recursive calls should always output something. */
            function getSymbolChain(symbol, meaning, endOfChain) {
                var accessibleSymbolChain = getAccessibleSymbolChain(symbol, context.enclosingDeclaration, meaning, !!(context.flags & 128 /* NodeBuilderFlags.UseOnlyExternalAliasing */));
                var parentSpecifiers;
                if (!accessibleSymbolChain ||
                    needsQualification(accessibleSymbolChain[0], context.enclosingDeclaration, accessibleSymbolChain.length === 1 ? meaning : getQualifiedLeftMeaning(meaning))) {
                    // Go up and add our parent.
                    var parents_1 = getContainersOfSymbol(accessibleSymbolChain ? accessibleSymbolChain[0] : symbol, context.enclosingDeclaration, meaning);
                    if ((0, ts_1.length)(parents_1)) {
                        parentSpecifiers = parents_1.map(function (symbol) {
                            return (0, ts_1.some)(symbol.declarations, hasNonGlobalAugmentationExternalModuleSymbol)
                                ? getSpecifierForModuleSymbol(symbol, context)
                                : undefined;
                        });
                        var indices = parents_1.map(function (_, i) { return i; });
                        indices.sort(sortByBestName);
                        var sortedParents = indices.map(function (i) { return parents_1[i]; });
                        for (var _i = 0, sortedParents_1 = sortedParents; _i < sortedParents_1.length; _i++) {
                            var parent_4 = sortedParents_1[_i];
                            var parentChain = getSymbolChain(parent_4, getQualifiedLeftMeaning(meaning), /*endOfChain*/ false);
                            if (parentChain) {
                                if (parent_4.exports && parent_4.exports.get("export=" /* InternalSymbolName.ExportEquals */) &&
                                    getSymbolIfSameReference(parent_4.exports.get("export=" /* InternalSymbolName.ExportEquals */), symbol)) {
                                    // parentChain root _is_ symbol - symbol is a module export=, so it kinda looks like it's own parent
                                    // No need to lookup an alias for the symbol in itself
                                    accessibleSymbolChain = parentChain;
                                    break;
                                }
                                accessibleSymbolChain = parentChain.concat(accessibleSymbolChain || [getAliasForSymbolInContainer(parent_4, symbol) || symbol]);
                                break;
                            }
                        }
                    }
                }
                if (accessibleSymbolChain) {
                    return accessibleSymbolChain;
                }
                if (
                // If this is the last part of outputting the symbol, always output. The cases apply only to parent symbols.
                endOfChain ||
                    // If a parent symbol is an anonymous type, don't write it.
                    !(symbol.flags & (2048 /* SymbolFlags.TypeLiteral */ | 4096 /* SymbolFlags.ObjectLiteral */))) {
                    // If a parent symbol is an external module, don't write it. (We prefer just `x` vs `"foo/bar".x`.)
                    if (!endOfChain && !yieldModuleSymbol && !!(0, ts_1.forEach)(symbol.declarations, hasNonGlobalAugmentationExternalModuleSymbol)) {
                        return;
                    }
                    return [symbol];
                }
                function sortByBestName(a, b) {
                    var specifierA = parentSpecifiers[a];
                    var specifierB = parentSpecifiers[b];
                    if (specifierA && specifierB) {
                        var isBRelative = (0, ts_1.pathIsRelative)(specifierB);
                        if ((0, ts_1.pathIsRelative)(specifierA) === isBRelative) {
                            // Both relative or both non-relative, sort by number of parts
                            return moduleSpecifiers.countPathComponents(specifierA) - moduleSpecifiers.countPathComponents(specifierB);
                        }
                        if (isBRelative) {
                            // A is non-relative, B is relative: prefer A
                            return -1;
                        }
                        // A is relative, B is non-relative: prefer B
                        return 1;
                    }
                    return 0;
                }
            }
        }
        function typeParametersToTypeParameterDeclarations(symbol, context) {
            var typeParameterNodes;
            var targetSymbol = getTargetSymbol(symbol);
            if (targetSymbol.flags & (32 /* SymbolFlags.Class */ | 64 /* SymbolFlags.Interface */ | 524288 /* SymbolFlags.TypeAlias */)) {
                typeParameterNodes = ts_1.factory.createNodeArray((0, ts_1.map)(getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol), function (tp) { return typeParameterToDeclaration(tp, context); }));
            }
            return typeParameterNodes;
        }
        function lookupTypeParameterNodes(chain, index, context) {
            var _a;
            ts_1.Debug.assert(chain && 0 <= index && index < chain.length);
            var symbol = chain[index];
            var symbolId = getSymbolId(symbol);
            if ((_a = context.typeParameterSymbolList) === null || _a === void 0 ? void 0 : _a.has(symbolId)) {
                return undefined;
            }
            (context.typeParameterSymbolList || (context.typeParameterSymbolList = new Set())).add(symbolId);
            var typeParameterNodes;
            if (context.flags & 512 /* NodeBuilderFlags.WriteTypeParametersInQualifiedName */ && index < (chain.length - 1)) {
                var parentSymbol = symbol;
                var nextSymbol_1 = chain[index + 1];
                if ((0, ts_1.getCheckFlags)(nextSymbol_1) & 1 /* CheckFlags.Instantiated */) {
                    var params = getTypeParametersOfClassOrInterface(parentSymbol.flags & 2097152 /* SymbolFlags.Alias */ ? resolveAlias(parentSymbol) : parentSymbol);
                    // NOTE: cast to TransientSymbol should be safe because only TransientSymbol can have CheckFlags.Instantiated
                    typeParameterNodes = mapToTypeNodes((0, ts_1.map)(params, function (t) { return getMappedType(t, nextSymbol_1.links.mapper); }), context);
                }
                else {
                    typeParameterNodes = typeParametersToTypeParameterDeclarations(symbol, context);
                }
            }
            return typeParameterNodes;
        }
        /**
         * Given A[B][C][D], finds A[B]
         */
        function getTopmostIndexedAccessType(top) {
            if ((0, ts_1.isIndexedAccessTypeNode)(top.objectType)) {
                return getTopmostIndexedAccessType(top.objectType);
            }
            return top;
        }
        function getSpecifierForModuleSymbol(symbol, context, overrideImportMode) {
            var _a;
            var file = (0, ts_1.getDeclarationOfKind)(symbol, 311 /* SyntaxKind.SourceFile */);
            if (!file) {
                var equivalentFileSymbol = (0, ts_1.firstDefined)(symbol.declarations, function (d) { return getFileSymbolIfFileSymbolExportEqualsContainer(d, symbol); });
                if (equivalentFileSymbol) {
                    file = (0, ts_1.getDeclarationOfKind)(equivalentFileSymbol, 311 /* SyntaxKind.SourceFile */);
                }
            }
            if (file && file.moduleName !== undefined) {
                // Use the amd name if it is available
                return file.moduleName;
            }
            if (!file) {
                if (context.tracker.trackReferencedAmbientModule) {
                    var ambientDecls = (0, ts_1.filter)(symbol.declarations, ts_1.isAmbientModule);
                    if ((0, ts_1.length)(ambientDecls)) {
                        for (var _i = 0, _b = ambientDecls; _i < _b.length; _i++) {
                            var decl = _b[_i];
                            context.tracker.trackReferencedAmbientModule(decl, symbol);
                        }
                    }
                }
                if (ambientModuleSymbolRegex.test(symbol.escapedName)) {
                    return symbol.escapedName.substring(1, symbol.escapedName.length - 1);
                }
            }
            if (!context.enclosingDeclaration || !context.tracker.moduleResolverHost) {
                // If there's no context declaration, we can't lookup a non-ambient specifier, so we just use the symbol name
                if (ambientModuleSymbolRegex.test(symbol.escapedName)) {
                    return symbol.escapedName.substring(1, symbol.escapedName.length - 1);
                }
                return (0, ts_1.getSourceFileOfNode)((0, ts_1.getNonAugmentationDeclaration)(symbol)).fileName; // A resolver may not be provided for baselines and errors - in those cases we use the fileName in full
            }
            var contextFile = (0, ts_1.getSourceFileOfNode)((0, ts_1.getOriginalNode)(context.enclosingDeclaration));
            var resolutionMode = overrideImportMode || (contextFile === null || contextFile === void 0 ? void 0 : contextFile.impliedNodeFormat);
            var cacheKey = (0, ts_1.createModeAwareCacheKey)(contextFile.path, resolutionMode);
            var links = getSymbolLinks(symbol);
            var specifier = links.specifierCache && links.specifierCache.get(cacheKey);
            if (!specifier) {
                var isBundle = !!(0, ts_1.outFile)(compilerOptions);
                // For declaration bundles, we need to generate absolute paths relative to the common source dir for imports,
                // just like how the declaration emitter does for the ambient module declarations - we can easily accomplish this
                // using the `baseUrl` compiler option (which we would otherwise never use in declaration emit) and a non-relative
                // specifier preference
                var moduleResolverHost = context.tracker.moduleResolverHost;
                var specifierCompilerOptions = isBundle ? __assign(__assign({}, compilerOptions), { baseUrl: moduleResolverHost.getCommonSourceDirectory() }) : compilerOptions;
                specifier = (0, ts_1.first)(moduleSpecifiers.getModuleSpecifiers(symbol, checker, specifierCompilerOptions, contextFile, moduleResolverHost, {
                    importModuleSpecifierPreference: isBundle ? "non-relative" : "project-relative",
                    importModuleSpecifierEnding: isBundle ? "minimal"
                        : resolutionMode === ts_1.ModuleKind.ESNext ? "js"
                            : undefined,
                }, { overrideImportMode: overrideImportMode }));
                (_a = links.specifierCache) !== null && _a !== void 0 ? _a : (links.specifierCache = new Map());
                links.specifierCache.set(cacheKey, specifier);
            }
            return specifier;
        }
        function symbolToEntityNameNode(symbol) {
            var identifier = ts_1.factory.createIdentifier((0, ts_1.unescapeLeadingUnderscores)(symbol.escapedName));
            return symbol.parent ? ts_1.factory.createQualifiedName(symbolToEntityNameNode(symbol.parent), identifier) : identifier;
        }
        function symbolToTypeNode(symbol, context, meaning, overrideTypeArguments) {
            var _a, _b, _c, _d;
            var chain = lookupSymbolChain(symbol, context, meaning, !(context.flags & 16384 /* NodeBuilderFlags.UseAliasDefinedOutsideCurrentScope */)); // If we're using aliases outside the current scope, dont bother with the module
            var isTypeOf = meaning === 111551 /* SymbolFlags.Value */;
            if ((0, ts_1.some)(chain[0].declarations, hasNonGlobalAugmentationExternalModuleSymbol)) {
                // module is root, must use `ImportTypeNode`
                var nonRootParts = chain.length > 1 ? createAccessFromSymbolChain(chain, chain.length - 1, 1) : undefined;
                var typeParameterNodes = overrideTypeArguments || lookupTypeParameterNodes(chain, 0, context);
                var contextFile = (0, ts_1.getSourceFileOfNode)((0, ts_1.getOriginalNode)(context.enclosingDeclaration));
                var targetFile = (0, ts_1.getSourceFileOfModule)(chain[0]);
                var specifier = void 0;
                var assertion = void 0;
                if ((0, ts_1.getEmitModuleResolutionKind)(compilerOptions) === ts_1.ModuleResolutionKind.Node16 || (0, ts_1.getEmitModuleResolutionKind)(compilerOptions) === ts_1.ModuleResolutionKind.NodeNext) {
                    // An `import` type directed at an esm format file is only going to resolve in esm mode - set the esm mode assertion
                    if ((targetFile === null || targetFile === void 0 ? void 0 : targetFile.impliedNodeFormat) === ts_1.ModuleKind.ESNext && targetFile.impliedNodeFormat !== (contextFile === null || contextFile === void 0 ? void 0 : contextFile.impliedNodeFormat)) {
                        specifier = getSpecifierForModuleSymbol(chain[0], context, ts_1.ModuleKind.ESNext);
                        assertion = ts_1.factory.createImportTypeAssertionContainer(ts_1.factory.createAssertClause(ts_1.factory.createNodeArray([
                            ts_1.factory.createAssertEntry(ts_1.factory.createStringLiteral("resolution-mode"), ts_1.factory.createStringLiteral("import"))
                        ])));
                        (_b = (_a = context.tracker).reportImportTypeNodeResolutionModeOverride) === null || _b === void 0 ? void 0 : _b.call(_a);
                    }
                }
                if (!specifier) {
                    specifier = getSpecifierForModuleSymbol(chain[0], context);
                }
                if (!(context.flags & 67108864 /* NodeBuilderFlags.AllowNodeModulesRelativePaths */) && (0, ts_1.getEmitModuleResolutionKind)(compilerOptions) !== ts_1.ModuleResolutionKind.Classic && specifier.indexOf("/node_modules/") >= 0) {
                    var oldSpecifier = specifier;
                    if ((0, ts_1.getEmitModuleResolutionKind)(compilerOptions) === ts_1.ModuleResolutionKind.Node16 || (0, ts_1.getEmitModuleResolutionKind)(compilerOptions) === ts_1.ModuleResolutionKind.NodeNext) {
                        // We might be able to write a portable import type using a mode override; try specifier generation again, but with a different mode set
                        var swappedMode = (contextFile === null || contextFile === void 0 ? void 0 : contextFile.impliedNodeFormat) === ts_1.ModuleKind.ESNext ? ts_1.ModuleKind.CommonJS : ts_1.ModuleKind.ESNext;
                        specifier = getSpecifierForModuleSymbol(chain[0], context, swappedMode);
                        if (specifier.indexOf("/node_modules/") >= 0) {
                            // Still unreachable :(
                            specifier = oldSpecifier;
                        }
                        else {
                            assertion = ts_1.factory.createImportTypeAssertionContainer(ts_1.factory.createAssertClause(ts_1.factory.createNodeArray([
                                ts_1.factory.createAssertEntry(ts_1.factory.createStringLiteral("resolution-mode"), ts_1.factory.createStringLiteral(swappedMode === ts_1.ModuleKind.ESNext ? "import" : "require"))
                            ])));
                            (_d = (_c = context.tracker).reportImportTypeNodeResolutionModeOverride) === null || _d === void 0 ? void 0 : _d.call(_c);
                        }
                    }
                    if (!assertion) {
                        // If ultimately we can only name the symbol with a reference that dives into a `node_modules` folder, we should error
                        // since declaration files with these kinds of references are liable to fail when published :(
                        context.encounteredError = true;
                        if (context.tracker.reportLikelyUnsafeImportRequiredError) {
                            context.tracker.reportLikelyUnsafeImportRequiredError(oldSpecifier);
                        }
                    }
                }
                var lit = ts_1.factory.createLiteralTypeNode(ts_1.factory.createStringLiteral(specifier));
                if (context.tracker.trackExternalModuleSymbolOfImportTypeNode)
                    context.tracker.trackExternalModuleSymbolOfImportTypeNode(chain[0]);
                context.approximateLength += specifier.length + 10; // specifier + import("")
                if (!nonRootParts || (0, ts_1.isEntityName)(nonRootParts)) {
                    if (nonRootParts) {
                        var lastId = (0, ts_1.isIdentifier)(nonRootParts) ? nonRootParts : nonRootParts.right;
                        (0, ts_1.setIdentifierTypeArguments)(lastId, /*typeArguments*/ undefined);
                    }
                    return ts_1.factory.createImportTypeNode(lit, assertion, nonRootParts, typeParameterNodes, isTypeOf);
                }
                else {
                    var splitNode = getTopmostIndexedAccessType(nonRootParts);
                    var qualifier = splitNode.objectType.typeName;
                    return ts_1.factory.createIndexedAccessTypeNode(ts_1.factory.createImportTypeNode(lit, assertion, qualifier, typeParameterNodes, isTypeOf), splitNode.indexType);
                }
            }
            var entityName = createAccessFromSymbolChain(chain, chain.length - 1, 0);
            if ((0, ts_1.isIndexedAccessTypeNode)(entityName)) {
                return entityName; // Indexed accesses can never be `typeof`
            }
            if (isTypeOf) {
                return ts_1.factory.createTypeQueryNode(entityName);
            }
            else {
                var lastId = (0, ts_1.isIdentifier)(entityName) ? entityName : entityName.right;
                var lastTypeArgs = (0, ts_1.getIdentifierTypeArguments)(lastId);
                (0, ts_1.setIdentifierTypeArguments)(lastId, /*typeArguments*/ undefined);
                return ts_1.factory.createTypeReferenceNode(entityName, lastTypeArgs);
            }
            function createAccessFromSymbolChain(chain, index, stopper) {
                var typeParameterNodes = index === (chain.length - 1) ? overrideTypeArguments : lookupTypeParameterNodes(chain, index, context);
                var symbol = chain[index];
                var parent = chain[index - 1];
                var symbolName;
                if (index === 0) {
                    context.flags |= 16777216 /* NodeBuilderFlags.InInitialEntityName */;
                    symbolName = getNameOfSymbolAsWritten(symbol, context);
                    context.approximateLength += (symbolName ? symbolName.length : 0) + 1;
                    context.flags ^= 16777216 /* NodeBuilderFlags.InInitialEntityName */;
                }
                else {
                    if (parent && getExportsOfSymbol(parent)) {
                        var exports = getExportsOfSymbol(parent);
                        (0, ts_1.forEachEntry)(exports, function (ex, name) {
                            if (getSymbolIfSameReference(ex, symbol) && !isLateBoundName(name) && name !== "export=" /* InternalSymbolName.ExportEquals */) {
                                symbolName = (0, ts_1.unescapeLeadingUnderscores)(name);
                                return true;
                            }
                        });
                    }
                }
                if (symbolName === undefined) {
                    var name_9 = (0, ts_1.firstDefined)(symbol.declarations, ts_1.getNameOfDeclaration);
                    if (name_9 && (0, ts_1.isComputedPropertyName)(name_9) && (0, ts_1.isEntityName)(name_9.expression)) {
                        var LHS = createAccessFromSymbolChain(chain, index - 1, stopper);
                        if ((0, ts_1.isEntityName)(LHS)) {
                            return ts_1.factory.createIndexedAccessTypeNode(ts_1.factory.createParenthesizedType(ts_1.factory.createTypeQueryNode(LHS)), ts_1.factory.createTypeQueryNode(name_9.expression));
                        }
                        return LHS;
                    }
                    symbolName = getNameOfSymbolAsWritten(symbol, context);
                }
                context.approximateLength += symbolName.length + 1;
                if (!(context.flags & 16 /* NodeBuilderFlags.ForbidIndexedAccessSymbolReferences */) && parent &&
                    getMembersOfSymbol(parent) && getMembersOfSymbol(parent).get(symbol.escapedName) &&
                    getSymbolIfSameReference(getMembersOfSymbol(parent).get(symbol.escapedName), symbol)) {
                    // Should use an indexed access
                    var LHS = createAccessFromSymbolChain(chain, index - 1, stopper);
                    if ((0, ts_1.isIndexedAccessTypeNode)(LHS)) {
                        return ts_1.factory.createIndexedAccessTypeNode(LHS, ts_1.factory.createLiteralTypeNode(ts_1.factory.createStringLiteral(symbolName)));
                    }
                    else {
                        return ts_1.factory.createIndexedAccessTypeNode(ts_1.factory.createTypeReferenceNode(LHS, typeParameterNodes), ts_1.factory.createLiteralTypeNode(ts_1.factory.createStringLiteral(symbolName)));
                    }
                }
                var identifier = (0, ts_1.setEmitFlags)(ts_1.factory.createIdentifier(symbolName), 16777216 /* EmitFlags.NoAsciiEscaping */);
                if (typeParameterNodes)
                    (0, ts_1.setIdentifierTypeArguments)(identifier, ts_1.factory.createNodeArray(typeParameterNodes));
                identifier.symbol = symbol;
                if (index > stopper) {
                    var LHS = createAccessFromSymbolChain(chain, index - 1, stopper);
                    if (!(0, ts_1.isEntityName)(LHS)) {
                        return ts_1.Debug.fail("Impossible construct - an export of an indexed access cannot be reachable");
                    }
                    return ts_1.factory.createQualifiedName(LHS, identifier);
                }
                return identifier;
            }
        }
        function typeParameterShadowsNameInScope(escapedName, context, type) {
            var result = resolveName(context.enclosingDeclaration, escapedName, 788968 /* SymbolFlags.Type */, /*nameNotFoundMessage*/ undefined, escapedName, /*isUse*/ false);
            if (result) {
                if (result.flags & 262144 /* SymbolFlags.TypeParameter */ && result === type.symbol) {
                    return false;
                }
                return true;
            }
            return false;
        }
        function typeParameterToName(type, context) {
            var _a, _b;
            if (context.flags & 4 /* NodeBuilderFlags.GenerateNamesForShadowedTypeParams */ && context.typeParameterNames) {
                var cached = context.typeParameterNames.get(getTypeId(type));
                if (cached) {
                    return cached;
                }
            }
            var result = symbolToName(type.symbol, context, 788968 /* SymbolFlags.Type */, /*expectsIdentifier*/ true);
            if (!(result.kind & 80 /* SyntaxKind.Identifier */)) {
                return ts_1.factory.createIdentifier("(Missing type parameter)");
            }
            if (context.flags & 4 /* NodeBuilderFlags.GenerateNamesForShadowedTypeParams */) {
                var rawtext = result.escapedText;
                var i = ((_a = context.typeParameterNamesByTextNextNameCount) === null || _a === void 0 ? void 0 : _a.get(rawtext)) || 0;
                var text = rawtext;
                while (((_b = context.typeParameterNamesByText) === null || _b === void 0 ? void 0 : _b.has(text)) || typeParameterShadowsNameInScope(text, context, type)) {
                    i++;
                    text = "".concat(rawtext, "_").concat(i);
                }
                if (text !== rawtext) {
                    var typeArguments = (0, ts_1.getIdentifierTypeArguments)(result);
                    result = ts_1.factory.createIdentifier(text);
                    (0, ts_1.setIdentifierTypeArguments)(result, typeArguments);
                }
                // avoiding iterations of the above loop turns out to be worth it when `i` starts to get large, so we cache the max
                // `i` we've used thus far, to save work later
                (context.typeParameterNamesByTextNextNameCount || (context.typeParameterNamesByTextNextNameCount = new Map())).set(rawtext, i);
                (context.typeParameterNames || (context.typeParameterNames = new Map())).set(getTypeId(type), result);
                (context.typeParameterNamesByText || (context.typeParameterNamesByText = new Set())).add(rawtext);
            }
            return result;
        }
        function symbolToName(symbol, context, meaning, expectsIdentifier) {
            var chain = lookupSymbolChain(symbol, context, meaning);
            if (expectsIdentifier && chain.length !== 1
                && !context.encounteredError
                && !(context.flags & 65536 /* NodeBuilderFlags.AllowQualifiedNameInPlaceOfIdentifier */)) {
                context.encounteredError = true;
            }
            return createEntityNameFromSymbolChain(chain, chain.length - 1);
            function createEntityNameFromSymbolChain(chain, index) {
                var typeParameterNodes = lookupTypeParameterNodes(chain, index, context);
                var symbol = chain[index];
                if (index === 0) {
                    context.flags |= 16777216 /* NodeBuilderFlags.InInitialEntityName */;
                }
                var symbolName = getNameOfSymbolAsWritten(symbol, context);
                if (index === 0) {
                    context.flags ^= 16777216 /* NodeBuilderFlags.InInitialEntityName */;
                }
                var identifier = (0, ts_1.setEmitFlags)(ts_1.factory.createIdentifier(symbolName), 16777216 /* EmitFlags.NoAsciiEscaping */);
                if (typeParameterNodes)
                    (0, ts_1.setIdentifierTypeArguments)(identifier, ts_1.factory.createNodeArray(typeParameterNodes));
                identifier.symbol = symbol;
                return index > 0 ? ts_1.factory.createQualifiedName(createEntityNameFromSymbolChain(chain, index - 1), identifier) : identifier;
            }
        }
        function symbolToExpression(symbol, context, meaning) {
            var chain = lookupSymbolChain(symbol, context, meaning);
            return createExpressionFromSymbolChain(chain, chain.length - 1);
            function createExpressionFromSymbolChain(chain, index) {
                var typeParameterNodes = lookupTypeParameterNodes(chain, index, context);
                var symbol = chain[index];
                if (index === 0) {
                    context.flags |= 16777216 /* NodeBuilderFlags.InInitialEntityName */;
                }
                var symbolName = getNameOfSymbolAsWritten(symbol, context);
                if (index === 0) {
                    context.flags ^= 16777216 /* NodeBuilderFlags.InInitialEntityName */;
                }
                var firstChar = symbolName.charCodeAt(0);
                if ((0, ts_1.isSingleOrDoubleQuote)(firstChar) && (0, ts_1.some)(symbol.declarations, hasNonGlobalAugmentationExternalModuleSymbol)) {
                    return ts_1.factory.createStringLiteral(getSpecifierForModuleSymbol(symbol, context));
                }
                if (index === 0 || (0, ts_1.canUsePropertyAccess)(symbolName, languageVersion)) {
                    var identifier = (0, ts_1.setEmitFlags)(ts_1.factory.createIdentifier(symbolName), 16777216 /* EmitFlags.NoAsciiEscaping */);
                    if (typeParameterNodes)
                        (0, ts_1.setIdentifierTypeArguments)(identifier, ts_1.factory.createNodeArray(typeParameterNodes));
                    identifier.symbol = symbol;
                    return index > 0 ? ts_1.factory.createPropertyAccessExpression(createExpressionFromSymbolChain(chain, index - 1), identifier) : identifier;
                }
                else {
                    if (firstChar === 91 /* CharacterCodes.openBracket */) {
                        symbolName = symbolName.substring(1, symbolName.length - 1);
                        firstChar = symbolName.charCodeAt(0);
                    }
                    var expression = void 0;
                    if ((0, ts_1.isSingleOrDoubleQuote)(firstChar) && !(symbol.flags & 8 /* SymbolFlags.EnumMember */)) {
                        expression = ts_1.factory.createStringLiteral((0, ts_1.stripQuotes)(symbolName).replace(/\\./g, function (s) { return s.substring(1); }), firstChar === 39 /* CharacterCodes.singleQuote */);
                    }
                    else if (("" + +symbolName) === symbolName) {
                        expression = ts_1.factory.createNumericLiteral(+symbolName);
                    }
                    if (!expression) {
                        var identifier = (0, ts_1.setEmitFlags)(ts_1.factory.createIdentifier(symbolName), 16777216 /* EmitFlags.NoAsciiEscaping */);
                        if (typeParameterNodes)
                            (0, ts_1.setIdentifierTypeArguments)(identifier, ts_1.factory.createNodeArray(typeParameterNodes));
                        identifier.symbol = symbol;
                        expression = identifier;
                    }
                    return ts_1.factory.createElementAccessExpression(createExpressionFromSymbolChain(chain, index - 1), expression);
                }
            }
        }
        function isStringNamed(d) {
            var name = (0, ts_1.getNameOfDeclaration)(d);
            return !!name && (0, ts_1.isStringLiteral)(name);
        }
        function isSingleQuotedStringNamed(d) {
            var name = (0, ts_1.getNameOfDeclaration)(d);
            return !!(name && (0, ts_1.isStringLiteral)(name) && (name.singleQuote || !(0, ts_1.nodeIsSynthesized)(name) && (0, ts_1.startsWith)((0, ts_1.getTextOfNode)(name, /*includeTrivia*/ false), "'")));
        }
        function getPropertyNameNodeForSymbol(symbol, context) {
            var stringNamed = !!(0, ts_1.length)(symbol.declarations) && (0, ts_1.every)(symbol.declarations, isStringNamed);
            var singleQuote = !!(0, ts_1.length)(symbol.declarations) && (0, ts_1.every)(symbol.declarations, isSingleQuotedStringNamed);
            var fromNameType = getPropertyNameNodeForSymbolFromNameType(symbol, context, singleQuote, stringNamed);
            if (fromNameType) {
                return fromNameType;
            }
            var rawName = (0, ts_1.unescapeLeadingUnderscores)(symbol.escapedName);
            return (0, ts_1.createPropertyNameNodeForIdentifierOrLiteral)(rawName, (0, ts_1.getEmitScriptTarget)(compilerOptions), singleQuote, stringNamed);
        }
        // See getNameForSymbolFromNameType for a stringy equivalent
        function getPropertyNameNodeForSymbolFromNameType(symbol, context, singleQuote, stringNamed) {
            var nameType = getSymbolLinks(symbol).nameType;
            if (nameType) {
                if (nameType.flags & 384 /* TypeFlags.StringOrNumberLiteral */) {
                    var name_10 = "" + nameType.value;
                    if (!(0, ts_1.isIdentifierText)(name_10, (0, ts_1.getEmitScriptTarget)(compilerOptions)) && (stringNamed || !(0, ts_1.isNumericLiteralName)(name_10))) {
                        return ts_1.factory.createStringLiteral(name_10, !!singleQuote);
                    }
                    if ((0, ts_1.isNumericLiteralName)(name_10) && (0, ts_1.startsWith)(name_10, "-")) {
                        return ts_1.factory.createComputedPropertyName(ts_1.factory.createNumericLiteral(+name_10));
                    }
                    return (0, ts_1.createPropertyNameNodeForIdentifierOrLiteral)(name_10, (0, ts_1.getEmitScriptTarget)(compilerOptions));
                }
                if (nameType.flags & 8192 /* TypeFlags.UniqueESSymbol */) {
                    return ts_1.factory.createComputedPropertyName(symbolToExpression(nameType.symbol, context, 111551 /* SymbolFlags.Value */));
                }
            }
        }
        function cloneNodeBuilderContext(context) {
            var initial = __assign({}, context);
            // Make type parameters created within this context not consume the name outside this context
            // The symbol serializer ends up creating many sibling scopes that all need "separate" contexts when
            // it comes to naming things - within a normal `typeToTypeNode` call, the node builder only ever descends
            // through the type tree, so the only cases where we could have used distinct sibling scopes was when there
            // were multiple generic overloads with similar generated type parameter names
            // The effect:
            // When we write out
            // export const x: <T>(x: T) => T
            // export const y: <T>(x: T) => T
            // we write it out like that, rather than as
            // export const x: <T>(x: T) => T
            // export const y: <T_1>(x: T_1) => T_1
            if (initial.typeParameterNames) {
                initial.typeParameterNames = new Map(initial.typeParameterNames);
            }
            if (initial.typeParameterNamesByText) {
                initial.typeParameterNamesByText = new Set(initial.typeParameterNamesByText);
            }
            if (initial.typeParameterSymbolList) {
                initial.typeParameterSymbolList = new Set(initial.typeParameterSymbolList);
            }
            initial.tracker = new SymbolTrackerImpl(initial, initial.tracker.inner, initial.tracker.moduleResolverHost);
            return initial;
        }
        function getDeclarationWithTypeAnnotation(symbol, enclosingDeclaration) {
            return symbol.declarations && (0, ts_1.find)(symbol.declarations, function (s) { return !!(0, ts_1.getEffectiveTypeAnnotationNode)(s) && (!enclosingDeclaration || !!(0, ts_1.findAncestor)(s, function (n) { return n === enclosingDeclaration; })); });
        }
        function existingTypeNodeIsNotReferenceOrIsReferenceWithCompatibleTypeArgumentCount(existing, type) {
            return !((0, ts_1.getObjectFlags)(type) & 4 /* ObjectFlags.Reference */) || !(0, ts_1.isTypeReferenceNode)(existing) || (0, ts_1.length)(existing.typeArguments) >= getMinTypeArgumentCount(type.target.typeParameters);
        }
        function getEnclosingDeclarationIgnoringFakeScope(enclosingDeclaration) {
            return getNodeLinks(enclosingDeclaration).fakeScopeForSignatureDeclaration ? enclosingDeclaration.parent : enclosingDeclaration;
        }
        /**
         * Unlike `typeToTypeNodeHelper`, this handles setting up the `AllowUniqueESSymbolType` flag
         * so a `unique symbol` is returned when appropriate for the input symbol, rather than `typeof sym`
         */
        function serializeTypeForDeclaration(context, type, symbol, enclosingDeclaration, includePrivateSymbol, bundled) {
            if (!isErrorType(type) && enclosingDeclaration) {
                var declWithExistingAnnotation = getDeclarationWithTypeAnnotation(symbol, getEnclosingDeclarationIgnoringFakeScope(enclosingDeclaration));
                if (declWithExistingAnnotation && !(0, ts_1.isFunctionLikeDeclaration)(declWithExistingAnnotation) && !(0, ts_1.isGetAccessorDeclaration)(declWithExistingAnnotation)) {
                    // try to reuse the existing annotation
                    var existing = (0, ts_1.getEffectiveTypeAnnotationNode)(declWithExistingAnnotation);
                    if (typeNodeIsEquivalentToType(existing, declWithExistingAnnotation, type) && existingTypeNodeIsNotReferenceOrIsReferenceWithCompatibleTypeArgumentCount(existing, type)) {
                        var result_2 = serializeExistingTypeNode(context, existing, includePrivateSymbol, bundled);
                        if (result_2) {
                            return result_2;
                        }
                    }
                }
            }
            var oldFlags = context.flags;
            if (type.flags & 8192 /* TypeFlags.UniqueESSymbol */ &&
                type.symbol === symbol && (!context.enclosingDeclaration || (0, ts_1.some)(symbol.declarations, function (d) { return (0, ts_1.getSourceFileOfNode)(d) === (0, ts_1.getSourceFileOfNode)(context.enclosingDeclaration); }))) {
                context.flags |= 1048576 /* NodeBuilderFlags.AllowUniqueESSymbolType */;
            }
            var result = typeToTypeNodeHelper(type, context);
            context.flags = oldFlags;
            return result;
        }
        function typeNodeIsEquivalentToType(typeNode, annotatedDeclaration, type) {
            var typeFromTypeNode = getTypeFromTypeNode(typeNode);
            if (typeFromTypeNode === type) {
                return true;
            }
            if ((0, ts_1.isParameter)(annotatedDeclaration) && annotatedDeclaration.questionToken) {
                return getTypeWithFacts(type, 524288 /* TypeFacts.NEUndefined */) === typeFromTypeNode;
            }
            return false;
        }
        function serializeReturnTypeForSignature(context, type, signature, includePrivateSymbol, bundled) {
            if (!isErrorType(type) && context.enclosingDeclaration) {
                var annotation = signature.declaration && (0, ts_1.getEffectiveReturnTypeNode)(signature.declaration);
                var enclosingDeclarationIgnoringFakeScope_1 = getEnclosingDeclarationIgnoringFakeScope(context.enclosingDeclaration);
                if (!!(0, ts_1.findAncestor)(annotation, function (n) { return n === enclosingDeclarationIgnoringFakeScope_1; }) && annotation) {
                    var annotated = getTypeFromTypeNode(annotation);
                    var thisInstantiated = annotated.flags & 262144 /* TypeFlags.TypeParameter */ && annotated.isThisType ? instantiateType(annotated, signature.mapper) : annotated;
                    if (thisInstantiated === type && existingTypeNodeIsNotReferenceOrIsReferenceWithCompatibleTypeArgumentCount(annotation, type)) {
                        var result = serializeExistingTypeNode(context, annotation, includePrivateSymbol, bundled);
                        if (result) {
                            return result;
                        }
                    }
                }
            }
            return typeToTypeNodeHelper(type, context);
        }
        function trackExistingEntityName(node, context, includePrivateSymbol) {
            var introducesError = false;
            var leftmost = (0, ts_1.getFirstIdentifier)(node);
            if ((0, ts_1.isInJSFile)(node) && ((0, ts_1.isExportsIdentifier)(leftmost) || (0, ts_1.isModuleExportsAccessExpression)(leftmost.parent) || ((0, ts_1.isQualifiedName)(leftmost.parent) && (0, ts_1.isModuleIdentifier)(leftmost.parent.left) && (0, ts_1.isExportsIdentifier)(leftmost.parent.right)))) {
                introducesError = true;
                return { introducesError: introducesError, node: node };
            }
            var sym = resolveEntityName(leftmost, 67108863 /* SymbolFlags.All */, /*ignoreErrors*/ true, /*dontResolveAlias*/ true);
            if (sym) {
                if (isSymbolAccessible(sym, context.enclosingDeclaration, 67108863 /* SymbolFlags.All */, /*shouldComputeAliasesToMakeVisible*/ false).accessibility !== 0 /* SymbolAccessibility.Accessible */) {
                    introducesError = true;
                }
                else {
                    context.tracker.trackSymbol(sym, context.enclosingDeclaration, 67108863 /* SymbolFlags.All */);
                    includePrivateSymbol === null || includePrivateSymbol === void 0 ? void 0 : includePrivateSymbol(sym);
                }
                if ((0, ts_1.isIdentifier)(node)) {
                    var type = getDeclaredTypeOfSymbol(sym);
                    var name_11 = sym.flags & 262144 /* SymbolFlags.TypeParameter */ && !isTypeSymbolAccessible(type.symbol, context.enclosingDeclaration) ? typeParameterToName(type, context) : ts_1.factory.cloneNode(node);
                    name_11.symbol = sym; // for quickinfo, which uses identifier symbol information
                    return { introducesError: introducesError, node: (0, ts_1.setEmitFlags)((0, ts_1.setOriginalNode)(name_11, node), 16777216 /* EmitFlags.NoAsciiEscaping */) };
                }
            }
            return { introducesError: introducesError, node: node };
        }
        function serializeExistingTypeNode(context, existing, includePrivateSymbol, bundled) {
            if (cancellationToken && cancellationToken.throwIfCancellationRequested) {
                cancellationToken.throwIfCancellationRequested();
            }
            var hadError = false;
            var file = (0, ts_1.getSourceFileOfNode)(existing);
            var transformed = (0, ts_1.visitNode)(existing, visitExistingNodeTreeSymbols, ts_1.isTypeNode);
            if (hadError) {
                return undefined;
            }
            return transformed === existing ? (0, ts_1.setTextRange)(ts_1.factory.cloneNode(existing), existing) : transformed;
            function visitExistingNodeTreeSymbols(node) {
                // We don't _actually_ support jsdoc namepath types, emit `any` instead
                if ((0, ts_1.isJSDocAllType)(node) || node.kind === 325 /* SyntaxKind.JSDocNamepathType */) {
                    return ts_1.factory.createKeywordTypeNode(133 /* SyntaxKind.AnyKeyword */);
                }
                if ((0, ts_1.isJSDocUnknownType)(node)) {
                    return ts_1.factory.createKeywordTypeNode(159 /* SyntaxKind.UnknownKeyword */);
                }
                if ((0, ts_1.isJSDocNullableType)(node)) {
                    return ts_1.factory.createUnionTypeNode([(0, ts_1.visitNode)(node.type, visitExistingNodeTreeSymbols, ts_1.isTypeNode), ts_1.factory.createLiteralTypeNode(ts_1.factory.createNull())]);
                }
                if ((0, ts_1.isJSDocOptionalType)(node)) {
                    return ts_1.factory.createUnionTypeNode([(0, ts_1.visitNode)(node.type, visitExistingNodeTreeSymbols, ts_1.isTypeNode), ts_1.factory.createKeywordTypeNode(157 /* SyntaxKind.UndefinedKeyword */)]);
                }
                if ((0, ts_1.isJSDocNonNullableType)(node)) {
                    return (0, ts_1.visitNode)(node.type, visitExistingNodeTreeSymbols);
                }
                if ((0, ts_1.isJSDocVariadicType)(node)) {
                    return ts_1.factory.createArrayTypeNode((0, ts_1.visitNode)(node.type, visitExistingNodeTreeSymbols, ts_1.isTypeNode));
                }
                if ((0, ts_1.isJSDocTypeLiteral)(node)) {
                    return ts_1.factory.createTypeLiteralNode((0, ts_1.map)(node.jsDocPropertyTags, function (t) {
                        var name = (0, ts_1.isIdentifier)(t.name) ? t.name : t.name.right;
                        var typeViaParent = getTypeOfPropertyOfType(getTypeFromTypeNode(node), name.escapedText);
                        var overrideTypeNode = typeViaParent && t.typeExpression && getTypeFromTypeNode(t.typeExpression.type) !== typeViaParent ? typeToTypeNodeHelper(typeViaParent, context) : undefined;
                        return ts_1.factory.createPropertySignature(
                        /*modifiers*/ undefined, name, t.isBracketed || t.typeExpression && (0, ts_1.isJSDocOptionalType)(t.typeExpression.type) ? ts_1.factory.createToken(58 /* SyntaxKind.QuestionToken */) : undefined, overrideTypeNode || (t.typeExpression && (0, ts_1.visitNode)(t.typeExpression.type, visitExistingNodeTreeSymbols, ts_1.isTypeNode)) || ts_1.factory.createKeywordTypeNode(133 /* SyntaxKind.AnyKeyword */));
                    }));
                }
                if ((0, ts_1.isTypeReferenceNode)(node) && (0, ts_1.isIdentifier)(node.typeName) && node.typeName.escapedText === "") {
                    return (0, ts_1.setOriginalNode)(ts_1.factory.createKeywordTypeNode(133 /* SyntaxKind.AnyKeyword */), node);
                }
                if (((0, ts_1.isExpressionWithTypeArguments)(node) || (0, ts_1.isTypeReferenceNode)(node)) && (0, ts_1.isJSDocIndexSignature)(node)) {
                    return ts_1.factory.createTypeLiteralNode([ts_1.factory.createIndexSignature(
                        /*modifiers*/ undefined, [ts_1.factory.createParameterDeclaration(
                            /*modifiers*/ undefined, 
                            /*dotDotDotToken*/ undefined, "x", 
                            /*questionToken*/ undefined, (0, ts_1.visitNode)(node.typeArguments[0], visitExistingNodeTreeSymbols, ts_1.isTypeNode))], (0, ts_1.visitNode)(node.typeArguments[1], visitExistingNodeTreeSymbols, ts_1.isTypeNode))]);
                }
                if ((0, ts_1.isJSDocFunctionType)(node)) {
                    if ((0, ts_1.isJSDocConstructSignature)(node)) {
                        var newTypeNode_1;
                        return ts_1.factory.createConstructorTypeNode(
                        /*modifiers*/ undefined, (0, ts_1.visitNodes)(node.typeParameters, visitExistingNodeTreeSymbols, ts_1.isTypeParameterDeclaration), (0, ts_1.mapDefined)(node.parameters, function (p, i) { return p.name && (0, ts_1.isIdentifier)(p.name) && p.name.escapedText === "new" ? (newTypeNode_1 = p.type, undefined) : ts_1.factory.createParameterDeclaration(
                        /*modifiers*/ undefined, getEffectiveDotDotDotForParameter(p), getNameForJSDocFunctionParameter(p, i), p.questionToken, (0, ts_1.visitNode)(p.type, visitExistingNodeTreeSymbols, ts_1.isTypeNode), 
                        /*initializer*/ undefined); }), (0, ts_1.visitNode)(newTypeNode_1 || node.type, visitExistingNodeTreeSymbols, ts_1.isTypeNode) || ts_1.factory.createKeywordTypeNode(133 /* SyntaxKind.AnyKeyword */));
                    }
                    else {
                        return ts_1.factory.createFunctionTypeNode((0, ts_1.visitNodes)(node.typeParameters, visitExistingNodeTreeSymbols, ts_1.isTypeParameterDeclaration), (0, ts_1.map)(node.parameters, function (p, i) { return ts_1.factory.createParameterDeclaration(
                        /*modifiers*/ undefined, getEffectiveDotDotDotForParameter(p), getNameForJSDocFunctionParameter(p, i), p.questionToken, (0, ts_1.visitNode)(p.type, visitExistingNodeTreeSymbols, ts_1.isTypeNode), 
                        /*initializer*/ undefined); }), (0, ts_1.visitNode)(node.type, visitExistingNodeTreeSymbols, ts_1.isTypeNode) || ts_1.factory.createKeywordTypeNode(133 /* SyntaxKind.AnyKeyword */));
                    }
                }
                if ((0, ts_1.isTypeReferenceNode)(node) && (0, ts_1.isInJSDoc)(node) && (!existingTypeNodeIsNotReferenceOrIsReferenceWithCompatibleTypeArgumentCount(node, getTypeFromTypeNode(node)) || getIntendedTypeFromJSDocTypeReference(node) || unknownSymbol === resolveTypeReferenceName(node, 788968 /* SymbolFlags.Type */, /*ignoreErrors*/ true))) {
                    return (0, ts_1.setOriginalNode)(typeToTypeNodeHelper(getTypeFromTypeNode(node), context), node);
                }
                if ((0, ts_1.isLiteralImportTypeNode)(node)) {
                    var nodeSymbol = getNodeLinks(node).resolvedSymbol;
                    if ((0, ts_1.isInJSDoc)(node) &&
                        nodeSymbol &&
                        (
                        // The import type resolved using jsdoc fallback logic
                        (!node.isTypeOf && !(nodeSymbol.flags & 788968 /* SymbolFlags.Type */)) ||
                            // The import type had type arguments autofilled by js fallback logic
                            !((0, ts_1.length)(node.typeArguments) >= getMinTypeArgumentCount(getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(nodeSymbol))))) {
                        return (0, ts_1.setOriginalNode)(typeToTypeNodeHelper(getTypeFromTypeNode(node), context), node);
                    }
                    return ts_1.factory.updateImportTypeNode(node, ts_1.factory.updateLiteralTypeNode(node.argument, rewriteModuleSpecifier(node, node.argument.literal)), node.assertions, node.qualifier, (0, ts_1.visitNodes)(node.typeArguments, visitExistingNodeTreeSymbols, ts_1.isTypeNode), node.isTypeOf);
                }
                if ((0, ts_1.isEntityName)(node) || (0, ts_1.isEntityNameExpression)(node)) {
                    var _a = trackExistingEntityName(node, context, includePrivateSymbol), introducesError = _a.introducesError, result = _a.node;
                    hadError = hadError || introducesError;
                    if (result !== node) {
                        return result;
                    }
                }
                if (file && (0, ts_1.isTupleTypeNode)(node) && ((0, ts_1.getLineAndCharacterOfPosition)(file, node.pos).line === (0, ts_1.getLineAndCharacterOfPosition)(file, node.end).line)) {
                    (0, ts_1.setEmitFlags)(node, 1 /* EmitFlags.SingleLine */);
                }
                return (0, ts_1.visitEachChild)(node, visitExistingNodeTreeSymbols, ts_1.nullTransformationContext);
                function getEffectiveDotDotDotForParameter(p) {
                    return p.dotDotDotToken || (p.type && (0, ts_1.isJSDocVariadicType)(p.type) ? ts_1.factory.createToken(26 /* SyntaxKind.DotDotDotToken */) : undefined);
                }
                /** Note that `new:T` parameters are not handled, but should be before calling this function. */
                function getNameForJSDocFunctionParameter(p, index) {
                    return p.name && (0, ts_1.isIdentifier)(p.name) && p.name.escapedText === "this" ? "this"
                        : getEffectiveDotDotDotForParameter(p) ? "args"
                            : "arg".concat(index);
                }
                function rewriteModuleSpecifier(parent, lit) {
                    if (bundled) {
                        if (context.tracker && context.tracker.moduleResolverHost) {
                            var targetFile = getExternalModuleFileFromDeclaration(parent);
                            if (targetFile) {
                                var getCanonicalFileName = (0, ts_1.createGetCanonicalFileName)(!!host.useCaseSensitiveFileNames);
                                var resolverHost = {
                                    getCanonicalFileName: getCanonicalFileName,
                                    getCurrentDirectory: function () { return context.tracker.moduleResolverHost.getCurrentDirectory(); },
                                    getCommonSourceDirectory: function () { return context.tracker.moduleResolverHost.getCommonSourceDirectory(); }
                                };
                                var newName = (0, ts_1.getResolvedExternalModuleName)(resolverHost, targetFile);
                                return ts_1.factory.createStringLiteral(newName);
                            }
                        }
                    }
                    else {
                        if (context.tracker && context.tracker.trackExternalModuleSymbolOfImportTypeNode) {
                            var moduleSym = resolveExternalModuleNameWorker(lit, lit, /*moduleNotFoundError*/ undefined);
                            if (moduleSym) {
                                context.tracker.trackExternalModuleSymbolOfImportTypeNode(moduleSym);
                            }
                        }
                    }
                    return lit;
                }
            }
        }
        function symbolTableToDeclarationStatements(symbolTable, context, bundled) {
            var serializePropertySymbolForClass = makeSerializePropertySymbol(ts_1.factory.createPropertyDeclaration, 173 /* SyntaxKind.MethodDeclaration */, /*useAccessors*/ true);
            var serializePropertySymbolForInterfaceWorker = makeSerializePropertySymbol(function (mods, name, question, type) { return ts_1.factory.createPropertySignature(mods, name, question, type); }, 172 /* SyntaxKind.MethodSignature */, /*useAccessors*/ false);
            // TODO: Use `setOriginalNode` on original declaration names where possible so these declarations see some kind of
            // declaration mapping
            // We save the enclosing declaration off here so it's not adjusted by well-meaning declaration
            // emit codepaths which want to apply more specific contexts (so we can still refer to the root real declaration
            // we're trying to emit from later on)
            var enclosingDeclaration = context.enclosingDeclaration;
            var results = [];
            var visitedSymbols = new Set();
            var deferredPrivatesStack = [];
            var oldcontext = context;
            context = __assign(__assign({}, oldcontext), { usedSymbolNames: new Set(oldcontext.usedSymbolNames), remappedSymbolNames: new Map(), tracker: undefined });
            var tracker = __assign(__assign({}, oldcontext.tracker.inner), { trackSymbol: function (sym, decl, meaning) {
                    var _a;
                    var accessibleResult = isSymbolAccessible(sym, decl, meaning, /*shouldComputeAliasesToMakeVisible*/ false);
                    if (accessibleResult.accessibility === 0 /* SymbolAccessibility.Accessible */) {
                        // Lookup the root symbol of the chain of refs we'll use to access it and serialize it
                        var chain = lookupSymbolChainWorker(sym, context, meaning);
                        if (!(sym.flags & 4 /* SymbolFlags.Property */)) {
                            includePrivateSymbol(chain[0]);
                        }
                    }
                    else if ((_a = oldcontext.tracker.inner) === null || _a === void 0 ? void 0 : _a.trackSymbol) {
                        return oldcontext.tracker.inner.trackSymbol(sym, decl, meaning);
                    }
                    return false;
                } });
            context.tracker = new SymbolTrackerImpl(context, tracker, oldcontext.tracker.moduleResolverHost);
            (0, ts_1.forEachEntry)(symbolTable, function (symbol, name) {
                var baseName = (0, ts_1.unescapeLeadingUnderscores)(name);
                void getInternalSymbolName(symbol, baseName); // Called to cache values into `usedSymbolNames` and `remappedSymbolNames`
            });
            var addingDeclare = !bundled;
            var exportEquals = symbolTable.get("export=" /* InternalSymbolName.ExportEquals */);
            if (exportEquals && symbolTable.size > 1 && exportEquals.flags & 2097152 /* SymbolFlags.Alias */) {
                symbolTable = (0, ts_1.createSymbolTable)();
                // Remove extraneous elements from root symbol table (they'll be mixed back in when the target of the `export=` is looked up)
                symbolTable.set("export=" /* InternalSymbolName.ExportEquals */, exportEquals);
            }
            visitSymbolTable(symbolTable);
            return mergeRedundantStatements(results);
            function isIdentifierAndNotUndefined(node) {
                return !!node && node.kind === 80 /* SyntaxKind.Identifier */;
            }
            function getNamesOfDeclaration(statement) {
                if ((0, ts_1.isVariableStatement)(statement)) {
                    return (0, ts_1.filter)((0, ts_1.map)(statement.declarationList.declarations, ts_1.getNameOfDeclaration), isIdentifierAndNotUndefined);
                }
                return (0, ts_1.filter)([(0, ts_1.getNameOfDeclaration)(statement)], isIdentifierAndNotUndefined);
            }
            function flattenExportAssignedNamespace(statements) {
                var exportAssignment = (0, ts_1.find)(statements, ts_1.isExportAssignment);
                var nsIndex = (0, ts_1.findIndex)(statements, ts_1.isModuleDeclaration);
                var ns = nsIndex !== -1 ? statements[nsIndex] : undefined;
                if (ns && exportAssignment && exportAssignment.isExportEquals &&
                    (0, ts_1.isIdentifier)(exportAssignment.expression) && (0, ts_1.isIdentifier)(ns.name) && (0, ts_1.idText)(ns.name) === (0, ts_1.idText)(exportAssignment.expression) &&
                    ns.body && (0, ts_1.isModuleBlock)(ns.body)) {
                    // Pass 0: Correct situations where a module has both an `export = ns` and multiple top-level exports by stripping the export modifiers from
                    //  the top-level exports and exporting them in the targeted ns, as can occur when a js file has both typedefs and `module.export` assignments
                    var excessExports = (0, ts_1.filter)(statements, function (s) { return !!((0, ts_1.getEffectiveModifierFlags)(s) & 1 /* ModifierFlags.Export */); });
                    var name_12 = ns.name;
                    var body = ns.body;
                    if ((0, ts_1.length)(excessExports)) {
                        ns = ts_1.factory.updateModuleDeclaration(ns, ns.modifiers, ns.name, body = ts_1.factory.updateModuleBlock(body, ts_1.factory.createNodeArray(__spreadArray(__spreadArray([], ns.body.statements, true), [ts_1.factory.createExportDeclaration(
                            /*modifiers*/ undefined, 
                            /*isTypeOnly*/ false, ts_1.factory.createNamedExports((0, ts_1.map)((0, ts_1.flatMap)(excessExports, function (e) { return getNamesOfDeclaration(e); }), function (id) { return ts_1.factory.createExportSpecifier(/*isTypeOnly*/ false, /*propertyName*/ undefined, id); })), 
                            /*moduleSpecifier*/ undefined)], false))));
                        statements = __spreadArray(__spreadArray(__spreadArray([], statements.slice(0, nsIndex), true), [ns], false), statements.slice(nsIndex + 1), true);
                    }
                    // Pass 1: Flatten `export namespace _exports {} export = _exports;` so long as the `export=` only points at a single namespace declaration
                    if (!(0, ts_1.find)(statements, function (s) { return s !== ns && (0, ts_1.nodeHasName)(s, name_12); })) {
                        results = [];
                        // If the namespace contains no export assignments or declarations, and no declarations flagged with `export`, then _everything_ is exported -
                        // to respect this as the top level, we need to add an `export` modifier to everything
                        var mixinExportFlag_1 = !(0, ts_1.some)(body.statements, function (s) { return (0, ts_1.hasSyntacticModifier)(s, 1 /* ModifierFlags.Export */) || (0, ts_1.isExportAssignment)(s) || (0, ts_1.isExportDeclaration)(s); });
                        (0, ts_1.forEach)(body.statements, function (s) {
                            addResult(s, mixinExportFlag_1 ? 1 /* ModifierFlags.Export */ : 0 /* ModifierFlags.None */); // Recalculates the ambient (and export, if applicable from above) flag
                        });
                        statements = __spreadArray(__spreadArray([], (0, ts_1.filter)(statements, function (s) { return s !== ns && s !== exportAssignment; }), true), results, true);
                    }
                }
                return statements;
            }
            function mergeExportDeclarations(statements) {
                // Pass 2: Combine all `export {}` declarations
                var exports = (0, ts_1.filter)(statements, function (d) { return (0, ts_1.isExportDeclaration)(d) && !d.moduleSpecifier && !!d.exportClause && (0, ts_1.isNamedExports)(d.exportClause); });
                if ((0, ts_1.length)(exports) > 1) {
                    var nonExports = (0, ts_1.filter)(statements, function (d) { return !(0, ts_1.isExportDeclaration)(d) || !!d.moduleSpecifier || !d.exportClause; });
                    statements = __spreadArray(__spreadArray([], nonExports, true), [ts_1.factory.createExportDeclaration(
                        /*modifiers*/ undefined, 
                        /*isTypeOnly*/ false, ts_1.factory.createNamedExports((0, ts_1.flatMap)(exports, function (e) { return (0, ts_1.cast)(e.exportClause, ts_1.isNamedExports).elements; })), 
                        /*moduleSpecifier*/ undefined)], false);
                }
                // Pass 2b: Also combine all `export {} from "..."` declarations as needed
                var reexports = (0, ts_1.filter)(statements, function (d) { return (0, ts_1.isExportDeclaration)(d) && !!d.moduleSpecifier && !!d.exportClause && (0, ts_1.isNamedExports)(d.exportClause); });
                if ((0, ts_1.length)(reexports) > 1) {
                    var groups = (0, ts_1.group)(reexports, function (decl) { return (0, ts_1.isStringLiteral)(decl.moduleSpecifier) ? ">" + decl.moduleSpecifier.text : ">"; });
                    if (groups.length !== reexports.length) {
                        var _loop_3 = function (group_1) {
                            if (group_1.length > 1) {
                                // remove group members from statements and then merge group members and add back to statements
                                statements = __spreadArray(__spreadArray([], (0, ts_1.filter)(statements, function (s) { return group_1.indexOf(s) === -1; }), true), [
                                    ts_1.factory.createExportDeclaration(
                                    /*modifiers*/ undefined, 
                                    /*isTypeOnly*/ false, ts_1.factory.createNamedExports((0, ts_1.flatMap)(group_1, function (e) { return (0, ts_1.cast)(e.exportClause, ts_1.isNamedExports).elements; })), group_1[0].moduleSpecifier)
                                ], false);
                            }
                        };
                        for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {
                            var group_1 = groups_1[_i];
                            _loop_3(group_1);
                        }
                    }
                }
                return statements;
            }
            function inlineExportModifiers(statements) {
                // Pass 3: Move all `export {}`'s to `export` modifiers where possible
                var index = (0, ts_1.findIndex)(statements, function (d) { return (0, ts_1.isExportDeclaration)(d) && !d.moduleSpecifier && !d.assertClause && !!d.exportClause && (0, ts_1.isNamedExports)(d.exportClause); });
                if (index >= 0) {
                    var exportDecl = statements[index];
                    var replacements = (0, ts_1.mapDefined)(exportDecl.exportClause.elements, function (e) {
                        if (!e.propertyName) {
                            // export {name} - look thru `statements` for `name`, and if all results can take an `export` modifier, do so and filter it
                            var indices = (0, ts_1.indicesOf)(statements);
                            var associatedIndices = (0, ts_1.filter)(indices, function (i) { return (0, ts_1.nodeHasName)(statements[i], e.name); });
                            if ((0, ts_1.length)(associatedIndices) && (0, ts_1.every)(associatedIndices, function (i) { return (0, ts_1.canHaveExportModifier)(statements[i]); })) {
                                for (var _i = 0, associatedIndices_1 = associatedIndices; _i < associatedIndices_1.length; _i++) {
                                    var index_1 = associatedIndices_1[_i];
                                    statements[index_1] = addExportModifier(statements[index_1]);
                                }
                                return undefined;
                            }
                        }
                        return e;
                    });
                    if (!(0, ts_1.length)(replacements)) {
                        // all clauses removed, remove the export declaration
                        (0, ts_1.orderedRemoveItemAt)(statements, index);
                    }
                    else {
                        // some items filtered, others not - update the export declaration
                        statements[index] = ts_1.factory.updateExportDeclaration(exportDecl, exportDecl.modifiers, exportDecl.isTypeOnly, ts_1.factory.updateNamedExports(exportDecl.exportClause, replacements), exportDecl.moduleSpecifier, exportDecl.assertClause);
                    }
                }
                return statements;
            }
            function mergeRedundantStatements(statements) {
                statements = flattenExportAssignedNamespace(statements);
                statements = mergeExportDeclarations(statements);
                statements = inlineExportModifiers(statements);
                // Not a cleanup, but as a final step: If there is a mix of `export` and non-`export` declarations, but no `export =` or `export {}` add a `export {};` so
                // declaration privacy is respected.
                if (enclosingDeclaration &&
                    (((0, ts_1.isSourceFile)(enclosingDeclaration) && (0, ts_1.isExternalOrCommonJsModule)(enclosingDeclaration)) || (0, ts_1.isModuleDeclaration)(enclosingDeclaration)) &&
                    (!(0, ts_1.some)(statements, ts_1.isExternalModuleIndicator) || (!(0, ts_1.hasScopeMarker)(statements) && (0, ts_1.some)(statements, ts_1.needsScopeMarker)))) {
                    statements.push((0, ts_1.createEmptyExports)(ts_1.factory));
                }
                return statements;
            }
            function addExportModifier(node) {
                var flags = ((0, ts_1.getEffectiveModifierFlags)(node) | 1 /* ModifierFlags.Export */) & ~2 /* ModifierFlags.Ambient */;
                return ts_1.factory.updateModifiers(node, flags);
            }
            function removeExportModifier(node) {
                var flags = (0, ts_1.getEffectiveModifierFlags)(node) & ~1 /* ModifierFlags.Export */;
                return ts_1.factory.updateModifiers(node, flags);
            }
            function visitSymbolTable(symbolTable, suppressNewPrivateContext, propertyAsAlias) {
                if (!suppressNewPrivateContext) {
                    deferredPrivatesStack.push(new Map());
                }
                symbolTable.forEach(function (symbol) {
                    serializeSymbol(symbol, /*isPrivate*/ false, !!propertyAsAlias);
                });
                if (!suppressNewPrivateContext) {
                    // deferredPrivates will be filled up by visiting the symbol table
                    // And will continue to iterate as elements are added while visited `deferredPrivates`
                    // (As that's how a map iterator is defined to work)
                    deferredPrivatesStack[deferredPrivatesStack.length - 1].forEach(function (symbol) {
                        serializeSymbol(symbol, /*isPrivate*/ true, !!propertyAsAlias);
                    });
                    deferredPrivatesStack.pop();
                }
            }
            function serializeSymbol(symbol, isPrivate, propertyAsAlias) {
                // cache visited list based on merged symbol, since we want to use the unmerged top-level symbol, but
                // still skip reserializing it if we encounter the merged product later on
                var visitedSym = getMergedSymbol(symbol);
                if (visitedSymbols.has(getSymbolId(visitedSym))) {
                    return; // Already printed
                }
                visitedSymbols.add(getSymbolId(visitedSym));
                // Only actually serialize symbols within the correct enclosing declaration, otherwise do nothing with the out-of-context symbol
                var skipMembershipCheck = !isPrivate; // We only call this on exported symbols when we know they're in the correct scope
                if (skipMembershipCheck || (!!(0, ts_1.length)(symbol.declarations) && (0, ts_1.some)(symbol.declarations, function (d) { return !!(0, ts_1.findAncestor)(d, function (n) { return n === enclosingDeclaration; }); }))) {
                    var oldContext = context;
                    context = cloneNodeBuilderContext(context);
                    serializeSymbolWorker(symbol, isPrivate, propertyAsAlias);
                    if (context.reportedDiagnostic) {
                        oldcontext.reportedDiagnostic = context.reportedDiagnostic; // hoist diagnostic result into outer context
                    }
                    context = oldContext;
                }
            }
            // Synthesize declarations for a symbol - might be an Interface, a Class, a Namespace, a Type, a Variable (const, let, or var), an Alias
            // or a merge of some number of those.
            // An interesting challenge is ensuring that when classes merge with namespaces and interfaces, is keeping
            // each symbol in only one of the representations
            // Also, synthesizing a default export of some kind
            // If it's an alias: emit `export default ref`
            // If it's a property: emit `export default _default` with a `_default` prop
            // If it's a class/interface/function: emit a class/interface/function with a `default` modifier
            // These forms can merge, eg (`export default 12; export default interface A {}`)
            function serializeSymbolWorker(symbol, isPrivate, propertyAsAlias) {
                var _a, _b, _c, _d;
                var symbolName = (0, ts_1.unescapeLeadingUnderscores)(symbol.escapedName);
                var isDefault = symbol.escapedName === "default" /* InternalSymbolName.Default */;
                if (isPrivate && !(context.flags & 131072 /* NodeBuilderFlags.AllowAnonymousIdentifier */) && (0, ts_1.isStringANonContextualKeyword)(symbolName) && !isDefault) {
                    // Oh no. We cannot use this symbol's name as it's name... It's likely some jsdoc had an invalid name like `export` or `default` :(
                    context.encounteredError = true;
                    // TODO: Issue error via symbol tracker?
                    return; // If we need to emit a private with a keyword name, we're done for, since something else will try to refer to it by that name
                }
                var needsPostExportDefault = isDefault && !!(symbol.flags & -113 /* SymbolFlags.ExportDoesNotSupportDefaultModifier */
                    || (symbol.flags & 16 /* SymbolFlags.Function */ && (0, ts_1.length)(getPropertiesOfType(getTypeOfSymbol(symbol))))) && !(symbol.flags & 2097152 /* SymbolFlags.Alias */); // An alias symbol should preclude needing to make an alias ourselves
                var needsExportDeclaration = !needsPostExportDefault && !isPrivate && (0, ts_1.isStringANonContextualKeyword)(symbolName) && !isDefault;
                // `serializeVariableOrProperty` will handle adding the export declaration if it is run (since `getInternalSymbolName` will create the name mapping), so we need to ensuer we unset `needsExportDeclaration` if it is
                if (needsPostExportDefault || needsExportDeclaration) {
                    isPrivate = true;
                }
                var modifierFlags = (!isPrivate ? 1 /* ModifierFlags.Export */ : 0) | (isDefault && !needsPostExportDefault ? 1024 /* ModifierFlags.Default */ : 0);
                var isConstMergedWithNS = symbol.flags & 1536 /* SymbolFlags.Module */ &&
                    symbol.flags & (2 /* SymbolFlags.BlockScopedVariable */ | 1 /* SymbolFlags.FunctionScopedVariable */ | 4 /* SymbolFlags.Property */) &&
                    symbol.escapedName !== "export=" /* InternalSymbolName.ExportEquals */;
                var isConstMergedWithNSPrintableAsSignatureMerge = isConstMergedWithNS && isTypeRepresentableAsFunctionNamespaceMerge(getTypeOfSymbol(symbol), symbol);
                if (symbol.flags & (16 /* SymbolFlags.Function */ | 8192 /* SymbolFlags.Method */) || isConstMergedWithNSPrintableAsSignatureMerge) {
                    serializeAsFunctionNamespaceMerge(getTypeOfSymbol(symbol), symbol, getInternalSymbolName(symbol, symbolName), modifierFlags);
                }
                if (symbol.flags & 524288 /* SymbolFlags.TypeAlias */) {
                    serializeTypeAlias(symbol, symbolName, modifierFlags);
                }
                // Need to skip over export= symbols below - json source files get a single `Property` flagged
                // symbol of name `export=` which needs to be handled like an alias. It's not great, but it is what it is.
                if (symbol.flags & (2 /* SymbolFlags.BlockScopedVariable */ | 1 /* SymbolFlags.FunctionScopedVariable */ | 4 /* SymbolFlags.Property */ | 98304 /* SymbolFlags.Accessor */)
                    && symbol.escapedName !== "export=" /* InternalSymbolName.ExportEquals */
                    && !(symbol.flags & 4194304 /* SymbolFlags.Prototype */)
                    && !(symbol.flags & 32 /* SymbolFlags.Class */)
                    && !(symbol.flags & 8192 /* SymbolFlags.Method */)
                    && !isConstMergedWithNSPrintableAsSignatureMerge) {
                    if (propertyAsAlias) {
                        var createdExport = serializeMaybeAliasAssignment(symbol);
                        if (createdExport) {
                            needsExportDeclaration = false;
                            needsPostExportDefault = false;
                        }
                    }
                    else {
                        var type = getTypeOfSymbol(symbol);
                        var localName = getInternalSymbolName(symbol, symbolName);
                        if (!(symbol.flags & 16 /* SymbolFlags.Function */) && isTypeRepresentableAsFunctionNamespaceMerge(type, symbol)) {
                            // If the type looks like a function declaration + ns could represent it, and it's type is sourced locally, rewrite it into a function declaration + ns
                            serializeAsFunctionNamespaceMerge(type, symbol, localName, modifierFlags);
                        }
                        else {
                            // A Class + Property merge is made for a `module.exports.Member = class {}`, and it doesn't serialize well as either a class _or_ a property symbol - in fact, _it behaves like an alias!_
                            // `var` is `FunctionScopedVariable`, `const` and `let` are `BlockScopedVariable`, and `module.exports.thing =` is `Property`
                            var flags = !(symbol.flags & 2 /* SymbolFlags.BlockScopedVariable */)
                                ? ((_a = symbol.parent) === null || _a === void 0 ? void 0 : _a.valueDeclaration) && (0, ts_1.isSourceFile)((_b = symbol.parent) === null || _b === void 0 ? void 0 : _b.valueDeclaration)
                                    ? 2 /* NodeFlags.Const */
                                    : undefined
                                : isConstVariable(symbol)
                                    ? 2 /* NodeFlags.Const */
                                    : 1 /* NodeFlags.Let */;
                            var name_13 = (needsPostExportDefault || !(symbol.flags & 4 /* SymbolFlags.Property */)) ? localName : getUnusedName(localName, symbol);
                            var textRange = symbol.declarations && (0, ts_1.find)(symbol.declarations, function (d) { return (0, ts_1.isVariableDeclaration)(d); });
                            if (textRange && (0, ts_1.isVariableDeclarationList)(textRange.parent) && textRange.parent.declarations.length === 1) {
                                textRange = textRange.parent.parent;
                            }
                            var propertyAccessRequire = (_c = symbol.declarations) === null || _c === void 0 ? void 0 : _c.find(ts_1.isPropertyAccessExpression);
                            if (propertyAccessRequire && (0, ts_1.isBinaryExpression)(propertyAccessRequire.parent) && (0, ts_1.isIdentifier)(propertyAccessRequire.parent.right)
                                && ((_d = type.symbol) === null || _d === void 0 ? void 0 : _d.valueDeclaration) && (0, ts_1.isSourceFile)(type.symbol.valueDeclaration)) {
                                var alias = localName === propertyAccessRequire.parent.right.escapedText ? undefined : propertyAccessRequire.parent.right;
                                addResult(ts_1.factory.createExportDeclaration(
                                /*modifiers*/ undefined, 
                                /*isTypeOnly*/ false, ts_1.factory.createNamedExports([ts_1.factory.createExportSpecifier(/*isTypeOnly*/ false, alias, localName)])), 0 /* ModifierFlags.None */);
                                context.tracker.trackSymbol(type.symbol, context.enclosingDeclaration, 111551 /* SymbolFlags.Value */);
                            }
                            else {
                                var statement = (0, ts_1.setTextRange)(ts_1.factory.createVariableStatement(/*modifiers*/ undefined, ts_1.factory.createVariableDeclarationList([
                                    ts_1.factory.createVariableDeclaration(name_13, /*exclamationToken*/ undefined, serializeTypeForDeclaration(context, type, symbol, enclosingDeclaration, includePrivateSymbol, bundled))
                                ], flags)), textRange);
                                addResult(statement, name_13 !== localName ? modifierFlags & ~1 /* ModifierFlags.Export */ : modifierFlags);
                                if (name_13 !== localName && !isPrivate) {
                                    // We rename the variable declaration we generate for Property symbols since they may have a name which
                                    // conflicts with a local declaration. For example, given input:
                                    // ```
                                    // function g() {}
                                    // module.exports.g = g
                                    // ```
                                    // In such a situation, we have a local variable named `g`, and a separate exported variable named `g`.
                                    // Naively, we would emit
                                    // ```
                                    // function g() {}
                                    // export const g: typeof g;
                                    // ```
                                    // That's obviously incorrect - the `g` in the type annotation needs to refer to the local `g`, but
                                    // the export declaration shadows it.
                                    // To work around that, we instead write
                                    // ```
                                    // function g() {}
                                    // const g_1: typeof g;
                                    // export { g_1 as g };
                                    // ```
                                    // To create an export named `g` that does _not_ shadow the local `g`
                                    addResult(ts_1.factory.createExportDeclaration(
                                    /*modifiers*/ undefined, 
                                    /*isTypeOnly*/ false, ts_1.factory.createNamedExports([ts_1.factory.createExportSpecifier(/*isTypeOnly*/ false, name_13, localName)])), 0 /* ModifierFlags.None */);
                                    needsExportDeclaration = false;
                                    needsPostExportDefault = false;
                                }
                            }
                        }
                    }
                }
                if (symbol.flags & 384 /* SymbolFlags.Enum */) {
                    serializeEnum(symbol, symbolName, modifierFlags);
                }
                if (symbol.flags & 32 /* SymbolFlags.Class */) {
                    if (symbol.flags & 4 /* SymbolFlags.Property */
                        && symbol.valueDeclaration
                        && (0, ts_1.isBinaryExpression)(symbol.valueDeclaration.parent)
                        && (0, ts_1.isClassExpression)(symbol.valueDeclaration.parent.right)) {
                        // Looks like a `module.exports.Sub = class {}` - if we serialize `symbol` as a class, the result will have no members,
                        // since the classiness is actually from the target of the effective alias the symbol is. yes. A BlockScopedVariable|Class|Property
                        // _really_ acts like an Alias, and none of a BlockScopedVariable, Class, or Property. This is the travesty of JS binding today.
                        serializeAsAlias(symbol, getInternalSymbolName(symbol, symbolName), modifierFlags);
                    }
                    else {
                        serializeAsClass(symbol, getInternalSymbolName(symbol, symbolName), modifierFlags);
                    }
                }
                if ((symbol.flags & (512 /* SymbolFlags.ValueModule */ | 1024 /* SymbolFlags.NamespaceModule */) && (!isConstMergedWithNS || isTypeOnlyNamespace(symbol))) || isConstMergedWithNSPrintableAsSignatureMerge) {
                    serializeModule(symbol, symbolName, modifierFlags);
                }
                // The class meaning serialization should handle serializing all interface members
                if (symbol.flags & 64 /* SymbolFlags.Interface */ && !(symbol.flags & 32 /* SymbolFlags.Class */)) {
                    serializeInterface(symbol, symbolName, modifierFlags);
                }
                if (symbol.flags & 2097152 /* SymbolFlags.Alias */) {
                    serializeAsAlias(symbol, getInternalSymbolName(symbol, symbolName), modifierFlags);
                }
                if (symbol.flags & 4 /* SymbolFlags.Property */ && symbol.escapedName === "export=" /* InternalSymbolName.ExportEquals */) {
                    serializeMaybeAliasAssignment(symbol);
                }
                if (symbol.flags & 8388608 /* SymbolFlags.ExportStar */) {
                    // synthesize export * from "moduleReference"
                    // Straightforward - only one thing to do - make an export declaration
                    if (symbol.declarations) {
                        for (var _i = 0, _e = symbol.declarations; _i < _e.length; _i++) {
                            var node = _e[_i];
                            var resolvedModule = resolveExternalModuleName(node, node.moduleSpecifier);
                            if (!resolvedModule)
                                continue;
                            addResult(ts_1.factory.createExportDeclaration(/*modifiers*/ undefined, /*isTypeOnly*/ node.isTypeOnly, /*exportClause*/ undefined, ts_1.factory.createStringLiteral(getSpecifierForModuleSymbol(resolvedModule, context))), 0 /* ModifierFlags.None */);
                        }
                    }
                }
                if (needsPostExportDefault) {
                    addResult(ts_1.factory.createExportAssignment(/*modifiers*/ undefined, /*isExportEquals*/ false, ts_1.factory.createIdentifier(getInternalSymbolName(symbol, symbolName))), 0 /* ModifierFlags.None */);
                }
                else if (needsExportDeclaration) {
                    addResult(ts_1.factory.createExportDeclaration(
                    /*modifiers*/ undefined, 
                    /*isTypeOnly*/ false, ts_1.factory.createNamedExports([ts_1.factory.createExportSpecifier(/*isTypeOnly*/ false, getInternalSymbolName(symbol, symbolName), symbolName)])), 0 /* ModifierFlags.None */);
                }
            }
            function includePrivateSymbol(symbol) {
                if ((0, ts_1.some)(symbol.declarations, ts_1.isParameterDeclaration))
                    return;
                ts_1.Debug.assertIsDefined(deferredPrivatesStack[deferredPrivatesStack.length - 1]);
                getUnusedName((0, ts_1.unescapeLeadingUnderscores)(symbol.escapedName), symbol); // Call to cache unique name for symbol
                // Blanket moving (import) aliases into the root private context should work, since imports are not valid within namespaces
                // (so they must have been in the root to begin with if they were real imports) cjs `require` aliases (an upcoming feature)
                // will throw a wrench in this, since those may have been nested, but we'll need to synthesize them in the outer scope
                // anyway, as that's the only place the import they translate to is valid. In such a case, we might need to use a unique name
                // for the moved import; which hopefully the above `getUnusedName` call should produce.
                var isExternalImportAlias = !!(symbol.flags & 2097152 /* SymbolFlags.Alias */) && !(0, ts_1.some)(symbol.declarations, function (d) {
                    return !!(0, ts_1.findAncestor)(d, ts_1.isExportDeclaration) ||
                        (0, ts_1.isNamespaceExport)(d) ||
                        ((0, ts_1.isImportEqualsDeclaration)(d) && !(0, ts_1.isExternalModuleReference)(d.moduleReference));
                });
                deferredPrivatesStack[isExternalImportAlias ? 0 : (deferredPrivatesStack.length - 1)].set(getSymbolId(symbol), symbol);
            }
            function isExportingScope(enclosingDeclaration) {
                return (((0, ts_1.isSourceFile)(enclosingDeclaration) && ((0, ts_1.isExternalOrCommonJsModule)(enclosingDeclaration) || (0, ts_1.isJsonSourceFile)(enclosingDeclaration))) ||
                    ((0, ts_1.isAmbientModule)(enclosingDeclaration) && !(0, ts_1.isGlobalScopeAugmentation)(enclosingDeclaration)));
            }
            // Prepends a `declare` and/or `export` modifier if the context requires it, and then adds `node` to `result` and returns `node`
            function addResult(node, additionalModifierFlags) {
                if ((0, ts_1.canHaveModifiers)(node)) {
                    var newModifierFlags = 0 /* ModifierFlags.None */;
                    var enclosingDeclaration_1 = context.enclosingDeclaration &&
                        ((0, ts_1.isJSDocTypeAlias)(context.enclosingDeclaration) ? (0, ts_1.getSourceFileOfNode)(context.enclosingDeclaration) : context.enclosingDeclaration);
                    if (additionalModifierFlags & 1 /* ModifierFlags.Export */ &&
                        enclosingDeclaration_1 && (isExportingScope(enclosingDeclaration_1) || (0, ts_1.isModuleDeclaration)(enclosingDeclaration_1)) &&
                        (0, ts_1.canHaveExportModifier)(node)) {
                        // Classes, namespaces, variables, functions, interfaces, and types should all be `export`ed in a module context if not private
                        newModifierFlags |= 1 /* ModifierFlags.Export */;
                    }
                    if (addingDeclare && !(newModifierFlags & 1 /* ModifierFlags.Export */) &&
                        (!enclosingDeclaration_1 || !(enclosingDeclaration_1.flags & 16777216 /* NodeFlags.Ambient */)) &&
                        ((0, ts_1.isEnumDeclaration)(node) || (0, ts_1.isVariableStatement)(node) || (0, ts_1.isFunctionDeclaration)(node) || (0, ts_1.isClassDeclaration)(node) || (0, ts_1.isModuleDeclaration)(node))) {
                        // Classes, namespaces, variables, enums, and functions all need `declare` modifiers to be valid in a declaration file top-level scope
                        newModifierFlags |= 2 /* ModifierFlags.Ambient */;
                    }
                    if ((additionalModifierFlags & 1024 /* ModifierFlags.Default */) && ((0, ts_1.isClassDeclaration)(node) || (0, ts_1.isInterfaceDeclaration)(node) || (0, ts_1.isFunctionDeclaration)(node))) {
                        newModifierFlags |= 1024 /* ModifierFlags.Default */;
                    }
                    if (newModifierFlags) {
                        node = ts_1.factory.updateModifiers(node, newModifierFlags | (0, ts_1.getEffectiveModifierFlags)(node));
                    }
                }
                results.push(node);
            }
            function serializeTypeAlias(symbol, symbolName, modifierFlags) {
                var _a;
                var aliasType = getDeclaredTypeOfTypeAlias(symbol);
                var typeParams = getSymbolLinks(symbol).typeParameters;
                var typeParamDecls = (0, ts_1.map)(typeParams, function (p) { return typeParameterToDeclaration(p, context); });
                var jsdocAliasDecl = (_a = symbol.declarations) === null || _a === void 0 ? void 0 : _a.find(ts_1.isJSDocTypeAlias);
                var commentText = (0, ts_1.getTextOfJSDocComment)(jsdocAliasDecl ? jsdocAliasDecl.comment || jsdocAliasDecl.parent.comment : undefined);
                var oldFlags = context.flags;
                context.flags |= 8388608 /* NodeBuilderFlags.InTypeAlias */;
                var oldEnclosingDecl = context.enclosingDeclaration;
                context.enclosingDeclaration = jsdocAliasDecl;
                var typeNode = jsdocAliasDecl && jsdocAliasDecl.typeExpression
                    && (0, ts_1.isJSDocTypeExpression)(jsdocAliasDecl.typeExpression)
                    && serializeExistingTypeNode(context, jsdocAliasDecl.typeExpression.type, includePrivateSymbol, bundled)
                    || typeToTypeNodeHelper(aliasType, context);
                addResult((0, ts_1.setSyntheticLeadingComments)(ts_1.factory.createTypeAliasDeclaration(/*modifiers*/ undefined, getInternalSymbolName(symbol, symbolName), typeParamDecls, typeNode), !commentText ? [] : [{ kind: 3 /* SyntaxKind.MultiLineCommentTrivia */, text: "*\n * " + commentText.replace(/\n/g, "\n * ") + "\n ", pos: -1, end: -1, hasTrailingNewLine: true }]), modifierFlags);
                context.flags = oldFlags;
                context.enclosingDeclaration = oldEnclosingDecl;
            }
            function serializeInterface(symbol, symbolName, modifierFlags) {
                var interfaceType = getDeclaredTypeOfClassOrInterface(symbol);
                var localParams = getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol);
                var typeParamDecls = (0, ts_1.map)(localParams, function (p) { return typeParameterToDeclaration(p, context); });
                var baseTypes = getBaseTypes(interfaceType);
                var baseType = (0, ts_1.length)(baseTypes) ? getIntersectionType(baseTypes) : undefined;
                var members = (0, ts_1.flatMap)(getPropertiesOfType(interfaceType), function (p) { return serializePropertySymbolForInterface(p, baseType); });
                var callSignatures = serializeSignatures(0 /* SignatureKind.Call */, interfaceType, baseType, 178 /* SyntaxKind.CallSignature */);
                var constructSignatures = serializeSignatures(1 /* SignatureKind.Construct */, interfaceType, baseType, 179 /* SyntaxKind.ConstructSignature */);
                var indexSignatures = serializeIndexSignatures(interfaceType, baseType);
                var heritageClauses = !(0, ts_1.length)(baseTypes) ? undefined : [ts_1.factory.createHeritageClause(96 /* SyntaxKind.ExtendsKeyword */, (0, ts_1.mapDefined)(baseTypes, function (b) { return trySerializeAsTypeReference(b, 111551 /* SymbolFlags.Value */); }))];
                addResult(ts_1.factory.createInterfaceDeclaration(
                /*modifiers*/ undefined, getInternalSymbolName(symbol, symbolName), typeParamDecls, heritageClauses, __spreadArray(__spreadArray(__spreadArray(__spreadArray([], indexSignatures, true), constructSignatures, true), callSignatures, true), members, true)), modifierFlags);
            }
            function getNamespaceMembersForSerialization(symbol) {
                var exports = getExportsOfSymbol(symbol);
                return !exports ? [] : (0, ts_1.filter)((0, ts_1.arrayFrom)(exports.values()), function (m) { return isNamespaceMember(m) && (0, ts_1.isIdentifierText)(m.escapedName, 99 /* ScriptTarget.ESNext */); });
            }
            function isTypeOnlyNamespace(symbol) {
                return (0, ts_1.every)(getNamespaceMembersForSerialization(symbol), function (m) { return !(getAllSymbolFlags(resolveSymbol(m)) & 111551 /* SymbolFlags.Value */); });
            }
            function serializeModule(symbol, symbolName, modifierFlags) {
                var members = getNamespaceMembersForSerialization(symbol);
                // Split NS members up by declaration - members whose parent symbol is the ns symbol vs those whose is not (but were added in later via merging)
                var locationMap = (0, ts_1.arrayToMultiMap)(members, function (m) { return m.parent && m.parent === symbol ? "real" : "merged"; });
                var realMembers = locationMap.get("real") || ts_1.emptyArray;
                var mergedMembers = locationMap.get("merged") || ts_1.emptyArray;
                // TODO: `suppressNewPrivateContext` is questionable -we need to simply be emitting privates in whatever scope they were declared in, rather
                // than whatever scope we traverse to them in. That's a bit of a complex rewrite, since we're not _actually_ tracking privates at all in advance,
                // so we don't even have placeholders to fill in.
                if ((0, ts_1.length)(realMembers)) {
                    var localName = getInternalSymbolName(symbol, symbolName);
                    serializeAsNamespaceDeclaration(realMembers, localName, modifierFlags, !!(symbol.flags & (16 /* SymbolFlags.Function */ | 67108864 /* SymbolFlags.Assignment */)));
                }
                if ((0, ts_1.length)(mergedMembers)) {
                    var containingFile_1 = (0, ts_1.getSourceFileOfNode)(context.enclosingDeclaration);
                    var localName = getInternalSymbolName(symbol, symbolName);
                    var nsBody = ts_1.factory.createModuleBlock([ts_1.factory.createExportDeclaration(
                        /*modifiers*/ undefined, 
                        /*isTypeOnly*/ false, ts_1.factory.createNamedExports((0, ts_1.mapDefined)((0, ts_1.filter)(mergedMembers, function (n) { return n.escapedName !== "export=" /* InternalSymbolName.ExportEquals */; }), function (s) {
                            var _a, _b;
                            var name = (0, ts_1.unescapeLeadingUnderscores)(s.escapedName);
                            var localName = getInternalSymbolName(s, name);
                            var aliasDecl = s.declarations && getDeclarationOfAliasSymbol(s);
                            if (containingFile_1 && (aliasDecl ? containingFile_1 !== (0, ts_1.getSourceFileOfNode)(aliasDecl) : !(0, ts_1.some)(s.declarations, function (d) { return (0, ts_1.getSourceFileOfNode)(d) === containingFile_1; }))) {
                                (_b = (_a = context.tracker) === null || _a === void 0 ? void 0 : _a.reportNonlocalAugmentation) === null || _b === void 0 ? void 0 : _b.call(_a, containingFile_1, symbol, s);
                                return undefined;
                            }
                            var target = aliasDecl && getTargetOfAliasDeclaration(aliasDecl, /*dontRecursivelyResolve*/ true);
                            includePrivateSymbol(target || s);
                            var targetName = target ? getInternalSymbolName(target, (0, ts_1.unescapeLeadingUnderscores)(target.escapedName)) : localName;
                            return ts_1.factory.createExportSpecifier(/*isTypeOnly*/ false, name === targetName ? undefined : targetName, name);
                        })))]);
                    addResult(ts_1.factory.createModuleDeclaration(
                    /*modifiers*/ undefined, ts_1.factory.createIdentifier(localName), nsBody, 16 /* NodeFlags.Namespace */), 0 /* ModifierFlags.None */);
                }
            }
            function serializeEnum(symbol, symbolName, modifierFlags) {
                addResult(ts_1.factory.createEnumDeclaration(ts_1.factory.createModifiersFromModifierFlags(isConstEnumSymbol(symbol) ? 2048 /* ModifierFlags.Const */ : 0), getInternalSymbolName(symbol, symbolName), (0, ts_1.map)((0, ts_1.filter)(getPropertiesOfType(getTypeOfSymbol(symbol)), function (p) { return !!(p.flags & 8 /* SymbolFlags.EnumMember */); }), function (p) {
                    // TODO: Handle computed names
                    // I hate that to get the initialized value we need to walk back to the declarations here; but there's no
                    // other way to get the possible const value of an enum member that I'm aware of, as the value is cached
                    // _on the declaration_, not on the declaration's symbol...
                    var initializedValue = p.declarations && p.declarations[0] && (0, ts_1.isEnumMember)(p.declarations[0]) ? getConstantValue(p.declarations[0]) : undefined;
                    return ts_1.factory.createEnumMember((0, ts_1.unescapeLeadingUnderscores)(p.escapedName), initializedValue === undefined ? undefined :
                        typeof initializedValue === "string" ? ts_1.factory.createStringLiteral(initializedValue) :
                            ts_1.factory.createNumericLiteral(initializedValue));
                })), modifierFlags);
            }
            function serializeAsFunctionNamespaceMerge(type, symbol, localName, modifierFlags) {
                var signatures = getSignaturesOfType(type, 0 /* SignatureKind.Call */);
                for (var _i = 0, signatures_2 = signatures; _i < signatures_2.length; _i++) {
                    var sig = signatures_2[_i];
                    // Each overload becomes a separate function declaration, in order
                    var decl = signatureToSignatureDeclarationHelper(sig, 261 /* SyntaxKind.FunctionDeclaration */, context, { name: ts_1.factory.createIdentifier(localName), privateSymbolVisitor: includePrivateSymbol, bundledImports: bundled });
                    addResult((0, ts_1.setTextRange)(decl, getSignatureTextRangeLocation(sig)), modifierFlags);
                }
                // Module symbol emit will take care of module-y members, provided it has exports
                if (!(symbol.flags & (512 /* SymbolFlags.ValueModule */ | 1024 /* SymbolFlags.NamespaceModule */) && !!symbol.exports && !!symbol.exports.size)) {
                    var props = (0, ts_1.filter)(getPropertiesOfType(type), isNamespaceMember);
                    serializeAsNamespaceDeclaration(props, localName, modifierFlags, /*suppressNewPrivateContext*/ true);
                }
            }
            function getSignatureTextRangeLocation(signature) {
                if (signature.declaration && signature.declaration.parent) {
                    if ((0, ts_1.isBinaryExpression)(signature.declaration.parent) && (0, ts_1.getAssignmentDeclarationKind)(signature.declaration.parent) === 5 /* AssignmentDeclarationKind.Property */) {
                        return signature.declaration.parent;
                    }
                    // for expressions assigned to `var`s, use the `var` as the text range
                    if ((0, ts_1.isVariableDeclaration)(signature.declaration.parent) && signature.declaration.parent.parent) {
                        return signature.declaration.parent.parent;
                    }
                }
                return signature.declaration;
            }
            function serializeAsNamespaceDeclaration(props, localName, modifierFlags, suppressNewPrivateContext) {
                if ((0, ts_1.length)(props)) {
                    var localVsRemoteMap = (0, ts_1.arrayToMultiMap)(props, function (p) {
                        return !(0, ts_1.length)(p.declarations) || (0, ts_1.some)(p.declarations, function (d) {
                            return (0, ts_1.getSourceFileOfNode)(d) === (0, ts_1.getSourceFileOfNode)(context.enclosingDeclaration);
                        }) ? "local" : "remote";
                    });
                    var localProps = localVsRemoteMap.get("local") || ts_1.emptyArray;
                    // handle remote props first - we need to make an `import` declaration that points at the module containing each remote
                    // prop in the outermost scope (TODO: a namespace within a namespace would need to be appropriately handled by this)
                    // Example:
                    // import Foo_1 = require("./exporter");
                    // export namespace ns {
                    //     import Foo = Foo_1.Foo;
                    //     export { Foo };
                    //     export const c: number;
                    // }
                    // This is needed because in JS, statements like `const x = require("./f")` support both type and value lookup, even if they're
                    // normally just value lookup (so it functions kinda like an alias even when it's not an alias)
                    // _Usually_, we'll simply print the top-level as an alias instead of a `var` in such situations, however is is theoretically
                    // possible to encounter a situation where a type has members from both the current file and other files - in those situations,
                    // emit akin to the above would be needed.
                    // Add a namespace
                    // Create namespace as non-synthetic so it is usable as an enclosing declaration
                    var fakespace = ts_1.parseNodeFactory.createModuleDeclaration(/*modifiers*/ undefined, ts_1.factory.createIdentifier(localName), ts_1.factory.createModuleBlock([]), 16 /* NodeFlags.Namespace */);
                    (0, ts_1.setParent)(fakespace, enclosingDeclaration);
                    fakespace.locals = (0, ts_1.createSymbolTable)(props);
                    fakespace.symbol = props[0].parent;
                    var oldResults = results;
                    results = [];
                    var oldAddingDeclare = addingDeclare;
                    addingDeclare = false;
                    var subcontext = __assign(__assign({}, context), { enclosingDeclaration: fakespace });
                    var oldContext = context;
                    context = subcontext;
                    // TODO: implement handling for the localVsRemoteMap.get("remote") - should be difficult to trigger (see comment above), as only interesting cross-file js merges should make this possible
                    visitSymbolTable((0, ts_1.createSymbolTable)(localProps), suppressNewPrivateContext, /*propertyAsAlias*/ true);
                    context = oldContext;
                    addingDeclare = oldAddingDeclare;
                    var declarations = results;
                    results = oldResults;
                    // replace namespace with synthetic version
                    var defaultReplaced = (0, ts_1.map)(declarations, function (d) { return (0, ts_1.isExportAssignment)(d) && !d.isExportEquals && (0, ts_1.isIdentifier)(d.expression) ? ts_1.factory.createExportDeclaration(
                    /*modifiers*/ undefined, 
                    /*isTypeOnly*/ false, ts_1.factory.createNamedExports([ts_1.factory.createExportSpecifier(/*isTypeOnly*/ false, d.expression, ts_1.factory.createIdentifier("default" /* InternalSymbolName.Default */))])) : d; });
                    var exportModifierStripped = (0, ts_1.every)(defaultReplaced, function (d) { return (0, ts_1.hasSyntacticModifier)(d, 1 /* ModifierFlags.Export */); }) ? (0, ts_1.map)(defaultReplaced, removeExportModifier) : defaultReplaced;
                    fakespace = ts_1.factory.updateModuleDeclaration(fakespace, fakespace.modifiers, fakespace.name, ts_1.factory.createModuleBlock(exportModifierStripped));
                    addResult(fakespace, modifierFlags); // namespaces can never be default exported
                }
            }
            function isNamespaceMember(p) {
                return !!(p.flags & (788968 /* SymbolFlags.Type */ | 1920 /* SymbolFlags.Namespace */ | 2097152 /* SymbolFlags.Alias */)) ||
                    !(p.flags & 4194304 /* SymbolFlags.Prototype */ || p.escapedName === "prototype" || p.valueDeclaration && (0, ts_1.isStatic)(p.valueDeclaration) && (0, ts_1.isClassLike)(p.valueDeclaration.parent));
            }
            function sanitizeJSDocImplements(clauses) {
                var result = (0, ts_1.mapDefined)(clauses, function (e) {
                    var _a;
                    var oldEnclosing = context.enclosingDeclaration;
                    context.enclosingDeclaration = e;
                    var expr = e.expression;
                    if ((0, ts_1.isEntityNameExpression)(expr)) {
                        if ((0, ts_1.isIdentifier)(expr) && (0, ts_1.idText)(expr) === "") {
                            return cleanup(/*result*/ undefined); // Empty heritage clause, should be an error, but prefer emitting no heritage clauses to reemitting the empty one
                        }
                        var introducesError = void 0;
                        (_a = trackExistingEntityName(expr, context, includePrivateSymbol), introducesError = _a.introducesError, expr = _a.node);
                        if (introducesError) {
                            return cleanup(/*result*/ undefined);
                        }
                    }
                    return cleanup(ts_1.factory.createExpressionWithTypeArguments(expr, (0, ts_1.map)(e.typeArguments, function (a) {
                        return serializeExistingTypeNode(context, a, includePrivateSymbol, bundled)
                            || typeToTypeNodeHelper(getTypeFromTypeNode(a), context);
                    })));
                    function cleanup(result) {
                        context.enclosingDeclaration = oldEnclosing;
                        return result;
                    }
                });
                if (result.length === clauses.length) {
                    return result;
                }
                return undefined;
            }
            function serializeAsClass(symbol, localName, modifierFlags) {
                var _a, _b;
                var originalDecl = (_a = symbol.declarations) === null || _a === void 0 ? void 0 : _a.find(ts_1.isClassLike);
                var oldEnclosing = context.enclosingDeclaration;
                context.enclosingDeclaration = originalDecl || oldEnclosing;
                var localParams = getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol);
                var typeParamDecls = (0, ts_1.map)(localParams, function (p) { return typeParameterToDeclaration(p, context); });
                var classType = getTypeWithThisArgument(getDeclaredTypeOfClassOrInterface(symbol));
                var baseTypes = getBaseTypes(classType);
                var originalImplements = originalDecl && (0, ts_1.getEffectiveImplementsTypeNodes)(originalDecl);
                var implementsExpressions = originalImplements && sanitizeJSDocImplements(originalImplements)
                    || (0, ts_1.mapDefined)(getImplementsTypes(classType), serializeImplementedType);
                var staticType = getTypeOfSymbol(symbol);
                var isClass = !!((_b = staticType.symbol) === null || _b === void 0 ? void 0 : _b.valueDeclaration) && (0, ts_1.isClassLike)(staticType.symbol.valueDeclaration);
                var staticBaseType = isClass
                    ? getBaseConstructorTypeOfClass(staticType)
                    : anyType;
                var heritageClauses = __spreadArray(__spreadArray([], !(0, ts_1.length)(baseTypes) ? [] : [ts_1.factory.createHeritageClause(96 /* SyntaxKind.ExtendsKeyword */, (0, ts_1.map)(baseTypes, function (b) { return serializeBaseType(b, staticBaseType, localName); }))], true), !(0, ts_1.length)(implementsExpressions) ? [] : [ts_1.factory.createHeritageClause(119 /* SyntaxKind.ImplementsKeyword */, implementsExpressions)], true);
                var symbolProps = getNonInheritedProperties(classType, baseTypes, getPropertiesOfType(classType));
                var publicSymbolProps = (0, ts_1.filter)(symbolProps, function (s) {
                    // `valueDeclaration` could be undefined if inherited from
                    // a union/intersection base type, but inherited properties
                    // don't matter here.
                    var valueDecl = s.valueDeclaration;
                    return !!valueDecl && !((0, ts_1.isNamedDeclaration)(valueDecl) && (0, ts_1.isPrivateIdentifier)(valueDecl.name));
                });
                var hasPrivateIdentifier = (0, ts_1.some)(symbolProps, function (s) {
                    // `valueDeclaration` could be undefined if inherited from
                    // a union/intersection base type, but inherited properties
                    // don't matter here.
                    var valueDecl = s.valueDeclaration;
                    return !!valueDecl && (0, ts_1.isNamedDeclaration)(valueDecl) && (0, ts_1.isPrivateIdentifier)(valueDecl.name);
                });
                // Boil down all private properties into a single one.
                var privateProperties = hasPrivateIdentifier ?
                    [ts_1.factory.createPropertyDeclaration(
                        /*modifiers*/ undefined, ts_1.factory.createPrivateIdentifier("#private"), 
                        /*questionOrExclamationToken*/ undefined, 
                        /*type*/ undefined, 
                        /*initializer*/ undefined)] :
                    ts_1.emptyArray;
                var publicProperties = (0, ts_1.flatMap)(publicSymbolProps, function (p) { return serializePropertySymbolForClass(p, /*isStatic*/ false, baseTypes[0]); });
                // Consider static members empty if symbol also has function or module meaning - function namespacey emit will handle statics
                var staticMembers = (0, ts_1.flatMap)((0, ts_1.filter)(getPropertiesOfType(staticType), function (p) { return !(p.flags & 4194304 /* SymbolFlags.Prototype */) && p.escapedName !== "prototype" && !isNamespaceMember(p); }), function (p) { return serializePropertySymbolForClass(p, /*isStatic*/ true, staticBaseType); });
                // When we encounter an `X.prototype.y` assignment in a JS file, we bind `X` as a class regardless as to whether
                // the value is ever initialized with a class or function-like value. For cases where `X` could never be
                // created via `new`, we will inject a `private constructor()` declaration to indicate it is not createable.
                var isNonConstructableClassLikeInJsFile = !isClass &&
                    !!symbol.valueDeclaration &&
                    (0, ts_1.isInJSFile)(symbol.valueDeclaration) &&
                    !(0, ts_1.some)(getSignaturesOfType(staticType, 1 /* SignatureKind.Construct */));
                var constructors = isNonConstructableClassLikeInJsFile ?
                    [ts_1.factory.createConstructorDeclaration(ts_1.factory.createModifiersFromModifierFlags(8 /* ModifierFlags.Private */), [], /*body*/ undefined)] :
                    serializeSignatures(1 /* SignatureKind.Construct */, staticType, staticBaseType, 175 /* SyntaxKind.Constructor */);
                var indexSignatures = serializeIndexSignatures(classType, baseTypes[0]);
                context.enclosingDeclaration = oldEnclosing;
                addResult((0, ts_1.setTextRange)(ts_1.factory.createClassDeclaration(
                /*modifiers*/ undefined, localName, typeParamDecls, heritageClauses, __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], indexSignatures, true), staticMembers, true), constructors, true), publicProperties, true), privateProperties, true)), symbol.declarations && (0, ts_1.filter)(symbol.declarations, function (d) { return (0, ts_1.isClassDeclaration)(d) || (0, ts_1.isClassExpression)(d); })[0]), modifierFlags);
            }
            function getSomeTargetNameFromDeclarations(declarations) {
                return (0, ts_1.firstDefined)(declarations, function (d) {
                    if ((0, ts_1.isImportSpecifier)(d) || (0, ts_1.isExportSpecifier)(d)) {
                        return (0, ts_1.idText)(d.propertyName || d.name);
                    }
                    if ((0, ts_1.isBinaryExpression)(d) || (0, ts_1.isExportAssignment)(d)) {
                        var expression = (0, ts_1.isExportAssignment)(d) ? d.expression : d.right;
                        if ((0, ts_1.isPropertyAccessExpression)(expression)) {
                            return (0, ts_1.idText)(expression.name);
                        }
                    }
                    if (isAliasSymbolDeclaration(d)) {
                        // This is... heuristic, at best. But it's probably better than always printing the name of the shorthand ambient module.
                        var name_14 = (0, ts_1.getNameOfDeclaration)(d);
                        if (name_14 && (0, ts_1.isIdentifier)(name_14)) {
                            return (0, ts_1.idText)(name_14);
                        }
                    }
                    return undefined;
                });
            }
            function serializeAsAlias(symbol, localName, modifierFlags) {
                var _a, _b, _c, _d, _e;
                // synthesize an alias, eg `export { symbolName as Name }`
                // need to mark the alias `symbol` points at
                // as something we need to serialize as a private declaration as well
                var node = getDeclarationOfAliasSymbol(symbol);
                if (!node)
                    return ts_1.Debug.fail();
                var target = getMergedSymbol(getTargetOfAliasDeclaration(node, /*dontRecursivelyResolve*/ true));
                if (!target) {
                    return;
                }
                // If `target` refers to a shorthand module symbol, the name we're trying to pull out isn;t recoverable from the target symbol
                // In such a scenario, we must fall back to looking for an alias declaration on `symbol` and pulling the target name from that
                var verbatimTargetName = (0, ts_1.isShorthandAmbientModuleSymbol)(target) && getSomeTargetNameFromDeclarations(symbol.declarations) || (0, ts_1.unescapeLeadingUnderscores)(target.escapedName);
                if (verbatimTargetName === "export=" /* InternalSymbolName.ExportEquals */ && allowSyntheticDefaultImports) {
                    // target refers to an `export=` symbol that was hoisted into a synthetic default - rename here to match
                    verbatimTargetName = "default" /* InternalSymbolName.Default */;
                }
                var targetName = getInternalSymbolName(target, verbatimTargetName);
                includePrivateSymbol(target); // the target may be within the same scope - attempt to serialize it first
                switch (node.kind) {
                    case 207 /* SyntaxKind.BindingElement */:
                        if (((_b = (_a = node.parent) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.kind) === 259 /* SyntaxKind.VariableDeclaration */) {
                            // const { SomeClass } = require('./lib');
                            var specifier_1 = getSpecifierForModuleSymbol(target.parent || target, context); // './lib'
                            var propertyName = node.propertyName;
                            addResult(ts_1.factory.createImportDeclaration(
                            /*modifiers*/ undefined, ts_1.factory.createImportClause(/*isTypeOnly*/ false, /*name*/ undefined, ts_1.factory.createNamedImports([ts_1.factory.createImportSpecifier(
                                /*isTypeOnly*/ false, propertyName && (0, ts_1.isIdentifier)(propertyName) ? ts_1.factory.createIdentifier((0, ts_1.idText)(propertyName)) : undefined, ts_1.factory.createIdentifier(localName))])), ts_1.factory.createStringLiteral(specifier_1), 
                            /*assertClause*/ undefined), 0 /* ModifierFlags.None */);
                            break;
                        }
                        // We don't know how to serialize this (nested?) binding element
                        ts_1.Debug.failBadSyntaxKind(((_c = node.parent) === null || _c === void 0 ? void 0 : _c.parent) || node, "Unhandled binding element grandparent kind in declaration serialization");
                        break;
                    case 303 /* SyntaxKind.ShorthandPropertyAssignment */:
                        if (((_e = (_d = node.parent) === null || _d === void 0 ? void 0 : _d.parent) === null || _e === void 0 ? void 0 : _e.kind) === 225 /* SyntaxKind.BinaryExpression */) {
                            // module.exports = { SomeClass }
                            serializeExportSpecifier((0, ts_1.unescapeLeadingUnderscores)(symbol.escapedName), targetName);
                        }
                        break;
                    case 259 /* SyntaxKind.VariableDeclaration */:
                        // commonjs require: const x = require('y')
                        if ((0, ts_1.isPropertyAccessExpression)(node.initializer)) {
                            // const x = require('y').z
                            var initializer = node.initializer; // require('y').z
                            var uniqueName = ts_1.factory.createUniqueName(localName); // _x
                            var specifier_2 = getSpecifierForModuleSymbol(target.parent || target, context); // 'y'
                            // import _x = require('y');
                            addResult(ts_1.factory.createImportEqualsDeclaration(
                            /*modifiers*/ undefined, 
                            /*isTypeOnly*/ false, uniqueName, ts_1.factory.createExternalModuleReference(ts_1.factory.createStringLiteral(specifier_2))), 0 /* ModifierFlags.None */);
                            // import x = _x.z
                            addResult(ts_1.factory.createImportEqualsDeclaration(
                            /*modifiers*/ undefined, 
                            /*isTypeOnly*/ false, ts_1.factory.createIdentifier(localName), ts_1.factory.createQualifiedName(uniqueName, initializer.name)), modifierFlags);
                            break;
                        }
                    // else fall through and treat commonjs require just like import=
                    case 270 /* SyntaxKind.ImportEqualsDeclaration */:
                        // This _specifically_ only exists to handle json declarations - where we make aliases, but since
                        // we emit no declarations for the json document, must not refer to it in the declarations
                        if (target.escapedName === "export=" /* InternalSymbolName.ExportEquals */ && (0, ts_1.some)(target.declarations, function (d) { return (0, ts_1.isSourceFile)(d) && (0, ts_1.isJsonSourceFile)(d); })) {
                            serializeMaybeAliasAssignment(symbol);
                            break;
                        }
                        // Could be a local `import localName = ns.member` or
                        // an external `import localName = require("whatever")`
                        var isLocalImport = !(target.flags & 512 /* SymbolFlags.ValueModule */) && !(0, ts_1.isVariableDeclaration)(node);
                        addResult(ts_1.factory.createImportEqualsDeclaration(
                        /*modifiers*/ undefined, 
                        /*isTypeOnly*/ false, ts_1.factory.createIdentifier(localName), isLocalImport
                            ? symbolToName(target, context, 67108863 /* SymbolFlags.All */, /*expectsIdentifier*/ false)
                            : ts_1.factory.createExternalModuleReference(ts_1.factory.createStringLiteral(getSpecifierForModuleSymbol(target, context)))), isLocalImport ? modifierFlags : 0 /* ModifierFlags.None */);
                        break;
                    case 269 /* SyntaxKind.NamespaceExportDeclaration */:
                        // export as namespace foo
                        // TODO: Not part of a file's local or export symbol tables
                        // Is bound into file.symbol.globalExports instead, which we don't currently traverse
                        addResult(ts_1.factory.createNamespaceExportDeclaration((0, ts_1.idText)(node.name)), 0 /* ModifierFlags.None */);
                        break;
                    case 272 /* SyntaxKind.ImportClause */: {
                        var generatedSpecifier = getSpecifierForModuleSymbol(target.parent || target, context); // generate specifier (even though we're reusing and existing one) for ambient module reference include side effects
                        var specifier_3 = bundled ? ts_1.factory.createStringLiteral(generatedSpecifier) : node.parent.moduleSpecifier;
                        addResult(ts_1.factory.createImportDeclaration(
                        /*modifiers*/ undefined, ts_1.factory.createImportClause(/*isTypeOnly*/ false, ts_1.factory.createIdentifier(localName), /*namedBindings*/ undefined), specifier_3, node.parent.assertClause), 0 /* ModifierFlags.None */);
                        break;
                    }
                    case 273 /* SyntaxKind.NamespaceImport */: {
                        var generatedSpecifier = getSpecifierForModuleSymbol(target.parent || target, context); // generate specifier (even though we're reusing and existing one) for ambient module reference include side effects
                        var specifier_4 = bundled ? ts_1.factory.createStringLiteral(generatedSpecifier) : node.parent.parent.moduleSpecifier;
                        addResult(ts_1.factory.createImportDeclaration(
                        /*modifiers*/ undefined, ts_1.factory.createImportClause(/*isTypeOnly*/ false, /*name*/ undefined, ts_1.factory.createNamespaceImport(ts_1.factory.createIdentifier(localName))), specifier_4, node.parent.parent.assertClause), 0 /* ModifierFlags.None */);
                        break;
                    }
                    case 279 /* SyntaxKind.NamespaceExport */:
                        addResult(ts_1.factory.createExportDeclaration(
                        /*modifiers*/ undefined, 
                        /*isTypeOnly*/ false, ts_1.factory.createNamespaceExport(ts_1.factory.createIdentifier(localName)), ts_1.factory.createStringLiteral(getSpecifierForModuleSymbol(target, context))), 0 /* ModifierFlags.None */);
                        break;
                    case 275 /* SyntaxKind.ImportSpecifier */: {
                        var generatedSpecifier = getSpecifierForModuleSymbol(target.parent || target, context); // generate specifier (even though we're reusing and existing one) for ambient module reference include side effects
                        var specifier_5 = bundled ? ts_1.factory.createStringLiteral(generatedSpecifier) : node.parent.parent.parent.moduleSpecifier;
                        addResult(ts_1.factory.createImportDeclaration(
                        /*modifiers*/ undefined, ts_1.factory.createImportClause(
                        /*isTypeOnly*/ false, 
                        /*name*/ undefined, ts_1.factory.createNamedImports([
                            ts_1.factory.createImportSpecifier(
                            /*isTypeOnly*/ false, localName !== verbatimTargetName ? ts_1.factory.createIdentifier(verbatimTargetName) : undefined, ts_1.factory.createIdentifier(localName))
                        ])), specifier_5, node.parent.parent.parent.assertClause), 0 /* ModifierFlags.None */);
                        break;
                    }
                    case 280 /* SyntaxKind.ExportSpecifier */:
                        // does not use localName because the symbol name in this case refers to the name in the exports table,
                        // which we must exactly preserve
                        var specifier = node.parent.parent.moduleSpecifier;
                        // targetName is only used when the target is local, as otherwise the target is an alias that points at
                        // another file
                        serializeExportSpecifier((0, ts_1.unescapeLeadingUnderscores)(symbol.escapedName), specifier ? verbatimTargetName : targetName, specifier && (0, ts_1.isStringLiteralLike)(specifier) ? ts_1.factory.createStringLiteral(specifier.text) : undefined);
                        break;
                    case 276 /* SyntaxKind.ExportAssignment */:
                        serializeMaybeAliasAssignment(symbol);
                        break;
                    case 225 /* SyntaxKind.BinaryExpression */:
                    case 210 /* SyntaxKind.PropertyAccessExpression */:
                    case 211 /* SyntaxKind.ElementAccessExpression */:
                        // Could be best encoded as though an export specifier or as though an export assignment
                        // If name is default or export=, do an export assignment
                        // Otherwise do an export specifier
                        if (symbol.escapedName === "default" /* InternalSymbolName.Default */ || symbol.escapedName === "export=" /* InternalSymbolName.ExportEquals */) {
                            serializeMaybeAliasAssignment(symbol);
                        }
                        else {
                            serializeExportSpecifier(localName, targetName);
                        }
                        break;
                    default:
                        return ts_1.Debug.failBadSyntaxKind(node, "Unhandled alias declaration kind in symbol serializer!");
                }
            }
            function serializeExportSpecifier(localName, targetName, specifier) {
                addResult(ts_1.factory.createExportDeclaration(
                /*modifiers*/ undefined, 
                /*isTypeOnly*/ false, ts_1.factory.createNamedExports([ts_1.factory.createExportSpecifier(/*isTypeOnly*/ false, localName !== targetName ? targetName : undefined, localName)]), specifier), 0 /* ModifierFlags.None */);
            }
            /**
             * Returns `true` if an export assignment or declaration was produced for the symbol
             */
            function serializeMaybeAliasAssignment(symbol) {
                var _a;
                if (symbol.flags & 4194304 /* SymbolFlags.Prototype */) {
                    return false;
                }
                var name = (0, ts_1.unescapeLeadingUnderscores)(symbol.escapedName);
                var isExportEquals = name === "export=" /* InternalSymbolName.ExportEquals */;
                var isDefault = name === "default" /* InternalSymbolName.Default */;
                var isExportAssignmentCompatibleSymbolName = isExportEquals || isDefault;
                // synthesize export = ref
                // ref should refer to either be a locally scoped symbol which we need to emit, or
                // a reference to another namespace/module which we may need to emit an `import` statement for
                var aliasDecl = symbol.declarations && getDeclarationOfAliasSymbol(symbol);
                // serialize what the alias points to, preserve the declaration's initializer
                var target = aliasDecl && getTargetOfAliasDeclaration(aliasDecl, /*dontRecursivelyResolve*/ true);
                // If the target resolves and resolves to a thing defined in this file, emit as an alias, otherwise emit as a const
                if (target && (0, ts_1.length)(target.declarations) && (0, ts_1.some)(target.declarations, function (d) { return (0, ts_1.getSourceFileOfNode)(d) === (0, ts_1.getSourceFileOfNode)(enclosingDeclaration); })) {
                    // In case `target` refers to a namespace member, look at the declaration and serialize the leftmost symbol in it
                    // eg, `namespace A { export class B {} }; exports = A.B;`
                    // Technically, this is all that's required in the case where the assignment is an entity name expression
                    var expr = aliasDecl && (((0, ts_1.isExportAssignment)(aliasDecl) || (0, ts_1.isBinaryExpression)(aliasDecl)) ? (0, ts_1.getExportAssignmentExpression)(aliasDecl) : (0, ts_1.getPropertyAssignmentAliasLikeExpression)(aliasDecl));
                    var first_1 = expr && (0, ts_1.isEntityNameExpression)(expr) ? getFirstNonModuleExportsIdentifier(expr) : undefined;
                    var referenced = first_1 && resolveEntityName(first_1, 67108863 /* SymbolFlags.All */, /*ignoreErrors*/ true, /*dontResolveAlias*/ true, enclosingDeclaration);
                    if (referenced || target) {
                        includePrivateSymbol(referenced || target);
                    }
                    // We disable the context's symbol tracker for the duration of this name serialization
                    // as, by virtue of being here, the name is required to print something, and we don't want to
                    // issue a visibility error on it. Only anonymous classes that an alias points at _would_ issue
                    // a visibility error here (as they're not visible within any scope), but we want to hoist them
                    // into the containing scope anyway, so we want to skip the visibility checks.
                    var prevDisableTrackSymbol = context.tracker.disableTrackSymbol;
                    context.tracker.disableTrackSymbol = true;
                    if (isExportAssignmentCompatibleSymbolName) {
                        results.push(ts_1.factory.createExportAssignment(
                        /*modifiers*/ undefined, isExportEquals, symbolToExpression(target, context, 67108863 /* SymbolFlags.All */)));
                    }
                    else {
                        if (first_1 === expr && first_1) {
                            // serialize as `export {target as name}`
                            serializeExportSpecifier(name, (0, ts_1.idText)(first_1));
                        }
                        else if (expr && (0, ts_1.isClassExpression)(expr)) {
                            serializeExportSpecifier(name, getInternalSymbolName(target, (0, ts_1.symbolName)(target)));
                        }
                        else {
                            // serialize as `import _Ref = t.arg.et; export { _Ref as name }`
                            var varName = getUnusedName(name, symbol);
                            addResult(ts_1.factory.createImportEqualsDeclaration(
                            /*modifiers*/ undefined, 
                            /*isTypeOnly*/ false, ts_1.factory.createIdentifier(varName), symbolToName(target, context, 67108863 /* SymbolFlags.All */, /*expectsIdentifier*/ false)), 0 /* ModifierFlags.None */);
                            serializeExportSpecifier(name, varName);
                        }
                    }
                    context.tracker.disableTrackSymbol = prevDisableTrackSymbol;
                    return true;
                }
                else {
                    // serialize as an anonymous property declaration
                    var varName = getUnusedName(name, symbol);
                    // We have to use `getWidenedType` here since the object within a json file is unwidened within the file
                    // (Unwidened types can only exist in expression contexts and should never be serialized)
                    var typeToSerialize = getWidenedType(getTypeOfSymbol(getMergedSymbol(symbol)));
                    if (isTypeRepresentableAsFunctionNamespaceMerge(typeToSerialize, symbol)) {
                        // If there are no index signatures and `typeToSerialize` is an object type, emit as a namespace instead of a const
                        serializeAsFunctionNamespaceMerge(typeToSerialize, symbol, varName, isExportAssignmentCompatibleSymbolName ? 0 /* ModifierFlags.None */ : 1 /* ModifierFlags.Export */);
                    }
                    else {
                        var statement = ts_1.factory.createVariableStatement(/*modifiers*/ undefined, ts_1.factory.createVariableDeclarationList([
                            ts_1.factory.createVariableDeclaration(varName, /*exclamationToken*/ undefined, serializeTypeForDeclaration(context, typeToSerialize, symbol, enclosingDeclaration, includePrivateSymbol, bundled))
                        ], ((_a = context.enclosingDeclaration) === null || _a === void 0 ? void 0 : _a.kind) === 266 /* SyntaxKind.ModuleDeclaration */ ? 1 /* NodeFlags.Let */ : 2 /* NodeFlags.Const */));
                        // Inlined JSON types exported with [module.]exports= will already emit an export=, so should use `declare`.
                        // Otherwise, the type itself should be exported.
                        addResult(statement, target && target.flags & 4 /* SymbolFlags.Property */ && target.escapedName === "export=" /* InternalSymbolName.ExportEquals */ ? 2 /* ModifierFlags.Ambient */
                            : name === varName ? 1 /* ModifierFlags.Export */
                                : 0 /* ModifierFlags.None */);
                    }
                    if (isExportAssignmentCompatibleSymbolName) {
                        results.push(ts_1.factory.createExportAssignment(
                        /*modifiers*/ undefined, isExportEquals, ts_1.factory.createIdentifier(varName)));
                        return true;
                    }
                    else if (name !== varName) {
                        serializeExportSpecifier(name, varName);
                        return true;
                    }
                    return false;
                }
            }
            function isTypeRepresentableAsFunctionNamespaceMerge(typeToSerialize, hostSymbol) {
                // Only object types which are not constructable, or indexable, whose members all come from the
                // context source file, and whose property names are all valid identifiers and not late-bound, _and_
                // whose input is not type annotated (if the input symbol has an annotation we can reuse, we should prefer it)
                var ctxSrc = (0, ts_1.getSourceFileOfNode)(context.enclosingDeclaration);
                return (0, ts_1.getObjectFlags)(typeToSerialize) & (16 /* ObjectFlags.Anonymous */ | 32 /* ObjectFlags.Mapped */) &&
                    !(0, ts_1.length)(getIndexInfosOfType(typeToSerialize)) &&
                    !isClassInstanceSide(typeToSerialize) && // While a class instance is potentially representable as a NS, prefer printing a reference to the instance type and serializing the class
                    !!((0, ts_1.length)((0, ts_1.filter)(getPropertiesOfType(typeToSerialize), isNamespaceMember)) || (0, ts_1.length)(getSignaturesOfType(typeToSerialize, 0 /* SignatureKind.Call */))) &&
                    !(0, ts_1.length)(getSignaturesOfType(typeToSerialize, 1 /* SignatureKind.Construct */)) && // TODO: could probably serialize as function + ns + class, now that that's OK
                    !getDeclarationWithTypeAnnotation(hostSymbol, enclosingDeclaration) &&
                    !(typeToSerialize.symbol && (0, ts_1.some)(typeToSerialize.symbol.declarations, function (d) { return (0, ts_1.getSourceFileOfNode)(d) !== ctxSrc; })) &&
                    !(0, ts_1.some)(getPropertiesOfType(typeToSerialize), function (p) { return isLateBoundName(p.escapedName); }) &&
                    !(0, ts_1.some)(getPropertiesOfType(typeToSerialize), function (p) { return (0, ts_1.some)(p.declarations, function (d) { return (0, ts_1.getSourceFileOfNode)(d) !== ctxSrc; }); }) &&
                    (0, ts_1.every)(getPropertiesOfType(typeToSerialize), function (p) { return (0, ts_1.isIdentifierText)((0, ts_1.symbolName)(p), languageVersion); });
            }
            function makeSerializePropertySymbol(createProperty, methodKind, useAccessors) {
                return function serializePropertySymbol(p, isStatic, baseType) {
                    var _a, _b, _c, _d, _e;
                    var modifierFlags = (0, ts_1.getDeclarationModifierFlagsFromSymbol)(p);
                    var isPrivate = !!(modifierFlags & 8 /* ModifierFlags.Private */);
                    if (isStatic && (p.flags & (788968 /* SymbolFlags.Type */ | 1920 /* SymbolFlags.Namespace */ | 2097152 /* SymbolFlags.Alias */))) {
                        // Only value-only-meaning symbols can be correctly encoded as class statics, type/namespace/alias meaning symbols
                        // need to be merged namespace members
                        return [];
                    }
                    if (p.flags & 4194304 /* SymbolFlags.Prototype */ || p.escapedName === "constructor" ||
                        (baseType && getPropertyOfType(baseType, p.escapedName)
                            && isReadonlySymbol(getPropertyOfType(baseType, p.escapedName)) === isReadonlySymbol(p)
                            && (p.flags & 16777216 /* SymbolFlags.Optional */) === (getPropertyOfType(baseType, p.escapedName).flags & 16777216 /* SymbolFlags.Optional */)
                            && isTypeIdenticalTo(getTypeOfSymbol(p), getTypeOfPropertyOfType(baseType, p.escapedName)))) {
                        return [];
                    }
                    var flag = (modifierFlags & ~512 /* ModifierFlags.Async */) | (isStatic ? 32 /* ModifierFlags.Static */ : 0);
                    var name = getPropertyNameNodeForSymbol(p, context);
                    var firstPropertyLikeDecl = (_a = p.declarations) === null || _a === void 0 ? void 0 : _a.find((0, ts_1.or)(ts_1.isPropertyDeclaration, ts_1.isAccessor, ts_1.isVariableDeclaration, ts_1.isPropertySignature, ts_1.isBinaryExpression, ts_1.isPropertyAccessExpression));
                    if (p.flags & 98304 /* SymbolFlags.Accessor */ && useAccessors) {
                        var result = [];
                        if (p.flags & 65536 /* SymbolFlags.SetAccessor */) {
                            result.push((0, ts_1.setTextRange)(ts_1.factory.createSetAccessorDeclaration(ts_1.factory.createModifiersFromModifierFlags(flag), name, [ts_1.factory.createParameterDeclaration(
                                /*modifiers*/ undefined, 
                                /*dotDotDotToken*/ undefined, "arg", 
                                /*questionToken*/ undefined, isPrivate ? undefined : serializeTypeForDeclaration(context, getTypeOfSymbol(p), p, enclosingDeclaration, includePrivateSymbol, bundled))], 
                            /*body*/ undefined), ((_b = p.declarations) === null || _b === void 0 ? void 0 : _b.find(ts_1.isSetAccessor)) || firstPropertyLikeDecl));
                        }
                        if (p.flags & 32768 /* SymbolFlags.GetAccessor */) {
                            var isPrivate_1 = modifierFlags & 8 /* ModifierFlags.Private */;
                            result.push((0, ts_1.setTextRange)(ts_1.factory.createGetAccessorDeclaration(ts_1.factory.createModifiersFromModifierFlags(flag), name, [], isPrivate_1 ? undefined : serializeTypeForDeclaration(context, getTypeOfSymbol(p), p, enclosingDeclaration, includePrivateSymbol, bundled), 
                            /*body*/ undefined), ((_c = p.declarations) === null || _c === void 0 ? void 0 : _c.find(ts_1.isGetAccessor)) || firstPropertyLikeDecl));
                        }
                        return result;
                    }
                    // This is an else/if as accessors and properties can't merge in TS, but might in JS
                    // If this happens, we assume the accessor takes priority, as it imposes more constraints
                    else if (p.flags & (4 /* SymbolFlags.Property */ | 3 /* SymbolFlags.Variable */ | 98304 /* SymbolFlags.Accessor */)) {
                        return (0, ts_1.setTextRange)(createProperty(ts_1.factory.createModifiersFromModifierFlags((isReadonlySymbol(p) ? 64 /* ModifierFlags.Readonly */ : 0) | flag), name, p.flags & 16777216 /* SymbolFlags.Optional */ ? ts_1.factory.createToken(58 /* SyntaxKind.QuestionToken */) : undefined, isPrivate ? undefined : serializeTypeForDeclaration(context, getWriteTypeOfSymbol(p), p, enclosingDeclaration, includePrivateSymbol, bundled), 
                        // TODO: https://github.com/microsoft/TypeScript/pull/32372#discussion_r328386357
                        // interface members can't have initializers, however class members _can_
                        /*initializer*/ undefined), ((_d = p.declarations) === null || _d === void 0 ? void 0 : _d.find((0, ts_1.or)(ts_1.isPropertyDeclaration, ts_1.isVariableDeclaration))) || firstPropertyLikeDecl);
                    }
                    if (p.flags & (8192 /* SymbolFlags.Method */ | 16 /* SymbolFlags.Function */)) {
                        var type = getTypeOfSymbol(p);
                        var signatures = getSignaturesOfType(type, 0 /* SignatureKind.Call */);
                        if (flag & 8 /* ModifierFlags.Private */) {
                            return (0, ts_1.setTextRange)(createProperty(ts_1.factory.createModifiersFromModifierFlags((isReadonlySymbol(p) ? 64 /* ModifierFlags.Readonly */ : 0) | flag), name, p.flags & 16777216 /* SymbolFlags.Optional */ ? ts_1.factory.createToken(58 /* SyntaxKind.QuestionToken */) : undefined, 
                            /*type*/ undefined, 
                            /*initializer*/ undefined), ((_e = p.declarations) === null || _e === void 0 ? void 0 : _e.find(ts_1.isFunctionLikeDeclaration)) || signatures[0] && signatures[0].declaration || p.declarations && p.declarations[0]);
                        }
                        var results_1 = [];
                        for (var _i = 0, signatures_3 = signatures; _i < signatures_3.length; _i++) {
                            var sig = signatures_3[_i];
                            // Each overload becomes a separate method declaration, in order
                            var decl = signatureToSignatureDeclarationHelper(sig, methodKind, context, {
                                name: name,
                                questionToken: p.flags & 16777216 /* SymbolFlags.Optional */ ? ts_1.factory.createToken(58 /* SyntaxKind.QuestionToken */) : undefined,
                                modifiers: flag ? ts_1.factory.createModifiersFromModifierFlags(flag) : undefined
                            });
                            var location_2 = sig.declaration && (0, ts_1.isPrototypePropertyAssignment)(sig.declaration.parent) ? sig.declaration.parent : sig.declaration;
                            results_1.push((0, ts_1.setTextRange)(decl, location_2));
                        }
                        return results_1;
                    }
                    // The `Constructor`'s symbol isn't in the class's properties lists, obviously, since it's a signature on the static
                    return ts_1.Debug.fail("Unhandled class member kind! ".concat(p.__debugFlags || p.flags));
                };
            }
            function serializePropertySymbolForInterface(p, baseType) {
                return serializePropertySymbolForInterfaceWorker(p, /*isStatic*/ false, baseType);
            }
            function serializeSignatures(kind, input, baseType, outputKind) {
                var signatures = getSignaturesOfType(input, kind);
                if (kind === 1 /* SignatureKind.Construct */) {
                    if (!baseType && (0, ts_1.every)(signatures, function (s) { return (0, ts_1.length)(s.parameters) === 0; })) {
                        return []; // No base type, every constructor is empty - elide the extraneous `constructor()`
                    }
                    if (baseType) {
                        // If there is a base type, if every signature in the class is identical to a signature in the baseType, elide all the declarations
                        var baseSigs = getSignaturesOfType(baseType, 1 /* SignatureKind.Construct */);
                        if (!(0, ts_1.length)(baseSigs) && (0, ts_1.every)(signatures, function (s) { return (0, ts_1.length)(s.parameters) === 0; })) {
                            return []; // Base had no explicit signatures, if all our signatures are also implicit, return an empty list
                        }
                        if (baseSigs.length === signatures.length) {
                            var failed = false;
                            for (var i = 0; i < baseSigs.length; i++) {
                                if (!compareSignaturesIdentical(signatures[i], baseSigs[i], /*partialMatch*/ false, /*ignoreThisTypes*/ false, /*ignoreReturnTypes*/ true, compareTypesIdentical)) {
                                    failed = true;
                                    break;
                                }
                            }
                            if (!failed) {
                                return []; // Every signature was identical - elide constructor list as it is inherited
                            }
                        }
                    }
                    var privateProtected = 0;
                    for (var _i = 0, signatures_4 = signatures; _i < signatures_4.length; _i++) {
                        var s = signatures_4[_i];
                        if (s.declaration) {
                            privateProtected |= (0, ts_1.getSelectedEffectiveModifierFlags)(s.declaration, 8 /* ModifierFlags.Private */ | 16 /* ModifierFlags.Protected */);
                        }
                    }
                    if (privateProtected) {
                        return [(0, ts_1.setTextRange)(ts_1.factory.createConstructorDeclaration(ts_1.factory.createModifiersFromModifierFlags(privateProtected), 
                            /*parameters*/ [], 
                            /*body*/ undefined), signatures[0].declaration)];
                    }
                }
                var results = [];
                for (var _a = 0, signatures_5 = signatures; _a < signatures_5.length; _a++) {
                    var sig = signatures_5[_a];
                    // Each overload becomes a separate constructor declaration, in order
                    var decl = signatureToSignatureDeclarationHelper(sig, outputKind, context);
                    results.push((0, ts_1.setTextRange)(decl, sig.declaration));
                }
                return results;
            }
            function serializeIndexSignatures(input, baseType) {
                var results = [];
                for (var _i = 0, _a = getIndexInfosOfType(input); _i < _a.length; _i++) {
                    var info = _a[_i];
                    if (baseType) {
                        var baseInfo = getIndexInfoOfType(baseType, info.keyType);
                        if (baseInfo) {
                            if (isTypeIdenticalTo(info.type, baseInfo.type)) {
                                continue; // elide identical index signatures
                            }
                        }
                    }
                    results.push(indexInfoToIndexSignatureDeclarationHelper(info, context, /*typeNode*/ undefined));
                }
                return results;
            }
            function serializeBaseType(t, staticType, rootName) {
                var ref = trySerializeAsTypeReference(t, 111551 /* SymbolFlags.Value */);
                if (ref) {
                    return ref;
                }
                var tempName = getUnusedName("".concat(rootName, "_base"));
                var statement = ts_1.factory.createVariableStatement(/*modifiers*/ undefined, ts_1.factory.createVariableDeclarationList([
                    ts_1.factory.createVariableDeclaration(tempName, /*exclamationToken*/ undefined, typeToTypeNodeHelper(staticType, context))
                ], 2 /* NodeFlags.Const */));
                addResult(statement, 0 /* ModifierFlags.None */);
                return ts_1.factory.createExpressionWithTypeArguments(ts_1.factory.createIdentifier(tempName), /*typeArguments*/ undefined);
            }
            function trySerializeAsTypeReference(t, flags) {
                var typeArgs;
                var reference;
                // We don't use `isValueSymbolAccessible` below. since that considers alternative containers (like modules)
                // which we can't write out in a syntactically valid way as an expression
                if (t.target && isSymbolAccessibleByFlags(t.target.symbol, enclosingDeclaration, flags)) {
                    typeArgs = (0, ts_1.map)(getTypeArguments(t), function (t) { return typeToTypeNodeHelper(t, context); });
                    reference = symbolToExpression(t.target.symbol, context, 788968 /* SymbolFlags.Type */);
                }
                else if (t.symbol && isSymbolAccessibleByFlags(t.symbol, enclosingDeclaration, flags)) {
                    reference = symbolToExpression(t.symbol, context, 788968 /* SymbolFlags.Type */);
                }
                if (reference) {
                    return ts_1.factory.createExpressionWithTypeArguments(reference, typeArgs);
                }
            }
            function serializeImplementedType(t) {
                var ref = trySerializeAsTypeReference(t, 788968 /* SymbolFlags.Type */);
                if (ref) {
                    return ref;
                }
                if (t.symbol) {
                    return ts_1.factory.createExpressionWithTypeArguments(symbolToExpression(t.symbol, context, 788968 /* SymbolFlags.Type */), /*typeArguments*/ undefined);
                }
            }
            function getUnusedName(input, symbol) {
                var _a, _b;
                var id = symbol ? getSymbolId(symbol) : undefined;
                if (id) {
                    if (context.remappedSymbolNames.has(id)) {
                        return context.remappedSymbolNames.get(id);
                    }
                }
                if (symbol) {
                    input = getNameCandidateWorker(symbol, input);
                }
                var i = 0;
                var original = input;
                while ((_a = context.usedSymbolNames) === null || _a === void 0 ? void 0 : _a.has(input)) {
                    i++;
                    input = "".concat(original, "_").concat(i);
                }
                (_b = context.usedSymbolNames) === null || _b === void 0 ? void 0 : _b.add(input);
                if (id) {
                    context.remappedSymbolNames.set(id, input);
                }
                return input;
            }
            function getNameCandidateWorker(symbol, localName) {
                if (localName === "default" /* InternalSymbolName.Default */ || localName === "__class" /* InternalSymbolName.Class */ || localName === "__function" /* InternalSymbolName.Function */) {
                    var flags = context.flags;
                    context.flags |= 16777216 /* NodeBuilderFlags.InInitialEntityName */;
                    var nameCandidate = getNameOfSymbolAsWritten(symbol, context);
                    context.flags = flags;
                    localName = nameCandidate.length > 0 && (0, ts_1.isSingleOrDoubleQuote)(nameCandidate.charCodeAt(0)) ? (0, ts_1.stripQuotes)(nameCandidate) : nameCandidate;
                }
                if (localName === "default" /* InternalSymbolName.Default */) {
                    localName = "_default";
                }
                else if (localName === "export=" /* InternalSymbolName.ExportEquals */) {
                    localName = "_exports";
                }
                localName = (0, ts_1.isIdentifierText)(localName, languageVersion) && !(0, ts_1.isStringANonContextualKeyword)(localName) ? localName : "_" + localName.replace(/[^a-zA-Z0-9]/g, "_");
                return localName;
            }
            function getInternalSymbolName(symbol, localName) {
                var id = getSymbolId(symbol);
                if (context.remappedSymbolNames.has(id)) {
                    return context.remappedSymbolNames.get(id);
                }
                localName = getNameCandidateWorker(symbol, localName);
                // The result of this is going to be used as the symbol's name - lock it in, so `getUnusedName` will also pick it up
                context.remappedSymbolNames.set(id, localName);
                return localName;
            }
        }
    }
    function typePredicateToString(typePredicate, enclosingDeclaration, flags, writer) {
        if (flags === void 0) { flags = 16384 /* TypeFormatFlags.UseAliasDefinedOutsideCurrentScope */; }
        return writer ? typePredicateToStringWorker(writer).getText() : (0, ts_1.usingSingleLineStringWriter)(typePredicateToStringWorker);
        function typePredicateToStringWorker(writer) {
            var predicate = ts_1.factory.createTypePredicateNode(typePredicate.kind === 2 /* TypePredicateKind.AssertsThis */ || typePredicate.kind === 3 /* TypePredicateKind.AssertsIdentifier */ ? ts_1.factory.createToken(131 /* SyntaxKind.AssertsKeyword */) : undefined, typePredicate.kind === 1 /* TypePredicateKind.Identifier */ || typePredicate.kind === 3 /* TypePredicateKind.AssertsIdentifier */ ? ts_1.factory.createIdentifier(typePredicate.parameterName) : ts_1.factory.createThisTypeNode(), typePredicate.type && nodeBuilder.typeToTypeNode(typePredicate.type, enclosingDeclaration, toNodeBuilderFlags(flags) | 70221824 /* NodeBuilderFlags.IgnoreErrors */ | 512 /* NodeBuilderFlags.WriteTypeParametersInQualifiedName */) // TODO: GH#18217
            );
            var printer = (0, ts_1.createPrinterWithRemoveComments)();
            var sourceFile = enclosingDeclaration && (0, ts_1.getSourceFileOfNode)(enclosingDeclaration);
            printer.writeNode(4 /* EmitHint.Unspecified */, predicate, /*sourceFile*/ sourceFile, writer);
            return writer;
        }
    }
    function formatUnionTypes(types) {
        var result = [];
        var flags = 0;
        for (var i = 0; i < types.length; i++) {
            var t = types[i];
            flags |= t.flags;
            if (!(t.flags & 98304 /* TypeFlags.Nullable */)) {
                if (t.flags & (512 /* TypeFlags.BooleanLiteral */ | 1056 /* TypeFlags.EnumLike */)) {
                    var baseType = t.flags & 512 /* TypeFlags.BooleanLiteral */ ? booleanType : getBaseTypeOfEnumLikeType(t);
                    if (baseType.flags & 1048576 /* TypeFlags.Union */) {
                        var count = baseType.types.length;
                        if (i + count <= types.length && getRegularTypeOfLiteralType(types[i + count - 1]) === getRegularTypeOfLiteralType(baseType.types[count - 1])) {
                            result.push(baseType);
                            i += count - 1;
                            continue;
                        }
                    }
                }
                result.push(t);
            }
        }
        if (flags & 65536 /* TypeFlags.Null */)
            result.push(nullType);
        if (flags & 32768 /* TypeFlags.Undefined */)
            result.push(undefinedType);
        return result || types;
    }
    function visibilityToString(flags) {
        if (flags === 8 /* ModifierFlags.Private */) {
            return "private";
        }
        if (flags === 16 /* ModifierFlags.Protected */) {
            return "protected";
        }
        return "public";
    }
    function getTypeAliasForTypeLiteral(type) {
        if (type.symbol && type.symbol.flags & 2048 /* SymbolFlags.TypeLiteral */ && type.symbol.declarations) {
            var node = (0, ts_1.walkUpParenthesizedTypes)(type.symbol.declarations[0].parent);
            if ((0, ts_1.isTypeAliasDeclaration)(node)) {
                return getSymbolOfDeclaration(node);
            }
        }
        return undefined;
    }
    function isTopLevelInExternalModuleAugmentation(node) {
        return node && node.parent &&
            node.parent.kind === 267 /* SyntaxKind.ModuleBlock */ &&
            (0, ts_1.isExternalModuleAugmentation)(node.parent.parent);
    }
    function isDefaultBindingContext(location) {
        return location.kind === 311 /* SyntaxKind.SourceFile */ || (0, ts_1.isAmbientModule)(location);
    }
    function getNameOfSymbolFromNameType(symbol, context) {
        var nameType = getSymbolLinks(symbol).nameType;
        if (nameType) {
            if (nameType.flags & 384 /* TypeFlags.StringOrNumberLiteral */) {
                var name_15 = "" + nameType.value;
                if (!(0, ts_1.isIdentifierText)(name_15, (0, ts_1.getEmitScriptTarget)(compilerOptions)) && !(0, ts_1.isNumericLiteralName)(name_15)) {
                    return "\"".concat((0, ts_1.escapeString)(name_15, 34 /* CharacterCodes.doubleQuote */), "\"");
                }
                if ((0, ts_1.isNumericLiteralName)(name_15) && (0, ts_1.startsWith)(name_15, "-")) {
                    return "[".concat(name_15, "]");
                }
                return name_15;
            }
            if (nameType.flags & 8192 /* TypeFlags.UniqueESSymbol */) {
                return "[".concat(getNameOfSymbolAsWritten(nameType.symbol, context), "]");
            }
        }
    }
    /**
     * Gets a human-readable name for a symbol.
     * Should *not* be used for the right-hand side of a `.` -- use `symbolName(symbol)` for that instead.
     *
     * Unlike `symbolName(symbol)`, this will include quotes if the name is from a string literal.
     * It will also use a representation of a number as written instead of a decimal form, e.g. `0o11` instead of `9`.
     */
    function getNameOfSymbolAsWritten(symbol, context) {
        if (context && symbol.escapedName === "default" /* InternalSymbolName.Default */ && !(context.flags & 16384 /* NodeBuilderFlags.UseAliasDefinedOutsideCurrentScope */) &&
            // If it's not the first part of an entity name, it must print as `default`
            (!(context.flags & 16777216 /* NodeBuilderFlags.InInitialEntityName */) ||
                // if the symbol is synthesized, it will only be referenced externally it must print as `default`
                !symbol.declarations ||
                // if not in the same binding context (source file, module declaration), it must print as `default`
                (context.enclosingDeclaration && (0, ts_1.findAncestor)(symbol.declarations[0], isDefaultBindingContext) !== (0, ts_1.findAncestor)(context.enclosingDeclaration, isDefaultBindingContext)))) {
            return "default";
        }
        if (symbol.declarations && symbol.declarations.length) {
            var declaration = (0, ts_1.firstDefined)(symbol.declarations, function (d) { return (0, ts_1.getNameOfDeclaration)(d) ? d : undefined; }); // Try using a declaration with a name, first
            var name_16 = declaration && (0, ts_1.getNameOfDeclaration)(declaration);
            if (declaration && name_16) {
                if ((0, ts_1.isCallExpression)(declaration) && (0, ts_1.isBindableObjectDefinePropertyCall)(declaration)) {
                    return (0, ts_1.symbolName)(symbol);
                }
                if ((0, ts_1.isComputedPropertyName)(name_16) && !((0, ts_1.getCheckFlags)(symbol) & 4096 /* CheckFlags.Late */)) {
                    var nameType = getSymbolLinks(symbol).nameType;
                    if (nameType && nameType.flags & 384 /* TypeFlags.StringOrNumberLiteral */) {
                        // Computed property name isn't late bound, but has a well-known name type - use name type to generate a symbol name
                        var result = getNameOfSymbolFromNameType(symbol, context);
                        if (result !== undefined) {
                            return result;
                        }
                    }
                }
                return (0, ts_1.declarationNameToString)(name_16);
            }
            if (!declaration) {
                declaration = symbol.declarations[0]; // Declaration may be nameless, but we'll try anyway
            }
            if (declaration.parent && declaration.parent.kind === 259 /* SyntaxKind.VariableDeclaration */) {
                return (0, ts_1.declarationNameToString)(declaration.parent.name);
            }
            switch (declaration.kind) {
                case 230 /* SyntaxKind.ClassExpression */:
                case 217 /* SyntaxKind.FunctionExpression */:
                case 218 /* SyntaxKind.ArrowFunction */:
                    if (context && !context.encounteredError && !(context.flags & 131072 /* NodeBuilderFlags.AllowAnonymousIdentifier */)) {
                        context.encounteredError = true;
                    }
                    return declaration.kind === 230 /* SyntaxKind.ClassExpression */ ? "(Anonymous class)" : "(Anonymous function)";
            }
        }
        var name = getNameOfSymbolFromNameType(symbol, context);
        return name !== undefined ? name : (0, ts_1.symbolName)(symbol);
    }
    function isDeclarationVisible(node) {
        if (node) {
            var links = getNodeLinks(node);
            if (links.isVisible === undefined) {
                links.isVisible = !!determineIfDeclarationIsVisible();
            }
            return links.isVisible;
        }
        return false;
        function determineIfDeclarationIsVisible() {
            switch (node.kind) {
                case 344 /* SyntaxKind.JSDocCallbackTag */:
                case 352 /* SyntaxKind.JSDocTypedefTag */:
                case 346 /* SyntaxKind.JSDocEnumTag */:
                    // Top-level jsdoc type aliases are considered exported
                    // First parent is comment node, second is hosting declaration or token; we only care about those tokens or declarations whose parent is a source file
                    return !!(node.parent && node.parent.parent && node.parent.parent.parent && (0, ts_1.isSourceFile)(node.parent.parent.parent));
                case 207 /* SyntaxKind.BindingElement */:
                    return isDeclarationVisible(node.parent.parent);
                case 259 /* SyntaxKind.VariableDeclaration */:
                    if ((0, ts_1.isBindingPattern)(node.name) &&
                        !node.name.elements.length) {
                        // If the binding pattern is empty, this variable declaration is not visible
                        return false;
                    }
                // falls through
                case 266 /* SyntaxKind.ModuleDeclaration */:
                case 262 /* SyntaxKind.ClassDeclaration */:
                case 263 /* SyntaxKind.InterfaceDeclaration */:
                case 264 /* SyntaxKind.TypeAliasDeclaration */:
                case 261 /* SyntaxKind.FunctionDeclaration */:
                case 265 /* SyntaxKind.EnumDeclaration */:
                case 270 /* SyntaxKind.ImportEqualsDeclaration */:
                    // external module augmentation is always visible
                    if ((0, ts_1.isExternalModuleAugmentation)(node)) {
                        return true;
                    }
                    var parent_5 = getDeclarationContainer(node);
                    // If the node is not exported or it is not ambient module element (except import declaration)
                    if (!((0, ts_1.getCombinedModifierFlags)(node) & 1 /* ModifierFlags.Export */) &&
                        !(node.kind !== 270 /* SyntaxKind.ImportEqualsDeclaration */ && parent_5.kind !== 311 /* SyntaxKind.SourceFile */ && parent_5.flags & 16777216 /* NodeFlags.Ambient */)) {
                        return isGlobalSourceFile(parent_5);
                    }
                    // Exported members/ambient module elements (exception import declaration) are visible if parent is visible
                    return isDeclarationVisible(parent_5);
                case 171 /* SyntaxKind.PropertyDeclaration */:
                case 170 /* SyntaxKind.PropertySignature */:
                case 176 /* SyntaxKind.GetAccessor */:
                case 177 /* SyntaxKind.SetAccessor */:
                case 173 /* SyntaxKind.MethodDeclaration */:
                case 172 /* SyntaxKind.MethodSignature */:
                    if ((0, ts_1.hasEffectiveModifier)(node, 8 /* ModifierFlags.Private */ | 16 /* ModifierFlags.Protected */)) {
                        // Private/protected properties/methods are not visible
                        return false;
                    }
                // Public properties/methods are visible if its parents are visible, so:
                // falls through
                case 175 /* SyntaxKind.Constructor */:
                case 179 /* SyntaxKind.ConstructSignature */:
                case 178 /* SyntaxKind.CallSignature */:
                case 180 /* SyntaxKind.IndexSignature */:
                case 168 /* SyntaxKind.Parameter */:
                case 267 /* SyntaxKind.ModuleBlock */:
                case 183 /* SyntaxKind.FunctionType */:
                case 184 /* SyntaxKind.ConstructorType */:
                case 186 /* SyntaxKind.TypeLiteral */:
                case 182 /* SyntaxKind.TypeReference */:
                case 187 /* SyntaxKind.ArrayType */:
                case 188 /* SyntaxKind.TupleType */:
                case 191 /* SyntaxKind.UnionType */:
                case 192 /* SyntaxKind.IntersectionType */:
                case 195 /* SyntaxKind.ParenthesizedType */:
                case 201 /* SyntaxKind.NamedTupleMember */:
                    return isDeclarationVisible(node.parent);
                // Default binding, import specifier and namespace import is visible
                // only on demand so by default it is not visible
                case 272 /* SyntaxKind.ImportClause */:
                case 273 /* SyntaxKind.NamespaceImport */:
                case 275 /* SyntaxKind.ImportSpecifier */:
                    return false;
                // Type parameters are always visible
                case 167 /* SyntaxKind.TypeParameter */:
                // Source file and namespace export are always visible
                // falls through
                case 311 /* SyntaxKind.SourceFile */:
                case 269 /* SyntaxKind.NamespaceExportDeclaration */:
                    return true;
                // Export assignments do not create name bindings outside the module
                case 276 /* SyntaxKind.ExportAssignment */:
                    return false;
                default:
                    return false;
            }
        }
    }
    function collectLinkedAliases(node, setVisibility) {
        var exportSymbol;
        if (node.parent && node.parent.kind === 276 /* SyntaxKind.ExportAssignment */) {
            exportSymbol = resolveName(node, node.escapedText, 111551 /* SymbolFlags.Value */ | 788968 /* SymbolFlags.Type */ | 1920 /* SymbolFlags.Namespace */ | 2097152 /* SymbolFlags.Alias */, /*nameNotFoundMessage*/ undefined, node, /*isUse*/ false);
        }
        else if (node.parent.kind === 280 /* SyntaxKind.ExportSpecifier */) {
            exportSymbol = getTargetOfExportSpecifier(node.parent, 111551 /* SymbolFlags.Value */ | 788968 /* SymbolFlags.Type */ | 1920 /* SymbolFlags.Namespace */ | 2097152 /* SymbolFlags.Alias */);
        }
        var result;
        var visited;
        if (exportSymbol) {
            visited = new Set();
            visited.add(getSymbolId(exportSymbol));
            buildVisibleNodeList(exportSymbol.declarations);
        }
        return result;
        function buildVisibleNodeList(declarations) {
            (0, ts_1.forEach)(declarations, function (declaration) {
                var resultNode = getAnyImportSyntax(declaration) || declaration;
                if (setVisibility) {
                    getNodeLinks(declaration).isVisible = true;
                }
                else {
                    result = result || [];
                    (0, ts_1.pushIfUnique)(result, resultNode);
                }
                if ((0, ts_1.isInternalModuleImportEqualsDeclaration)(declaration)) {
                    // Add the referenced top container visible
                    var internalModuleReference = declaration.moduleReference;
                    var firstIdentifier = (0, ts_1.getFirstIdentifier)(internalModuleReference);
                    var importSymbol = resolveName(declaration, firstIdentifier.escapedText, 111551 /* SymbolFlags.Value */ | 788968 /* SymbolFlags.Type */ | 1920 /* SymbolFlags.Namespace */, 
                    /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ false);
                    if (importSymbol && visited) {
                        if ((0, ts_1.tryAddToSet)(visited, getSymbolId(importSymbol))) {
                            buildVisibleNodeList(importSymbol.declarations);
                        }
                    }
                }
            });
        }
    }
    /**
     * Push an entry on the type resolution stack. If an entry with the given target and the given property name
     * is already on the stack, and no entries in between already have a type, then a circularity has occurred.
     * In this case, the result values of the existing entry and all entries pushed after it are changed to false,
     * and the value false is returned. Otherwise, the new entry is just pushed onto the stack, and true is returned.
     * In order to see if the same query has already been done before, the target object and the propertyName both
     * must match the one passed in.
     *
     * @param target The symbol, type, or signature whose type is being queried
     * @param propertyName The property name that should be used to query the target for its type
     */
    function pushTypeResolution(target, propertyName) {
        var resolutionCycleStartIndex = findResolutionCycleStartIndex(target, propertyName);
        if (resolutionCycleStartIndex >= 0) {
            // A cycle was found
            var length_2 = resolutionTargets.length;
            for (var i = resolutionCycleStartIndex; i < length_2; i++) {
                resolutionResults[i] = false;
            }
            return false;
        }
        resolutionTargets.push(target);
        resolutionResults.push(/*items*/ true);
        resolutionPropertyNames.push(propertyName);
        return true;
    }
    function findResolutionCycleStartIndex(target, propertyName) {
        for (var i = resolutionTargets.length - 1; i >= resolutionStart; i--) {
            if (resolutionTargetHasProperty(resolutionTargets[i], resolutionPropertyNames[i])) {
                return -1;
            }
            if (resolutionTargets[i] === target && resolutionPropertyNames[i] === propertyName) {
                return i;
            }
        }
        return -1;
    }
    function resolutionTargetHasProperty(target, propertyName) {
        switch (propertyName) {
            case 0 /* TypeSystemPropertyName.Type */:
                return !!getSymbolLinks(target).type;
            case 5 /* TypeSystemPropertyName.EnumTagType */:
                return !!(getNodeLinks(target).resolvedEnumType);
            case 2 /* TypeSystemPropertyName.DeclaredType */:
                return !!getSymbolLinks(target).declaredType;
            case 1 /* TypeSystemPropertyName.ResolvedBaseConstructorType */:
                return !!target.resolvedBaseConstructorType;
            case 3 /* TypeSystemPropertyName.ResolvedReturnType */:
                return !!target.resolvedReturnType;
            case 4 /* TypeSystemPropertyName.ImmediateBaseConstraint */:
                return !!target.immediateBaseConstraint;
            case 6 /* TypeSystemPropertyName.ResolvedTypeArguments */:
                return !!target.resolvedTypeArguments;
            case 7 /* TypeSystemPropertyName.ResolvedBaseTypes */:
                return !!target.baseTypesResolved;
            case 8 /* TypeSystemPropertyName.WriteType */:
                return !!getSymbolLinks(target).writeType;
            case 9 /* TypeSystemPropertyName.ParameterInitializerContainsUndefined */:
                return getNodeLinks(target).parameterInitializerContainsUndefined !== undefined;
        }
        return ts_1.Debug.assertNever(propertyName);
    }
    /**
     * Pop an entry from the type resolution stack and return its associated result value. The result value will
     * be true if no circularities were detected, or false if a circularity was found.
     */
    function popTypeResolution() {
        resolutionTargets.pop();
        resolutionPropertyNames.pop();
        return resolutionResults.pop();
    }
    function getDeclarationContainer(node) {
        return (0, ts_1.findAncestor)((0, ts_1.getRootDeclaration)(node), function (node) {
            switch (node.kind) {
                case 259 /* SyntaxKind.VariableDeclaration */:
                case 260 /* SyntaxKind.VariableDeclarationList */:
                case 275 /* SyntaxKind.ImportSpecifier */:
                case 274 /* SyntaxKind.NamedImports */:
                case 273 /* SyntaxKind.NamespaceImport */:
                case 272 /* SyntaxKind.ImportClause */:
                    return false;
                default:
                    return true;
            }
        }).parent;
    }
    function getTypeOfPrototypeProperty(prototype) {
        // TypeScript 1.0 spec (April 2014): 8.4
        // Every class automatically contains a static property member named 'prototype',
        // the type of which is an instantiation of the class type with type Any supplied as a type argument for each type parameter.
        // It is an error to explicitly declare a static property member with the name 'prototype'.
        var classType = getDeclaredTypeOfSymbol(getParentOfSymbol(prototype));
        return classType.typeParameters ? createTypeReference(classType, (0, ts_1.map)(classType.typeParameters, function (_) { return anyType; })) : classType;
    }
    // Return the type of the given property in the given type, or undefined if no such property exists
    function getTypeOfPropertyOfType(type, name) {
        var prop = getPropertyOfType(type, name);
        return prop ? getTypeOfSymbol(prop) : undefined;
    }
    function getTypeOfPropertyOrIndexSignature(type, name, addOptionalityToIndex) {
        var _a;
        var propType;
        return getTypeOfPropertyOfType(type, name) ||
            (propType = (_a = getApplicableIndexInfoForName(type, name)) === null || _a === void 0 ? void 0 : _a.type) && addOptionality(propType, /*isProperty*/ true, addOptionalityToIndex) ||
            unknownType;
    }
    function isTypeAny(type) {
        return type && (type.flags & 1 /* TypeFlags.Any */) !== 0;
    }
    function isErrorType(type) {
        // The only 'any' types that have alias symbols are those manufactured by getTypeFromTypeAliasReference for
        // a reference to an unresolved symbol. We want those to behave like the errorType.
        return type === errorType || !!(type.flags & 1 /* TypeFlags.Any */ && type.aliasSymbol);
    }
    // Return the type of a binding element parent. We check SymbolLinks first to see if a type has been
    // assigned by contextual typing.
    function getTypeForBindingElementParent(node, checkMode) {
        if (checkMode !== 0 /* CheckMode.Normal */) {
            return getTypeForVariableLikeDeclaration(node, /*includeOptionality*/ false, checkMode);
        }
        var symbol = getSymbolOfDeclaration(node);
        return symbol && getSymbolLinks(symbol).type || getTypeForVariableLikeDeclaration(node, /*includeOptionality*/ false, checkMode);
    }
    function getRestType(source, properties, symbol) {
        source = filterType(source, function (t) { return !(t.flags & 98304 /* TypeFlags.Nullable */); });
        if (source.flags & 131072 /* TypeFlags.Never */) {
            return emptyObjectType;
        }
        if (source.flags & 1048576 /* TypeFlags.Union */) {
            return mapType(source, function (t) { return getRestType(t, properties, symbol); });
        }
        var omitKeyType = getUnionType((0, ts_1.map)(properties, getLiteralTypeFromPropertyName));
        var spreadableProperties = [];
        var unspreadableToRestKeys = [];
        for (var _i = 0, _a = getPropertiesOfType(source); _i < _a.length; _i++) {
            var prop = _a[_i];
            var literalTypeFromProperty = getLiteralTypeFromProperty(prop, 8576 /* TypeFlags.StringOrNumberLiteralOrUnique */);
            if (!isTypeAssignableTo(literalTypeFromProperty, omitKeyType)
                && !((0, ts_1.getDeclarationModifierFlagsFromSymbol)(prop) & (8 /* ModifierFlags.Private */ | 16 /* ModifierFlags.Protected */))
                && isSpreadableProperty(prop)) {
                spreadableProperties.push(prop);
            }
            else {
                unspreadableToRestKeys.push(literalTypeFromProperty);
            }
        }
        if (isGenericObjectType(source) || isGenericIndexType(omitKeyType)) {
            if (unspreadableToRestKeys.length) {
                // If the type we're spreading from has properties that cannot
                // be spread into the rest type (e.g. getters, methods), ensure
                // they are explicitly omitted, as they would in the non-generic case.
                omitKeyType = getUnionType(__spreadArray([omitKeyType], unspreadableToRestKeys, true));
            }
            if (omitKeyType.flags & 131072 /* TypeFlags.Never */) {
                return source;
            }
            var omitTypeAlias = getGlobalOmitSymbol();
            if (!omitTypeAlias) {
                return errorType;
            }
            return getTypeAliasInstantiation(omitTypeAlias, [source, omitKeyType]);
        }
        var members = (0, ts_1.createSymbolTable)();
        for (var _b = 0, spreadableProperties_1 = spreadableProperties; _b < spreadableProperties_1.length; _b++) {
            var prop = spreadableProperties_1[_b];
            members.set(prop.escapedName, getSpreadSymbol(prop, /*readonly*/ false));
        }
        var result = createAnonymousType(symbol, members, ts_1.emptyArray, ts_1.emptyArray, getIndexInfosOfType(source));
        result.objectFlags |= 4194304 /* ObjectFlags.ObjectRestType */;
        return result;
    }
    function isGenericTypeWithUndefinedConstraint(type) {
        return !!(type.flags & 465829888 /* TypeFlags.Instantiable */) && maybeTypeOfKind(getBaseConstraintOfType(type) || unknownType, 32768 /* TypeFlags.Undefined */);
    }
    function getNonUndefinedType(type) {
        var typeOrConstraint = someType(type, isGenericTypeWithUndefinedConstraint) ? mapType(type, function (t) { return t.flags & 465829888 /* TypeFlags.Instantiable */ ? getBaseConstraintOrType(t) : t; }) : type;
        return getTypeWithFacts(typeOrConstraint, 524288 /* TypeFacts.NEUndefined */);
    }
    // Determine the control flow type associated with a destructuring declaration or assignment. The following
    // forms of destructuring are possible:
    //   let { x } = obj;  // BindingElement
    //   let [ x ] = obj;  // BindingElement
    //   { x } = obj;      // ShorthandPropertyAssignment
    //   { x: v } = obj;   // PropertyAssignment
    //   [ x ] = obj;      // Expression
    // We construct a synthetic element access expression corresponding to 'obj.x' such that the control
    // flow analyzer doesn't have to handle all the different syntactic forms.
    function getFlowTypeOfDestructuring(node, declaredType) {
        var reference = getSyntheticElementAccess(node);
        return reference ? getFlowTypeOfReference(reference, declaredType) : declaredType;
    }
    function getSyntheticElementAccess(node) {
        var parentAccess = getParentElementAccess(node);
        if (parentAccess && (0, ts_1.canHaveFlowNode)(parentAccess) && parentAccess.flowNode) {
            var propName = getDestructuringPropertyName(node);
            if (propName) {
                var literal = (0, ts_1.setTextRange)(ts_1.parseNodeFactory.createStringLiteral(propName), node);
                var lhsExpr = (0, ts_1.isLeftHandSideExpression)(parentAccess) ? parentAccess : ts_1.parseNodeFactory.createParenthesizedExpression(parentAccess);
                var result = (0, ts_1.setTextRange)(ts_1.parseNodeFactory.createElementAccessExpression(lhsExpr, literal), node);
                (0, ts_1.setParent)(literal, result);
                (0, ts_1.setParent)(result, node);
                if (lhsExpr !== parentAccess) {
                    (0, ts_1.setParent)(lhsExpr, result);
                }
                result.flowNode = parentAccess.flowNode;
                return result;
            }
        }
    }
    function getParentElementAccess(node) {
        var ancestor = node.parent.parent;
        switch (ancestor.kind) {
            case 207 /* SyntaxKind.BindingElement */:
            case 302 /* SyntaxKind.PropertyAssignment */:
                return getSyntheticElementAccess(ancestor);
            case 208 /* SyntaxKind.ArrayLiteralExpression */:
                return getSyntheticElementAccess(node.parent);
            case 259 /* SyntaxKind.VariableDeclaration */:
                return ancestor.initializer;
            case 225 /* SyntaxKind.BinaryExpression */:
                return ancestor.right;
        }
    }
    function getDestructuringPropertyName(node) {
        var parent = node.parent;
        if (node.kind === 207 /* SyntaxKind.BindingElement */ && parent.kind === 205 /* SyntaxKind.ObjectBindingPattern */) {
            return getLiteralPropertyNameText(node.propertyName || node.name);
        }
        if (node.kind === 302 /* SyntaxKind.PropertyAssignment */ || node.kind === 303 /* SyntaxKind.ShorthandPropertyAssignment */) {
            return getLiteralPropertyNameText(node.name);
        }
        return "" + parent.elements.indexOf(node);
    }
    function getLiteralPropertyNameText(name) {
        var type = getLiteralTypeFromPropertyName(name);
        return type.flags & (128 /* TypeFlags.StringLiteral */ | 256 /* TypeFlags.NumberLiteral */) ? "" + type.value : undefined;
    }
    /** Return the inferred type for a binding element */
    function getTypeForBindingElement(declaration) {
        var checkMode = declaration.dotDotDotToken ? 64 /* CheckMode.RestBindingElement */ : 0 /* CheckMode.Normal */;
        var parentType = getTypeForBindingElementParent(declaration.parent.parent, checkMode);
        return parentType && getBindingElementTypeFromParentType(declaration, parentType);
    }
    function getBindingElementTypeFromParentType(declaration, parentType) {
        // If an any type was inferred for parent, infer that for the binding element
        if (isTypeAny(parentType)) {
            return parentType;
        }
        var pattern = declaration.parent;
        // Relax null check on ambient destructuring parameters, since the parameters have no implementation and are just documentation
        if (strictNullChecks && declaration.flags & 16777216 /* NodeFlags.Ambient */ && (0, ts_1.isParameterDeclaration)(declaration)) {
            parentType = getNonNullableType(parentType);
        }
        // Filter `undefined` from the type we check against if the parent has an initializer and that initializer is not possibly `undefined`
        else if (strictNullChecks && pattern.parent.initializer && !(getTypeFacts(getTypeOfInitializer(pattern.parent.initializer)) & 65536 /* TypeFacts.EQUndefined */)) {
            parentType = getTypeWithFacts(parentType, 524288 /* TypeFacts.NEUndefined */);
        }
        var type;
        if (pattern.kind === 205 /* SyntaxKind.ObjectBindingPattern */) {
            if (declaration.dotDotDotToken) {
                parentType = getReducedType(parentType);
                if (parentType.flags & 2 /* TypeFlags.Unknown */ || !isValidSpreadType(parentType)) {
                    error(declaration, ts_1.Diagnostics.Rest_types_may_only_be_created_from_object_types);
                    return errorType;
                }
                var literalMembers = [];
                for (var _i = 0, _a = pattern.elements; _i < _a.length; _i++) {
                    var element = _a[_i];
                    if (!element.dotDotDotToken) {
                        literalMembers.push(element.propertyName || element.name);
                    }
                }
                type = getRestType(parentType, literalMembers, declaration.symbol);
            }
            else {
                // Use explicitly specified property name ({ p: xxx } form), or otherwise the implied name ({ p } form)
                var name_17 = declaration.propertyName || declaration.name;
                var indexType = getLiteralTypeFromPropertyName(name_17);
                var declaredType = getIndexedAccessType(parentType, indexType, 32 /* AccessFlags.ExpressionPosition */, name_17);
                type = getFlowTypeOfDestructuring(declaration, declaredType);
            }
        }
        else {
            // This elementType will be used if the specific property corresponding to this index is not
            // present (aka the tuple element property). This call also checks that the parentType is in
            // fact an iterable or array (depending on target language).
            var elementType = checkIteratedTypeOrElementType(65 /* IterationUse.Destructuring */ | (declaration.dotDotDotToken ? 0 : 128 /* IterationUse.PossiblyOutOfBounds */), parentType, undefinedType, pattern);
            var index_2 = pattern.elements.indexOf(declaration);
            if (declaration.dotDotDotToken) {
                // If the parent is a tuple type, the rest element has a tuple type of the
                // remaining tuple element types. Otherwise, the rest element has an array type with same
                // element type as the parent type.
                var baseConstraint = mapType(parentType, function (t) { return t.flags & 58982400 /* TypeFlags.InstantiableNonPrimitive */ ? getBaseConstraintOrType(t) : t; });
                type = everyType(baseConstraint, isTupleType) ?
                    mapType(baseConstraint, function (t) { return sliceTupleType(t, index_2); }) :
                    createArrayType(elementType);
            }
            else if (isArrayLikeType(parentType)) {
                var indexType = getNumberLiteralType(index_2);
                var accessFlags = 32 /* AccessFlags.ExpressionPosition */ | (hasDefaultValue(declaration) ? 16 /* AccessFlags.NoTupleBoundsCheck */ : 0);
                var declaredType = getIndexedAccessTypeOrUndefined(parentType, indexType, accessFlags, declaration.name) || errorType;
                type = getFlowTypeOfDestructuring(declaration, declaredType);
            }
            else {
                type = elementType;
            }
        }
        if (!declaration.initializer) {
            return type;
        }
        if ((0, ts_1.getEffectiveTypeAnnotationNode)((0, ts_1.walkUpBindingElementsAndPatterns)(declaration))) {
            // In strict null checking mode, if a default value of a non-undefined type is specified, remove
            // undefined from the final type.
            return strictNullChecks && !(getTypeFacts(checkDeclarationInitializer(declaration, 0 /* CheckMode.Normal */)) & 16777216 /* TypeFacts.IsUndefined */) ? getNonUndefinedType(type) : type;
        }
        return widenTypeInferredFromInitializer(declaration, getUnionType([getNonUndefinedType(type), checkDeclarationInitializer(declaration, 0 /* CheckMode.Normal */)], 2 /* UnionReduction.Subtype */));
    }
    function getTypeForDeclarationFromJSDocComment(declaration) {
        var jsdocType = (0, ts_1.getJSDocType)(declaration);
        if (jsdocType) {
            return getTypeFromTypeNode(jsdocType);
        }
        return undefined;
    }
    function isNullOrUndefined(node) {
        var expr = (0, ts_1.skipParentheses)(node, /*excludeJSDocTypeAssertions*/ true);
        return expr.kind === 106 /* SyntaxKind.NullKeyword */ || expr.kind === 80 /* SyntaxKind.Identifier */ && getResolvedSymbol(expr) === undefinedSymbol;
    }
    function isEmptyArrayLiteral(node) {
        var expr = (0, ts_1.skipParentheses)(node, /*excludeJSDocTypeAssertions*/ true);
        return expr.kind === 208 /* SyntaxKind.ArrayLiteralExpression */ && expr.elements.length === 0;
    }
    function addOptionality(type, isProperty, isOptional) {
        if (isProperty === void 0) { isProperty = false; }
        if (isOptional === void 0) { isOptional = true; }
        return strictNullChecks && isOptional ? getOptionalType(type, isProperty) : type;
    }
    // Return the inferred type for a variable, parameter, or property declaration
    function getTypeForVariableLikeDeclaration(declaration, includeOptionality, checkMode) {
        // A variable declared in a for..in statement is of type string, or of type keyof T when the
        // right hand expression is of a type parameter type.
        if ((0, ts_1.isVariableDeclaration)(declaration) && declaration.parent.parent.kind === 248 /* SyntaxKind.ForInStatement */) {
            var indexType = getIndexType(getNonNullableTypeIfNeeded(checkExpression(declaration.parent.parent.expression, /*checkMode*/ checkMode)));
            return indexType.flags & (262144 /* TypeFlags.TypeParameter */ | 4194304 /* TypeFlags.Index */) ? getExtractStringType(indexType) : stringType;
        }
        if ((0, ts_1.isVariableDeclaration)(declaration) && declaration.parent.parent.kind === 249 /* SyntaxKind.ForOfStatement */) {
            // checkRightHandSideOfForOf will return undefined if the for-of expression type was
            // missing properties/signatures required to get its iteratedType (like
            // [Symbol.iterator] or next). This may be because we accessed properties from anyType,
            // or it may have led to an error inside getElementTypeOfIterable.
            var forOfStatement = declaration.parent.parent;
            return checkRightHandSideOfForOf(forOfStatement) || anyType;
        }
        if ((0, ts_1.isBindingPattern)(declaration.parent)) {
            return getTypeForBindingElement(declaration);
        }
        var isProperty = ((0, ts_1.isPropertyDeclaration)(declaration) && !(0, ts_1.hasAccessorModifier)(declaration)) || (0, ts_1.isPropertySignature)(declaration) || (0, ts_1.isJSDocPropertyTag)(declaration);
        var isOptional = includeOptionality && (0, ts_1.isOptionalDeclaration)(declaration);
        // Use type from type annotation if one is present
        var declaredType = tryGetTypeFromEffectiveTypeNode(declaration);
        if ((0, ts_1.isCatchClauseVariableDeclarationOrBindingElement)(declaration)) {
            if (declaredType) {
                // If the catch clause is explicitly annotated with any or unknown, accept it, otherwise error.
                return isTypeAny(declaredType) || declaredType === unknownType ? declaredType : errorType;
            }
            // If the catch clause is not explicitly annotated, treat it as though it were explicitly
            // annotated with unknown or any, depending on useUnknownInCatchVariables.
            return useUnknownInCatchVariables ? unknownType : anyType;
        }
        if (declaredType) {
            return addOptionality(declaredType, isProperty, isOptional);
        }
        if ((noImplicitAny || (0, ts_1.isInJSFile)(declaration)) &&
            (0, ts_1.isVariableDeclaration)(declaration) && !(0, ts_1.isBindingPattern)(declaration.name) &&
            !((0, ts_1.getCombinedModifierFlags)(declaration) & 1 /* ModifierFlags.Export */) && !(declaration.flags & 16777216 /* NodeFlags.Ambient */)) {
            // If --noImplicitAny is on or the declaration is in a Javascript file,
            // use control flow tracked 'any' type for non-ambient, non-exported var or let variables with no
            // initializer or a 'null' or 'undefined' initializer.
            if (!((0, ts_1.getCombinedNodeFlags)(declaration) & 2 /* NodeFlags.Const */) && (!declaration.initializer || isNullOrUndefined(declaration.initializer))) {
                return autoType;
            }
            // Use control flow tracked 'any[]' type for non-ambient, non-exported variables with an empty array
            // literal initializer.
            if (declaration.initializer && isEmptyArrayLiteral(declaration.initializer)) {
                return autoArrayType;
            }
        }
        if ((0, ts_1.isParameter)(declaration)) {
            var func = declaration.parent;
            // For a parameter of a set accessor, use the type of the get accessor if one is present
            if (func.kind === 177 /* SyntaxKind.SetAccessor */ && hasBindableName(func)) {
                var getter = (0, ts_1.getDeclarationOfKind)(getSymbolOfDeclaration(declaration.parent), 176 /* SyntaxKind.GetAccessor */);
                if (getter) {
                    var getterSignature = getSignatureFromDeclaration(getter);
                    var thisParameter = getAccessorThisParameter(func);
                    if (thisParameter && declaration === thisParameter) {
                        // Use the type from the *getter*
                        ts_1.Debug.assert(!thisParameter.type);
                        return getTypeOfSymbol(getterSignature.thisParameter);
                    }
                    return getReturnTypeOfSignature(getterSignature);
                }
            }
            var parameterTypeOfTypeTag = getParameterTypeOfTypeTag(func, declaration);
            if (parameterTypeOfTypeTag)
                return parameterTypeOfTypeTag;
            // Use contextual parameter type if one is available
            var type = declaration.symbol.escapedName === "this" /* InternalSymbolName.This */ ? getContextualThisParameterType(func) : getContextuallyTypedParameterType(declaration);
            if (type) {
                return addOptionality(type, /*isProperty*/ false, isOptional);
            }
        }
        // Use the type of the initializer expression if one is present and the declaration is
        // not a parameter of a contextually typed function
        if ((0, ts_1.hasOnlyExpressionInitializer)(declaration) && !!declaration.initializer) {
            if ((0, ts_1.isInJSFile)(declaration) && !(0, ts_1.isParameter)(declaration)) {
                var containerObjectType = getJSContainerObjectType(declaration, getSymbolOfDeclaration(declaration), (0, ts_1.getDeclaredExpandoInitializer)(declaration));
                if (containerObjectType) {
                    return containerObjectType;
                }
            }
            var type = widenTypeInferredFromInitializer(declaration, checkDeclarationInitializer(declaration, checkMode));
            return addOptionality(type, isProperty, isOptional);
        }
        if ((0, ts_1.isPropertyDeclaration)(declaration) && (noImplicitAny || (0, ts_1.isInJSFile)(declaration))) {
            // We have a property declaration with no type annotation or initializer, in noImplicitAny mode or a .js file.
            // Use control flow analysis of this.xxx assignments in the constructor or static block to determine the type of the property.
            if (!(0, ts_1.hasStaticModifier)(declaration)) {
                var constructor = findConstructorDeclaration(declaration.parent);
                var type = constructor ? getFlowTypeInConstructor(declaration.symbol, constructor) :
                    (0, ts_1.getEffectiveModifierFlags)(declaration) & 2 /* ModifierFlags.Ambient */ ? getTypeOfPropertyInBaseClass(declaration.symbol) :
                        undefined;
                return type && addOptionality(type, /*isProperty*/ true, isOptional);
            }
            else {
                var staticBlocks = (0, ts_1.filter)(declaration.parent.members, ts_1.isClassStaticBlockDeclaration);
                var type = staticBlocks.length ? getFlowTypeInStaticBlocks(declaration.symbol, staticBlocks) :
                    (0, ts_1.getEffectiveModifierFlags)(declaration) & 2 /* ModifierFlags.Ambient */ ? getTypeOfPropertyInBaseClass(declaration.symbol) :
                        undefined;
                return type && addOptionality(type, /*isProperty*/ true, isOptional);
            }
        }
        if ((0, ts_1.isJsxAttribute)(declaration)) {
            // if JSX attribute doesn't have initializer, by default the attribute will have boolean value of true.
            // I.e <Elem attr /> is sugar for <Elem attr={true} />
            return trueType;
        }
        // If the declaration specifies a binding pattern and is not a parameter of a contextually
        // typed function, use the type implied by the binding pattern
        if ((0, ts_1.isBindingPattern)(declaration.name)) {
            return getTypeFromBindingPattern(declaration.name, /*includePatternInType*/ false, /*reportErrors*/ true);
        }
        // No type specified and nothing can be inferred
        return undefined;
    }
    function isConstructorDeclaredProperty(symbol) {
        // A property is considered a constructor declared property when all declaration sites are this.xxx assignments,
        // when no declaration sites have JSDoc type annotations, and when at least one declaration site is in the body of
        // a class constructor.
        if (symbol.valueDeclaration && (0, ts_1.isBinaryExpression)(symbol.valueDeclaration)) {
            var links = getSymbolLinks(symbol);
            if (links.isConstructorDeclaredProperty === undefined) {
                links.isConstructorDeclaredProperty = false;
                links.isConstructorDeclaredProperty = !!getDeclaringConstructor(symbol) && (0, ts_1.every)(symbol.declarations, function (declaration) {
                    return (0, ts_1.isBinaryExpression)(declaration) &&
                        isPossiblyAliasedThisProperty(declaration) &&
                        (declaration.left.kind !== 211 /* SyntaxKind.ElementAccessExpression */ || (0, ts_1.isStringOrNumericLiteralLike)(declaration.left.argumentExpression)) &&
                        !getAnnotatedTypeForAssignmentDeclaration(/*declaredType*/ undefined, declaration, symbol, declaration);
                });
            }
            return links.isConstructorDeclaredProperty;
        }
        return false;
    }
    function isAutoTypedProperty(symbol) {
        // A property is auto-typed when its declaration has no type annotation or initializer and we're in
        // noImplicitAny mode or a .js file.
        var declaration = symbol.valueDeclaration;
        return declaration && (0, ts_1.isPropertyDeclaration)(declaration) && !(0, ts_1.getEffectiveTypeAnnotationNode)(declaration) &&
            !declaration.initializer && (noImplicitAny || (0, ts_1.isInJSFile)(declaration));
    }
    function getDeclaringConstructor(symbol) {
        if (!symbol.declarations) {
            return;
        }
        for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {
            var declaration = _a[_i];
            var container = (0, ts_1.getThisContainer)(declaration, /*includeArrowFunctions*/ false, /*includeClassComputedPropertyName*/ false);
            if (container && (container.kind === 175 /* SyntaxKind.Constructor */ || isJSConstructor(container))) {
                return container;
            }
        }
    }
    /** Create a synthetic property access flow node after the last statement of the file */
    function getFlowTypeFromCommonJSExport(symbol) {
        var file = (0, ts_1.getSourceFileOfNode)(symbol.declarations[0]);
        var accessName = (0, ts_1.unescapeLeadingUnderscores)(symbol.escapedName);
        var areAllModuleExports = symbol.declarations.every(function (d) { return (0, ts_1.isInJSFile)(d) && (0, ts_1.isAccessExpression)(d) && (0, ts_1.isModuleExportsAccessExpression)(d.expression); });
        var reference = areAllModuleExports
            ? ts_1.factory.createPropertyAccessExpression(ts_1.factory.createPropertyAccessExpression(ts_1.factory.createIdentifier("module"), ts_1.factory.createIdentifier("exports")), accessName)
            : ts_1.factory.createPropertyAccessExpression(ts_1.factory.createIdentifier("exports"), accessName);
        if (areAllModuleExports) {
            (0, ts_1.setParent)(reference.expression.expression, reference.expression);
        }
        (0, ts_1.setParent)(reference.expression, reference);
        (0, ts_1.setParent)(reference, file);
        reference.flowNode = file.endFlowNode;
        return getFlowTypeOfReference(reference, autoType, undefinedType);
    }
    function getFlowTypeInStaticBlocks(symbol, staticBlocks) {
        var accessName = (0, ts_1.startsWith)(symbol.escapedName, "__#")
            ? ts_1.factory.createPrivateIdentifier(symbol.escapedName.split("@")[1])
            : (0, ts_1.unescapeLeadingUnderscores)(symbol.escapedName);
        for (var _i = 0, staticBlocks_1 = staticBlocks; _i < staticBlocks_1.length; _i++) {
            var staticBlock = staticBlocks_1[_i];
            var reference = ts_1.factory.createPropertyAccessExpression(ts_1.factory.createThis(), accessName);
            (0, ts_1.setParent)(reference.expression, reference);
            (0, ts_1.setParent)(reference, staticBlock);
            reference.flowNode = staticBlock.returnFlowNode;
            var flowType = getFlowTypeOfProperty(reference, symbol);
            if (noImplicitAny && (flowType === autoType || flowType === autoArrayType)) {
                error(symbol.valueDeclaration, ts_1.Diagnostics.Member_0_implicitly_has_an_1_type, symbolToString(symbol), typeToString(flowType));
            }
            // We don't infer a type if assignments are only null or undefined.
            if (everyType(flowType, isNullableType)) {
                continue;
            }
            return convertAutoToAny(flowType);
        }
    }
    function getFlowTypeInConstructor(symbol, constructor) {
        var accessName = (0, ts_1.startsWith)(symbol.escapedName, "__#")
            ? ts_1.factory.createPrivateIdentifier(symbol.escapedName.split("@")[1])
            : (0, ts_1.unescapeLeadingUnderscores)(symbol.escapedName);
        var reference = ts_1.factory.createPropertyAccessExpression(ts_1.factory.createThis(), accessName);
        (0, ts_1.setParent)(reference.expression, reference);
        (0, ts_1.setParent)(reference, constructor);
        reference.flowNode = constructor.returnFlowNode;
        var flowType = getFlowTypeOfProperty(reference, symbol);
        if (noImplicitAny && (flowType === autoType || flowType === autoArrayType)) {
            error(symbol.valueDeclaration, ts_1.Diagnostics.Member_0_implicitly_has_an_1_type, symbolToString(symbol), typeToString(flowType));
        }
        // We don't infer a type if assignments are only null or undefined.
        return everyType(flowType, isNullableType) ? undefined : convertAutoToAny(flowType);
    }
    function getFlowTypeOfProperty(reference, prop) {
        var initialType = (prop === null || prop === void 0 ? void 0 : prop.valueDeclaration)
            && (!isAutoTypedProperty(prop) || (0, ts_1.getEffectiveModifierFlags)(prop.valueDeclaration) & 2 /* ModifierFlags.Ambient */)
            && getTypeOfPropertyInBaseClass(prop)
            || undefinedType;
        return getFlowTypeOfReference(reference, autoType, initialType);
    }
    function getWidenedTypeForAssignmentDeclaration(symbol, resolvedSymbol) {
        // function/class/{} initializers are themselves containers, so they won't merge in the same way as other initializers
        var container = (0, ts_1.getAssignedExpandoInitializer)(symbol.valueDeclaration);
        if (container) {
            var tag = (0, ts_1.isInJSFile)(container) ? (0, ts_1.getJSDocTypeTag)(container) : undefined;
            if (tag && tag.typeExpression) {
                return getTypeFromTypeNode(tag.typeExpression);
            }
            var containerObjectType = symbol.valueDeclaration && getJSContainerObjectType(symbol.valueDeclaration, symbol, container);
            return containerObjectType || getWidenedLiteralType(checkExpressionCached(container));
        }
        var type;
        var definedInConstructor = false;
        var definedInMethod = false;
        // We use control flow analysis to determine the type of the property if the property qualifies as a constructor
        // declared property and the resulting control flow type isn't just undefined or null.
        if (isConstructorDeclaredProperty(symbol)) {
            type = getFlowTypeInConstructor(symbol, getDeclaringConstructor(symbol));
        }
        if (!type) {
            var types = void 0;
            if (symbol.declarations) {
                var jsdocType = void 0;
                for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {
                    var declaration = _a[_i];
                    var expression = ((0, ts_1.isBinaryExpression)(declaration) || (0, ts_1.isCallExpression)(declaration)) ? declaration :
                        (0, ts_1.isAccessExpression)(declaration) ? (0, ts_1.isBinaryExpression)(declaration.parent) ? declaration.parent : declaration :
                            undefined;
                    if (!expression) {
                        continue; // Non-assignment declaration merged in (eg, an Identifier to mark the thing as a namespace) - skip over it and pull type info from elsewhere
                    }
                    var kind = (0, ts_1.isAccessExpression)(expression)
                        ? (0, ts_1.getAssignmentDeclarationPropertyAccessKind)(expression)
                        : (0, ts_1.getAssignmentDeclarationKind)(expression);
                    if (kind === 4 /* AssignmentDeclarationKind.ThisProperty */ || (0, ts_1.isBinaryExpression)(expression) && isPossiblyAliasedThisProperty(expression, kind)) {
                        if (isDeclarationInConstructor(expression)) {
                            definedInConstructor = true;
                        }
                        else {
                            definedInMethod = true;
                        }
                    }
                    if (!(0, ts_1.isCallExpression)(expression)) {
                        jsdocType = getAnnotatedTypeForAssignmentDeclaration(jsdocType, expression, symbol, declaration);
                    }
                    if (!jsdocType) {
                        (types || (types = [])).push(((0, ts_1.isBinaryExpression)(expression) || (0, ts_1.isCallExpression)(expression)) ? getInitializerTypeFromAssignmentDeclaration(symbol, resolvedSymbol, expression, kind) : neverType);
                    }
                }
                type = jsdocType;
            }
            if (!type) {
                if (!(0, ts_1.length)(types)) {
                    return errorType; // No types from any declarations :(
                }
                var constructorTypes = definedInConstructor && symbol.declarations ? getConstructorDefinedThisAssignmentTypes(types, symbol.declarations) : undefined;
                // use only the constructor types unless they were only assigned null | undefined (including widening variants)
                if (definedInMethod) {
                    var propType = getTypeOfPropertyInBaseClass(symbol);
                    if (propType) {
                        (constructorTypes || (constructorTypes = [])).push(propType);
                        definedInConstructor = true;
                    }
                }
                var sourceTypes = (0, ts_1.some)(constructorTypes, function (t) { return !!(t.flags & ~98304 /* TypeFlags.Nullable */); }) ? constructorTypes : types; // TODO: GH#18217
                type = getUnionType(sourceTypes);
            }
        }
        var widened = getWidenedType(addOptionality(type, /*isProperty*/ false, definedInMethod && !definedInConstructor));
        if (symbol.valueDeclaration && filterType(widened, function (t) { return !!(t.flags & ~98304 /* TypeFlags.Nullable */); }) === neverType) {
            reportImplicitAny(symbol.valueDeclaration, anyType);
            return anyType;
        }
        return widened;
    }
    function getJSContainerObjectType(decl, symbol, init) {
        var _a, _b;
        if (!(0, ts_1.isInJSFile)(decl) || !init || !(0, ts_1.isObjectLiteralExpression)(init) || init.properties.length) {
            return undefined;
        }
        var exports = (0, ts_1.createSymbolTable)();
        while ((0, ts_1.isBinaryExpression)(decl) || (0, ts_1.isPropertyAccessExpression)(decl)) {
            var s_1 = getSymbolOfNode(decl);
            if ((_a = s_1 === null || s_1 === void 0 ? void 0 : s_1.exports) === null || _a === void 0 ? void 0 : _a.size) {
                mergeSymbolTable(exports, s_1.exports);
            }
            decl = (0, ts_1.isBinaryExpression)(decl) ? decl.parent : decl.parent.parent;
        }
        var s = getSymbolOfNode(decl);
        if ((_b = s === null || s === void 0 ? void 0 : s.exports) === null || _b === void 0 ? void 0 : _b.size) {
            mergeSymbolTable(exports, s.exports);
        }
        var type = createAnonymousType(symbol, exports, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
        type.objectFlags |= 4096 /* ObjectFlags.JSLiteral */;
        return type;
    }
    function getAnnotatedTypeForAssignmentDeclaration(declaredType, expression, symbol, declaration) {
        var _a;
        var typeNode = (0, ts_1.getEffectiveTypeAnnotationNode)(expression.parent);
        if (typeNode) {
            var type = getWidenedType(getTypeFromTypeNode(typeNode));
            if (!declaredType) {
                return type;
            }
            else if (!isErrorType(declaredType) && !isErrorType(type) && !isTypeIdenticalTo(declaredType, type)) {
                errorNextVariableOrPropertyDeclarationMustHaveSameType(/*firstDeclaration*/ undefined, declaredType, declaration, type);
            }
        }
        if ((_a = symbol.parent) === null || _a === void 0 ? void 0 : _a.valueDeclaration) {
            var typeNode_2 = (0, ts_1.getEffectiveTypeAnnotationNode)(symbol.parent.valueDeclaration);
            if (typeNode_2) {
                var annotationSymbol = getPropertyOfType(getTypeFromTypeNode(typeNode_2), symbol.escapedName);
                if (annotationSymbol) {
                    return getNonMissingTypeOfSymbol(annotationSymbol);
                }
            }
        }
        return declaredType;
    }
    /** If we don't have an explicit JSDoc type, get the type from the initializer. */
    function getInitializerTypeFromAssignmentDeclaration(symbol, resolvedSymbol, expression, kind) {
        if ((0, ts_1.isCallExpression)(expression)) {
            if (resolvedSymbol) {
                return getTypeOfSymbol(resolvedSymbol); // This shouldn't happen except under some hopefully forbidden merges of export assignments and object define assignments
            }
            var objectLitType = checkExpressionCached(expression.arguments[2]);
            var valueType = getTypeOfPropertyOfType(objectLitType, "value");
            if (valueType) {
                return valueType;
            }
            var getFunc = getTypeOfPropertyOfType(objectLitType, "get");
            if (getFunc) {
                var getSig = getSingleCallSignature(getFunc);
                if (getSig) {
                    return getReturnTypeOfSignature(getSig);
                }
            }
            var setFunc = getTypeOfPropertyOfType(objectLitType, "set");
            if (setFunc) {
                var setSig = getSingleCallSignature(setFunc);
                if (setSig) {
                    return getTypeOfFirstParameterOfSignature(setSig);
                }
            }
            return anyType;
        }
        if (containsSameNamedThisProperty(expression.left, expression.right)) {
            return anyType;
        }
        var isDirectExport = kind === 1 /* AssignmentDeclarationKind.ExportsProperty */ && ((0, ts_1.isPropertyAccessExpression)(expression.left) || (0, ts_1.isElementAccessExpression)(expression.left)) && ((0, ts_1.isModuleExportsAccessExpression)(expression.left.expression) || ((0, ts_1.isIdentifier)(expression.left.expression) && (0, ts_1.isExportsIdentifier)(expression.left.expression)));
        var type = resolvedSymbol ? getTypeOfSymbol(resolvedSymbol)
            : isDirectExport ? getRegularTypeOfLiteralType(checkExpressionCached(expression.right))
                : getWidenedLiteralType(checkExpressionCached(expression.right));
        if (type.flags & 524288 /* TypeFlags.Object */ &&
            kind === 2 /* AssignmentDeclarationKind.ModuleExports */ &&
            symbol.escapedName === "export=" /* InternalSymbolName.ExportEquals */) {
            var exportedType = resolveStructuredTypeMembers(type);
            var members_2 = (0, ts_1.createSymbolTable)();
            (0, ts_1.copyEntries)(exportedType.members, members_2);
            var initialSize = members_2.size;
            if (resolvedSymbol && !resolvedSymbol.exports) {
                resolvedSymbol.exports = (0, ts_1.createSymbolTable)();
            }
            (resolvedSymbol || symbol).exports.forEach(function (s, name) {
                var _a;
                var exportedMember = members_2.get(name);
                if (exportedMember && exportedMember !== s && !(s.flags & 2097152 /* SymbolFlags.Alias */)) {
                    if (s.flags & 111551 /* SymbolFlags.Value */ && exportedMember.flags & 111551 /* SymbolFlags.Value */) {
                        // If the member has an additional value-like declaration, union the types from the two declarations,
                        // but issue an error if they occurred in two different files. The purpose is to support a JS file with
                        // a pattern like:
                        //
                        // module.exports = { a: true };
                        // module.exports.a = 3;
                        //
                        // but we may have a JS file with `module.exports = { a: true }` along with a TypeScript module augmentation
                        // declaring an `export const a: number`. In that case, we issue a duplicate identifier error, because
                        // it's unclear what that's supposed to mean, so it's probably a mistake.
                        if (s.valueDeclaration && exportedMember.valueDeclaration && (0, ts_1.getSourceFileOfNode)(s.valueDeclaration) !== (0, ts_1.getSourceFileOfNode)(exportedMember.valueDeclaration)) {
                            var unescapedName = (0, ts_1.unescapeLeadingUnderscores)(s.escapedName);
                            var exportedMemberName = ((_a = (0, ts_1.tryCast)(exportedMember.valueDeclaration, ts_1.isNamedDeclaration)) === null || _a === void 0 ? void 0 : _a.name) || exportedMember.valueDeclaration;
                            (0, ts_1.addRelatedInfo)(error(s.valueDeclaration, ts_1.Diagnostics.Duplicate_identifier_0, unescapedName), (0, ts_1.createDiagnosticForNode)(exportedMemberName, ts_1.Diagnostics._0_was_also_declared_here, unescapedName));
                            (0, ts_1.addRelatedInfo)(error(exportedMemberName, ts_1.Diagnostics.Duplicate_identifier_0, unescapedName), (0, ts_1.createDiagnosticForNode)(s.valueDeclaration, ts_1.Diagnostics._0_was_also_declared_here, unescapedName));
                        }
                        var union = createSymbol(s.flags | exportedMember.flags, name);
                        union.links.type = getUnionType([getTypeOfSymbol(s), getTypeOfSymbol(exportedMember)]);
                        union.valueDeclaration = exportedMember.valueDeclaration;
                        union.declarations = (0, ts_1.concatenate)(exportedMember.declarations, s.declarations);
                        members_2.set(name, union);
                    }
                    else {
                        members_2.set(name, mergeSymbol(s, exportedMember));
                    }
                }
                else {
                    members_2.set(name, s);
                }
            });
            var result = createAnonymousType(initialSize !== members_2.size ? undefined : exportedType.symbol, // Only set the type's symbol if it looks to be the same as the original type
            members_2, exportedType.callSignatures, exportedType.constructSignatures, exportedType.indexInfos);
            if (initialSize === members_2.size) {
                if (type.aliasSymbol) {
                    result.aliasSymbol = type.aliasSymbol;
                    result.aliasTypeArguments = type.aliasTypeArguments;
                }
                if ((0, ts_1.getObjectFlags)(type) & 4 /* ObjectFlags.Reference */) {
                    result.aliasSymbol = type.symbol;
                    var args = getTypeArguments(type);
                    result.aliasTypeArguments = (0, ts_1.length)(args) ? args : undefined;
                }
            }
            result.objectFlags |= ((0, ts_1.getObjectFlags)(type) & 4096 /* ObjectFlags.JSLiteral */); // Propagate JSLiteral flag
            if (result.symbol && result.symbol.flags & 32 /* SymbolFlags.Class */ && type === getDeclaredTypeOfClassOrInterface(result.symbol)) {
                result.objectFlags |= 16777216 /* ObjectFlags.IsClassInstanceClone */; // Propagate the knowledge that this type is equivalent to the symbol's class instance type
            }
            return result;
        }
        if (isEmptyArrayLiteralType(type)) {
            reportImplicitAny(expression, anyArrayType);
            return anyArrayType;
        }
        return type;
    }
    function containsSameNamedThisProperty(thisProperty, expression) {
        return (0, ts_1.isPropertyAccessExpression)(thisProperty)
            && thisProperty.expression.kind === 110 /* SyntaxKind.ThisKeyword */
            && (0, ts_1.forEachChildRecursively)(expression, function (n) { return isMatchingReference(thisProperty, n); });
    }
    function isDeclarationInConstructor(expression) {
        var thisContainer = (0, ts_1.getThisContainer)(expression, /*includeArrowFunctions*/ false, /*includeClassComputedPropertyName*/ false);
        // Properties defined in a constructor (or base constructor, or javascript constructor function) don't get undefined added.
        // Function expressions that are assigned to the prototype count as methods.
        return thisContainer.kind === 175 /* SyntaxKind.Constructor */ ||
            thisContainer.kind === 261 /* SyntaxKind.FunctionDeclaration */ ||
            (thisContainer.kind === 217 /* SyntaxKind.FunctionExpression */ && !(0, ts_1.isPrototypePropertyAssignment)(thisContainer.parent));
    }
    function getConstructorDefinedThisAssignmentTypes(types, declarations) {
        ts_1.Debug.assert(types.length === declarations.length);
        return types.filter(function (_, i) {
            var declaration = declarations[i];
            var expression = (0, ts_1.isBinaryExpression)(declaration) ? declaration :
                (0, ts_1.isBinaryExpression)(declaration.parent) ? declaration.parent : undefined;
            return expression && isDeclarationInConstructor(expression);
        });
    }
    // Return the type implied by a binding pattern element. This is the type of the initializer of the element if
    // one is present. Otherwise, if the element is itself a binding pattern, it is the type implied by the binding
    // pattern. Otherwise, it is the type any.
    function getTypeFromBindingElement(element, includePatternInType, reportErrors) {
        if (element.initializer) {
            // The type implied by a binding pattern is independent of context, so we check the initializer with no
            // contextual type or, if the element itself is a binding pattern, with the type implied by that binding
            // pattern.
            var contextualType = (0, ts_1.isBindingPattern)(element.name) ? getTypeFromBindingPattern(element.name, /*includePatternInType*/ true, /*reportErrors*/ false) : unknownType;
            return addOptionality(widenTypeInferredFromInitializer(element, checkDeclarationInitializer(element, 0 /* CheckMode.Normal */, contextualType)));
        }
        if ((0, ts_1.isBindingPattern)(element.name)) {
            return getTypeFromBindingPattern(element.name, includePatternInType, reportErrors);
        }
        if (reportErrors && !declarationBelongsToPrivateAmbientMember(element)) {
            reportImplicitAny(element, anyType);
        }
        // When we're including the pattern in the type (an indication we're obtaining a contextual type), we
        // use a non-inferrable any type. Inference will never directly infer this type, but it is possible
        // to infer a type that contains it, e.g. for a binding pattern like [foo] or { foo }. In such cases,
        // widening of the binding pattern type substitutes a regular any for the non-inferrable any.
        return includePatternInType ? nonInferrableAnyType : anyType;
    }
    // Return the type implied by an object binding pattern
    function getTypeFromObjectBindingPattern(pattern, includePatternInType, reportErrors) {
        var members = (0, ts_1.createSymbolTable)();
        var stringIndexInfo;
        var objectFlags = 128 /* ObjectFlags.ObjectLiteral */ | 131072 /* ObjectFlags.ContainsObjectOrArrayLiteral */;
        (0, ts_1.forEach)(pattern.elements, function (e) {
            var name = e.propertyName || e.name;
            if (e.dotDotDotToken) {
                stringIndexInfo = createIndexInfo(stringType, anyType, /*isReadonly*/ false);
                return;
            }
            var exprType = getLiteralTypeFromPropertyName(name);
            if (!isTypeUsableAsPropertyName(exprType)) {
                // do not include computed properties in the implied type
                objectFlags |= 512 /* ObjectFlags.ObjectLiteralPatternWithComputedProperties */;
                return;
            }
            var text = getPropertyNameFromType(exprType);
            var flags = 4 /* SymbolFlags.Property */ | (e.initializer ? 16777216 /* SymbolFlags.Optional */ : 0);
            var symbol = createSymbol(flags, text);
            symbol.links.type = getTypeFromBindingElement(e, includePatternInType, reportErrors);
            symbol.links.bindingElement = e;
            members.set(symbol.escapedName, symbol);
        });
        var result = createAnonymousType(/*symbol*/ undefined, members, ts_1.emptyArray, ts_1.emptyArray, stringIndexInfo ? [stringIndexInfo] : ts_1.emptyArray);
        result.objectFlags |= objectFlags;
        if (includePatternInType) {
            result.pattern = pattern;
            result.objectFlags |= 131072 /* ObjectFlags.ContainsObjectOrArrayLiteral */;
        }
        return result;
    }
    // Return the type implied by an array binding pattern
    function getTypeFromArrayBindingPattern(pattern, includePatternInType, reportErrors) {
        var elements = pattern.elements;
        var lastElement = (0, ts_1.lastOrUndefined)(elements);
        var restElement = lastElement && lastElement.kind === 207 /* SyntaxKind.BindingElement */ && lastElement.dotDotDotToken ? lastElement : undefined;
        if (elements.length === 0 || elements.length === 1 && restElement) {
            return languageVersion >= 2 /* ScriptTarget.ES2015 */ ? createIterableType(anyType) : anyArrayType;
        }
        var elementTypes = (0, ts_1.map)(elements, function (e) { return (0, ts_1.isOmittedExpression)(e) ? anyType : getTypeFromBindingElement(e, includePatternInType, reportErrors); });
        var minLength = (0, ts_1.findLastIndex)(elements, function (e) { return !(e === restElement || (0, ts_1.isOmittedExpression)(e) || hasDefaultValue(e)); }, elements.length - 1) + 1;
        var elementFlags = (0, ts_1.map)(elements, function (e, i) { return e === restElement ? 4 /* ElementFlags.Rest */ : i >= minLength ? 2 /* ElementFlags.Optional */ : 1 /* ElementFlags.Required */; });
        var result = createTupleType(elementTypes, elementFlags);
        if (includePatternInType) {
            result = cloneTypeReference(result);
            result.pattern = pattern;
            result.objectFlags |= 131072 /* ObjectFlags.ContainsObjectOrArrayLiteral */;
        }
        return result;
    }
    // Return the type implied by a binding pattern. This is the type implied purely by the binding pattern itself
    // and without regard to its context (i.e. without regard any type annotation or initializer associated with the
    // declaration in which the binding pattern is contained). For example, the implied type of [x, y] is [any, any]
    // and the implied type of { x, y: z = 1 } is { x: any; y: number; }. The type implied by a binding pattern is
    // used as the contextual type of an initializer associated with the binding pattern. Also, for a destructuring
    // parameter with no type annotation or initializer, the type implied by the binding pattern becomes the type of
    // the parameter.
    function getTypeFromBindingPattern(pattern, includePatternInType, reportErrors) {
        if (includePatternInType === void 0) { includePatternInType = false; }
        if (reportErrors === void 0) { reportErrors = false; }
        return pattern.kind === 205 /* SyntaxKind.ObjectBindingPattern */
            ? getTypeFromObjectBindingPattern(pattern, includePatternInType, reportErrors)
            : getTypeFromArrayBindingPattern(pattern, includePatternInType, reportErrors);
    }
    // Return the type associated with a variable, parameter, or property declaration. In the simple case this is the type
    // specified in a type annotation or inferred from an initializer. However, in the case of a destructuring declaration it
    // is a bit more involved. For example:
    //
    //   var [x, s = ""] = [1, "one"];
    //
    // Here, the array literal [1, "one"] is contextually typed by the type [any, string], which is the implied type of the
    // binding pattern [x, s = ""]. Because the contextual type is a tuple type, the resulting type of [1, "one"] is the
    // tuple type [number, string]. Thus, the type inferred for 'x' is number and the type inferred for 's' is string.
    function getWidenedTypeForVariableLikeDeclaration(declaration, reportErrors) {
        return widenTypeForVariableLikeDeclaration(getTypeForVariableLikeDeclaration(declaration, /*includeOptionality*/ true, 0 /* CheckMode.Normal */), declaration, reportErrors);
    }
    function isGlobalSymbolConstructor(node) {
        var symbol = getSymbolOfNode(node);
        var globalSymbol = getGlobalESSymbolConstructorTypeSymbol(/*reportErrors*/ false);
        return globalSymbol && symbol && symbol === globalSymbol;
    }
    function widenTypeForVariableLikeDeclaration(type, declaration, reportErrors) {
        if (type) {
            // TODO: If back compat with pre-3.0/4.0 libs isn't required, remove the following SymbolConstructor special case transforming `symbol` into `unique symbol`
            if (type.flags & 4096 /* TypeFlags.ESSymbol */ && isGlobalSymbolConstructor(declaration.parent)) {
                type = getESSymbolLikeTypeForNode(declaration);
            }
            if (reportErrors) {
                reportErrorsFromWidening(declaration, type);
            }
            // always widen a 'unique symbol' type if the type was created for a different declaration.
            if (type.flags & 8192 /* TypeFlags.UniqueESSymbol */ && ((0, ts_1.isBindingElement)(declaration) || !declaration.type) && type.symbol !== getSymbolOfDeclaration(declaration)) {
                type = esSymbolType;
            }
            return getWidenedType(type);
        }
        // Rest parameters default to type any[], other parameters default to type any
        type = (0, ts_1.isParameter)(declaration) && declaration.dotDotDotToken ? anyArrayType : anyType;
        // Report implicit any errors unless this is a private property within an ambient declaration
        if (reportErrors) {
            if (!declarationBelongsToPrivateAmbientMember(declaration)) {
                reportImplicitAny(declaration, type);
            }
        }
        return type;
    }
    function declarationBelongsToPrivateAmbientMember(declaration) {
        var root = (0, ts_1.getRootDeclaration)(declaration);
        var memberDeclaration = root.kind === 168 /* SyntaxKind.Parameter */ ? root.parent : root;
        return isPrivateWithinAmbient(memberDeclaration);
    }
    function tryGetTypeFromEffectiveTypeNode(node) {
        var typeNode = (0, ts_1.getEffectiveTypeAnnotationNode)(node);
        if (typeNode) {
            return getTypeFromTypeNode(typeNode);
        }
    }
    function isParameterOfContextSensitiveSignature(symbol) {
        var decl = symbol.valueDeclaration;
        if (!decl) {
            return false;
        }
        if ((0, ts_1.isBindingElement)(decl)) {
            decl = (0, ts_1.walkUpBindingElementsAndPatterns)(decl);
        }
        if ((0, ts_1.isParameter)(decl)) {
            return isContextSensitiveFunctionOrObjectLiteralMethod(decl.parent);
        }
        return false;
    }
    function getTypeOfVariableOrParameterOrProperty(symbol) {
        var links = getSymbolLinks(symbol);
        if (!links.type) {
            var type = getTypeOfVariableOrParameterOrPropertyWorker(symbol);
            // For a contextually typed parameter it is possible that a type has already
            // been assigned (in assignTypeToParameterAndFixTypeParameters), and we want
            // to preserve this type. In fact, we need to _prefer_ that type, but it won't
            // be assigned until contextual typing is complete, so we need to defer in
            // cases where contextual typing may take place.
            if (!links.type && !isParameterOfContextSensitiveSignature(symbol)) {
                links.type = type;
            }
            return type;
        }
        return links.type;
    }
    function getTypeOfVariableOrParameterOrPropertyWorker(symbol) {
        // Handle prototype property
        if (symbol.flags & 4194304 /* SymbolFlags.Prototype */) {
            return getTypeOfPrototypeProperty(symbol);
        }
        // CommonsJS require and module both have type any.
        if (symbol === requireSymbol) {
            return anyType;
        }
        if (symbol.flags & 134217728 /* SymbolFlags.ModuleExports */ && symbol.valueDeclaration) {
            var fileSymbol = getSymbolOfDeclaration((0, ts_1.getSourceFileOfNode)(symbol.valueDeclaration));
            var result = createSymbol(fileSymbol.flags, "exports");
            result.declarations = fileSymbol.declarations ? fileSymbol.declarations.slice() : [];
            result.parent = symbol;
            result.links.target = fileSymbol;
            if (fileSymbol.valueDeclaration)
                result.valueDeclaration = fileSymbol.valueDeclaration;
            if (fileSymbol.members)
                result.members = new Map(fileSymbol.members);
            if (fileSymbol.exports)
                result.exports = new Map(fileSymbol.exports);
            var members = (0, ts_1.createSymbolTable)();
            members.set("exports", result);
            return createAnonymousType(symbol, members, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
        }
        ts_1.Debug.assertIsDefined(symbol.valueDeclaration);
        var declaration = symbol.valueDeclaration;
        // Handle export default expressions
        if ((0, ts_1.isSourceFile)(declaration) && (0, ts_1.isJsonSourceFile)(declaration)) {
            if (!declaration.statements.length) {
                return emptyObjectType;
            }
            return getWidenedType(getWidenedLiteralType(checkExpression(declaration.statements[0].expression)));
        }
        if ((0, ts_1.isAccessor)(declaration)) {
            // Binding of certain patterns in JS code will occasionally mark symbols as both properties
            // and accessors. Here we dispatch to accessor resolution if needed.
            return getTypeOfAccessors(symbol);
        }
        // Handle variable, parameter or property
        if (!pushTypeResolution(symbol, 0 /* TypeSystemPropertyName.Type */)) {
            // Symbol is property of some kind that is merged with something - should use `getTypeOfFuncClassEnumModule` and not `getTypeOfVariableOrParameterOrProperty`
            if (symbol.flags & 512 /* SymbolFlags.ValueModule */ && !(symbol.flags & 67108864 /* SymbolFlags.Assignment */)) {
                return getTypeOfFuncClassEnumModule(symbol);
            }
            return reportCircularityError(symbol);
        }
        var type;
        if (declaration.kind === 276 /* SyntaxKind.ExportAssignment */) {
            type = widenTypeForVariableLikeDeclaration(tryGetTypeFromEffectiveTypeNode(declaration) || checkExpressionCached(declaration.expression), declaration);
        }
        else if ((0, ts_1.isBinaryExpression)(declaration) ||
            ((0, ts_1.isInJSFile)(declaration) &&
                ((0, ts_1.isCallExpression)(declaration) || ((0, ts_1.isPropertyAccessExpression)(declaration) || (0, ts_1.isBindableStaticElementAccessExpression)(declaration)) && (0, ts_1.isBinaryExpression)(declaration.parent)))) {
            type = getWidenedTypeForAssignmentDeclaration(symbol);
        }
        else if ((0, ts_1.isPropertyAccessExpression)(declaration)
            || (0, ts_1.isElementAccessExpression)(declaration)
            || (0, ts_1.isIdentifier)(declaration)
            || (0, ts_1.isStringLiteralLike)(declaration)
            || (0, ts_1.isNumericLiteral)(declaration)
            || (0, ts_1.isClassDeclaration)(declaration)
            || (0, ts_1.isFunctionDeclaration)(declaration)
            || ((0, ts_1.isMethodDeclaration)(declaration) && !(0, ts_1.isObjectLiteralMethod)(declaration))
            || (0, ts_1.isMethodSignature)(declaration)
            || (0, ts_1.isSourceFile)(declaration)) {
            // Symbol is property of some kind that is merged with something - should use `getTypeOfFuncClassEnumModule` and not `getTypeOfVariableOrParameterOrProperty`
            if (symbol.flags & (16 /* SymbolFlags.Function */ | 8192 /* SymbolFlags.Method */ | 32 /* SymbolFlags.Class */ | 384 /* SymbolFlags.Enum */ | 512 /* SymbolFlags.ValueModule */)) {
                return getTypeOfFuncClassEnumModule(symbol);
            }
            type = (0, ts_1.isBinaryExpression)(declaration.parent) ?
                getWidenedTypeForAssignmentDeclaration(symbol) :
                tryGetTypeFromEffectiveTypeNode(declaration) || anyType;
        }
        else if ((0, ts_1.isPropertyAssignment)(declaration)) {
            type = tryGetTypeFromEffectiveTypeNode(declaration) || checkPropertyAssignment(declaration);
        }
        else if ((0, ts_1.isJsxAttribute)(declaration)) {
            type = tryGetTypeFromEffectiveTypeNode(declaration) || checkJsxAttribute(declaration);
        }
        else if ((0, ts_1.isShorthandPropertyAssignment)(declaration)) {
            type = tryGetTypeFromEffectiveTypeNode(declaration) || checkExpressionForMutableLocation(declaration.name, 0 /* CheckMode.Normal */);
        }
        else if ((0, ts_1.isObjectLiteralMethod)(declaration)) {
            type = tryGetTypeFromEffectiveTypeNode(declaration) || checkObjectLiteralMethod(declaration, 0 /* CheckMode.Normal */);
        }
        else if ((0, ts_1.isParameter)(declaration)
            || (0, ts_1.isPropertyDeclaration)(declaration)
            || (0, ts_1.isPropertySignature)(declaration)
            || (0, ts_1.isVariableDeclaration)(declaration)
            || (0, ts_1.isBindingElement)(declaration)
            || (0, ts_1.isJSDocPropertyLikeTag)(declaration)) {
            type = getWidenedTypeForVariableLikeDeclaration(declaration, /*reportErrors*/ true);
        }
        // getTypeOfSymbol dispatches some JS merges incorrectly because their symbol flags are not mutually exclusive.
        // Re-dispatch based on valueDeclaration.kind instead.
        else if ((0, ts_1.isEnumDeclaration)(declaration)) {
            type = getTypeOfFuncClassEnumModule(symbol);
        }
        else if ((0, ts_1.isEnumMember)(declaration)) {
            type = getTypeOfEnumMember(symbol);
        }
        else {
            return ts_1.Debug.fail("Unhandled declaration kind! " + ts_1.Debug.formatSyntaxKind(declaration.kind) + " for " + ts_1.Debug.formatSymbol(symbol));
        }
        if (!popTypeResolution()) {
            // Symbol is property of some kind that is merged with something - should use `getTypeOfFuncClassEnumModule` and not `getTypeOfVariableOrParameterOrProperty`
            if (symbol.flags & 512 /* SymbolFlags.ValueModule */ && !(symbol.flags & 67108864 /* SymbolFlags.Assignment */)) {
                return getTypeOfFuncClassEnumModule(symbol);
            }
            return reportCircularityError(symbol);
        }
        return type;
    }
    function getAnnotatedAccessorTypeNode(accessor) {
        if (accessor) {
            switch (accessor.kind) {
                case 176 /* SyntaxKind.GetAccessor */:
                    var getterTypeAnnotation = (0, ts_1.getEffectiveReturnTypeNode)(accessor);
                    return getterTypeAnnotation;
                case 177 /* SyntaxKind.SetAccessor */:
                    var setterTypeAnnotation = (0, ts_1.getEffectiveSetAccessorTypeAnnotationNode)(accessor);
                    return setterTypeAnnotation;
                case 171 /* SyntaxKind.PropertyDeclaration */:
                    ts_1.Debug.assert((0, ts_1.hasAccessorModifier)(accessor));
                    var accessorTypeAnnotation = (0, ts_1.getEffectiveTypeAnnotationNode)(accessor);
                    return accessorTypeAnnotation;
            }
        }
        return undefined;
    }
    function getAnnotatedAccessorType(accessor) {
        var node = getAnnotatedAccessorTypeNode(accessor);
        return node && getTypeFromTypeNode(node);
    }
    function getAnnotatedAccessorThisParameter(accessor) {
        var parameter = getAccessorThisParameter(accessor);
        return parameter && parameter.symbol;
    }
    function getThisTypeOfDeclaration(declaration) {
        return getThisTypeOfSignature(getSignatureFromDeclaration(declaration));
    }
    function getTypeOfAccessors(symbol) {
        var links = getSymbolLinks(symbol);
        if (!links.type) {
            if (!pushTypeResolution(symbol, 0 /* TypeSystemPropertyName.Type */)) {
                return errorType;
            }
            var getter = (0, ts_1.getDeclarationOfKind)(symbol, 176 /* SyntaxKind.GetAccessor */);
            var setter = (0, ts_1.getDeclarationOfKind)(symbol, 177 /* SyntaxKind.SetAccessor */);
            var accessor = (0, ts_1.tryCast)((0, ts_1.getDeclarationOfKind)(symbol, 171 /* SyntaxKind.PropertyDeclaration */), ts_1.isAutoAccessorPropertyDeclaration);
            // We try to resolve a getter type annotation, a setter type annotation, or a getter function
            // body return type inference, in that order.
            var type = getter && (0, ts_1.isInJSFile)(getter) && getTypeForDeclarationFromJSDocComment(getter) ||
                getAnnotatedAccessorType(getter) ||
                getAnnotatedAccessorType(setter) ||
                getAnnotatedAccessorType(accessor) ||
                getter && getter.body && getReturnTypeFromBody(getter) ||
                accessor && accessor.initializer && getWidenedTypeForVariableLikeDeclaration(accessor, /*reportErrors*/ true);
            if (!type) {
                if (setter && !isPrivateWithinAmbient(setter)) {
                    errorOrSuggestion(noImplicitAny, setter, ts_1.Diagnostics.Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_parameter_type_annotation, symbolToString(symbol));
                }
                else if (getter && !isPrivateWithinAmbient(getter)) {
                    errorOrSuggestion(noImplicitAny, getter, ts_1.Diagnostics.Property_0_implicitly_has_type_any_because_its_get_accessor_lacks_a_return_type_annotation, symbolToString(symbol));
                }
                else if (accessor && !isPrivateWithinAmbient(accessor)) {
                    errorOrSuggestion(noImplicitAny, accessor, ts_1.Diagnostics.Member_0_implicitly_has_an_1_type, symbolToString(symbol), "any");
                }
                type = anyType;
            }
            if (!popTypeResolution()) {
                if (getAnnotatedAccessorTypeNode(getter)) {
                    error(getter, ts_1.Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation, symbolToString(symbol));
                }
                else if (getAnnotatedAccessorTypeNode(setter)) {
                    error(setter, ts_1.Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation, symbolToString(symbol));
                }
                else if (getAnnotatedAccessorTypeNode(accessor)) {
                    error(setter, ts_1.Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation, symbolToString(symbol));
                }
                else if (getter && noImplicitAny) {
                    error(getter, ts_1.Diagnostics._0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions, symbolToString(symbol));
                }
                type = anyType;
            }
            links.type = type;
        }
        return links.type;
    }
    function getWriteTypeOfAccessors(symbol) {
        var _a;
        var links = getSymbolLinks(symbol);
        if (!links.writeType) {
            if (!pushTypeResolution(symbol, 8 /* TypeSystemPropertyName.WriteType */)) {
                return errorType;
            }
            var setter = (_a = (0, ts_1.getDeclarationOfKind)(symbol, 177 /* SyntaxKind.SetAccessor */)) !== null && _a !== void 0 ? _a : (0, ts_1.tryCast)((0, ts_1.getDeclarationOfKind)(symbol, 171 /* SyntaxKind.PropertyDeclaration */), ts_1.isAutoAccessorPropertyDeclaration);
            var writeType = getAnnotatedAccessorType(setter);
            if (!popTypeResolution()) {
                if (getAnnotatedAccessorTypeNode(setter)) {
                    error(setter, ts_1.Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation, symbolToString(symbol));
                }
                writeType = anyType;
            }
            // Absent an explicit setter type annotation we use the read type of the accessor.
            links.writeType = writeType || getTypeOfAccessors(symbol);
        }
        return links.writeType;
    }
    function getBaseTypeVariableOfClass(symbol) {
        var baseConstructorType = getBaseConstructorTypeOfClass(getDeclaredTypeOfClassOrInterface(symbol));
        return baseConstructorType.flags & 8650752 /* TypeFlags.TypeVariable */ ? baseConstructorType :
            baseConstructorType.flags & 2097152 /* TypeFlags.Intersection */ ? (0, ts_1.find)(baseConstructorType.types, function (t) { return !!(t.flags & 8650752 /* TypeFlags.TypeVariable */); }) :
                undefined;
    }
    function getTypeOfFuncClassEnumModule(symbol) {
        var links = getSymbolLinks(symbol);
        var originalLinks = links;
        if (!links.type) {
            var expando = symbol.valueDeclaration && getSymbolOfExpando(symbol.valueDeclaration, /*allowDeclaration*/ false);
            if (expando) {
                var merged = mergeJSSymbols(symbol, expando);
                if (merged) {
                    // note:we overwrite links because we just cloned the symbol
                    symbol = merged;
                    links = merged.links;
                }
            }
            originalLinks.type = links.type = getTypeOfFuncClassEnumModuleWorker(symbol);
        }
        return links.type;
    }
    function getTypeOfFuncClassEnumModuleWorker(symbol) {
        var declaration = symbol.valueDeclaration;
        if (symbol.flags & 1536 /* SymbolFlags.Module */ && (0, ts_1.isShorthandAmbientModuleSymbol)(symbol)) {
            return anyType;
        }
        else if (declaration && (declaration.kind === 225 /* SyntaxKind.BinaryExpression */ ||
            (0, ts_1.isAccessExpression)(declaration) &&
                declaration.parent.kind === 225 /* SyntaxKind.BinaryExpression */)) {
            return getWidenedTypeForAssignmentDeclaration(symbol);
        }
        else if (symbol.flags & 512 /* SymbolFlags.ValueModule */ && declaration && (0, ts_1.isSourceFile)(declaration) && declaration.commonJsModuleIndicator) {
            var resolvedModule = resolveExternalModuleSymbol(symbol);
            if (resolvedModule !== symbol) {
                if (!pushTypeResolution(symbol, 0 /* TypeSystemPropertyName.Type */)) {
                    return errorType;
                }
                var exportEquals = getMergedSymbol(symbol.exports.get("export=" /* InternalSymbolName.ExportEquals */));
                var type_1 = getWidenedTypeForAssignmentDeclaration(exportEquals, exportEquals === resolvedModule ? undefined : resolvedModule);
                if (!popTypeResolution()) {
                    return reportCircularityError(symbol);
                }
                return type_1;
            }
        }
        var type = createObjectType(16 /* ObjectFlags.Anonymous */, symbol);
        if (symbol.flags & 32 /* SymbolFlags.Class */) {
            var baseTypeVariable = getBaseTypeVariableOfClass(symbol);
            return baseTypeVariable ? getIntersectionType([type, baseTypeVariable]) : type;
        }
        else {
            return strictNullChecks && symbol.flags & 16777216 /* SymbolFlags.Optional */ ? getOptionalType(type, /*isProperty*/ true) : type;
        }
    }
    function getTypeOfEnumMember(symbol) {
        var links = getSymbolLinks(symbol);
        return links.type || (links.type = getDeclaredTypeOfEnumMember(symbol));
    }
    function getTypeOfAlias(symbol) {
        var links = getSymbolLinks(symbol);
        if (!links.type) {
            var targetSymbol = resolveAlias(symbol);
            var exportSymbol = symbol.declarations && getTargetOfAliasDeclaration(getDeclarationOfAliasSymbol(symbol), /*dontRecursivelyResolve*/ true);
            var declaredType = (0, ts_1.firstDefined)(exportSymbol === null || exportSymbol === void 0 ? void 0 : exportSymbol.declarations, function (d) { return (0, ts_1.isExportAssignment)(d) ? tryGetTypeFromEffectiveTypeNode(d) : undefined; });
            // It only makes sense to get the type of a value symbol. If the result of resolving
            // the alias is not a value, then it has no type. To get the type associated with a
            // type symbol, call getDeclaredTypeOfSymbol.
            // This check is important because without it, a call to getTypeOfSymbol could end
            // up recursively calling getTypeOfAlias, causing a stack overflow.
            links.type = (exportSymbol === null || exportSymbol === void 0 ? void 0 : exportSymbol.declarations) && isDuplicatedCommonJSExport(exportSymbol.declarations) && symbol.declarations.length ? getFlowTypeFromCommonJSExport(exportSymbol)
                : isDuplicatedCommonJSExport(symbol.declarations) ? autoType
                    : declaredType ? declaredType
                        : getAllSymbolFlags(targetSymbol) & 111551 /* SymbolFlags.Value */ ? getTypeOfSymbol(targetSymbol)
                            : errorType;
        }
        return links.type;
    }
    function getTypeOfInstantiatedSymbol(symbol) {
        var links = getSymbolLinks(symbol);
        return links.type || (links.type = instantiateType(getTypeOfSymbol(links.target), links.mapper));
    }
    function getWriteTypeOfInstantiatedSymbol(symbol) {
        var links = getSymbolLinks(symbol);
        return links.writeType || (links.writeType = instantiateType(getWriteTypeOfSymbol(links.target), links.mapper));
    }
    function reportCircularityError(symbol) {
        var declaration = symbol.valueDeclaration;
        // Check if variable has type annotation that circularly references the variable itself
        if ((0, ts_1.getEffectiveTypeAnnotationNode)(declaration)) {
            error(symbol.valueDeclaration, ts_1.Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation, symbolToString(symbol));
            return errorType;
        }
        // Check if variable has initializer that circularly references the variable itself
        if (noImplicitAny && (declaration.kind !== 168 /* SyntaxKind.Parameter */ || declaration.initializer)) {
            error(symbol.valueDeclaration, ts_1.Diagnostics._0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or_indirectly_in_its_own_initializer, symbolToString(symbol));
        }
        // Circularities could also result from parameters in function expressions that end up
        // having themselves as contextual types following type argument inference. In those cases
        // we have already reported an implicit any error so we don't report anything here.
        return anyType;
    }
    function getTypeOfSymbolWithDeferredType(symbol) {
        var links = getSymbolLinks(symbol);
        if (!links.type) {
            ts_1.Debug.assertIsDefined(links.deferralParent);
            ts_1.Debug.assertIsDefined(links.deferralConstituents);
            links.type = links.deferralParent.flags & 1048576 /* TypeFlags.Union */ ? getUnionType(links.deferralConstituents) : getIntersectionType(links.deferralConstituents);
        }
        return links.type;
    }
    function getWriteTypeOfSymbolWithDeferredType(symbol) {
        var links = getSymbolLinks(symbol);
        if (!links.writeType && links.deferralWriteConstituents) {
            ts_1.Debug.assertIsDefined(links.deferralParent);
            ts_1.Debug.assertIsDefined(links.deferralConstituents);
            links.writeType = links.deferralParent.flags & 1048576 /* TypeFlags.Union */ ? getUnionType(links.deferralWriteConstituents) : getIntersectionType(links.deferralWriteConstituents);
        }
        return links.writeType;
    }
    /**
     * Distinct write types come only from set accessors, but synthetic union and intersection
     * properties deriving from set accessors will either pre-compute or defer the union or
     * intersection of the writeTypes of their constituents.
     */
    function getWriteTypeOfSymbol(symbol) {
        var checkFlags = (0, ts_1.getCheckFlags)(symbol);
        if (symbol.flags & 4 /* SymbolFlags.Property */) {
            return checkFlags & 2 /* CheckFlags.SyntheticProperty */ ?
                checkFlags & 65536 /* CheckFlags.DeferredType */ ?
                    getWriteTypeOfSymbolWithDeferredType(symbol) || getTypeOfSymbolWithDeferredType(symbol) :
                    // NOTE: cast to TransientSymbol should be safe because only TransientSymbols can have CheckFlags.SyntheticProperty
                    symbol.links.writeType || symbol.links.type :
                getTypeOfSymbol(symbol);
        }
        if (symbol.flags & 98304 /* SymbolFlags.Accessor */) {
            return checkFlags & 1 /* CheckFlags.Instantiated */ ?
                getWriteTypeOfInstantiatedSymbol(symbol) :
                getWriteTypeOfAccessors(symbol);
        }
        return getTypeOfSymbol(symbol);
    }
    function getTypeOfSymbol(symbol) {
        var checkFlags = (0, ts_1.getCheckFlags)(symbol);
        if (checkFlags & 65536 /* CheckFlags.DeferredType */) {
            return getTypeOfSymbolWithDeferredType(symbol);
        }
        if (checkFlags & 1 /* CheckFlags.Instantiated */) {
            return getTypeOfInstantiatedSymbol(symbol);
        }
        if (checkFlags & 262144 /* CheckFlags.Mapped */) {
            return getTypeOfMappedSymbol(symbol);
        }
        if (checkFlags & 8192 /* CheckFlags.ReverseMapped */) {
            return getTypeOfReverseMappedSymbol(symbol);
        }
        if (symbol.flags & (3 /* SymbolFlags.Variable */ | 4 /* SymbolFlags.Property */)) {
            return getTypeOfVariableOrParameterOrProperty(symbol);
        }
        if (symbol.flags & (16 /* SymbolFlags.Function */ | 8192 /* SymbolFlags.Method */ | 32 /* SymbolFlags.Class */ | 384 /* SymbolFlags.Enum */ | 512 /* SymbolFlags.ValueModule */)) {
            return getTypeOfFuncClassEnumModule(symbol);
        }
        if (symbol.flags & 8 /* SymbolFlags.EnumMember */) {
            return getTypeOfEnumMember(symbol);
        }
        if (symbol.flags & 98304 /* SymbolFlags.Accessor */) {
            return getTypeOfAccessors(symbol);
        }
        if (symbol.flags & 2097152 /* SymbolFlags.Alias */) {
            return getTypeOfAlias(symbol);
        }
        return errorType;
    }
    function getNonMissingTypeOfSymbol(symbol) {
        return removeMissingType(getTypeOfSymbol(symbol), !!(symbol.flags & 16777216 /* SymbolFlags.Optional */));
    }
    function isReferenceToType(type, target) {
        return type !== undefined
            && target !== undefined
            && ((0, ts_1.getObjectFlags)(type) & 4 /* ObjectFlags.Reference */) !== 0
            && type.target === target;
    }
    function getTargetType(type) {
        return (0, ts_1.getObjectFlags)(type) & 4 /* ObjectFlags.Reference */ ? type.target : type;
    }
    // TODO: GH#18217 If `checkBase` is undefined, we should not call this because this will always return false.
    function hasBaseType(type, checkBase) {
        return check(type);
        function check(type) {
            if ((0, ts_1.getObjectFlags)(type) & (3 /* ObjectFlags.ClassOrInterface */ | 4 /* ObjectFlags.Reference */)) {
                var target = getTargetType(type);
                return target === checkBase || (0, ts_1.some)(getBaseTypes(target), check);
            }
            else if (type.flags & 2097152 /* TypeFlags.Intersection */) {
                return (0, ts_1.some)(type.types, check);
            }
            return false;
        }
    }
    // Appends the type parameters given by a list of declarations to a set of type parameters and returns the resulting set.
    // The function allocates a new array if the input type parameter set is undefined, but otherwise it modifies the set
    // in-place and returns the same array.
    function appendTypeParameters(typeParameters, declarations) {
        for (var _i = 0, declarations_1 = declarations; _i < declarations_1.length; _i++) {
            var declaration = declarations_1[_i];
            typeParameters = (0, ts_1.appendIfUnique)(typeParameters, getDeclaredTypeOfTypeParameter(getSymbolOfDeclaration(declaration)));
        }
        return typeParameters;
    }
    // Return the outer type parameters of a node or undefined if the node has no outer type parameters.
    function getOuterTypeParameters(node, includeThisTypes) {
        while (true) {
            node = node.parent; // TODO: GH#18217 Use SourceFile kind check instead
            if (node && (0, ts_1.isBinaryExpression)(node)) {
                // prototype assignments get the outer type parameters of their constructor function
                var assignmentKind = (0, ts_1.getAssignmentDeclarationKind)(node);
                if (assignmentKind === 6 /* AssignmentDeclarationKind.Prototype */ || assignmentKind === 3 /* AssignmentDeclarationKind.PrototypeProperty */) {
                    var symbol = getSymbolOfDeclaration(node.left);
                    if (symbol && symbol.parent && !(0, ts_1.findAncestor)(symbol.parent.valueDeclaration, function (d) { return node === d; })) {
                        node = symbol.parent.valueDeclaration;
                    }
                }
            }
            if (!node) {
                return undefined;
            }
            switch (node.kind) {
                case 262 /* SyntaxKind.ClassDeclaration */:
                case 230 /* SyntaxKind.ClassExpression */:
                case 263 /* SyntaxKind.InterfaceDeclaration */:
                case 178 /* SyntaxKind.CallSignature */:
                case 179 /* SyntaxKind.ConstructSignature */:
                case 172 /* SyntaxKind.MethodSignature */:
                case 183 /* SyntaxKind.FunctionType */:
                case 184 /* SyntaxKind.ConstructorType */:
                case 323 /* SyntaxKind.JSDocFunctionType */:
                case 261 /* SyntaxKind.FunctionDeclaration */:
                case 173 /* SyntaxKind.MethodDeclaration */:
                case 217 /* SyntaxKind.FunctionExpression */:
                case 218 /* SyntaxKind.ArrowFunction */:
                case 264 /* SyntaxKind.TypeAliasDeclaration */:
                case 351 /* SyntaxKind.JSDocTemplateTag */:
                case 352 /* SyntaxKind.JSDocTypedefTag */:
                case 346 /* SyntaxKind.JSDocEnumTag */:
                case 344 /* SyntaxKind.JSDocCallbackTag */:
                case 199 /* SyntaxKind.MappedType */:
                case 193 /* SyntaxKind.ConditionalType */: {
                    var outerTypeParameters = getOuterTypeParameters(node, includeThisTypes);
                    if (node.kind === 199 /* SyntaxKind.MappedType */) {
                        return (0, ts_1.append)(outerTypeParameters, getDeclaredTypeOfTypeParameter(getSymbolOfDeclaration(node.typeParameter)));
                    }
                    else if (node.kind === 193 /* SyntaxKind.ConditionalType */) {
                        return (0, ts_1.concatenate)(outerTypeParameters, getInferTypeParameters(node));
                    }
                    var outerAndOwnTypeParameters = appendTypeParameters(outerTypeParameters, (0, ts_1.getEffectiveTypeParameterDeclarations)(node));
                    var thisType = includeThisTypes &&
                        (node.kind === 262 /* SyntaxKind.ClassDeclaration */ || node.kind === 230 /* SyntaxKind.ClassExpression */ || node.kind === 263 /* SyntaxKind.InterfaceDeclaration */ || isJSConstructor(node)) &&
                        getDeclaredTypeOfClassOrInterface(getSymbolOfDeclaration(node)).thisType;
                    return thisType ? (0, ts_1.append)(outerAndOwnTypeParameters, thisType) : outerAndOwnTypeParameters;
                }
                case 347 /* SyntaxKind.JSDocParameterTag */:
                    var paramSymbol = (0, ts_1.getParameterSymbolFromJSDoc)(node);
                    if (paramSymbol) {
                        node = paramSymbol.valueDeclaration;
                    }
                    break;
                case 326 /* SyntaxKind.JSDoc */: {
                    var outerTypeParameters = getOuterTypeParameters(node, includeThisTypes);
                    return node.tags
                        ? appendTypeParameters(outerTypeParameters, (0, ts_1.flatMap)(node.tags, function (t) { return (0, ts_1.isJSDocTemplateTag)(t) ? t.typeParameters : undefined; }))
                        : outerTypeParameters;
                }
            }
        }
    }
    // The outer type parameters are those defined by enclosing generic classes, methods, or functions.
    function getOuterTypeParametersOfClassOrInterface(symbol) {
        var _a;
        var declaration = (symbol.flags & 32 /* SymbolFlags.Class */ || symbol.flags & 16 /* SymbolFlags.Function */)
            ? symbol.valueDeclaration
            : (_a = symbol.declarations) === null || _a === void 0 ? void 0 : _a.find(function (decl) {
                if (decl.kind === 263 /* SyntaxKind.InterfaceDeclaration */) {
                    return true;
                }
                if (decl.kind !== 259 /* SyntaxKind.VariableDeclaration */) {
                    return false;
                }
                var initializer = decl.initializer;
                return !!initializer && (initializer.kind === 217 /* SyntaxKind.FunctionExpression */ || initializer.kind === 218 /* SyntaxKind.ArrowFunction */);
            });
        ts_1.Debug.assert(!!declaration, "Class was missing valueDeclaration -OR- non-class had no interface declarations");
        return getOuterTypeParameters(declaration);
    }
    // The local type parameters are the combined set of type parameters from all declarations of the class,
    // interface, or type alias.
    function getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol) {
        if (!symbol.declarations) {
            return;
        }
        var result;
        for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {
            var node = _a[_i];
            if (node.kind === 263 /* SyntaxKind.InterfaceDeclaration */ ||
                node.kind === 262 /* SyntaxKind.ClassDeclaration */ ||
                node.kind === 230 /* SyntaxKind.ClassExpression */ ||
                isJSConstructor(node) ||
                (0, ts_1.isTypeAlias)(node)) {
                var declaration = node;
                result = appendTypeParameters(result, (0, ts_1.getEffectiveTypeParameterDeclarations)(declaration));
            }
        }
        return result;
    }
    // The full set of type parameters for a generic class or interface type consists of its outer type parameters plus
    // its locally declared type parameters.
    function getTypeParametersOfClassOrInterface(symbol) {
        return (0, ts_1.concatenate)(getOuterTypeParametersOfClassOrInterface(symbol), getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol));
    }
    // A type is a mixin constructor if it has a single construct signature taking no type parameters and a single
    // rest parameter of type any[].
    function isMixinConstructorType(type) {
        var signatures = getSignaturesOfType(type, 1 /* SignatureKind.Construct */);
        if (signatures.length === 1) {
            var s = signatures[0];
            if (!s.typeParameters && s.parameters.length === 1 && signatureHasRestParameter(s)) {
                var paramType = getTypeOfParameter(s.parameters[0]);
                return isTypeAny(paramType) || getElementTypeOfArrayType(paramType) === anyType;
            }
        }
        return false;
    }
    function isConstructorType(type) {
        if (getSignaturesOfType(type, 1 /* SignatureKind.Construct */).length > 0) {
            return true;
        }
        if (type.flags & 8650752 /* TypeFlags.TypeVariable */) {
            var constraint = getBaseConstraintOfType(type);
            return !!constraint && isMixinConstructorType(constraint);
        }
        return false;
    }
    function getBaseTypeNodeOfClass(type) {
        var decl = (0, ts_1.getClassLikeDeclarationOfSymbol)(type.symbol);
        return decl && (0, ts_1.getEffectiveBaseTypeNode)(decl);
    }
    function getConstructorsForTypeArguments(type, typeArgumentNodes, location) {
        var typeArgCount = (0, ts_1.length)(typeArgumentNodes);
        var isJavascript = (0, ts_1.isInJSFile)(location);
        return (0, ts_1.filter)(getSignaturesOfType(type, 1 /* SignatureKind.Construct */), function (sig) { return (isJavascript || typeArgCount >= getMinTypeArgumentCount(sig.typeParameters)) && typeArgCount <= (0, ts_1.length)(sig.typeParameters); });
    }
    function getInstantiatedConstructorsForTypeArguments(type, typeArgumentNodes, location) {
        var signatures = getConstructorsForTypeArguments(type, typeArgumentNodes, location);
        var typeArguments = (0, ts_1.map)(typeArgumentNodes, getTypeFromTypeNode);
        return (0, ts_1.sameMap)(signatures, function (sig) { return (0, ts_1.some)(sig.typeParameters) ? getSignatureInstantiation(sig, typeArguments, (0, ts_1.isInJSFile)(location)) : sig; });
    }
    /**
     * The base constructor of a class can resolve to
     * * undefinedType if the class has no extends clause,
     * * unknownType if an error occurred during resolution of the extends expression,
     * * nullType if the extends expression is the null value,
     * * anyType if the extends expression has type any, or
     * * an object type with at least one construct signature.
     */
    function getBaseConstructorTypeOfClass(type) {
        if (!type.resolvedBaseConstructorType) {
            var decl = (0, ts_1.getClassLikeDeclarationOfSymbol)(type.symbol);
            var extended = decl && (0, ts_1.getEffectiveBaseTypeNode)(decl);
            var baseTypeNode = getBaseTypeNodeOfClass(type);
            if (!baseTypeNode) {
                return type.resolvedBaseConstructorType = undefinedType;
            }
            if (!pushTypeResolution(type, 1 /* TypeSystemPropertyName.ResolvedBaseConstructorType */)) {
                return errorType;
            }
            var baseConstructorType = checkExpression(baseTypeNode.expression);
            if (extended && baseTypeNode !== extended) {
                ts_1.Debug.assert(!extended.typeArguments); // Because this is in a JS file, and baseTypeNode is in an @extends tag
                checkExpression(extended.expression);
            }
            if (baseConstructorType.flags & (524288 /* TypeFlags.Object */ | 2097152 /* TypeFlags.Intersection */)) {
                // Resolving the members of a class requires us to resolve the base class of that class.
                // We force resolution here such that we catch circularities now.
                resolveStructuredTypeMembers(baseConstructorType);
            }
            if (!popTypeResolution()) {
                error(type.symbol.valueDeclaration, ts_1.Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_base_expression, symbolToString(type.symbol));
                return type.resolvedBaseConstructorType = errorType;
            }
            if (!(baseConstructorType.flags & 1 /* TypeFlags.Any */) && baseConstructorType !== nullWideningType && !isConstructorType(baseConstructorType)) {
                var err = error(baseTypeNode.expression, ts_1.Diagnostics.Type_0_is_not_a_constructor_function_type, typeToString(baseConstructorType));
                if (baseConstructorType.flags & 262144 /* TypeFlags.TypeParameter */) {
                    var constraint = getConstraintFromTypeParameter(baseConstructorType);
                    var ctorReturn = unknownType;
                    if (constraint) {
                        var ctorSig = getSignaturesOfType(constraint, 1 /* SignatureKind.Construct */);
                        if (ctorSig[0]) {
                            ctorReturn = getReturnTypeOfSignature(ctorSig[0]);
                        }
                    }
                    if (baseConstructorType.symbol.declarations) {
                        (0, ts_1.addRelatedInfo)(err, (0, ts_1.createDiagnosticForNode)(baseConstructorType.symbol.declarations[0], ts_1.Diagnostics.Did_you_mean_for_0_to_be_constrained_to_type_new_args_Colon_any_1, symbolToString(baseConstructorType.symbol), typeToString(ctorReturn)));
                    }
                }
                return type.resolvedBaseConstructorType = errorType;
            }
            type.resolvedBaseConstructorType = baseConstructorType;
        }
        return type.resolvedBaseConstructorType;
    }
    function getImplementsTypes(type) {
        var resolvedImplementsTypes = ts_1.emptyArray;
        if (type.symbol.declarations) {
            for (var _i = 0, _a = type.symbol.declarations; _i < _a.length; _i++) {
                var declaration = _a[_i];
                var implementsTypeNodes = (0, ts_1.getEffectiveImplementsTypeNodes)(declaration);
                if (!implementsTypeNodes)
                    continue;
                for (var _b = 0, implementsTypeNodes_1 = implementsTypeNodes; _b < implementsTypeNodes_1.length; _b++) {
                    var node = implementsTypeNodes_1[_b];
                    var implementsType = getTypeFromTypeNode(node);
                    if (!isErrorType(implementsType)) {
                        if (resolvedImplementsTypes === ts_1.emptyArray) {
                            resolvedImplementsTypes = [implementsType];
                        }
                        else {
                            resolvedImplementsTypes.push(implementsType);
                        }
                    }
                }
            }
        }
        return resolvedImplementsTypes;
    }
    function reportCircularBaseType(node, type) {
        error(node, ts_1.Diagnostics.Type_0_recursively_references_itself_as_a_base_type, typeToString(type, /*enclosingDeclaration*/ undefined, 2 /* TypeFormatFlags.WriteArrayAsGenericType */));
    }
    function getBaseTypes(type) {
        if (!type.baseTypesResolved) {
            if (pushTypeResolution(type, 7 /* TypeSystemPropertyName.ResolvedBaseTypes */)) {
                if (type.objectFlags & 8 /* ObjectFlags.Tuple */) {
                    type.resolvedBaseTypes = [getTupleBaseType(type)];
                }
                else if (type.symbol.flags & (32 /* SymbolFlags.Class */ | 64 /* SymbolFlags.Interface */)) {
                    if (type.symbol.flags & 32 /* SymbolFlags.Class */) {
                        resolveBaseTypesOfClass(type);
                    }
                    if (type.symbol.flags & 64 /* SymbolFlags.Interface */) {
                        resolveBaseTypesOfInterface(type);
                    }
                }
                else {
                    ts_1.Debug.fail("type must be class or interface");
                }
                if (!popTypeResolution() && type.symbol.declarations) {
                    for (var _i = 0, _a = type.symbol.declarations; _i < _a.length; _i++) {
                        var declaration = _a[_i];
                        if (declaration.kind === 262 /* SyntaxKind.ClassDeclaration */ || declaration.kind === 263 /* SyntaxKind.InterfaceDeclaration */) {
                            reportCircularBaseType(declaration, type);
                        }
                    }
                }
            }
            type.baseTypesResolved = true;
        }
        return type.resolvedBaseTypes;
    }
    function getTupleBaseType(type) {
        var elementTypes = (0, ts_1.sameMap)(type.typeParameters, function (t, i) { return type.elementFlags[i] & 8 /* ElementFlags.Variadic */ ? getIndexedAccessType(t, numberType) : t; });
        return createArrayType(getUnionType(elementTypes || ts_1.emptyArray), type.readonly);
    }
    function resolveBaseTypesOfClass(type) {
        type.resolvedBaseTypes = ts_1.resolvingEmptyArray;
        var baseConstructorType = getApparentType(getBaseConstructorTypeOfClass(type));
        if (!(baseConstructorType.flags & (524288 /* TypeFlags.Object */ | 2097152 /* TypeFlags.Intersection */ | 1 /* TypeFlags.Any */))) {
            return type.resolvedBaseTypes = ts_1.emptyArray;
        }
        var baseTypeNode = getBaseTypeNodeOfClass(type);
        var baseType;
        var originalBaseType = baseConstructorType.symbol ? getDeclaredTypeOfSymbol(baseConstructorType.symbol) : undefined;
        if (baseConstructorType.symbol && baseConstructorType.symbol.flags & 32 /* SymbolFlags.Class */ &&
            areAllOuterTypeParametersApplied(originalBaseType)) {
            // When base constructor type is a class with no captured type arguments we know that the constructors all have the same type parameters as the
            // class and all return the instance type of the class. There is no need for further checks and we can apply the
            // type arguments in the same manner as a type reference to get the same error reporting experience.
            baseType = getTypeFromClassOrInterfaceReference(baseTypeNode, baseConstructorType.symbol);
        }
        else if (baseConstructorType.flags & 1 /* TypeFlags.Any */) {
            baseType = baseConstructorType;
        }
        else {
            // The class derives from a "class-like" constructor function, check that we have at least one construct signature
            // with a matching number of type parameters and use the return type of the first instantiated signature. Elsewhere
            // we check that all instantiated signatures return the same type.
            var constructors = getInstantiatedConstructorsForTypeArguments(baseConstructorType, baseTypeNode.typeArguments, baseTypeNode);
            if (!constructors.length) {
                error(baseTypeNode.expression, ts_1.Diagnostics.No_base_constructor_has_the_specified_number_of_type_arguments);
                return type.resolvedBaseTypes = ts_1.emptyArray;
            }
            baseType = getReturnTypeOfSignature(constructors[0]);
        }
        if (isErrorType(baseType)) {
            return type.resolvedBaseTypes = ts_1.emptyArray;
        }
        var reducedBaseType = getReducedType(baseType);
        if (!isValidBaseType(reducedBaseType)) {
            var elaboration = elaborateNeverIntersection(/*errorInfo*/ undefined, baseType);
            var diagnostic = (0, ts_1.chainDiagnosticMessages)(elaboration, ts_1.Diagnostics.Base_constructor_return_type_0_is_not_an_object_type_or_intersection_of_object_types_with_statically_known_members, typeToString(reducedBaseType));
            diagnostics.add((0, ts_1.createDiagnosticForNodeFromMessageChain)((0, ts_1.getSourceFileOfNode)(baseTypeNode.expression), baseTypeNode.expression, diagnostic));
            return type.resolvedBaseTypes = ts_1.emptyArray;
        }
        if (type === reducedBaseType || hasBaseType(reducedBaseType, type)) {
            error(type.symbol.valueDeclaration, ts_1.Diagnostics.Type_0_recursively_references_itself_as_a_base_type, typeToString(type, /*enclosingDeclaration*/ undefined, 2 /* TypeFormatFlags.WriteArrayAsGenericType */));
            return type.resolvedBaseTypes = ts_1.emptyArray;
        }
        if (type.resolvedBaseTypes === ts_1.resolvingEmptyArray) {
            // Circular reference, likely through instantiation of default parameters
            // (otherwise there'd be an error from hasBaseType) - this is fine, but `.members` should be reset
            // as `getIndexedAccessType` via `instantiateType` via `getTypeFromClassOrInterfaceReference` forces a
            // partial instantiation of the members without the base types fully resolved
            type.members = undefined;
        }
        return type.resolvedBaseTypes = [reducedBaseType];
    }
    function areAllOuterTypeParametersApplied(type) {
        // An unapplied type parameter has its symbol still the same as the matching argument symbol.
        // Since parameters are applied outer-to-inner, only the last outer parameter needs to be checked.
        var outerTypeParameters = type.outerTypeParameters;
        if (outerTypeParameters) {
            var last_1 = outerTypeParameters.length - 1;
            var typeArguments = getTypeArguments(type);
            return outerTypeParameters[last_1].symbol !== typeArguments[last_1].symbol;
        }
        return true;
    }
    // A valid base type is `any`, an object type or intersection of object types.
    function isValidBaseType(type) {
        if (type.flags & 262144 /* TypeFlags.TypeParameter */) {
            var constraint = getBaseConstraintOfType(type);
            if (constraint) {
                return isValidBaseType(constraint);
            }
        }
        // TODO: Given that we allow type parmeters here now, is this `!isGenericMappedType(type)` check really needed?
        // There's no reason a `T` should be allowed while a `Readonly<T>` should not.
        return !!(type.flags & (524288 /* TypeFlags.Object */ | 67108864 /* TypeFlags.NonPrimitive */ | 1 /* TypeFlags.Any */) && !isGenericMappedType(type) ||
            type.flags & 2097152 /* TypeFlags.Intersection */ && (0, ts_1.every)(type.types, isValidBaseType));
    }
    function resolveBaseTypesOfInterface(type) {
        type.resolvedBaseTypes = type.resolvedBaseTypes || ts_1.emptyArray;
        if (type.symbol.declarations) {
            for (var _i = 0, _a = type.symbol.declarations; _i < _a.length; _i++) {
                var declaration = _a[_i];
                if (declaration.kind === 263 /* SyntaxKind.InterfaceDeclaration */ && (0, ts_1.getInterfaceBaseTypeNodes)(declaration)) {
                    for (var _b = 0, _c = (0, ts_1.getInterfaceBaseTypeNodes)(declaration); _b < _c.length; _b++) {
                        var node = _c[_b];
                        var baseType = getReducedType(getTypeFromTypeNode(node));
                        if (!isErrorType(baseType)) {
                            if (isValidBaseType(baseType)) {
                                if (type !== baseType && !hasBaseType(baseType, type)) {
                                    if (type.resolvedBaseTypes === ts_1.emptyArray) {
                                        type.resolvedBaseTypes = [baseType];
                                    }
                                    else {
                                        type.resolvedBaseTypes.push(baseType);
                                    }
                                }
                                else {
                                    reportCircularBaseType(declaration, type);
                                }
                            }
                            else {
                                error(node, ts_1.Diagnostics.An_interface_can_only_extend_an_object_type_or_intersection_of_object_types_with_statically_known_members);
                            }
                        }
                    }
                }
            }
        }
    }
    /**
     * Returns true if the interface given by the symbol is free of "this" references.
     *
     * Specifically, the result is true if the interface itself contains no references
     * to "this" in its body, if all base types are interfaces,
     * and if none of the base interfaces have a "this" type.
     */
    function isThislessInterface(symbol) {
        if (!symbol.declarations) {
            return true;
        }
        for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {
            var declaration = _a[_i];
            if (declaration.kind === 263 /* SyntaxKind.InterfaceDeclaration */) {
                if (declaration.flags & 128 /* NodeFlags.ContainsThis */) {
                    return false;
                }
                var baseTypeNodes = (0, ts_1.getInterfaceBaseTypeNodes)(declaration);
                if (baseTypeNodes) {
                    for (var _b = 0, baseTypeNodes_1 = baseTypeNodes; _b < baseTypeNodes_1.length; _b++) {
                        var node = baseTypeNodes_1[_b];
                        if ((0, ts_1.isEntityNameExpression)(node.expression)) {
                            var baseSymbol = resolveEntityName(node.expression, 788968 /* SymbolFlags.Type */, /*ignoreErrors*/ true);
                            if (!baseSymbol || !(baseSymbol.flags & 64 /* SymbolFlags.Interface */) || getDeclaredTypeOfClassOrInterface(baseSymbol).thisType) {
                                return false;
                            }
                        }
                    }
                }
            }
        }
        return true;
    }
    function getDeclaredTypeOfClassOrInterface(symbol) {
        var links = getSymbolLinks(symbol);
        var originalLinks = links;
        if (!links.declaredType) {
            var kind = symbol.flags & 32 /* SymbolFlags.Class */ ? 1 /* ObjectFlags.Class */ : 2 /* ObjectFlags.Interface */;
            var merged = mergeJSSymbols(symbol, symbol.valueDeclaration && getAssignedClassSymbol(symbol.valueDeclaration));
            if (merged) {
                // note:we overwrite links because we just cloned the symbol
                symbol = merged;
                links = merged.links;
            }
            var type = originalLinks.declaredType = links.declaredType = createObjectType(kind, symbol);
            var outerTypeParameters = getOuterTypeParametersOfClassOrInterface(symbol);
            var localTypeParameters = getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol);
            // A class or interface is generic if it has type parameters or a "this" type. We always give classes a "this" type
            // because it is not feasible to analyze all members to determine if the "this" type escapes the class (in particular,
            // property types inferred from initializers and method return types inferred from return statements are very hard
            // to exhaustively analyze). We give interfaces a "this" type if we can't definitely determine that they are free of
            // "this" references.
            if (outerTypeParameters || localTypeParameters || kind === 1 /* ObjectFlags.Class */ || !isThislessInterface(symbol)) {
                type.objectFlags |= 4 /* ObjectFlags.Reference */;
                type.typeParameters = (0, ts_1.concatenate)(outerTypeParameters, localTypeParameters);
                type.outerTypeParameters = outerTypeParameters;
                type.localTypeParameters = localTypeParameters;
                type.instantiations = new Map();
                type.instantiations.set(getTypeListId(type.typeParameters), type);
                type.target = type;
                type.resolvedTypeArguments = type.typeParameters;
                type.thisType = createTypeParameter(symbol);
                type.thisType.isThisType = true;
                type.thisType.constraint = type;
            }
        }
        return links.declaredType;
    }
    function getDeclaredTypeOfTypeAlias(symbol) {
        var _a;
        var links = getSymbolLinks(symbol);
        if (!links.declaredType) {
            // Note that we use the links object as the target here because the symbol object is used as the unique
            // identity for resolution of the 'type' property in SymbolLinks.
            if (!pushTypeResolution(symbol, 2 /* TypeSystemPropertyName.DeclaredType */)) {
                return errorType;
            }
            var declaration = ts_1.Debug.checkDefined((_a = symbol.declarations) === null || _a === void 0 ? void 0 : _a.find(ts_1.isTypeAlias), "Type alias symbol with no valid declaration found");
            var typeNode = (0, ts_1.isJSDocTypeAlias)(declaration) ? declaration.typeExpression : declaration.type;
            // If typeNode is missing, we will error in checkJSDocTypedefTag.
            var type = typeNode ? getTypeFromTypeNode(typeNode) : errorType;
            if (popTypeResolution()) {
                var typeParameters = getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol);
                if (typeParameters) {
                    // Initialize the instantiation cache for generic type aliases. The declared type corresponds to
                    // an instantiation of the type alias with the type parameters supplied as type arguments.
                    links.typeParameters = typeParameters;
                    links.instantiations = new Map();
                    links.instantiations.set(getTypeListId(typeParameters), type);
                }
            }
            else {
                type = errorType;
                if (declaration.kind === 346 /* SyntaxKind.JSDocEnumTag */) {
                    error(declaration.typeExpression.type, ts_1.Diagnostics.Type_alias_0_circularly_references_itself, symbolToString(symbol));
                }
                else {
                    error((0, ts_1.isNamedDeclaration)(declaration) ? declaration.name || declaration : declaration, ts_1.Diagnostics.Type_alias_0_circularly_references_itself, symbolToString(symbol));
                }
            }
            links.declaredType = type;
        }
        return links.declaredType;
    }
    function getBaseTypeOfEnumLikeType(type) {
        return type.flags & 1056 /* TypeFlags.EnumLike */ && type.symbol.flags & 8 /* SymbolFlags.EnumMember */ ? getDeclaredTypeOfSymbol(getParentOfSymbol(type.symbol)) : type;
    }
    function getDeclaredTypeOfEnum(symbol) {
        var links = getSymbolLinks(symbol);
        if (!links.declaredType) {
            var memberTypeList = [];
            if (symbol.declarations) {
                for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {
                    var declaration = _a[_i];
                    if (declaration.kind === 265 /* SyntaxKind.EnumDeclaration */) {
                        for (var _b = 0, _c = declaration.members; _b < _c.length; _b++) {
                            var member = _c[_b];
                            if (hasBindableName(member)) {
                                var memberSymbol = getSymbolOfDeclaration(member);
                                var value = getEnumMemberValue(member);
                                var memberType = getFreshTypeOfLiteralType(value !== undefined ?
                                    getEnumLiteralType(value, getSymbolId(symbol), memberSymbol) :
                                    createComputedEnumType(memberSymbol));
                                getSymbolLinks(memberSymbol).declaredType = memberType;
                                memberTypeList.push(getRegularTypeOfLiteralType(memberType));
                            }
                        }
                    }
                }
            }
            var enumType = memberTypeList.length ?
                getUnionType(memberTypeList, 1 /* UnionReduction.Literal */, symbol, /*aliasTypeArguments*/ undefined) :
                createComputedEnumType(symbol);
            if (enumType.flags & 1048576 /* TypeFlags.Union */) {
                enumType.flags |= 1024 /* TypeFlags.EnumLiteral */;
                enumType.symbol = symbol;
            }
            links.declaredType = enumType;
        }
        return links.declaredType;
    }
    function createComputedEnumType(symbol) {
        var regularType = createTypeWithSymbol(32 /* TypeFlags.Enum */, symbol);
        var freshType = createTypeWithSymbol(32 /* TypeFlags.Enum */, symbol);
        regularType.regularType = regularType;
        regularType.freshType = freshType;
        freshType.regularType = regularType;
        freshType.freshType = freshType;
        return regularType;
    }
    function getDeclaredTypeOfEnumMember(symbol) {
        var links = getSymbolLinks(symbol);
        if (!links.declaredType) {
            var enumType = getDeclaredTypeOfEnum(getParentOfSymbol(symbol));
            if (!links.declaredType) {
                links.declaredType = enumType;
            }
        }
        return links.declaredType;
    }
    function getDeclaredTypeOfTypeParameter(symbol) {
        var links = getSymbolLinks(symbol);
        return links.declaredType || (links.declaredType = createTypeParameter(symbol));
    }
    function getDeclaredTypeOfAlias(symbol) {
        var links = getSymbolLinks(symbol);
        return links.declaredType || (links.declaredType = getDeclaredTypeOfSymbol(resolveAlias(symbol)));
    }
    function getDeclaredTypeOfSymbol(symbol) {
        return tryGetDeclaredTypeOfSymbol(symbol) || errorType;
    }
    function tryGetDeclaredTypeOfSymbol(symbol) {
        if (symbol.flags & (32 /* SymbolFlags.Class */ | 64 /* SymbolFlags.Interface */)) {
            return getDeclaredTypeOfClassOrInterface(symbol);
        }
        if (symbol.flags & 524288 /* SymbolFlags.TypeAlias */) {
            return getDeclaredTypeOfTypeAlias(symbol);
        }
        if (symbol.flags & 262144 /* SymbolFlags.TypeParameter */) {
            return getDeclaredTypeOfTypeParameter(symbol);
        }
        if (symbol.flags & 384 /* SymbolFlags.Enum */) {
            return getDeclaredTypeOfEnum(symbol);
        }
        if (symbol.flags & 8 /* SymbolFlags.EnumMember */) {
            return getDeclaredTypeOfEnumMember(symbol);
        }
        if (symbol.flags & 2097152 /* SymbolFlags.Alias */) {
            return getDeclaredTypeOfAlias(symbol);
        }
        return undefined;
    }
    /**
     * A type is free of this references if it's the any, string, number, boolean, symbol, or void keyword, a string
     * literal type, an array with an element type that is free of this references, or a type reference that is
     * free of this references.
     */
    function isThislessType(node) {
        switch (node.kind) {
            case 133 /* SyntaxKind.AnyKeyword */:
            case 159 /* SyntaxKind.UnknownKeyword */:
            case 154 /* SyntaxKind.StringKeyword */:
            case 150 /* SyntaxKind.NumberKeyword */:
            case 162 /* SyntaxKind.BigIntKeyword */:
            case 136 /* SyntaxKind.BooleanKeyword */:
            case 155 /* SyntaxKind.SymbolKeyword */:
            case 151 /* SyntaxKind.ObjectKeyword */:
            case 116 /* SyntaxKind.VoidKeyword */:
            case 157 /* SyntaxKind.UndefinedKeyword */:
            case 146 /* SyntaxKind.NeverKeyword */:
            case 200 /* SyntaxKind.LiteralType */:
                return true;
            case 187 /* SyntaxKind.ArrayType */:
                return isThislessType(node.elementType);
            case 182 /* SyntaxKind.TypeReference */:
                return !node.typeArguments || node.typeArguments.every(isThislessType);
        }
        return false;
    }
    /** A type parameter is thisless if its constraint is thisless, or if it has no constraint. */
    function isThislessTypeParameter(node) {
        var constraint = (0, ts_1.getEffectiveConstraintOfTypeParameter)(node);
        return !constraint || isThislessType(constraint);
    }
    /**
     * A variable-like declaration is free of this references if it has a type annotation
     * that is thisless, or if it has no type annotation and no initializer (and is thus of type any).
     */
    function isThislessVariableLikeDeclaration(node) {
        var typeNode = (0, ts_1.getEffectiveTypeAnnotationNode)(node);
        return typeNode ? isThislessType(typeNode) : !(0, ts_1.hasInitializer)(node);
    }
    /**
     * A function-like declaration is considered free of `this` references if it has a return type
     * annotation that is free of this references and if each parameter is thisless and if
     * each type parameter (if present) is thisless.
     */
    function isThislessFunctionLikeDeclaration(node) {
        var returnType = (0, ts_1.getEffectiveReturnTypeNode)(node);
        var typeParameters = (0, ts_1.getEffectiveTypeParameterDeclarations)(node);
        return (node.kind === 175 /* SyntaxKind.Constructor */ || (!!returnType && isThislessType(returnType))) &&
            node.parameters.every(isThislessVariableLikeDeclaration) &&
            typeParameters.every(isThislessTypeParameter);
    }
    /**
     * Returns true if the class or interface member given by the symbol is free of "this" references. The
     * function may return false for symbols that are actually free of "this" references because it is not
     * feasible to perform a complete analysis in all cases. In particular, property members with types
     * inferred from their initializers and function members with inferred return types are conservatively
     * assumed not to be free of "this" references.
     */
    function isThisless(symbol) {
        if (symbol.declarations && symbol.declarations.length === 1) {
            var declaration = symbol.declarations[0];
            if (declaration) {
                switch (declaration.kind) {
                    case 171 /* SyntaxKind.PropertyDeclaration */:
                    case 170 /* SyntaxKind.PropertySignature */:
                        return isThislessVariableLikeDeclaration(declaration);
                    case 173 /* SyntaxKind.MethodDeclaration */:
                    case 172 /* SyntaxKind.MethodSignature */:
                    case 175 /* SyntaxKind.Constructor */:
                    case 176 /* SyntaxKind.GetAccessor */:
                    case 177 /* SyntaxKind.SetAccessor */:
                        return isThislessFunctionLikeDeclaration(declaration);
                }
            }
        }
        return false;
    }
    // The mappingThisOnly flag indicates that the only type parameter being mapped is "this". When the flag is true,
    // we check symbols to see if we can quickly conclude they are free of "this" references, thus needing no instantiation.
    function createInstantiatedSymbolTable(symbols, mapper, mappingThisOnly) {
        var result = (0, ts_1.createSymbolTable)();
        for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {
            var symbol = symbols_1[_i];
            result.set(symbol.escapedName, mappingThisOnly && isThisless(symbol) ? symbol : instantiateSymbol(symbol, mapper));
        }
        return result;
    }
    function addInheritedMembers(symbols, baseSymbols) {
        for (var _i = 0, baseSymbols_1 = baseSymbols; _i < baseSymbols_1.length; _i++) {
            var base = baseSymbols_1[_i];
            if (isStaticPrivateIdentifierProperty(base)) {
                continue;
            }
            var derived = symbols.get(base.escapedName);
            if (!derived
                // non-constructor/static-block assignment declarations are ignored here; they're not treated as overrides
                || derived.valueDeclaration
                    && (0, ts_1.isBinaryExpression)(derived.valueDeclaration)
                    && !isConstructorDeclaredProperty(derived)
                    && !(0, ts_1.getContainingClassStaticBlock)(derived.valueDeclaration)) {
                symbols.set(base.escapedName, base);
                symbols.set(base.escapedName, base);
            }
        }
    }
    function isStaticPrivateIdentifierProperty(s) {
        return !!s.valueDeclaration && (0, ts_1.isPrivateIdentifierClassElementDeclaration)(s.valueDeclaration) && (0, ts_1.isStatic)(s.valueDeclaration);
    }
    function resolveDeclaredMembers(type) {
        if (!type.declaredProperties) {
            var symbol = type.symbol;
            var members = getMembersOfSymbol(symbol);
            type.declaredProperties = getNamedMembers(members);
            // Start with signatures at empty array in case of recursive types
            type.declaredCallSignatures = ts_1.emptyArray;
            type.declaredConstructSignatures = ts_1.emptyArray;
            type.declaredIndexInfos = ts_1.emptyArray;
            type.declaredCallSignatures = getSignaturesOfSymbol(members.get("__call" /* InternalSymbolName.Call */));
            type.declaredConstructSignatures = getSignaturesOfSymbol(members.get("__new" /* InternalSymbolName.New */));
            type.declaredIndexInfos = getIndexInfosOfSymbol(symbol);
        }
        return type;
    }
    /**
     * Indicates whether a type can be used as a property name.
     */
    function isTypeUsableAsPropertyName(type) {
        return !!(type.flags & 8576 /* TypeFlags.StringOrNumberLiteralOrUnique */);
    }
    /**
     * Indicates whether a declaration name is definitely late-bindable.
     * A declaration name is only late-bindable if:
     * - It is a `ComputedPropertyName`.
     * - Its expression is an `Identifier` or either a `PropertyAccessExpression` an
     * `ElementAccessExpression` consisting only of these same three types of nodes.
     * - The type of its expression is a string or numeric literal type, or is a `unique symbol` type.
     */
    function isLateBindableName(node) {
        if (!(0, ts_1.isComputedPropertyName)(node) && !(0, ts_1.isElementAccessExpression)(node)) {
            return false;
        }
        var expr = (0, ts_1.isComputedPropertyName)(node) ? node.expression : node.argumentExpression;
        return (0, ts_1.isEntityNameExpression)(expr)
            && isTypeUsableAsPropertyName((0, ts_1.isComputedPropertyName)(node) ? checkComputedPropertyName(node) : checkExpressionCached(expr));
    }
    function isLateBoundName(name) {
        return name.charCodeAt(0) === 95 /* CharacterCodes._ */ &&
            name.charCodeAt(1) === 95 /* CharacterCodes._ */ &&
            name.charCodeAt(2) === 64 /* CharacterCodes.at */;
    }
    /**
     * Indicates whether a declaration has a late-bindable dynamic name.
     */
    function hasLateBindableName(node) {
        var name = (0, ts_1.getNameOfDeclaration)(node);
        return !!name && isLateBindableName(name);
    }
    /**
     * Indicates whether a declaration has an early-bound name or a dynamic name that can be late-bound.
     */
    function hasBindableName(node) {
        return !(0, ts_1.hasDynamicName)(node) || hasLateBindableName(node);
    }
    /**
     * Indicates whether a declaration name is a dynamic name that cannot be late-bound.
     */
    function isNonBindableDynamicName(node) {
        return (0, ts_1.isDynamicName)(node) && !isLateBindableName(node);
    }
    /**
     * Gets the symbolic name for a member from its type.
     */
    function getPropertyNameFromType(type) {
        if (type.flags & 8192 /* TypeFlags.UniqueESSymbol */) {
            return type.escapedName;
        }
        if (type.flags & (128 /* TypeFlags.StringLiteral */ | 256 /* TypeFlags.NumberLiteral */)) {
            return (0, ts_1.escapeLeadingUnderscores)("" + type.value);
        }
        return ts_1.Debug.fail();
    }
    /**
     * Adds a declaration to a late-bound dynamic member. This performs the same function for
     * late-bound members that `addDeclarationToSymbol` in binder.ts performs for early-bound
     * members.
     */
    function addDeclarationToLateBoundSymbol(symbol, member, symbolFlags) {
        ts_1.Debug.assert(!!((0, ts_1.getCheckFlags)(symbol) & 4096 /* CheckFlags.Late */), "Expected a late-bound symbol.");
        symbol.flags |= symbolFlags;
        getSymbolLinks(member.symbol).lateSymbol = symbol;
        if (!symbol.declarations) {
            symbol.declarations = [member];
        }
        else if (!member.symbol.isReplaceableByMethod) {
            symbol.declarations.push(member);
        }
        if (symbolFlags & 111551 /* SymbolFlags.Value */) {
            if (!symbol.valueDeclaration || symbol.valueDeclaration.kind !== member.kind) {
                symbol.valueDeclaration = member;
            }
        }
    }
    /**
     * Performs late-binding of a dynamic member. This performs the same function for
     * late-bound members that `declareSymbol` in binder.ts performs for early-bound
     * members.
     *
     * If a symbol is a dynamic name from a computed property, we perform an additional "late"
     * binding phase to attempt to resolve the name for the symbol from the type of the computed
     * property's expression. If the type of the expression is a string-literal, numeric-literal,
     * or unique symbol type, we can use that type as the name of the symbol.
     *
     * For example, given:
     *
     *   const x = Symbol();
     *
     *   interface I {
     *     [x]: number;
     *   }
     *
     * The binder gives the property `[x]: number` a special symbol with the name "__computed".
     * In the late-binding phase we can type-check the expression `x` and see that it has a
     * unique symbol type which we can then use as the name of the member. This allows users
     * to define custom symbols that can be used in the members of an object type.
     *
     * @param parent The containing symbol for the member.
     * @param earlySymbols The early-bound symbols of the parent.
     * @param lateSymbols The late-bound symbols of the parent.
     * @param decl The member to bind.
     */
    function lateBindMember(parent, earlySymbols, lateSymbols, decl) {
        ts_1.Debug.assert(!!decl.symbol, "The member is expected to have a symbol.");
        var links = getNodeLinks(decl);
        if (!links.resolvedSymbol) {
            // In the event we attempt to resolve the late-bound name of this member recursively,
            // fall back to the early-bound name of this member.
            links.resolvedSymbol = decl.symbol;
            var declName = (0, ts_1.isBinaryExpression)(decl) ? decl.left : decl.name;
            var type = (0, ts_1.isElementAccessExpression)(declName) ? checkExpressionCached(declName.argumentExpression) : checkComputedPropertyName(declName);
            if (isTypeUsableAsPropertyName(type)) {
                var memberName = getPropertyNameFromType(type);
                var symbolFlags = decl.symbol.flags;
                // Get or add a late-bound symbol for the member. This allows us to merge late-bound accessor declarations.
                var lateSymbol = lateSymbols.get(memberName);
                if (!lateSymbol)
                    lateSymbols.set(memberName, lateSymbol = createSymbol(0 /* SymbolFlags.None */, memberName, 4096 /* CheckFlags.Late */));
                // Report an error if a late-bound member has the same name as an early-bound member,
                // or if we have another early-bound symbol declaration with the same name and
                // conflicting flags.
                var earlySymbol = earlySymbols && earlySymbols.get(memberName);
                if (lateSymbol.flags & getExcludedSymbolFlags(symbolFlags) || earlySymbol) {
                    // If we have an existing early-bound member, combine its declarations so that we can
                    // report an error at each declaration.
                    var declarations = earlySymbol ? (0, ts_1.concatenate)(earlySymbol.declarations, lateSymbol.declarations) : lateSymbol.declarations;
                    var name_18 = !(type.flags & 8192 /* TypeFlags.UniqueESSymbol */) && (0, ts_1.unescapeLeadingUnderscores)(memberName) || (0, ts_1.declarationNameToString)(declName);
                    (0, ts_1.forEach)(declarations, function (declaration) { return error((0, ts_1.getNameOfDeclaration)(declaration) || declaration, ts_1.Diagnostics.Property_0_was_also_declared_here, name_18); });
                    error(declName || decl, ts_1.Diagnostics.Duplicate_property_0, name_18);
                    lateSymbol = createSymbol(0 /* SymbolFlags.None */, memberName, 4096 /* CheckFlags.Late */);
                }
                lateSymbol.links.nameType = type;
                addDeclarationToLateBoundSymbol(lateSymbol, decl, symbolFlags);
                if (lateSymbol.parent) {
                    ts_1.Debug.assert(lateSymbol.parent === parent, "Existing symbol parent should match new one");
                }
                else {
                    lateSymbol.parent = parent;
                }
                return links.resolvedSymbol = lateSymbol;
            }
        }
        return links.resolvedSymbol;
    }
    function getResolvedMembersOrExportsOfSymbol(symbol, resolutionKind) {
        var links = getSymbolLinks(symbol);
        if (!links[resolutionKind]) {
            var isStatic_1 = resolutionKind === "resolvedExports" /* MembersOrExportsResolutionKind.resolvedExports */;
            var earlySymbols = !isStatic_1 ? symbol.members :
                symbol.flags & 1536 /* SymbolFlags.Module */ ? getExportsOfModuleWorker(symbol).exports :
                    symbol.exports;
            // In the event we recursively resolve the members/exports of the symbol, we
            // set the initial value of resolvedMembers/resolvedExports to the early-bound
            // members/exports of the symbol.
            links[resolutionKind] = earlySymbols || emptySymbols;
            // fill in any as-yet-unresolved late-bound members.
            var lateSymbols = (0, ts_1.createSymbolTable)();
            for (var _i = 0, _a = symbol.declarations || ts_1.emptyArray; _i < _a.length; _i++) {
                var decl = _a[_i];
                var members = (0, ts_1.getMembersOfDeclaration)(decl);
                if (members) {
                    for (var _b = 0, members_3 = members; _b < members_3.length; _b++) {
                        var member = members_3[_b];
                        if (isStatic_1 === (0, ts_1.hasStaticModifier)(member)) {
                            if (hasLateBindableName(member)) {
                                lateBindMember(symbol, earlySymbols, lateSymbols, member);
                            }
                        }
                    }
                }
            }
            var assignments = symbol.assignmentDeclarationMembers;
            if (assignments) {
                var decls = (0, ts_1.arrayFrom)(assignments.values());
                for (var _c = 0, decls_1 = decls; _c < decls_1.length; _c++) {
                    var member = decls_1[_c];
                    var assignmentKind = (0, ts_1.getAssignmentDeclarationKind)(member);
                    var isInstanceMember = assignmentKind === 3 /* AssignmentDeclarationKind.PrototypeProperty */
                        || (0, ts_1.isBinaryExpression)(member) && isPossiblyAliasedThisProperty(member, assignmentKind)
                        || assignmentKind === 9 /* AssignmentDeclarationKind.ObjectDefinePrototypeProperty */
                        || assignmentKind === 6 /* AssignmentDeclarationKind.Prototype */; // A straight `Prototype` assignment probably can never have a computed name
                    if (isStatic_1 === !isInstanceMember) {
                        if (hasLateBindableName(member)) {
                            lateBindMember(symbol, earlySymbols, lateSymbols, member);
                        }
                    }
                }
            }
            links[resolutionKind] = combineSymbolTables(earlySymbols, lateSymbols) || emptySymbols;
        }
        return links[resolutionKind];
    }
    /**
     * Gets a SymbolTable containing both the early- and late-bound members of a symbol.
     *
     * For a description of late-binding, see `lateBindMember`.
     */
    function getMembersOfSymbol(symbol) {
        return symbol.flags & 6256 /* SymbolFlags.LateBindingContainer */
            ? getResolvedMembersOrExportsOfSymbol(symbol, "resolvedMembers" /* MembersOrExportsResolutionKind.resolvedMembers */)
            : symbol.members || emptySymbols;
    }
    /**
     * If a symbol is the dynamic name of the member of an object type, get the late-bound
     * symbol of the member.
     *
     * For a description of late-binding, see `lateBindMember`.
     */
    function getLateBoundSymbol(symbol) {
        if (symbol.flags & 106500 /* SymbolFlags.ClassMember */ && symbol.escapedName === "__computed" /* InternalSymbolName.Computed */) {
            var links = getSymbolLinks(symbol);
            if (!links.lateSymbol && (0, ts_1.some)(symbol.declarations, hasLateBindableName)) {
                // force late binding of members/exports. This will set the late-bound symbol
                var parent_6 = getMergedSymbol(symbol.parent);
                if ((0, ts_1.some)(symbol.declarations, ts_1.hasStaticModifier)) {
                    getExportsOfSymbol(parent_6);
                }
                else {
                    getMembersOfSymbol(parent_6);
                }
            }
            return links.lateSymbol || (links.lateSymbol = symbol);
        }
        return symbol;
    }
    function getTypeWithThisArgument(type, thisArgument, needApparentType) {
        if ((0, ts_1.getObjectFlags)(type) & 4 /* ObjectFlags.Reference */) {
            var target = type.target;
            var typeArguments = getTypeArguments(type);
            return (0, ts_1.length)(target.typeParameters) === (0, ts_1.length)(typeArguments) ? createTypeReference(target, (0, ts_1.concatenate)(typeArguments, [thisArgument || target.thisType])) : type;
        }
        else if (type.flags & 2097152 /* TypeFlags.Intersection */) {
            var types = (0, ts_1.sameMap)(type.types, function (t) { return getTypeWithThisArgument(t, thisArgument, needApparentType); });
            return types !== type.types ? getIntersectionType(types) : type;
        }
        return needApparentType ? getApparentType(type) : type;
    }
    function resolveObjectTypeMembers(type, source, typeParameters, typeArguments) {
        var mapper;
        var members;
        var callSignatures;
        var constructSignatures;
        var indexInfos;
        if ((0, ts_1.rangeEquals)(typeParameters, typeArguments, 0, typeParameters.length)) {
            members = source.symbol ? getMembersOfSymbol(source.symbol) : (0, ts_1.createSymbolTable)(source.declaredProperties);
            callSignatures = source.declaredCallSignatures;
            constructSignatures = source.declaredConstructSignatures;
            indexInfos = source.declaredIndexInfos;
        }
        else {
            mapper = createTypeMapper(typeParameters, typeArguments);
            members = createInstantiatedSymbolTable(source.declaredProperties, mapper, /*mappingThisOnly*/ typeParameters.length === 1);
            callSignatures = instantiateSignatures(source.declaredCallSignatures, mapper);
            constructSignatures = instantiateSignatures(source.declaredConstructSignatures, mapper);
            indexInfos = instantiateIndexInfos(source.declaredIndexInfos, mapper);
        }
        var baseTypes = getBaseTypes(source);
        if (baseTypes.length) {
            if (source.symbol && members === getMembersOfSymbol(source.symbol)) {
                members = (0, ts_1.createSymbolTable)(source.declaredProperties);
            }
            setStructuredTypeMembers(type, members, callSignatures, constructSignatures, indexInfos);
            var thisArgument = (0, ts_1.lastOrUndefined)(typeArguments);
            for (var _i = 0, baseTypes_1 = baseTypes; _i < baseTypes_1.length; _i++) {
                var baseType = baseTypes_1[_i];
                var instantiatedBaseType = thisArgument ? getTypeWithThisArgument(instantiateType(baseType, mapper), thisArgument) : baseType;
                addInheritedMembers(members, getPropertiesOfType(instantiatedBaseType));
                callSignatures = (0, ts_1.concatenate)(callSignatures, getSignaturesOfType(instantiatedBaseType, 0 /* SignatureKind.Call */));
                constructSignatures = (0, ts_1.concatenate)(constructSignatures, getSignaturesOfType(instantiatedBaseType, 1 /* SignatureKind.Construct */));
                var inheritedIndexInfos = instantiatedBaseType !== anyType ? getIndexInfosOfType(instantiatedBaseType) : [createIndexInfo(stringType, anyType, /*isReadonly*/ false)];
                indexInfos = (0, ts_1.concatenate)(indexInfos, (0, ts_1.filter)(inheritedIndexInfos, function (info) { return !findIndexInfo(indexInfos, info.keyType); }));
            }
        }
        setStructuredTypeMembers(type, members, callSignatures, constructSignatures, indexInfos);
    }
    function resolveClassOrInterfaceMembers(type) {
        resolveObjectTypeMembers(type, resolveDeclaredMembers(type), ts_1.emptyArray, ts_1.emptyArray);
    }
    function resolveTypeReferenceMembers(type) {
        var source = resolveDeclaredMembers(type.target);
        var typeParameters = (0, ts_1.concatenate)(source.typeParameters, [source.thisType]);
        var typeArguments = getTypeArguments(type);
        var paddedTypeArguments = typeArguments.length === typeParameters.length ? typeArguments : (0, ts_1.concatenate)(typeArguments, [type]);
        resolveObjectTypeMembers(type, source, typeParameters, paddedTypeArguments);
    }
    function createSignature(declaration, typeParameters, thisParameter, parameters, resolvedReturnType, resolvedTypePredicate, minArgumentCount, flags) {
        var sig = new Signature(checker, flags);
        sig.declaration = declaration;
        sig.typeParameters = typeParameters;
        sig.parameters = parameters;
        sig.thisParameter = thisParameter;
        sig.resolvedReturnType = resolvedReturnType;
        sig.resolvedTypePredicate = resolvedTypePredicate;
        sig.minArgumentCount = minArgumentCount;
        sig.resolvedMinArgumentCount = undefined;
        sig.target = undefined;
        sig.mapper = undefined;
        sig.compositeSignatures = undefined;
        sig.compositeKind = undefined;
        return sig;
    }
    function cloneSignature(sig) {
        var result = createSignature(sig.declaration, sig.typeParameters, sig.thisParameter, sig.parameters, /*resolvedReturnType*/ undefined, 
        /*resolvedTypePredicate*/ undefined, sig.minArgumentCount, sig.flags & 39 /* SignatureFlags.PropagatingFlags */);
        result.target = sig.target;
        result.mapper = sig.mapper;
        result.compositeSignatures = sig.compositeSignatures;
        result.compositeKind = sig.compositeKind;
        return result;
    }
    function createUnionSignature(signature, unionSignatures) {
        var result = cloneSignature(signature);
        result.compositeSignatures = unionSignatures;
        result.compositeKind = 1048576 /* TypeFlags.Union */;
        result.target = undefined;
        result.mapper = undefined;
        return result;
    }
    function getOptionalCallSignature(signature, callChainFlags) {
        if ((signature.flags & 24 /* SignatureFlags.CallChainFlags */) === callChainFlags) {
            return signature;
        }
        if (!signature.optionalCallSignatureCache) {
            signature.optionalCallSignatureCache = {};
        }
        var key = callChainFlags === 8 /* SignatureFlags.IsInnerCallChain */ ? "inner" : "outer";
        return signature.optionalCallSignatureCache[key]
            || (signature.optionalCallSignatureCache[key] = createOptionalCallSignature(signature, callChainFlags));
    }
    function createOptionalCallSignature(signature, callChainFlags) {
        ts_1.Debug.assert(callChainFlags === 8 /* SignatureFlags.IsInnerCallChain */ || callChainFlags === 16 /* SignatureFlags.IsOuterCallChain */, "An optional call signature can either be for an inner call chain or an outer call chain, but not both.");
        var result = cloneSignature(signature);
        result.flags |= callChainFlags;
        return result;
    }
    function getExpandedParameters(sig, skipUnionExpanding) {
        if (signatureHasRestParameter(sig)) {
            var restIndex_1 = sig.parameters.length - 1;
            var restType = getTypeOfSymbol(sig.parameters[restIndex_1]);
            if (isTupleType(restType)) {
                return [expandSignatureParametersWithTupleMembers(restType, restIndex_1)];
            }
            else if (!skipUnionExpanding && restType.flags & 1048576 /* TypeFlags.Union */ && (0, ts_1.every)(restType.types, isTupleType)) {
                return (0, ts_1.map)(restType.types, function (t) { return expandSignatureParametersWithTupleMembers(t, restIndex_1); });
            }
        }
        return [sig.parameters];
        function expandSignatureParametersWithTupleMembers(restType, restIndex) {
            var elementTypes = getElementTypes(restType);
            var associatedNames = getUniqAssociatedNamesFromTupleType(restType);
            var restParams = (0, ts_1.map)(elementTypes, function (t, i) {
                // Lookup the label from the individual tuple passed in before falling back to the signature `rest` parameter name
                var name = associatedNames && associatedNames[i] ? associatedNames[i] :
                    getParameterNameAtPosition(sig, restIndex + i, restType);
                var flags = restType.target.elementFlags[i];
                var checkFlags = flags & 12 /* ElementFlags.Variable */ ? 32768 /* CheckFlags.RestParameter */ :
                    flags & 2 /* ElementFlags.Optional */ ? 16384 /* CheckFlags.OptionalParameter */ : 0;
                var symbol = createSymbol(1 /* SymbolFlags.FunctionScopedVariable */, name, checkFlags);
                symbol.links.type = flags & 4 /* ElementFlags.Rest */ ? createArrayType(t) : t;
                return symbol;
            });
            return (0, ts_1.concatenate)(sig.parameters.slice(0, restIndex), restParams);
        }
        function getUniqAssociatedNamesFromTupleType(type) {
            var associatedNamesMap = new Map();
            return (0, ts_1.map)(type.target.labeledElementDeclarations, function (labeledElement) {
                var name = getTupleElementLabel(labeledElement);
                var prevCounter = associatedNamesMap.get(name);
                if (prevCounter === undefined) {
                    associatedNamesMap.set(name, 1);
                    return name;
                }
                else {
                    associatedNamesMap.set(name, prevCounter + 1);
                    return "".concat(name, "_").concat(prevCounter);
                }
            });
        }
    }
    function getDefaultConstructSignatures(classType) {
        var baseConstructorType = getBaseConstructorTypeOfClass(classType);
        var baseSignatures = getSignaturesOfType(baseConstructorType, 1 /* SignatureKind.Construct */);
        var declaration = (0, ts_1.getClassLikeDeclarationOfSymbol)(classType.symbol);
        var isAbstract = !!declaration && (0, ts_1.hasSyntacticModifier)(declaration, 256 /* ModifierFlags.Abstract */);
        if (baseSignatures.length === 0) {
            return [createSignature(/*declaration*/ undefined, classType.localTypeParameters, /*thisParameter*/ undefined, ts_1.emptyArray, classType, /*resolvedTypePredicate*/ undefined, 0, isAbstract ? 4 /* SignatureFlags.Abstract */ : 0 /* SignatureFlags.None */)];
        }
        var baseTypeNode = getBaseTypeNodeOfClass(classType);
        var isJavaScript = (0, ts_1.isInJSFile)(baseTypeNode);
        var typeArguments = typeArgumentsFromTypeReferenceNode(baseTypeNode);
        var typeArgCount = (0, ts_1.length)(typeArguments);
        var result = [];
        for (var _i = 0, baseSignatures_1 = baseSignatures; _i < baseSignatures_1.length; _i++) {
            var baseSig = baseSignatures_1[_i];
            var minTypeArgumentCount = getMinTypeArgumentCount(baseSig.typeParameters);
            var typeParamCount = (0, ts_1.length)(baseSig.typeParameters);
            if (isJavaScript || typeArgCount >= minTypeArgumentCount && typeArgCount <= typeParamCount) {
                var sig = typeParamCount ? createSignatureInstantiation(baseSig, fillMissingTypeArguments(typeArguments, baseSig.typeParameters, minTypeArgumentCount, isJavaScript)) : cloneSignature(baseSig);
                sig.typeParameters = classType.localTypeParameters;
                sig.resolvedReturnType = classType;
                sig.flags = isAbstract ? sig.flags | 4 /* SignatureFlags.Abstract */ : sig.flags & ~4 /* SignatureFlags.Abstract */;
                result.push(sig);
            }
        }
        return result;
    }
    function findMatchingSignature(signatureList, signature, partialMatch, ignoreThisTypes, ignoreReturnTypes) {
        for (var _i = 0, signatureList_1 = signatureList; _i < signatureList_1.length; _i++) {
            var s = signatureList_1[_i];
            if (compareSignaturesIdentical(s, signature, partialMatch, ignoreThisTypes, ignoreReturnTypes, partialMatch ? compareTypesSubtypeOf : compareTypesIdentical)) {
                return s;
            }
        }
    }
    function findMatchingSignatures(signatureLists, signature, listIndex) {
        if (signature.typeParameters) {
            // We require an exact match for generic signatures, so we only return signatures from the first
            // signature list and only if they have exact matches in the other signature lists.
            if (listIndex > 0) {
                return undefined;
            }
            for (var i = 1; i < signatureLists.length; i++) {
                if (!findMatchingSignature(signatureLists[i], signature, /*partialMatch*/ false, /*ignoreThisTypes*/ false, /*ignoreReturnTypes*/ false)) {
                    return undefined;
                }
            }
            return [signature];
        }
        var result;
        for (var i = 0; i < signatureLists.length; i++) {
            // Allow matching non-generic signatures to have excess parameters and different return types.
            // Prefer matching this types if possible.
            var match = i === listIndex ? signature : findMatchingSignature(signatureLists[i], signature, /*partialMatch*/ true, /*ignoreThisTypes*/ false, /*ignoreReturnTypes*/ true);
            if (!match) {
                return undefined;
            }
            result = (0, ts_1.appendIfUnique)(result, match);
        }
        return result;
    }
    // The signatures of a union type are those signatures that are present in each of the constituent types.
    // Generic signatures must match exactly, but non-generic signatures are allowed to have extra optional
    // parameters and may differ in return types. When signatures differ in return types, the resulting return
    // type is the union of the constituent return types.
    function getUnionSignatures(signatureLists) {
        var result;
        var indexWithLengthOverOne;
        for (var i = 0; i < signatureLists.length; i++) {
            if (signatureLists[i].length === 0)
                return ts_1.emptyArray;
            if (signatureLists[i].length > 1) {
                indexWithLengthOverOne = indexWithLengthOverOne === undefined ? i : -1; // -1 is a signal there are multiple overload sets
            }
            for (var _i = 0, _a = signatureLists[i]; _i < _a.length; _i++) {
                var signature = _a[_i];
                // Only process signatures with parameter lists that aren't already in the result list
                if (!result || !findMatchingSignature(result, signature, /*partialMatch*/ false, /*ignoreThisTypes*/ false, /*ignoreReturnTypes*/ true)) {
                    var unionSignatures = findMatchingSignatures(signatureLists, signature, i);
                    if (unionSignatures) {
                        var s = signature;
                        // Union the result types when more than one signature matches
                        if (unionSignatures.length > 1) {
                            var thisParameter = signature.thisParameter;
                            var firstThisParameterOfUnionSignatures = (0, ts_1.forEach)(unionSignatures, function (sig) { return sig.thisParameter; });
                            if (firstThisParameterOfUnionSignatures) {
                                var thisType = getIntersectionType((0, ts_1.mapDefined)(unionSignatures, function (sig) { return sig.thisParameter && getTypeOfSymbol(sig.thisParameter); }));
                                thisParameter = createSymbolWithType(firstThisParameterOfUnionSignatures, thisType);
                            }
                            s = createUnionSignature(signature, unionSignatures);
                            s.thisParameter = thisParameter;
                        }
                        (result || (result = [])).push(s);
                    }
                }
            }
        }
        if (!(0, ts_1.length)(result) && indexWithLengthOverOne !== -1) {
            // No sufficiently similar signature existed to subsume all the other signatures in the union - time to see if we can make a single
            // signature that handles all over them. We only do this when there are overloads in only one constituent.
            // (Overloads are conditional in nature and having overloads in multiple constituents would necessitate making a power set of
            // signatures from the type, whose ordering would be non-obvious)
            var masterList = signatureLists[indexWithLengthOverOne !== undefined ? indexWithLengthOverOne : 0];
            var results = masterList.slice();
            var _loop_4 = function (signatures) {
                if (signatures !== masterList) {
                    var signature_1 = signatures[0];
                    ts_1.Debug.assert(!!signature_1, "getUnionSignatures bails early on empty signature lists and should not have empty lists on second pass");
                    results = !!signature_1.typeParameters && (0, ts_1.some)(results, function (s) { return !!s.typeParameters && !compareTypeParametersIdentical(signature_1.typeParameters, s.typeParameters); }) ? undefined : (0, ts_1.map)(results, function (sig) { return combineSignaturesOfUnionMembers(sig, signature_1); });
                    if (!results) {
                        return "break";
                    }
                }
            };
            for (var _b = 0, signatureLists_1 = signatureLists; _b < signatureLists_1.length; _b++) {
                var signatures = signatureLists_1[_b];
                var state_2 = _loop_4(signatures);
                if (state_2 === "break")
                    break;
            }
            result = results;
        }
        return result || ts_1.emptyArray;
    }
    function compareTypeParametersIdentical(sourceParams, targetParams) {
        if ((0, ts_1.length)(sourceParams) !== (0, ts_1.length)(targetParams)) {
            return false;
        }
        if (!sourceParams || !targetParams) {
            return true;
        }
        var mapper = createTypeMapper(targetParams, sourceParams);
        for (var i = 0; i < sourceParams.length; i++) {
            var source = sourceParams[i];
            var target = targetParams[i];
            if (source === target)
                continue;
            // We instantiate the target type parameter constraints into the source types so we can recognize `<T, U extends T>` as the same as `<A, B extends A>`
            if (!isTypeIdenticalTo(getConstraintFromTypeParameter(source) || unknownType, instantiateType(getConstraintFromTypeParameter(target) || unknownType, mapper)))
                return false;
            // We don't compare defaults - we just use the type parameter defaults from the first signature that seems to match.
            // It might make sense to combine these defaults in the future, but doing so intelligently requires knowing
            // if the parameter is used covariantly or contravariantly (so we intersect if it's used like a parameter or union if used like a return type)
            // and, since it's just an inference _default_, just picking one arbitrarily works OK.
        }
        return true;
    }
    function combineUnionThisParam(left, right, mapper) {
        if (!left || !right) {
            return left || right;
        }
        // A signature `this` type might be a read or a write position... It's very possible that it should be invariant
        // and we should refuse to merge signatures if there are `this` types and they do not match. However, so as to be
        // permissive when calling, for now, we'll intersect the `this` types just like we do for param types in union signatures.
        var thisType = getIntersectionType([getTypeOfSymbol(left), instantiateType(getTypeOfSymbol(right), mapper)]);
        return createSymbolWithType(left, thisType);
    }
    function combineUnionParameters(left, right, mapper) {
        var leftCount = getParameterCount(left);
        var rightCount = getParameterCount(right);
        var longest = leftCount >= rightCount ? left : right;
        var shorter = longest === left ? right : left;
        var longestCount = longest === left ? leftCount : rightCount;
        var eitherHasEffectiveRest = (hasEffectiveRestParameter(left) || hasEffectiveRestParameter(right));
        var needsExtraRestElement = eitherHasEffectiveRest && !hasEffectiveRestParameter(longest);
        var params = new Array(longestCount + (needsExtraRestElement ? 1 : 0));
        for (var i = 0; i < longestCount; i++) {
            var longestParamType = tryGetTypeAtPosition(longest, i);
            if (longest === right) {
                longestParamType = instantiateType(longestParamType, mapper);
            }
            var shorterParamType = tryGetTypeAtPosition(shorter, i) || unknownType;
            if (shorter === right) {
                shorterParamType = instantiateType(shorterParamType, mapper);
            }
            var unionParamType = getIntersectionType([longestParamType, shorterParamType]);
            var isRestParam = eitherHasEffectiveRest && !needsExtraRestElement && i === (longestCount - 1);
            var isOptional = i >= getMinArgumentCount(longest) && i >= getMinArgumentCount(shorter);
            var leftName = i >= leftCount ? undefined : getParameterNameAtPosition(left, i);
            var rightName = i >= rightCount ? undefined : getParameterNameAtPosition(right, i);
            var paramName = leftName === rightName ? leftName :
                !leftName ? rightName :
                    !rightName ? leftName :
                        undefined;
            var paramSymbol = createSymbol(1 /* SymbolFlags.FunctionScopedVariable */ | (isOptional && !isRestParam ? 16777216 /* SymbolFlags.Optional */ : 0), paramName || "arg".concat(i));
            paramSymbol.links.type = isRestParam ? createArrayType(unionParamType) : unionParamType;
            params[i] = paramSymbol;
        }
        if (needsExtraRestElement) {
            var restParamSymbol = createSymbol(1 /* SymbolFlags.FunctionScopedVariable */, "args");
            restParamSymbol.links.type = createArrayType(getTypeAtPosition(shorter, longestCount));
            if (shorter === right) {
                restParamSymbol.links.type = instantiateType(restParamSymbol.links.type, mapper);
            }
            params[longestCount] = restParamSymbol;
        }
        return params;
    }
    function combineSignaturesOfUnionMembers(left, right) {
        var typeParams = left.typeParameters || right.typeParameters;
        var paramMapper;
        if (left.typeParameters && right.typeParameters) {
            paramMapper = createTypeMapper(right.typeParameters, left.typeParameters);
            // We just use the type parameter defaults from the first signature
        }
        var declaration = left.declaration;
        var params = combineUnionParameters(left, right, paramMapper);
        var thisParam = combineUnionThisParam(left.thisParameter, right.thisParameter, paramMapper);
        var minArgCount = Math.max(left.minArgumentCount, right.minArgumentCount);
        var result = createSignature(declaration, typeParams, thisParam, params, 
        /*resolvedReturnType*/ undefined, 
        /*resolvedTypePredicate*/ undefined, minArgCount, (left.flags | right.flags) & 39 /* SignatureFlags.PropagatingFlags */);
        result.compositeKind = 1048576 /* TypeFlags.Union */;
        result.compositeSignatures = (0, ts_1.concatenate)(left.compositeKind !== 2097152 /* TypeFlags.Intersection */ && left.compositeSignatures || [left], [right]);
        if (paramMapper) {
            result.mapper = left.compositeKind !== 2097152 /* TypeFlags.Intersection */ && left.mapper && left.compositeSignatures ? combineTypeMappers(left.mapper, paramMapper) : paramMapper;
        }
        return result;
    }
    function getUnionIndexInfos(types) {
        var sourceInfos = getIndexInfosOfType(types[0]);
        if (sourceInfos) {
            var result = [];
            var _loop_5 = function (info) {
                var indexType = info.keyType;
                if ((0, ts_1.every)(types, function (t) { return !!getIndexInfoOfType(t, indexType); })) {
                    result.push(createIndexInfo(indexType, getUnionType((0, ts_1.map)(types, function (t) { return getIndexTypeOfType(t, indexType); })), (0, ts_1.some)(types, function (t) { return getIndexInfoOfType(t, indexType).isReadonly; })));
                }
            };
            for (var _i = 0, sourceInfos_1 = sourceInfos; _i < sourceInfos_1.length; _i++) {
                var info = sourceInfos_1[_i];
                _loop_5(info);
            }
            return result;
        }
        return ts_1.emptyArray;
    }
    function resolveUnionTypeMembers(type) {
        // The members and properties collections are empty for union types. To get all properties of a union
        // type use getPropertiesOfType (only the language service uses this).
        var callSignatures = getUnionSignatures((0, ts_1.map)(type.types, function (t) { return t === globalFunctionType ? [unknownSignature] : getSignaturesOfType(t, 0 /* SignatureKind.Call */); }));
        var constructSignatures = getUnionSignatures((0, ts_1.map)(type.types, function (t) { return getSignaturesOfType(t, 1 /* SignatureKind.Construct */); }));
        var indexInfos = getUnionIndexInfos(type.types);
        setStructuredTypeMembers(type, emptySymbols, callSignatures, constructSignatures, indexInfos);
    }
    function intersectTypes(type1, type2) {
        return !type1 ? type2 : !type2 ? type1 : getIntersectionType([type1, type2]);
    }
    function findMixins(types) {
        var constructorTypeCount = (0, ts_1.countWhere)(types, function (t) { return getSignaturesOfType(t, 1 /* SignatureKind.Construct */).length > 0; });
        var mixinFlags = (0, ts_1.map)(types, isMixinConstructorType);
        if (constructorTypeCount > 0 && constructorTypeCount === (0, ts_1.countWhere)(mixinFlags, function (b) { return b; })) {
            var firstMixinIndex = mixinFlags.indexOf(/*searchElement*/ true);
            mixinFlags[firstMixinIndex] = false;
        }
        return mixinFlags;
    }
    function includeMixinType(type, types, mixinFlags, index) {
        var mixedTypes = [];
        for (var i = 0; i < types.length; i++) {
            if (i === index) {
                mixedTypes.push(type);
            }
            else if (mixinFlags[i]) {
                mixedTypes.push(getReturnTypeOfSignature(getSignaturesOfType(types[i], 1 /* SignatureKind.Construct */)[0]));
            }
        }
        return getIntersectionType(mixedTypes);
    }
    function resolveIntersectionTypeMembers(type) {
        // The members and properties collections are empty for intersection types. To get all properties of an
        // intersection type use getPropertiesOfType (only the language service uses this).
        var callSignatures;
        var constructSignatures;
        var indexInfos;
        var types = type.types;
        var mixinFlags = findMixins(types);
        var mixinCount = (0, ts_1.countWhere)(mixinFlags, function (b) { return b; });
        var _loop_6 = function (i) {
            var t = type.types[i];
            // When an intersection type contains mixin constructor types, the construct signatures from
            // those types are discarded and their return types are mixed into the return types of all
            // other construct signatures in the intersection type. For example, the intersection type
            // '{ new(...args: any[]) => A } & { new(s: string) => B }' has a single construct signature
            // 'new(s: string) => A & B'.
            if (!mixinFlags[i]) {
                var signatures = getSignaturesOfType(t, 1 /* SignatureKind.Construct */);
                if (signatures.length && mixinCount > 0) {
                    signatures = (0, ts_1.map)(signatures, function (s) {
                        var clone = cloneSignature(s);
                        clone.resolvedReturnType = includeMixinType(getReturnTypeOfSignature(s), types, mixinFlags, i);
                        return clone;
                    });
                }
                constructSignatures = appendSignatures(constructSignatures, signatures);
            }
            callSignatures = appendSignatures(callSignatures, getSignaturesOfType(t, 0 /* SignatureKind.Call */));
            indexInfos = (0, ts_1.reduceLeft)(getIndexInfosOfType(t), function (infos, newInfo) { return appendIndexInfo(infos, newInfo, /*union*/ false); }, indexInfos);
        };
        for (var i = 0; i < types.length; i++) {
            _loop_6(i);
        }
        setStructuredTypeMembers(type, emptySymbols, callSignatures || ts_1.emptyArray, constructSignatures || ts_1.emptyArray, indexInfos || ts_1.emptyArray);
    }
    function appendSignatures(signatures, newSignatures) {
        var _loop_7 = function (sig) {
            if (!signatures || (0, ts_1.every)(signatures, function (s) { return !compareSignaturesIdentical(s, sig, /*partialMatch*/ false, /*ignoreThisTypes*/ false, /*ignoreReturnTypes*/ false, compareTypesIdentical); })) {
                signatures = (0, ts_1.append)(signatures, sig);
            }
        };
        for (var _i = 0, newSignatures_1 = newSignatures; _i < newSignatures_1.length; _i++) {
            var sig = newSignatures_1[_i];
            _loop_7(sig);
        }
        return signatures;
    }
    function appendIndexInfo(indexInfos, newInfo, union) {
        if (indexInfos) {
            for (var i = 0; i < indexInfos.length; i++) {
                var info = indexInfos[i];
                if (info.keyType === newInfo.keyType) {
                    indexInfos[i] = createIndexInfo(info.keyType, union ? getUnionType([info.type, newInfo.type]) : getIntersectionType([info.type, newInfo.type]), union ? info.isReadonly || newInfo.isReadonly : info.isReadonly && newInfo.isReadonly);
                    return indexInfos;
                }
            }
        }
        return (0, ts_1.append)(indexInfos, newInfo);
    }
    /**
     * Converts an AnonymousType to a ResolvedType.
     */
    function resolveAnonymousTypeMembers(type) {
        if (type.target) {
            setStructuredTypeMembers(type, emptySymbols, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
            var members_4 = createInstantiatedSymbolTable(getPropertiesOfObjectType(type.target), type.mapper, /*mappingThisOnly*/ false);
            var callSignatures = instantiateSignatures(getSignaturesOfType(type.target, 0 /* SignatureKind.Call */), type.mapper);
            var constructSignatures = instantiateSignatures(getSignaturesOfType(type.target, 1 /* SignatureKind.Construct */), type.mapper);
            var indexInfos_1 = instantiateIndexInfos(getIndexInfosOfType(type.target), type.mapper);
            setStructuredTypeMembers(type, members_4, callSignatures, constructSignatures, indexInfos_1);
            return;
        }
        var symbol = getMergedSymbol(type.symbol);
        if (symbol.flags & 2048 /* SymbolFlags.TypeLiteral */) {
            setStructuredTypeMembers(type, emptySymbols, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
            var members_5 = getMembersOfSymbol(symbol);
            var callSignatures = getSignaturesOfSymbol(members_5.get("__call" /* InternalSymbolName.Call */));
            var constructSignatures = getSignaturesOfSymbol(members_5.get("__new" /* InternalSymbolName.New */));
            var indexInfos_2 = getIndexInfosOfSymbol(symbol);
            setStructuredTypeMembers(type, members_5, callSignatures, constructSignatures, indexInfos_2);
            return;
        }
        // Combinations of function, class, enum and module
        var members = emptySymbols;
        var indexInfos;
        if (symbol.exports) {
            members = getExportsOfSymbol(symbol);
            if (symbol === globalThisSymbol) {
                var varsOnly_1 = new Map();
                members.forEach(function (p) {
                    var _a;
                    if (!(p.flags & 418 /* SymbolFlags.BlockScoped */) && !(p.flags & 512 /* SymbolFlags.ValueModule */ && ((_a = p.declarations) === null || _a === void 0 ? void 0 : _a.length) && (0, ts_1.every)(p.declarations, ts_1.isAmbientModule))) {
                        varsOnly_1.set(p.escapedName, p);
                    }
                });
                members = varsOnly_1;
            }
        }
        var baseConstructorIndexInfo;
        setStructuredTypeMembers(type, members, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
        if (symbol.flags & 32 /* SymbolFlags.Class */) {
            var classType = getDeclaredTypeOfClassOrInterface(symbol);
            var baseConstructorType = getBaseConstructorTypeOfClass(classType);
            if (baseConstructorType.flags & (524288 /* TypeFlags.Object */ | 2097152 /* TypeFlags.Intersection */ | 8650752 /* TypeFlags.TypeVariable */)) {
                members = (0, ts_1.createSymbolTable)(getNamedOrIndexSignatureMembers(members));
                addInheritedMembers(members, getPropertiesOfType(baseConstructorType));
            }
            else if (baseConstructorType === anyType) {
                baseConstructorIndexInfo = createIndexInfo(stringType, anyType, /*isReadonly*/ false);
            }
        }
        var indexSymbol = getIndexSymbolFromSymbolTable(members);
        if (indexSymbol) {
            indexInfos = getIndexInfosOfIndexSymbol(indexSymbol);
        }
        else {
            if (baseConstructorIndexInfo) {
                indexInfos = (0, ts_1.append)(indexInfos, baseConstructorIndexInfo);
            }
            if (symbol.flags & 384 /* SymbolFlags.Enum */ && (getDeclaredTypeOfSymbol(symbol).flags & 32 /* TypeFlags.Enum */ ||
                (0, ts_1.some)(type.properties, function (prop) { return !!(getTypeOfSymbol(prop).flags & 296 /* TypeFlags.NumberLike */); }))) {
                indexInfos = (0, ts_1.append)(indexInfos, enumNumberIndexInfo);
            }
        }
        setStructuredTypeMembers(type, members, ts_1.emptyArray, ts_1.emptyArray, indexInfos || ts_1.emptyArray);
        // We resolve the members before computing the signatures because a signature may use
        // typeof with a qualified name expression that circularly references the type we are
        // in the process of resolving (see issue #6072). The temporarily empty signature list
        // will never be observed because a qualified name can't reference signatures.
        if (symbol.flags & (16 /* SymbolFlags.Function */ | 8192 /* SymbolFlags.Method */)) {
            type.callSignatures = getSignaturesOfSymbol(symbol);
        }
        // And likewise for construct signatures for classes
        if (symbol.flags & 32 /* SymbolFlags.Class */) {
            var classType_1 = getDeclaredTypeOfClassOrInterface(symbol);
            var constructSignatures = symbol.members ? getSignaturesOfSymbol(symbol.members.get("__constructor" /* InternalSymbolName.Constructor */)) : ts_1.emptyArray;
            if (symbol.flags & 16 /* SymbolFlags.Function */) {
                constructSignatures = (0, ts_1.addRange)(constructSignatures.slice(), (0, ts_1.mapDefined)(type.callSignatures, function (sig) { return isJSConstructor(sig.declaration) ?
                    createSignature(sig.declaration, sig.typeParameters, sig.thisParameter, sig.parameters, classType_1, /*resolvedTypePredicate*/ undefined, sig.minArgumentCount, sig.flags & 39 /* SignatureFlags.PropagatingFlags */) :
                    undefined; }));
            }
            if (!constructSignatures.length) {
                constructSignatures = getDefaultConstructSignatures(classType_1);
            }
            type.constructSignatures = constructSignatures;
        }
    }
    function replaceIndexedAccess(instantiable, type, replacement) {
        // map type.indexType to 0
        // map type.objectType to `[TReplacement]`
        // thus making the indexed access `[TReplacement][0]` or `TReplacement`
        return instantiateType(instantiable, createTypeMapper([type.indexType, type.objectType], [getNumberLiteralType(0), createTupleType([replacement])]));
    }
    function resolveReverseMappedTypeMembers(type) {
        var indexInfo = getIndexInfoOfType(type.source, stringType);
        var modifiers = getMappedTypeModifiers(type.mappedType);
        var readonlyMask = modifiers & 1 /* MappedTypeModifiers.IncludeReadonly */ ? false : true;
        var optionalMask = modifiers & 4 /* MappedTypeModifiers.IncludeOptional */ ? 0 : 16777216 /* SymbolFlags.Optional */;
        var indexInfos = indexInfo ? [createIndexInfo(stringType, inferReverseMappedType(indexInfo.type, type.mappedType, type.constraintType), readonlyMask && indexInfo.isReadonly)] : ts_1.emptyArray;
        var members = (0, ts_1.createSymbolTable)();
        for (var _i = 0, _a = getPropertiesOfType(type.source); _i < _a.length; _i++) {
            var prop = _a[_i];
            var checkFlags = 8192 /* CheckFlags.ReverseMapped */ | (readonlyMask && isReadonlySymbol(prop) ? 8 /* CheckFlags.Readonly */ : 0);
            var inferredProp = createSymbol(4 /* SymbolFlags.Property */ | prop.flags & optionalMask, prop.escapedName, checkFlags);
            inferredProp.declarations = prop.declarations;
            inferredProp.links.nameType = getSymbolLinks(prop).nameType;
            inferredProp.links.propertyType = getTypeOfSymbol(prop);
            if (type.constraintType.type.flags & 8388608 /* TypeFlags.IndexedAccess */
                && type.constraintType.type.objectType.flags & 262144 /* TypeFlags.TypeParameter */
                && type.constraintType.type.indexType.flags & 262144 /* TypeFlags.TypeParameter */) {
                // A reverse mapping of `{[K in keyof T[K_1]]: T[K_1]}` is the same as that of `{[K in keyof T]: T}`, since all we care about is
                // inferring to the "type parameter" (or indexed access) shared by the constraint and template. So, to reduce the number of
                // type identities produced, we simplify such indexed access occurences
                var newTypeParam = type.constraintType.type.objectType;
                var newMappedType = replaceIndexedAccess(type.mappedType, type.constraintType.type, newTypeParam);
                inferredProp.links.mappedType = newMappedType;
                inferredProp.links.constraintType = getIndexType(newTypeParam);
            }
            else {
                inferredProp.links.mappedType = type.mappedType;
                inferredProp.links.constraintType = type.constraintType;
            }
            members.set(prop.escapedName, inferredProp);
        }
        setStructuredTypeMembers(type, members, ts_1.emptyArray, ts_1.emptyArray, indexInfos);
    }
    // Return the lower bound of the key type in a mapped type. Intuitively, the lower
    // bound includes those keys that are known to always be present, for example because
    // because of constraints on type parameters (e.g. 'keyof T' for a constrained T).
    function getLowerBoundOfKeyType(type) {
        if (type.flags & 4194304 /* TypeFlags.Index */) {
            var t = getApparentType(type.type);
            return isGenericTupleType(t) ? getKnownKeysOfTupleType(t) : getIndexType(t);
        }
        if (type.flags & 16777216 /* TypeFlags.Conditional */) {
            if (type.root.isDistributive) {
                var checkType = type.checkType;
                var constraint = getLowerBoundOfKeyType(checkType);
                if (constraint !== checkType) {
                    return getConditionalTypeInstantiation(type, prependTypeMapping(type.root.checkType, constraint, type.mapper));
                }
            }
            return type;
        }
        if (type.flags & 1048576 /* TypeFlags.Union */) {
            return mapType(type, getLowerBoundOfKeyType, /*noReductions*/ true);
        }
        if (type.flags & 2097152 /* TypeFlags.Intersection */) {
            // Similarly to getTypeFromIntersectionTypeNode, we preserve the special string & {}, number & {},
            // and bigint & {} intersections that are used to prevent subtype reduction in union types.
            var types = type.types;
            if (types.length === 2 && !!(types[0].flags & (4 /* TypeFlags.String */ | 8 /* TypeFlags.Number */ | 64 /* TypeFlags.BigInt */)) && types[1] === emptyTypeLiteralType) {
                return type;
            }
            return getIntersectionType((0, ts_1.sameMap)(type.types, getLowerBoundOfKeyType));
        }
        return type;
    }
    function getIsLateCheckFlag(s) {
        return (0, ts_1.getCheckFlags)(s) & 4096 /* CheckFlags.Late */;
    }
    function forEachMappedTypePropertyKeyTypeAndIndexSignatureKeyType(type, include, stringsOnly, cb) {
        for (var _i = 0, _a = getPropertiesOfType(type); _i < _a.length; _i++) {
            var prop = _a[_i];
            cb(getLiteralTypeFromProperty(prop, include));
        }
        if (type.flags & 1 /* TypeFlags.Any */) {
            cb(stringType);
        }
        else {
            for (var _b = 0, _c = getIndexInfosOfType(type); _b < _c.length; _b++) {
                var info = _c[_b];
                if (!stringsOnly || info.keyType.flags & (4 /* TypeFlags.String */ | 134217728 /* TypeFlags.TemplateLiteral */)) {
                    cb(info.keyType);
                }
            }
        }
    }
    /** Resolve the members of a mapped type { [P in K]: T } */
    function resolveMappedTypeMembers(type) {
        var members = (0, ts_1.createSymbolTable)();
        var indexInfos;
        // Resolve upfront such that recursive references see an empty object type.
        setStructuredTypeMembers(type, emptySymbols, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
        // In { [P in K]: T }, we refer to P as the type parameter type, K as the constraint type,
        // and T as the template type.
        var typeParameter = getTypeParameterFromMappedType(type);
        var constraintType = getConstraintTypeFromMappedType(type);
        var mappedType = type.target || type;
        var nameType = getNameTypeFromMappedType(mappedType);
        var shouldLinkPropDeclarations = !nameType || isFilteringMappedType(mappedType);
        var templateType = getTemplateTypeFromMappedType(mappedType);
        var modifiersType = getApparentType(getModifiersTypeFromMappedType(type)); // The 'T' in 'keyof T'
        var templateModifiers = getMappedTypeModifiers(type);
        var include = keyofStringsOnly ? 128 /* TypeFlags.StringLiteral */ : 8576 /* TypeFlags.StringOrNumberLiteralOrUnique */;
        if (isMappedTypeWithKeyofConstraintDeclaration(type)) {
            // We have a { [P in keyof T]: X }
            forEachMappedTypePropertyKeyTypeAndIndexSignatureKeyType(modifiersType, include, keyofStringsOnly, addMemberForKeyType);
        }
        else {
            forEachType(getLowerBoundOfKeyType(constraintType), addMemberForKeyType);
        }
        setStructuredTypeMembers(type, members, ts_1.emptyArray, ts_1.emptyArray, indexInfos || ts_1.emptyArray);
        function addMemberForKeyType(keyType) {
            var propNameType = nameType ? instantiateType(nameType, appendTypeMapping(type.mapper, typeParameter, keyType)) : keyType;
            forEachType(propNameType, function (t) { return addMemberForKeyTypeWorker(keyType, t); });
        }
        function addMemberForKeyTypeWorker(keyType, propNameType) {
            // If the current iteration type constituent is a string literal type, create a property.
            // Otherwise, for type string create a string index signature.
            if (isTypeUsableAsPropertyName(propNameType)) {
                var propName = getPropertyNameFromType(propNameType);
                // String enum members from separate enums with identical values
                // are distinct types with the same property name. Make the resulting
                // property symbol's name type be the union of those enum member types.
                var existingProp = members.get(propName);
                if (existingProp) {
                    existingProp.links.nameType = getUnionType([existingProp.links.nameType, propNameType]);
                    existingProp.links.keyType = getUnionType([existingProp.links.keyType, keyType]);
                }
                else {
                    var modifiersProp = isTypeUsableAsPropertyName(keyType) ? getPropertyOfType(modifiersType, getPropertyNameFromType(keyType)) : undefined;
                    var isOptional = !!(templateModifiers & 4 /* MappedTypeModifiers.IncludeOptional */ ||
                        !(templateModifiers & 8 /* MappedTypeModifiers.ExcludeOptional */) && modifiersProp && modifiersProp.flags & 16777216 /* SymbolFlags.Optional */);
                    var isReadonly = !!(templateModifiers & 1 /* MappedTypeModifiers.IncludeReadonly */ ||
                        !(templateModifiers & 2 /* MappedTypeModifiers.ExcludeReadonly */) && modifiersProp && isReadonlySymbol(modifiersProp));
                    var stripOptional = strictNullChecks && !isOptional && modifiersProp && modifiersProp.flags & 16777216 /* SymbolFlags.Optional */;
                    var lateFlag = modifiersProp ? getIsLateCheckFlag(modifiersProp) : 0;
                    var prop = createSymbol(4 /* SymbolFlags.Property */ | (isOptional ? 16777216 /* SymbolFlags.Optional */ : 0), propName, lateFlag | 262144 /* CheckFlags.Mapped */ | (isReadonly ? 8 /* CheckFlags.Readonly */ : 0) | (stripOptional ? 524288 /* CheckFlags.StripOptional */ : 0));
                    prop.links.mappedType = type;
                    prop.links.nameType = propNameType;
                    prop.links.keyType = keyType;
                    if (modifiersProp) {
                        prop.links.syntheticOrigin = modifiersProp;
                        prop.declarations = shouldLinkPropDeclarations ? modifiersProp.declarations : undefined;
                    }
                    members.set(propName, prop);
                }
            }
            else if (isValidIndexKeyType(propNameType) || propNameType.flags & (1 /* TypeFlags.Any */ | 32 /* TypeFlags.Enum */)) {
                var indexKeyType = propNameType.flags & (1 /* TypeFlags.Any */ | 4 /* TypeFlags.String */) ? stringType :
                    propNameType.flags & (8 /* TypeFlags.Number */ | 32 /* TypeFlags.Enum */) ? numberType :
                        propNameType;
                var propType = instantiateType(templateType, appendTypeMapping(type.mapper, typeParameter, keyType));
                var indexInfo = createIndexInfo(indexKeyType, propType, !!(templateModifiers & 1 /* MappedTypeModifiers.IncludeReadonly */));
                indexInfos = appendIndexInfo(indexInfos, indexInfo, /*union*/ true);
            }
        }
    }
    function getTypeOfMappedSymbol(symbol) {
        if (!symbol.links.type) {
            var mappedType = symbol.links.mappedType;
            if (!pushTypeResolution(symbol, 0 /* TypeSystemPropertyName.Type */)) {
                mappedType.containsError = true;
                return errorType;
            }
            var templateType = getTemplateTypeFromMappedType(mappedType.target || mappedType);
            var mapper = appendTypeMapping(mappedType.mapper, getTypeParameterFromMappedType(mappedType), symbol.links.keyType);
            var propType = instantiateType(templateType, mapper);
            // When creating an optional property in strictNullChecks mode, if 'undefined' isn't assignable to the
            // type, we include 'undefined' in the type. Similarly, when creating a non-optional property in strictNullChecks
            // mode, if the underlying property is optional we remove 'undefined' from the type.
            var type = strictNullChecks && symbol.flags & 16777216 /* SymbolFlags.Optional */ && !maybeTypeOfKind(propType, 32768 /* TypeFlags.Undefined */ | 16384 /* TypeFlags.Void */) ? getOptionalType(propType, /*isProperty*/ true) :
                symbol.links.checkFlags & 524288 /* CheckFlags.StripOptional */ ? removeMissingOrUndefinedType(propType) :
                    propType;
            if (!popTypeResolution()) {
                error(currentNode, ts_1.Diagnostics.Type_of_property_0_circularly_references_itself_in_mapped_type_1, symbolToString(symbol), typeToString(mappedType));
                type = errorType;
            }
            symbol.links.type = type;
        }
        return symbol.links.type;
    }
    function getTypeParameterFromMappedType(type) {
        return type.typeParameter ||
            (type.typeParameter = getDeclaredTypeOfTypeParameter(getSymbolOfDeclaration(type.declaration.typeParameter)));
    }
    function getConstraintTypeFromMappedType(type) {
        return type.constraintType ||
            (type.constraintType = getConstraintOfTypeParameter(getTypeParameterFromMappedType(type)) || errorType);
    }
    function getNameTypeFromMappedType(type) {
        return type.declaration.nameType ?
            type.nameType || (type.nameType = instantiateType(getTypeFromTypeNode(type.declaration.nameType), type.mapper)) :
            undefined;
    }
    function getTemplateTypeFromMappedType(type) {
        return type.templateType ||
            (type.templateType = type.declaration.type ?
                instantiateType(addOptionality(getTypeFromTypeNode(type.declaration.type), /*isProperty*/ true, !!(getMappedTypeModifiers(type) & 4 /* MappedTypeModifiers.IncludeOptional */)), type.mapper) :
                errorType);
    }
    function getConstraintDeclarationForMappedType(type) {
        return (0, ts_1.getEffectiveConstraintOfTypeParameter)(type.declaration.typeParameter);
    }
    function isMappedTypeWithKeyofConstraintDeclaration(type) {
        var constraintDeclaration = getConstraintDeclarationForMappedType(type); // TODO: GH#18217
        return constraintDeclaration.kind === 197 /* SyntaxKind.TypeOperator */ &&
            constraintDeclaration.operator === 143 /* SyntaxKind.KeyOfKeyword */;
    }
    function getModifiersTypeFromMappedType(type) {
        if (!type.modifiersType) {
            if (isMappedTypeWithKeyofConstraintDeclaration(type)) {
                // If the constraint declaration is a 'keyof T' node, the modifiers type is T. We check
                // AST nodes here because, when T is a non-generic type, the logic below eagerly resolves
                // 'keyof T' to a literal union type and we can't recover T from that type.
                type.modifiersType = instantiateType(getTypeFromTypeNode(getConstraintDeclarationForMappedType(type).type), type.mapper);
            }
            else {
                // Otherwise, get the declared constraint type, and if the constraint type is a type parameter,
                // get the constraint of that type parameter. If the resulting type is an indexed type 'keyof T',
                // the modifiers type is T. Otherwise, the modifiers type is unknown.
                var declaredType = getTypeFromMappedTypeNode(type.declaration);
                var constraint = getConstraintTypeFromMappedType(declaredType);
                var extendedConstraint = constraint && constraint.flags & 262144 /* TypeFlags.TypeParameter */ ? getConstraintOfTypeParameter(constraint) : constraint;
                type.modifiersType = extendedConstraint && extendedConstraint.flags & 4194304 /* TypeFlags.Index */ ? instantiateType(extendedConstraint.type, type.mapper) : unknownType;
            }
        }
        return type.modifiersType;
    }
    function getMappedTypeModifiers(type) {
        var declaration = type.declaration;
        return (declaration.readonlyToken ? declaration.readonlyToken.kind === 41 /* SyntaxKind.MinusToken */ ? 2 /* MappedTypeModifiers.ExcludeReadonly */ : 1 /* MappedTypeModifiers.IncludeReadonly */ : 0) |
            (declaration.questionToken ? declaration.questionToken.kind === 41 /* SyntaxKind.MinusToken */ ? 8 /* MappedTypeModifiers.ExcludeOptional */ : 4 /* MappedTypeModifiers.IncludeOptional */ : 0);
    }
    function getMappedTypeOptionality(type) {
        var modifiers = getMappedTypeModifiers(type);
        return modifiers & 8 /* MappedTypeModifiers.ExcludeOptional */ ? -1 : modifiers & 4 /* MappedTypeModifiers.IncludeOptional */ ? 1 : 0;
    }
    function getCombinedMappedTypeOptionality(type) {
        var optionality = getMappedTypeOptionality(type);
        var modifiersType = getModifiersTypeFromMappedType(type);
        return optionality || (isGenericMappedType(modifiersType) ? getMappedTypeOptionality(modifiersType) : 0);
    }
    function isPartialMappedType(type) {
        return !!((0, ts_1.getObjectFlags)(type) & 32 /* ObjectFlags.Mapped */ && getMappedTypeModifiers(type) & 4 /* MappedTypeModifiers.IncludeOptional */);
    }
    function isGenericMappedType(type) {
        if ((0, ts_1.getObjectFlags)(type) & 32 /* ObjectFlags.Mapped */) {
            var constraint = getConstraintTypeFromMappedType(type);
            if (isGenericIndexType(constraint)) {
                return true;
            }
            // A mapped type is generic if the 'as' clause references generic types other than the iteration type.
            // To determine this, we substitute the constraint type (that we now know isn't generic) for the iteration
            // type and check whether the resulting type is generic.
            var nameType = getNameTypeFromMappedType(type);
            if (nameType && isGenericIndexType(instantiateType(nameType, makeUnaryTypeMapper(getTypeParameterFromMappedType(type), constraint)))) {
                return true;
            }
        }
        return false;
    }
    function isFilteringMappedType(type) {
        var nameType = getNameTypeFromMappedType(type);
        return !!nameType && isTypeAssignableTo(nameType, getTypeParameterFromMappedType(type));
    }
    function resolveStructuredTypeMembers(type) {
        if (!type.members) {
            if (type.flags & 524288 /* TypeFlags.Object */) {
                if (type.objectFlags & 4 /* ObjectFlags.Reference */) {
                    resolveTypeReferenceMembers(type);
                }
                else if (type.objectFlags & 3 /* ObjectFlags.ClassOrInterface */) {
                    resolveClassOrInterfaceMembers(type);
                }
                else if (type.objectFlags & 1024 /* ObjectFlags.ReverseMapped */) {
                    resolveReverseMappedTypeMembers(type);
                }
                else if (type.objectFlags & 16 /* ObjectFlags.Anonymous */) {
                    resolveAnonymousTypeMembers(type);
                }
                else if (type.objectFlags & 32 /* ObjectFlags.Mapped */) {
                    resolveMappedTypeMembers(type);
                }
                else {
                    ts_1.Debug.fail("Unhandled object type " + ts_1.Debug.formatObjectFlags(type.objectFlags));
                }
            }
            else if (type.flags & 1048576 /* TypeFlags.Union */) {
                resolveUnionTypeMembers(type);
            }
            else if (type.flags & 2097152 /* TypeFlags.Intersection */) {
                resolveIntersectionTypeMembers(type);
            }
            else {
                ts_1.Debug.fail("Unhandled type " + ts_1.Debug.formatTypeFlags(type.flags));
            }
        }
        return type;
    }
    /** Return properties of an object type or an empty array for other types */
    function getPropertiesOfObjectType(type) {
        if (type.flags & 524288 /* TypeFlags.Object */) {
            return resolveStructuredTypeMembers(type).properties;
        }
        return ts_1.emptyArray;
    }
    /** If the given type is an object type and that type has a property by the given name,
     * return the symbol for that property. Otherwise return undefined.
     */
    function getPropertyOfObjectType(type, name) {
        if (type.flags & 524288 /* TypeFlags.Object */) {
            var resolved = resolveStructuredTypeMembers(type);
            var symbol = resolved.members.get(name);
            if (symbol && symbolIsValue(symbol)) {
                return symbol;
            }
        }
    }
    function getPropertiesOfUnionOrIntersectionType(type) {
        if (!type.resolvedProperties) {
            var members = (0, ts_1.createSymbolTable)();
            for (var _i = 0, _a = type.types; _i < _a.length; _i++) {
                var current = _a[_i];
                for (var _b = 0, _c = getPropertiesOfType(current); _b < _c.length; _b++) {
                    var prop = _c[_b];
                    if (!members.has(prop.escapedName)) {
                        var combinedProp = getPropertyOfUnionOrIntersectionType(type, prop.escapedName);
                        if (combinedProp) {
                            members.set(prop.escapedName, combinedProp);
                        }
                    }
                }
                // The properties of a union type are those that are present in all constituent types, so
                // we only need to check the properties of the first type without index signature
                if (type.flags & 1048576 /* TypeFlags.Union */ && getIndexInfosOfType(current).length === 0) {
                    break;
                }
            }
            type.resolvedProperties = getNamedMembers(members);
        }
        return type.resolvedProperties;
    }
    function getPropertiesOfType(type) {
        type = getReducedApparentType(type);
        return type.flags & 3145728 /* TypeFlags.UnionOrIntersection */ ?
            getPropertiesOfUnionOrIntersectionType(type) :
            getPropertiesOfObjectType(type);
    }
    function forEachPropertyOfType(type, action) {
        type = getReducedApparentType(type);
        if (type.flags & 3670016 /* TypeFlags.StructuredType */) {
            resolveStructuredTypeMembers(type).members.forEach(function (symbol, escapedName) {
                if (isNamedMember(symbol, escapedName)) {
                    action(symbol, escapedName);
                }
            });
        }
    }
    function isTypeInvalidDueToUnionDiscriminant(contextualType, obj) {
        var list = obj.properties;
        return list.some(function (property) {
            var nameType = property.name && ((0, ts_1.isJsxNamespacedName)(property.name) ? getStringLiteralType((0, ts_1.getTextOfJsxAttributeName)(property.name)) : getLiteralTypeFromPropertyName(property.name));
            var name = nameType && isTypeUsableAsPropertyName(nameType) ? getPropertyNameFromType(nameType) : undefined;
            var expected = name === undefined ? undefined : getTypeOfPropertyOfType(contextualType, name);
            return !!expected && isLiteralType(expected) && !isTypeAssignableTo(getTypeOfNode(property), expected);
        });
    }
    function getAllPossiblePropertiesOfTypes(types) {
        var unionType = getUnionType(types);
        if (!(unionType.flags & 1048576 /* TypeFlags.Union */)) {
            return getAugmentedPropertiesOfType(unionType);
        }
        var props = (0, ts_1.createSymbolTable)();
        for (var _i = 0, types_4 = types; _i < types_4.length; _i++) {
            var memberType = types_4[_i];
            for (var _a = 0, _b = getAugmentedPropertiesOfType(memberType); _a < _b.length; _a++) {
                var escapedName = _b[_a].escapedName;
                if (!props.has(escapedName)) {
                    var prop = createUnionOrIntersectionProperty(unionType, escapedName);
                    // May be undefined if the property is private
                    if (prop)
                        props.set(escapedName, prop);
                }
            }
        }
        return (0, ts_1.arrayFrom)(props.values());
    }
    function getConstraintOfType(type) {
        return type.flags & 262144 /* TypeFlags.TypeParameter */ ? getConstraintOfTypeParameter(type) :
            type.flags & 8388608 /* TypeFlags.IndexedAccess */ ? getConstraintOfIndexedAccess(type) :
                type.flags & 16777216 /* TypeFlags.Conditional */ ? getConstraintOfConditionalType(type) :
                    getBaseConstraintOfType(type);
    }
    function getConstraintOfTypeParameter(typeParameter) {
        return hasNonCircularBaseConstraint(typeParameter) ? getConstraintFromTypeParameter(typeParameter) : undefined;
    }
    function isConstTypeVariable(type) {
        var _a;
        return !!(type && (type.flags & 262144 /* TypeFlags.TypeParameter */ && (0, ts_1.some)((_a = type.symbol) === null || _a === void 0 ? void 0 : _a.declarations, function (d) { return (0, ts_1.hasSyntacticModifier)(d, 2048 /* ModifierFlags.Const */); }) ||
            type.flags & 1048576 /* TypeFlags.Union */ && (0, ts_1.some)(type.types, isConstTypeVariable) ||
            type.flags & 8388608 /* TypeFlags.IndexedAccess */ && isConstTypeVariable(type.objectType) ||
            type.flags & 16777216 /* TypeFlags.Conditional */ && isConstTypeVariable(getConstraintOfConditionalType(type)) ||
            type.flags & 33554432 /* TypeFlags.Substitution */ && isConstTypeVariable(type.baseType) ||
            isGenericTupleType(type) && (0, ts_1.findIndex)(getElementTypes(type), function (t, i) { return !!(type.target.elementFlags[i] & 8 /* ElementFlags.Variadic */) && isConstTypeVariable(t); }) >= 0));
    }
    function getConstraintOfIndexedAccess(type) {
        return hasNonCircularBaseConstraint(type) ? getConstraintFromIndexedAccess(type) : undefined;
    }
    function getSimplifiedTypeOrConstraint(type) {
        var simplified = getSimplifiedType(type, /*writing*/ false);
        return simplified !== type ? simplified : getConstraintOfType(type);
    }
    function getConstraintFromIndexedAccess(type) {
        if (isMappedTypeGenericIndexedAccess(type) || isGenericMappedType(type.objectType)) {
            // For indexed access types of the form { [P in K]: E }[X], where K is non-generic and X is generic,
            // we substitute an instantiation of E where P is replaced with X.
            return substituteIndexedMappedType(type.objectType, type.indexType);
        }
        var indexConstraint = getSimplifiedTypeOrConstraint(type.indexType);
        if (indexConstraint && indexConstraint !== type.indexType) {
            var indexedAccess = getIndexedAccessTypeOrUndefined(type.objectType, indexConstraint, type.accessFlags);
            if (indexedAccess) {
                return indexedAccess;
            }
        }
        var objectConstraint = getSimplifiedTypeOrConstraint(type.objectType);
        if (objectConstraint && objectConstraint !== type.objectType) {
            return getIndexedAccessTypeOrUndefined(objectConstraint, type.indexType, type.accessFlags);
        }
        return undefined;
    }
    function getDefaultConstraintOfConditionalType(type) {
        if (!type.resolvedDefaultConstraint) {
            // An `any` branch of a conditional type would normally be viral - specifically, without special handling here,
            // a conditional type with a single branch of type `any` would be assignable to anything, since it's constraint would simplify to
            // just `any`. This result is _usually_ unwanted - so instead here we elide an `any` branch from the constraint type,
            // in effect treating `any` like `never` rather than `unknown` in this location.
            var trueConstraint = getInferredTrueTypeFromConditionalType(type);
            var falseConstraint = getFalseTypeFromConditionalType(type);
            type.resolvedDefaultConstraint = isTypeAny(trueConstraint) ? falseConstraint : isTypeAny(falseConstraint) ? trueConstraint : getUnionType([trueConstraint, falseConstraint]);
        }
        return type.resolvedDefaultConstraint;
    }
    function getConstraintOfDistributiveConditionalType(type) {
        if (type.resolvedConstraintOfDistributive !== undefined) {
            return type.resolvedConstraintOfDistributive || undefined;
        }
        // Check if we have a conditional type of the form 'T extends U ? X : Y', where T is a constrained
        // type parameter. If so, create an instantiation of the conditional type where T is replaced
        // with its constraint. We do this because if the constraint is a union type it will be distributed
        // over the conditional type and possibly reduced. For example, 'T extends undefined ? never : T'
        // removes 'undefined' from T.
        // We skip returning a distributive constraint for a restrictive instantiation of a conditional type
        // as the constraint for all type params (check type included) have been replace with `unknown`, which
        // is going to produce even more false positive/negative results than the distribute constraint already does.
        // Please note: the distributive constraint is a kludge for emulating what a negated type could to do filter
        // a union - once negated types exist and are applied to the conditional false branch, this "constraint"
        // likely doesn't need to exist.
        if (type.root.isDistributive && type.restrictiveInstantiation !== type) {
            var simplified = getSimplifiedType(type.checkType, /*writing*/ false);
            var constraint = simplified === type.checkType ? getConstraintOfType(simplified) : simplified;
            if (constraint && constraint !== type.checkType) {
                var instantiated = getConditionalTypeInstantiation(type, prependTypeMapping(type.root.checkType, constraint, type.mapper));
                if (!(instantiated.flags & 131072 /* TypeFlags.Never */)) {
                    type.resolvedConstraintOfDistributive = instantiated;
                    return instantiated;
                }
            }
        }
        type.resolvedConstraintOfDistributive = false;
        return undefined;
    }
    function getConstraintFromConditionalType(type) {
        return getConstraintOfDistributiveConditionalType(type) || getDefaultConstraintOfConditionalType(type);
    }
    function getConstraintOfConditionalType(type) {
        return hasNonCircularBaseConstraint(type) ? getConstraintFromConditionalType(type) : undefined;
    }
    function getEffectiveConstraintOfIntersection(types, targetIsUnion) {
        var constraints;
        var hasDisjointDomainType = false;
        for (var _i = 0, types_5 = types; _i < types_5.length; _i++) {
            var t = types_5[_i];
            if (t.flags & 465829888 /* TypeFlags.Instantiable */) {
                // We keep following constraints as long as we have an instantiable type that is known
                // not to be circular or infinite (hence we stop on index access types).
                var constraint = getConstraintOfType(t);
                while (constraint && constraint.flags & (262144 /* TypeFlags.TypeParameter */ | 4194304 /* TypeFlags.Index */ | 16777216 /* TypeFlags.Conditional */)) {
                    constraint = getConstraintOfType(constraint);
                }
                if (constraint) {
                    constraints = (0, ts_1.append)(constraints, constraint);
                    if (targetIsUnion) {
                        constraints = (0, ts_1.append)(constraints, t);
                    }
                }
            }
            else if (t.flags & 469892092 /* TypeFlags.DisjointDomains */ || isEmptyAnonymousObjectType(t)) {
                hasDisjointDomainType = true;
            }
        }
        // If the target is a union type or if we are intersecting with types belonging to one of the
        // disjoint domains, we may end up producing a constraint that hasn't been examined before.
        if (constraints && (targetIsUnion || hasDisjointDomainType)) {
            if (hasDisjointDomainType) {
                // We add any types belong to one of the disjoint domains because they might cause the final
                // intersection operation to reduce the union constraints.
                for (var _a = 0, types_6 = types; _a < types_6.length; _a++) {
                    var t = types_6[_a];
                    if (t.flags & 469892092 /* TypeFlags.DisjointDomains */ || isEmptyAnonymousObjectType(t)) {
                        constraints = (0, ts_1.append)(constraints, t);
                    }
                }
            }
            // The source types were normalized; ensure the result is normalized too.
            return getNormalizedType(getIntersectionType(constraints), /*writing*/ false);
        }
        return undefined;
    }
    function getBaseConstraintOfType(type) {
        if (type.flags & (58982400 /* TypeFlags.InstantiableNonPrimitive */ | 3145728 /* TypeFlags.UnionOrIntersection */ | 134217728 /* TypeFlags.TemplateLiteral */ | 268435456 /* TypeFlags.StringMapping */) || isGenericTupleType(type)) {
            var constraint = getResolvedBaseConstraint(type);
            return constraint !== noConstraintType && constraint !== circularConstraintType ? constraint : undefined;
        }
        return type.flags & 4194304 /* TypeFlags.Index */ ? keyofConstraintType : undefined;
    }
    /**
     * This is similar to `getBaseConstraintOfType` except it returns the input type if there's no base constraint, instead of `undefined`
     * It also doesn't map indexes to `string`, as where this is used this would be unneeded (and likely undesirable)
     */
    function getBaseConstraintOrType(type) {
        return getBaseConstraintOfType(type) || type;
    }
    function hasNonCircularBaseConstraint(type) {
        return getResolvedBaseConstraint(type) !== circularConstraintType;
    }
    /**
     * Return the resolved base constraint of a type variable. The noConstraintType singleton is returned if the
     * type variable has no constraint, and the circularConstraintType singleton is returned if the constraint
     * circularly references the type variable.
     */
    function getResolvedBaseConstraint(type) {
        if (type.resolvedBaseConstraint) {
            return type.resolvedBaseConstraint;
        }
        var stack = [];
        return type.resolvedBaseConstraint = getImmediateBaseConstraint(type);
        function getImmediateBaseConstraint(t) {
            if (!t.immediateBaseConstraint) {
                if (!pushTypeResolution(t, 4 /* TypeSystemPropertyName.ImmediateBaseConstraint */)) {
                    return circularConstraintType;
                }
                var result = void 0;
                // We always explore at least 10 levels of nested constraints. Thereafter, we continue to explore
                // up to 50 levels of nested constraints provided there are no "deeply nested" types on the stack
                // (i.e. no types for which five instantiations have been recorded on the stack). If we reach 50
                // levels of nesting, we are presumably exploring a repeating pattern with a long cycle that hasn't
                // yet triggered the deeply nested limiter. We have no test cases that actually get to 50 levels of
                // nesting, so it is effectively just a safety stop.
                var identity = getRecursionIdentity(t);
                if (stack.length < 10 || stack.length < 50 && !(0, ts_1.contains)(stack, identity)) {
                    stack.push(identity);
                    result = computeBaseConstraint(getSimplifiedType(t, /*writing*/ false));
                    stack.pop();
                }
                if (!popTypeResolution()) {
                    if (t.flags & 262144 /* TypeFlags.TypeParameter */) {
                        var errorNode = getConstraintDeclaration(t);
                        if (errorNode) {
                            var diagnostic = error(errorNode, ts_1.Diagnostics.Type_parameter_0_has_a_circular_constraint, typeToString(t));
                            if (currentNode && !(0, ts_1.isNodeDescendantOf)(errorNode, currentNode) && !(0, ts_1.isNodeDescendantOf)(currentNode, errorNode)) {
                                (0, ts_1.addRelatedInfo)(diagnostic, (0, ts_1.createDiagnosticForNode)(currentNode, ts_1.Diagnostics.Circularity_originates_in_type_at_this_location));
                            }
                        }
                    }
                    result = circularConstraintType;
                }
                t.immediateBaseConstraint = result || noConstraintType;
            }
            return t.immediateBaseConstraint;
        }
        function getBaseConstraint(t) {
            var c = getImmediateBaseConstraint(t);
            return c !== noConstraintType && c !== circularConstraintType ? c : undefined;
        }
        function computeBaseConstraint(t) {
            if (t.flags & 262144 /* TypeFlags.TypeParameter */) {
                var constraint = getConstraintFromTypeParameter(t);
                return t.isThisType || !constraint ?
                    constraint :
                    getBaseConstraint(constraint);
            }
            if (t.flags & 3145728 /* TypeFlags.UnionOrIntersection */) {
                var types = t.types;
                var baseTypes = [];
                var different = false;
                for (var _i = 0, types_7 = types; _i < types_7.length; _i++) {
                    var type_2 = types_7[_i];
                    var baseType = getBaseConstraint(type_2);
                    if (baseType) {
                        if (baseType !== type_2) {
                            different = true;
                        }
                        baseTypes.push(baseType);
                    }
                    else {
                        different = true;
                    }
                }
                if (!different) {
                    return t;
                }
                return t.flags & 1048576 /* TypeFlags.Union */ && baseTypes.length === types.length ? getUnionType(baseTypes) :
                    t.flags & 2097152 /* TypeFlags.Intersection */ && baseTypes.length ? getIntersectionType(baseTypes) :
                        undefined;
            }
            if (t.flags & 4194304 /* TypeFlags.Index */) {
                return keyofConstraintType;
            }
            if (t.flags & 134217728 /* TypeFlags.TemplateLiteral */) {
                var types = t.types;
                var constraints = (0, ts_1.mapDefined)(types, getBaseConstraint);
                return constraints.length === types.length ? getTemplateLiteralType(t.texts, constraints) : stringType;
            }
            if (t.flags & 268435456 /* TypeFlags.StringMapping */) {
                var constraint = getBaseConstraint(t.type);
                return constraint && constraint !== t.type ? getStringMappingType(t.symbol, constraint) : stringType;
            }
            if (t.flags & 8388608 /* TypeFlags.IndexedAccess */) {
                if (isMappedTypeGenericIndexedAccess(t)) {
                    // For indexed access types of the form { [P in K]: E }[X], where K is non-generic and X is generic,
                    // we substitute an instantiation of E where P is replaced with X.
                    return getBaseConstraint(substituteIndexedMappedType(t.objectType, t.indexType));
                }
                var baseObjectType = getBaseConstraint(t.objectType);
                var baseIndexType = getBaseConstraint(t.indexType);
                var baseIndexedAccess = baseObjectType && baseIndexType && getIndexedAccessTypeOrUndefined(baseObjectType, baseIndexType, t.accessFlags);
                return baseIndexedAccess && getBaseConstraint(baseIndexedAccess);
            }
            if (t.flags & 16777216 /* TypeFlags.Conditional */) {
                var constraint = getConstraintFromConditionalType(t);
                return constraint && getBaseConstraint(constraint);
            }
            if (t.flags & 33554432 /* TypeFlags.Substitution */) {
                return getBaseConstraint(getSubstitutionIntersection(t));
            }
            if (isGenericTupleType(t)) {
                // We substitute constraints for variadic elements only when the constraints are array types or
                // non-variadic tuple types as we want to avoid further (possibly unbounded) recursion.
                var newElements = (0, ts_1.map)(getElementTypes(t), function (v, i) {
                    var constraint = v.flags & 262144 /* TypeFlags.TypeParameter */ && t.target.elementFlags[i] & 8 /* ElementFlags.Variadic */ && getBaseConstraint(v) || v;
                    return constraint !== v && everyType(constraint, function (c) { return isArrayOrTupleType(c) && !isGenericTupleType(c); }) ? constraint : v;
                });
                return createTupleType(newElements, t.target.elementFlags, t.target.readonly, t.target.labeledElementDeclarations);
            }
            return t;
        }
    }
    function getApparentTypeOfIntersectionType(type, thisArgument) {
        return type.resolvedApparentType || (type.resolvedApparentType = getTypeWithThisArgument(type, thisArgument, /*needApparentType*/ true));
    }
    function getResolvedTypeParameterDefault(typeParameter) {
        if (!typeParameter.default) {
            if (typeParameter.target) {
                var targetDefault = getResolvedTypeParameterDefault(typeParameter.target);
                typeParameter.default = targetDefault ? instantiateType(targetDefault, typeParameter.mapper) : noConstraintType;
            }
            else {
                // To block recursion, set the initial value to the resolvingDefaultType.
                typeParameter.default = resolvingDefaultType;
                var defaultDeclaration = typeParameter.symbol && (0, ts_1.forEach)(typeParameter.symbol.declarations, function (decl) { return (0, ts_1.isTypeParameterDeclaration)(decl) && decl.default; });
                var defaultType = defaultDeclaration ? getTypeFromTypeNode(defaultDeclaration) : noConstraintType;
                if (typeParameter.default === resolvingDefaultType) {
                    // If we have not been called recursively, set the correct default type.
                    typeParameter.default = defaultType;
                }
            }
        }
        else if (typeParameter.default === resolvingDefaultType) {
            // If we are called recursively for this type parameter, mark the default as circular.
            typeParameter.default = circularConstraintType;
        }
        return typeParameter.default;
    }
    /**
     * Gets the default type for a type parameter.
     *
     * If the type parameter is the result of an instantiation, this gets the instantiated
     * default type of its target. If the type parameter has no default type or the default is
     * circular, `undefined` is returned.
     */
    function getDefaultFromTypeParameter(typeParameter) {
        var defaultType = getResolvedTypeParameterDefault(typeParameter);
        return defaultType !== noConstraintType && defaultType !== circularConstraintType ? defaultType : undefined;
    }
    function hasNonCircularTypeParameterDefault(typeParameter) {
        return getResolvedTypeParameterDefault(typeParameter) !== circularConstraintType;
    }
    /**
     * Indicates whether the declaration of a typeParameter has a default type.
     */
    function hasTypeParameterDefault(typeParameter) {
        return !!(typeParameter.symbol && (0, ts_1.forEach)(typeParameter.symbol.declarations, function (decl) { return (0, ts_1.isTypeParameterDeclaration)(decl) && decl.default; }));
    }
    function getApparentTypeOfMappedType(type) {
        return type.resolvedApparentType || (type.resolvedApparentType = getResolvedApparentTypeOfMappedType(type));
    }
    function getResolvedApparentTypeOfMappedType(type) {
        var typeVariable = getHomomorphicTypeVariable(type);
        if (typeVariable && !type.declaration.nameType) {
            var constraint = getConstraintOfTypeParameter(typeVariable);
            if (constraint && everyType(constraint, isArrayOrTupleType)) {
                return instantiateType(type, prependTypeMapping(typeVariable, constraint, type.mapper));
            }
        }
        return type;
    }
    function isMappedTypeGenericIndexedAccess(type) {
        var objectType;
        return !!(type.flags & 8388608 /* TypeFlags.IndexedAccess */ && (0, ts_1.getObjectFlags)(objectType = type.objectType) & 32 /* ObjectFlags.Mapped */ &&
            !isGenericMappedType(objectType) && isGenericIndexType(type.indexType) &&
            !(getMappedTypeModifiers(objectType) & 8 /* MappedTypeModifiers.ExcludeOptional */) && !objectType.declaration.nameType);
    }
    /**
     * For a type parameter, return the base constraint of the type parameter. For the string, number,
     * boolean, and symbol primitive types, return the corresponding object types. Otherwise return the
     * type itself.
     */
    function getApparentType(type) {
        var t = type.flags & 465829888 /* TypeFlags.Instantiable */ ? getBaseConstraintOfType(type) || unknownType : type;
        var objectFlags = (0, ts_1.getObjectFlags)(t);
        return objectFlags & 32 /* ObjectFlags.Mapped */ ? getApparentTypeOfMappedType(t) :
            objectFlags & 4 /* ObjectFlags.Reference */ && t !== type ? getTypeWithThisArgument(t, type) :
                t.flags & 2097152 /* TypeFlags.Intersection */ ? getApparentTypeOfIntersectionType(t, type) :
                    t.flags & 402653316 /* TypeFlags.StringLike */ ? globalStringType :
                        t.flags & 296 /* TypeFlags.NumberLike */ ? globalNumberType :
                            t.flags & 2112 /* TypeFlags.BigIntLike */ ? getGlobalBigIntType() :
                                t.flags & 528 /* TypeFlags.BooleanLike */ ? globalBooleanType :
                                    t.flags & 12288 /* TypeFlags.ESSymbolLike */ ? getGlobalESSymbolType() :
                                        t.flags & 67108864 /* TypeFlags.NonPrimitive */ ? emptyObjectType :
                                            t.flags & 4194304 /* TypeFlags.Index */ ? keyofConstraintType :
                                                t.flags & 2 /* TypeFlags.Unknown */ && !strictNullChecks ? emptyObjectType :
                                                    t;
    }
    function getReducedApparentType(type) {
        // Since getApparentType may return a non-reduced union or intersection type, we need to perform
        // type reduction both before and after obtaining the apparent type. For example, given a type parameter
        // 'T extends A | B', the type 'T & X' becomes 'A & X | B & X' after obtaining the apparent type, and
        // that type may need further reduction to remove empty intersections.
        return getReducedType(getApparentType(getReducedType(type)));
    }
    function createUnionOrIntersectionProperty(containingType, name, skipObjectFunctionPropertyAugment) {
        var _a, _b, _c;
        var singleProp;
        var propSet;
        var indexTypes;
        var isUnion = containingType.flags & 1048576 /* TypeFlags.Union */;
        // Flags we want to propagate to the result if they exist in all source symbols
        var optionalFlag;
        var syntheticFlag = 4 /* CheckFlags.SyntheticMethod */;
        var checkFlags = isUnion ? 0 : 8 /* CheckFlags.Readonly */;
        var mergedInstantiations = false;
        for (var _i = 0, _d = containingType.types; _i < _d.length; _i++) {
            var current = _d[_i];
            var type = getApparentType(current);
            if (!(isErrorType(type) || type.flags & 131072 /* TypeFlags.Never */)) {
                var prop = getPropertyOfType(type, name, skipObjectFunctionPropertyAugment);
                var modifiers = prop ? (0, ts_1.getDeclarationModifierFlagsFromSymbol)(prop) : 0;
                if (prop) {
                    if (prop.flags & 106500 /* SymbolFlags.ClassMember */) {
                        optionalFlag !== null && optionalFlag !== void 0 ? optionalFlag : (optionalFlag = isUnion ? 0 /* SymbolFlags.None */ : 16777216 /* SymbolFlags.Optional */);
                        if (isUnion) {
                            optionalFlag |= (prop.flags & 16777216 /* SymbolFlags.Optional */);
                        }
                        else {
                            optionalFlag &= prop.flags;
                        }
                    }
                    if (!singleProp) {
                        singleProp = prop;
                    }
                    else if (prop !== singleProp) {
                        var isInstantiation = (getTargetSymbol(prop) || prop) === (getTargetSymbol(singleProp) || singleProp);
                        // If the symbols are instances of one another with identical types - consider the symbols
                        // equivalent and just use the first one, which thus allows us to avoid eliding private
                        // members when intersecting a (this-)instantiations of a class with its raw base or another instance
                        if (isInstantiation && compareProperties(singleProp, prop, function (a, b) { return a === b ? -1 /* Ternary.True */ : 0 /* Ternary.False */; }) === -1 /* Ternary.True */) {
                            // If we merged instantiations of a generic type, we replicate the symbol parent resetting behavior we used
                            // to do when we recorded multiple distinct symbols so that we still get, eg, `Array<T>.length` printed
                            // back and not `Array<string>.length` when we're looking at a `.length` access on a `string[] | number[]`
                            mergedInstantiations = !!singleProp.parent && !!(0, ts_1.length)(getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(singleProp.parent));
                        }
                        else {
                            if (!propSet) {
                                propSet = new Map();
                                propSet.set(getSymbolId(singleProp), singleProp);
                            }
                            var id = getSymbolId(prop);
                            if (!propSet.has(id)) {
                                propSet.set(id, prop);
                            }
                        }
                    }
                    if (isUnion && isReadonlySymbol(prop)) {
                        checkFlags |= 8 /* CheckFlags.Readonly */;
                    }
                    else if (!isUnion && !isReadonlySymbol(prop)) {
                        checkFlags &= ~8 /* CheckFlags.Readonly */;
                    }
                    checkFlags |= (!(modifiers & 24 /* ModifierFlags.NonPublicAccessibilityModifier */) ? 256 /* CheckFlags.ContainsPublic */ : 0) |
                        (modifiers & 16 /* ModifierFlags.Protected */ ? 512 /* CheckFlags.ContainsProtected */ : 0) |
                        (modifiers & 8 /* ModifierFlags.Private */ ? 1024 /* CheckFlags.ContainsPrivate */ : 0) |
                        (modifiers & 32 /* ModifierFlags.Static */ ? 2048 /* CheckFlags.ContainsStatic */ : 0);
                    if (!isPrototypeProperty(prop)) {
                        syntheticFlag = 2 /* CheckFlags.SyntheticProperty */;
                    }
                }
                else if (isUnion) {
                    var indexInfo = !isLateBoundName(name) && getApplicableIndexInfoForName(type, name);
                    if (indexInfo) {
                        checkFlags |= 32 /* CheckFlags.WritePartial */ | (indexInfo.isReadonly ? 8 /* CheckFlags.Readonly */ : 0);
                        indexTypes = (0, ts_1.append)(indexTypes, isTupleType(type) ? getRestTypeOfTupleType(type) || undefinedType : indexInfo.type);
                    }
                    else if (isObjectLiteralType(type) && !((0, ts_1.getObjectFlags)(type) & 2097152 /* ObjectFlags.ContainsSpread */)) {
                        checkFlags |= 32 /* CheckFlags.WritePartial */;
                        indexTypes = (0, ts_1.append)(indexTypes, undefinedType);
                    }
                    else {
                        checkFlags |= 16 /* CheckFlags.ReadPartial */;
                    }
                }
            }
        }
        if (!singleProp ||
            isUnion &&
                (propSet || checkFlags & 48 /* CheckFlags.Partial */) &&
                checkFlags & (1024 /* CheckFlags.ContainsPrivate */ | 512 /* CheckFlags.ContainsProtected */) &&
                !(propSet && getCommonDeclarationsOfSymbols(propSet.values()))) {
            // No property was found, or, in a union, a property has a private or protected declaration in one
            // constituent, but is missing or has a different declaration in another constituent.
            return undefined;
        }
        if (!propSet && !(checkFlags & 16 /* CheckFlags.ReadPartial */) && !indexTypes) {
            if (mergedInstantiations) {
                // No symbol from a union/intersection should have a `.parent` set (since unions/intersections don't act as symbol parents)
                // Unless that parent is "reconstituted" from the "first value declaration" on the symbol (which is likely different than its instantiated parent!)
                // They also have a `.containingType` set, which affects some services endpoints behavior, like `getRootSymbol`
                var links = (_a = (0, ts_1.tryCast)(singleProp, ts_1.isTransientSymbol)) === null || _a === void 0 ? void 0 : _a.links;
                var clone = createSymbolWithType(singleProp, links === null || links === void 0 ? void 0 : links.type);
                clone.parent = (_c = (_b = singleProp.valueDeclaration) === null || _b === void 0 ? void 0 : _b.symbol) === null || _c === void 0 ? void 0 : _c.parent;
                clone.links.containingType = containingType;
                clone.links.mapper = links === null || links === void 0 ? void 0 : links.mapper;
                return clone;
            }
            else {
                return singleProp;
            }
        }
        var props = propSet ? (0, ts_1.arrayFrom)(propSet.values()) : [singleProp];
        var declarations;
        var firstType;
        var nameType;
        var propTypes = [];
        var writeTypes;
        var firstValueDeclaration;
        var hasNonUniformValueDeclaration = false;
        for (var _e = 0, props_1 = props; _e < props_1.length; _e++) {
            var prop = props_1[_e];
            if (!firstValueDeclaration) {
                firstValueDeclaration = prop.valueDeclaration;
            }
            else if (prop.valueDeclaration && prop.valueDeclaration !== firstValueDeclaration) {
                hasNonUniformValueDeclaration = true;
            }
            declarations = (0, ts_1.addRange)(declarations, prop.declarations);
            var type = getTypeOfSymbol(prop);
            if (!firstType) {
                firstType = type;
                nameType = getSymbolLinks(prop).nameType;
            }
            var writeType = getWriteTypeOfSymbol(prop);
            if (writeTypes || writeType !== type) {
                writeTypes = (0, ts_1.append)(!writeTypes ? propTypes.slice() : writeTypes, writeType);
            }
            else if (type !== firstType) {
                checkFlags |= 64 /* CheckFlags.HasNonUniformType */;
            }
            if (isLiteralType(type) || isPatternLiteralType(type)) {
                checkFlags |= 128 /* CheckFlags.HasLiteralType */;
            }
            if (type.flags & 131072 /* TypeFlags.Never */ && type !== uniqueLiteralType) {
                checkFlags |= 131072 /* CheckFlags.HasNeverType */;
            }
            propTypes.push(type);
        }
        (0, ts_1.addRange)(propTypes, indexTypes);
        var result = createSymbol(4 /* SymbolFlags.Property */ | (optionalFlag !== null && optionalFlag !== void 0 ? optionalFlag : 0), name, syntheticFlag | checkFlags);
        result.links.containingType = containingType;
        if (!hasNonUniformValueDeclaration && firstValueDeclaration) {
            result.valueDeclaration = firstValueDeclaration;
            // Inherit information about parent type.
            if (firstValueDeclaration.symbol.parent) {
                result.parent = firstValueDeclaration.symbol.parent;
            }
        }
        result.declarations = declarations;
        result.links.nameType = nameType;
        if (propTypes.length > 2) {
            // When `propTypes` has the potential to explode in size when normalized, defer normalization until absolutely needed
            result.links.checkFlags |= 65536 /* CheckFlags.DeferredType */;
            result.links.deferralParent = containingType;
            result.links.deferralConstituents = propTypes;
            result.links.deferralWriteConstituents = writeTypes;
        }
        else {
            result.links.type = isUnion ? getUnionType(propTypes) : getIntersectionType(propTypes);
            if (writeTypes) {
                result.links.writeType = isUnion ? getUnionType(writeTypes) : getIntersectionType(writeTypes);
            }
        }
        return result;
    }
    // Return the symbol for a given property in a union or intersection type, or undefined if the property
    // does not exist in any constituent type. Note that the returned property may only be present in some
    // constituents, in which case the isPartial flag is set when the containing type is union type. We need
    // these partial properties when identifying discriminant properties, but otherwise they are filtered out
    // and do not appear to be present in the union type.
    function getUnionOrIntersectionProperty(type, name, skipObjectFunctionPropertyAugment) {
        var _a, _b;
        var property = ((_a = type.propertyCacheWithoutObjectFunctionPropertyAugment) === null || _a === void 0 ? void 0 : _a.get(name)) ||
            !skipObjectFunctionPropertyAugment ? (_b = type.propertyCache) === null || _b === void 0 ? void 0 : _b.get(name) : undefined;
        if (!property) {
            property = createUnionOrIntersectionProperty(type, name, skipObjectFunctionPropertyAugment);
            if (property) {
                var properties = skipObjectFunctionPropertyAugment ? type.propertyCacheWithoutObjectFunctionPropertyAugment || (type.propertyCacheWithoutObjectFunctionPropertyAugment = (0, ts_1.createSymbolTable)()) : type.propertyCache || (type.propertyCache = (0, ts_1.createSymbolTable)());
                properties.set(name, property);
            }
        }
        return property;
    }
    function getCommonDeclarationsOfSymbols(symbols) {
        var commonDeclarations;
        var _loop_8 = function (symbol) {
            if (!symbol.declarations) {
                return { value: undefined };
            }
            if (!commonDeclarations) {
                commonDeclarations = new Set(symbol.declarations);
                return "continue";
            }
            commonDeclarations.forEach(function (declaration) {
                if (!(0, ts_1.contains)(symbol.declarations, declaration)) {
                    commonDeclarations.delete(declaration);
                }
            });
            if (commonDeclarations.size === 0) {
                return { value: undefined };
            }
        };
        for (var _i = 0, symbols_2 = symbols; _i < symbols_2.length; _i++) {
            var symbol = symbols_2[_i];
            var state_3 = _loop_8(symbol);
            if (typeof state_3 === "object")
                return state_3.value;
        }
        return commonDeclarations;
    }
    function getPropertyOfUnionOrIntersectionType(type, name, skipObjectFunctionPropertyAugment) {
        var property = getUnionOrIntersectionProperty(type, name, skipObjectFunctionPropertyAugment);
        // We need to filter out partial properties in union types
        return property && !((0, ts_1.getCheckFlags)(property) & 16 /* CheckFlags.ReadPartial */) ? property : undefined;
    }
    /**
     * Return the reduced form of the given type. For a union type, it is a union of the normalized constituent types.
     * For an intersection of types containing one or more mututally exclusive discriminant properties, it is 'never'.
     * For all other types, it is simply the type itself. Discriminant properties are considered mutually exclusive when
     * no constituent property has type 'never', but the intersection of the constituent property types is 'never'.
     */
    function getReducedType(type) {
        if (type.flags & 1048576 /* TypeFlags.Union */ && type.objectFlags & 16777216 /* ObjectFlags.ContainsIntersections */) {
            return type.resolvedReducedType || (type.resolvedReducedType = getReducedUnionType(type));
        }
        else if (type.flags & 2097152 /* TypeFlags.Intersection */) {
            if (!(type.objectFlags & 16777216 /* ObjectFlags.IsNeverIntersectionComputed */)) {
                type.objectFlags |= 16777216 /* ObjectFlags.IsNeverIntersectionComputed */ |
                    ((0, ts_1.some)(getPropertiesOfUnionOrIntersectionType(type), isNeverReducedProperty) ? 33554432 /* ObjectFlags.IsNeverIntersection */ : 0);
            }
            return type.objectFlags & 33554432 /* ObjectFlags.IsNeverIntersection */ ? neverType : type;
        }
        return type;
    }
    function getReducedUnionType(unionType) {
        var reducedTypes = (0, ts_1.sameMap)(unionType.types, getReducedType);
        if (reducedTypes === unionType.types) {
            return unionType;
        }
        var reduced = getUnionType(reducedTypes);
        if (reduced.flags & 1048576 /* TypeFlags.Union */) {
            reduced.resolvedReducedType = reduced;
        }
        return reduced;
    }
    function isNeverReducedProperty(prop) {
        return isDiscriminantWithNeverType(prop) || isConflictingPrivateProperty(prop);
    }
    function isDiscriminantWithNeverType(prop) {
        // Return true for a synthetic non-optional property with non-uniform types, where at least one is
        // a literal type and none is never, that reduces to never.
        return !(prop.flags & 16777216 /* SymbolFlags.Optional */) &&
            ((0, ts_1.getCheckFlags)(prop) & (192 /* CheckFlags.Discriminant */ | 131072 /* CheckFlags.HasNeverType */)) === 192 /* CheckFlags.Discriminant */ &&
            !!(getTypeOfSymbol(prop).flags & 131072 /* TypeFlags.Never */);
    }
    function isConflictingPrivateProperty(prop) {
        // Return true for a synthetic property with multiple declarations, at least one of which is private.
        return !prop.valueDeclaration && !!((0, ts_1.getCheckFlags)(prop) & 1024 /* CheckFlags.ContainsPrivate */);
    }
    /**
     * A union type which is reducible upon instantiation (meaning some members are removed under certain instantiations)
     * must be kept generic, as that instantiation information needs to flow through the type system. By replacing all
     * type parameters in the union with a special never type that is treated as a literal in `getReducedType`, we can cause
     * the `getReducedType` logic to reduce the resulting type if possible (since only intersections with conflicting
     * literal-typed properties are reducible).
     */
    function isGenericReducibleType(type) {
        return !!(type.flags & 1048576 /* TypeFlags.Union */ && type.objectFlags & 16777216 /* ObjectFlags.ContainsIntersections */ && (0, ts_1.some)(type.types, isGenericReducibleType) ||
            type.flags & 2097152 /* TypeFlags.Intersection */ && isReducibleIntersection(type));
    }
    function isReducibleIntersection(type) {
        var uniqueFilled = type.uniqueLiteralFilledInstantiation || (type.uniqueLiteralFilledInstantiation = instantiateType(type, uniqueLiteralMapper));
        return getReducedType(uniqueFilled) !== uniqueFilled;
    }
    function elaborateNeverIntersection(errorInfo, type) {
        if (type.flags & 2097152 /* TypeFlags.Intersection */ && (0, ts_1.getObjectFlags)(type) & 33554432 /* ObjectFlags.IsNeverIntersection */) {
            var neverProp = (0, ts_1.find)(getPropertiesOfUnionOrIntersectionType(type), isDiscriminantWithNeverType);
            if (neverProp) {
                return (0, ts_1.chainDiagnosticMessages)(errorInfo, ts_1.Diagnostics.The_intersection_0_was_reduced_to_never_because_property_1_has_conflicting_types_in_some_constituents, typeToString(type, /*enclosingDeclaration*/ undefined, 536870912 /* TypeFormatFlags.NoTypeReduction */), symbolToString(neverProp));
            }
            var privateProp = (0, ts_1.find)(getPropertiesOfUnionOrIntersectionType(type), isConflictingPrivateProperty);
            if (privateProp) {
                return (0, ts_1.chainDiagnosticMessages)(errorInfo, ts_1.Diagnostics.The_intersection_0_was_reduced_to_never_because_property_1_exists_in_multiple_constituents_and_is_private_in_some, typeToString(type, /*enclosingDeclaration*/ undefined, 536870912 /* TypeFormatFlags.NoTypeReduction */), symbolToString(privateProp));
            }
        }
        return errorInfo;
    }
    /**
     * Return the symbol for the property with the given name in the given type. Creates synthetic union properties when
     * necessary, maps primitive types and type parameters are to their apparent types, and augments with properties from
     * Object and Function as appropriate.
     *
     * @param type a type to look up property from
     * @param name a name of property to look up in a given type
     */
    function getPropertyOfType(type, name, skipObjectFunctionPropertyAugment, includeTypeOnlyMembers) {
        type = getReducedApparentType(type);
        if (type.flags & 524288 /* TypeFlags.Object */) {
            var resolved = resolveStructuredTypeMembers(type);
            var symbol = resolved.members.get(name);
            if (symbol && symbolIsValue(symbol, includeTypeOnlyMembers)) {
                return symbol;
            }
            if (skipObjectFunctionPropertyAugment)
                return undefined;
            var functionType = resolved === anyFunctionType ? globalFunctionType :
                resolved.callSignatures.length ? globalCallableFunctionType :
                    resolved.constructSignatures.length ? globalNewableFunctionType :
                        undefined;
            if (functionType) {
                var symbol_1 = getPropertyOfObjectType(functionType, name);
                if (symbol_1) {
                    return symbol_1;
                }
            }
            return getPropertyOfObjectType(globalObjectType, name);
        }
        if (type.flags & 3145728 /* TypeFlags.UnionOrIntersection */) {
            return getPropertyOfUnionOrIntersectionType(type, name, skipObjectFunctionPropertyAugment);
        }
        return undefined;
    }
    function getSignaturesOfStructuredType(type, kind) {
        if (type.flags & 3670016 /* TypeFlags.StructuredType */) {
            var resolved = resolveStructuredTypeMembers(type);
            return kind === 0 /* SignatureKind.Call */ ? resolved.callSignatures : resolved.constructSignatures;
        }
        return ts_1.emptyArray;
    }
    /**
     * Return the signatures of the given kind in the given type. Creates synthetic union signatures when necessary and
     * maps primitive types and type parameters are to their apparent types.
     */
    function getSignaturesOfType(type, kind) {
        var result = getSignaturesOfStructuredType(getReducedApparentType(type), kind);
        if (kind === 0 /* SignatureKind.Call */ && !(0, ts_1.length)(result) && type.flags & 1048576 /* TypeFlags.Union */) {
            if (type.arrayFallbackSignatures) {
                return type.arrayFallbackSignatures;
            }
            // If the union is all different instantiations of a member of the global array type...
            var memberName_1;
            if (everyType(type, function (t) { var _a; return !!((_a = t.symbol) === null || _a === void 0 ? void 0 : _a.parent) && isArrayOrTupleSymbol(t.symbol.parent) && (!memberName_1 ? (memberName_1 = t.symbol.escapedName, true) : memberName_1 === t.symbol.escapedName); })) {
                // Transform the type from `(A[] | B[])["member"]` to `(A | B)[]["member"]` (since we pretend array is covariant anyway)
                var arrayArg = mapType(type, function (t) { return getMappedType((isReadonlyArraySymbol(t.symbol.parent) ? globalReadonlyArrayType : globalArrayType).typeParameters[0], t.mapper); });
                var arrayType = createArrayType(arrayArg, someType(type, function (t) { return isReadonlyArraySymbol(t.symbol.parent); }));
                return type.arrayFallbackSignatures = getSignaturesOfType(getTypeOfPropertyOfType(arrayType, memberName_1), kind);
            }
            type.arrayFallbackSignatures = result;
        }
        return result;
    }
    function isArrayOrTupleSymbol(symbol) {
        if (!symbol || !globalArrayType.symbol || !globalReadonlyArrayType.symbol) {
            return false;
        }
        return !!getSymbolIfSameReference(symbol, globalArrayType.symbol) || !!getSymbolIfSameReference(symbol, globalReadonlyArrayType.symbol);
    }
    function isReadonlyArraySymbol(symbol) {
        if (!symbol || !globalReadonlyArrayType.symbol) {
            return false;
        }
        return !!getSymbolIfSameReference(symbol, globalReadonlyArrayType.symbol);
    }
    function findIndexInfo(indexInfos, keyType) {
        return (0, ts_1.find)(indexInfos, function (info) { return info.keyType === keyType; });
    }
    function findApplicableIndexInfo(indexInfos, keyType) {
        // Index signatures for type 'string' are considered only when no other index signatures apply.
        var stringIndexInfo;
        var applicableInfo;
        var applicableInfos;
        for (var _i = 0, indexInfos_3 = indexInfos; _i < indexInfos_3.length; _i++) {
            var info = indexInfos_3[_i];
            if (info.keyType === stringType) {
                stringIndexInfo = info;
            }
            else if (isApplicableIndexType(keyType, info.keyType)) {
                if (!applicableInfo) {
                    applicableInfo = info;
                }
                else {
                    (applicableInfos || (applicableInfos = [applicableInfo])).push(info);
                }
            }
        }
        // When more than one index signature is applicable we create a synthetic IndexInfo. Instead of computing
        // the intersected key type, we just use unknownType for the key type as nothing actually depends on the
        // keyType property of the returned IndexInfo.
        return applicableInfos ? createIndexInfo(unknownType, getIntersectionType((0, ts_1.map)(applicableInfos, function (info) { return info.type; })), (0, ts_1.reduceLeft)(applicableInfos, function (isReadonly, info) { return isReadonly && info.isReadonly; }, /*initial*/ true)) :
            applicableInfo ? applicableInfo :
                stringIndexInfo && isApplicableIndexType(keyType, stringType) ? stringIndexInfo :
                    undefined;
    }
    function isApplicableIndexType(source, target) {
        // A 'string' index signature applies to types assignable to 'string' or 'number', and a 'number' index
        // signature applies to types assignable to 'number', `${number}` and numeric string literal types.
        return isTypeAssignableTo(source, target) ||
            target === stringType && isTypeAssignableTo(source, numberType) ||
            target === numberType && (source === numericStringType || !!(source.flags & 128 /* TypeFlags.StringLiteral */) && (0, ts_1.isNumericLiteralName)(source.value));
    }
    function getIndexInfosOfStructuredType(type) {
        if (type.flags & 3670016 /* TypeFlags.StructuredType */) {
            var resolved = resolveStructuredTypeMembers(type);
            return resolved.indexInfos;
        }
        return ts_1.emptyArray;
    }
    function getIndexInfosOfType(type) {
        return getIndexInfosOfStructuredType(getReducedApparentType(type));
    }
    // Return the indexing info of the given kind in the given type. Creates synthetic union index types when necessary and
    // maps primitive types and type parameters are to their apparent types.
    function getIndexInfoOfType(type, keyType) {
        return findIndexInfo(getIndexInfosOfType(type), keyType);
    }
    // Return the index type of the given kind in the given type. Creates synthetic union index types when necessary and
    // maps primitive types and type parameters are to their apparent types.
    function getIndexTypeOfType(type, keyType) {
        var _a;
        return (_a = getIndexInfoOfType(type, keyType)) === null || _a === void 0 ? void 0 : _a.type;
    }
    function getApplicableIndexInfos(type, keyType) {
        return getIndexInfosOfType(type).filter(function (info) { return isApplicableIndexType(keyType, info.keyType); });
    }
    function getApplicableIndexInfo(type, keyType) {
        return findApplicableIndexInfo(getIndexInfosOfType(type), keyType);
    }
    function getApplicableIndexInfoForName(type, name) {
        return getApplicableIndexInfo(type, isLateBoundName(name) ? esSymbolType : getStringLiteralType((0, ts_1.unescapeLeadingUnderscores)(name)));
    }
    // Return list of type parameters with duplicates removed (duplicate identifier errors are generated in the actual
    // type checking functions).
    function getTypeParametersFromDeclaration(declaration) {
        var _a;
        var result;
        for (var _i = 0, _b = (0, ts_1.getEffectiveTypeParameterDeclarations)(declaration); _i < _b.length; _i++) {
            var node = _b[_i];
            result = (0, ts_1.appendIfUnique)(result, getDeclaredTypeOfTypeParameter(node.symbol));
        }
        return (result === null || result === void 0 ? void 0 : result.length) ? result
            : (0, ts_1.isFunctionDeclaration)(declaration) ? (_a = getSignatureOfTypeTag(declaration)) === null || _a === void 0 ? void 0 : _a.typeParameters
                : undefined;
    }
    function symbolsToArray(symbols) {
        var result = [];
        symbols.forEach(function (symbol, id) {
            if (!isReservedMemberName(id)) {
                result.push(symbol);
            }
        });
        return result;
    }
    function tryFindAmbientModule(moduleName, withAugmentations) {
        if ((0, ts_1.isExternalModuleNameRelative)(moduleName)) {
            return undefined;
        }
        var symbol = getSymbol(globals, '"' + moduleName + '"', 512 /* SymbolFlags.ValueModule */);
        // merged symbol is module declaration symbol combined with all augmentations
        return symbol && withAugmentations ? getMergedSymbol(symbol) : symbol;
    }
    function isOptionalParameter(node) {
        if ((0, ts_1.hasQuestionToken)(node) || (0, ts_1.isOptionalJSDocPropertyLikeTag)(node) || (0, ts_1.isJSDocOptionalParameter)(node)) {
            return true;
        }
        if (node.initializer) {
            var signature = getSignatureFromDeclaration(node.parent);
            var parameterIndex = node.parent.parameters.indexOf(node);
            ts_1.Debug.assert(parameterIndex >= 0);
            // Only consider syntactic or instantiated parameters as optional, not `void` parameters as this function is used
            // in grammar checks and checking for `void` too early results in parameter types widening too early
            // and causes some noImplicitAny errors to be lost.
            return parameterIndex >= getMinArgumentCount(signature, 1 /* MinArgumentCountFlags.StrongArityForUntypedJS */ | 2 /* MinArgumentCountFlags.VoidIsNonOptional */);
        }
        var iife = (0, ts_1.getImmediatelyInvokedFunctionExpression)(node.parent);
        if (iife) {
            return !node.type &&
                !node.dotDotDotToken &&
                node.parent.parameters.indexOf(node) >= iife.arguments.length;
        }
        return false;
    }
    function isOptionalPropertyDeclaration(node) {
        return (0, ts_1.isPropertyDeclaration)(node) && !(0, ts_1.hasAccessorModifier)(node) && node.questionToken;
    }
    function createTypePredicate(kind, parameterName, parameterIndex, type) {
        return { kind: kind, parameterName: parameterName, parameterIndex: parameterIndex, type: type };
    }
    /**
     * Gets the minimum number of type arguments needed to satisfy all non-optional type
     * parameters.
     */
    function getMinTypeArgumentCount(typeParameters) {
        var minTypeArgumentCount = 0;
        if (typeParameters) {
            for (var i = 0; i < typeParameters.length; i++) {
                if (!hasTypeParameterDefault(typeParameters[i])) {
                    minTypeArgumentCount = i + 1;
                }
            }
        }
        return minTypeArgumentCount;
    }
    function fillMissingTypeArguments(typeArguments, typeParameters, minTypeArgumentCount, isJavaScriptImplicitAny) {
        var numTypeParameters = (0, ts_1.length)(typeParameters);
        if (!numTypeParameters) {
            return [];
        }
        var numTypeArguments = (0, ts_1.length)(typeArguments);
        if (isJavaScriptImplicitAny || (numTypeArguments >= minTypeArgumentCount && numTypeArguments <= numTypeParameters)) {
            var result = typeArguments ? typeArguments.slice() : [];
            // Map invalid forward references in default types to the error type
            for (var i = numTypeArguments; i < numTypeParameters; i++) {
                result[i] = errorType;
            }
            var baseDefaultType = getDefaultTypeArgumentType(isJavaScriptImplicitAny);
            for (var i = numTypeArguments; i < numTypeParameters; i++) {
                var defaultType = getDefaultFromTypeParameter(typeParameters[i]);
                if (isJavaScriptImplicitAny && defaultType && (isTypeIdenticalTo(defaultType, unknownType) || isTypeIdenticalTo(defaultType, emptyObjectType))) {
                    defaultType = anyType;
                }
                result[i] = defaultType ? instantiateType(defaultType, createTypeMapper(typeParameters, result)) : baseDefaultType;
            }
            result.length = typeParameters.length;
            return result;
        }
        return typeArguments && typeArguments.slice();
    }
    function getSignatureFromDeclaration(declaration) {
        var links = getNodeLinks(declaration);
        if (!links.resolvedSignature) {
            var parameters = [];
            var flags = 0 /* SignatureFlags.None */;
            var minArgumentCount = 0;
            var thisParameter = void 0;
            var hasThisParameter = false;
            var iife = (0, ts_1.getImmediatelyInvokedFunctionExpression)(declaration);
            var isJSConstructSignature = (0, ts_1.isJSDocConstructSignature)(declaration);
            var isUntypedSignatureInJSFile = !iife &&
                (0, ts_1.isInJSFile)(declaration) &&
                (0, ts_1.isValueSignatureDeclaration)(declaration) &&
                !(0, ts_1.hasJSDocParameterTags)(declaration) &&
                !(0, ts_1.getJSDocType)(declaration);
            if (isUntypedSignatureInJSFile) {
                flags |= 32 /* SignatureFlags.IsUntypedSignatureInJSFile */;
            }
            // If this is a JSDoc construct signature, then skip the first parameter in the
            // parameter list.  The first parameter represents the return type of the construct
            // signature.
            for (var i = isJSConstructSignature ? 1 : 0; i < declaration.parameters.length; i++) {
                var param = declaration.parameters[i];
                var paramSymbol = param.symbol;
                var type = (0, ts_1.isJSDocParameterTag)(param) ? (param.typeExpression && param.typeExpression.type) : param.type;
                // Include parameter symbol instead of property symbol in the signature
                if (paramSymbol && !!(paramSymbol.flags & 4 /* SymbolFlags.Property */) && !(0, ts_1.isBindingPattern)(param.name)) {
                    var resolvedSymbol = resolveName(param, paramSymbol.escapedName, 111551 /* SymbolFlags.Value */, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ false);
                    paramSymbol = resolvedSymbol;
                }
                if (i === 0 && paramSymbol.escapedName === "this" /* InternalSymbolName.This */) {
                    hasThisParameter = true;
                    thisParameter = param.symbol;
                }
                else {
                    parameters.push(paramSymbol);
                }
                if (type && type.kind === 200 /* SyntaxKind.LiteralType */) {
                    flags |= 2 /* SignatureFlags.HasLiteralTypes */;
                }
                // Record a new minimum argument count if this is not an optional parameter
                var isOptionalParameter_1 = (0, ts_1.isOptionalJSDocPropertyLikeTag)(param) ||
                    param.initializer || param.questionToken || (0, ts_1.isRestParameter)(param) ||
                    iife && parameters.length > iife.arguments.length && !type ||
                    (0, ts_1.isJSDocOptionalParameter)(param);
                if (!isOptionalParameter_1) {
                    minArgumentCount = parameters.length;
                }
            }
            // If only one accessor includes a this-type annotation, the other behaves as if it had the same type annotation
            if ((declaration.kind === 176 /* SyntaxKind.GetAccessor */ || declaration.kind === 177 /* SyntaxKind.SetAccessor */) &&
                hasBindableName(declaration) &&
                (!hasThisParameter || !thisParameter)) {
                var otherKind = declaration.kind === 176 /* SyntaxKind.GetAccessor */ ? 177 /* SyntaxKind.SetAccessor */ : 176 /* SyntaxKind.GetAccessor */;
                var other = (0, ts_1.getDeclarationOfKind)(getSymbolOfDeclaration(declaration), otherKind);
                if (other) {
                    thisParameter = getAnnotatedAccessorThisParameter(other);
                }
            }
            if ((0, ts_1.isInJSFile)(declaration)) {
                var thisTag = (0, ts_1.getJSDocThisTag)(declaration);
                if (thisTag && thisTag.typeExpression) {
                    thisParameter = createSymbolWithType(createSymbol(1 /* SymbolFlags.FunctionScopedVariable */, "this" /* InternalSymbolName.This */), getTypeFromTypeNode(thisTag.typeExpression));
                }
            }
            var hostDeclaration = (0, ts_1.isJSDocSignature)(declaration) ? (0, ts_1.getEffectiveJSDocHost)(declaration) : declaration;
            var classType = hostDeclaration && (0, ts_1.isConstructorDeclaration)(hostDeclaration) ?
                getDeclaredTypeOfClassOrInterface(getMergedSymbol(hostDeclaration.parent.symbol))
                : undefined;
            var typeParameters = classType ? classType.localTypeParameters : getTypeParametersFromDeclaration(declaration);
            if ((0, ts_1.hasRestParameter)(declaration) || (0, ts_1.isInJSFile)(declaration) && maybeAddJsSyntheticRestParameter(declaration, parameters)) {
                flags |= 1 /* SignatureFlags.HasRestParameter */;
            }
            if ((0, ts_1.isConstructorTypeNode)(declaration) && (0, ts_1.hasSyntacticModifier)(declaration, 256 /* ModifierFlags.Abstract */) ||
                (0, ts_1.isConstructorDeclaration)(declaration) && (0, ts_1.hasSyntacticModifier)(declaration.parent, 256 /* ModifierFlags.Abstract */)) {
                flags |= 4 /* SignatureFlags.Abstract */;
            }
            links.resolvedSignature = createSignature(declaration, typeParameters, thisParameter, parameters, 
            /*resolvedReturnType*/ undefined, /*resolvedTypePredicate*/ undefined, minArgumentCount, flags);
        }
        return links.resolvedSignature;
    }
    /**
     * A JS function gets a synthetic rest parameter if it references `arguments` AND:
     * 1. It has no parameters but at least one `@param` with a type that starts with `...`
     * OR
     * 2. It has at least one parameter, and the last parameter has a matching `@param` with a type that starts with `...`
     */
    function maybeAddJsSyntheticRestParameter(declaration, parameters) {
        if ((0, ts_1.isJSDocSignature)(declaration) || !containsArgumentsReference(declaration)) {
            return false;
        }
        var lastParam = (0, ts_1.lastOrUndefined)(declaration.parameters);
        var lastParamTags = lastParam ? (0, ts_1.getJSDocParameterTags)(lastParam) : (0, ts_1.getJSDocTags)(declaration).filter(ts_1.isJSDocParameterTag);
        var lastParamVariadicType = (0, ts_1.firstDefined)(lastParamTags, function (p) {
            return p.typeExpression && (0, ts_1.isJSDocVariadicType)(p.typeExpression.type) ? p.typeExpression.type : undefined;
        });
        var syntheticArgsSymbol = createSymbol(3 /* SymbolFlags.Variable */, "args", 32768 /* CheckFlags.RestParameter */);
        if (lastParamVariadicType) {
            // Parameter has effective annotation, lock in type
            syntheticArgsSymbol.links.type = createArrayType(getTypeFromTypeNode(lastParamVariadicType.type));
        }
        else {
            // Parameter has no annotation
            // By using a `DeferredType` symbol, we allow the type of this rest arg to be overriden by contextual type assignment so long as its type hasn't been
            // cached by `getTypeOfSymbol` yet.
            syntheticArgsSymbol.links.checkFlags |= 65536 /* CheckFlags.DeferredType */;
            syntheticArgsSymbol.links.deferralParent = neverType;
            syntheticArgsSymbol.links.deferralConstituents = [anyArrayType];
            syntheticArgsSymbol.links.deferralWriteConstituents = [anyArrayType];
        }
        if (lastParamVariadicType) {
            // Replace the last parameter with a rest parameter.
            parameters.pop();
        }
        parameters.push(syntheticArgsSymbol);
        return true;
    }
    function getSignatureOfTypeTag(node) {
        // should be attached to a function declaration or expression
        if (!((0, ts_1.isInJSFile)(node) && (0, ts_1.isFunctionLikeDeclaration)(node)))
            return undefined;
        var typeTag = (0, ts_1.getJSDocTypeTag)(node);
        return (typeTag === null || typeTag === void 0 ? void 0 : typeTag.typeExpression) && getSingleCallSignature(getTypeFromTypeNode(typeTag.typeExpression));
    }
    function getParameterTypeOfTypeTag(func, parameter) {
        var signature = getSignatureOfTypeTag(func);
        if (!signature)
            return undefined;
        var pos = func.parameters.indexOf(parameter);
        return parameter.dotDotDotToken ? getRestTypeAtPosition(signature, pos) : getTypeAtPosition(signature, pos);
    }
    function getReturnTypeOfTypeTag(node) {
        var signature = getSignatureOfTypeTag(node);
        return signature && getReturnTypeOfSignature(signature);
    }
    function containsArgumentsReference(declaration) {
        var links = getNodeLinks(declaration);
        if (links.containsArgumentsReference === undefined) {
            if (links.flags & 512 /* NodeCheckFlags.CaptureArguments */) {
                links.containsArgumentsReference = true;
            }
            else {
                links.containsArgumentsReference = traverse(declaration.body);
            }
        }
        return links.containsArgumentsReference;
        function traverse(node) {
            if (!node)
                return false;
            switch (node.kind) {
                case 80 /* SyntaxKind.Identifier */:
                    return node.escapedText === argumentsSymbol.escapedName && getReferencedValueSymbol(node) === argumentsSymbol;
                case 171 /* SyntaxKind.PropertyDeclaration */:
                case 173 /* SyntaxKind.MethodDeclaration */:
                case 176 /* SyntaxKind.GetAccessor */:
                case 177 /* SyntaxKind.SetAccessor */:
                    return node.name.kind === 166 /* SyntaxKind.ComputedPropertyName */
                        && traverse(node.name);
                case 210 /* SyntaxKind.PropertyAccessExpression */:
                case 211 /* SyntaxKind.ElementAccessExpression */:
                    return traverse(node.expression);
                case 302 /* SyntaxKind.PropertyAssignment */:
                    return traverse(node.initializer);
                default:
                    return !(0, ts_1.nodeStartsNewLexicalEnvironment)(node) && !(0, ts_1.isPartOfTypeNode)(node) && !!(0, ts_1.forEachChild)(node, traverse);
            }
        }
    }
    function getSignaturesOfSymbol(symbol) {
        if (!symbol || !symbol.declarations)
            return ts_1.emptyArray;
        var result = [];
        for (var i = 0; i < symbol.declarations.length; i++) {
            var decl = symbol.declarations[i];
            if (!(0, ts_1.isFunctionLike)(decl))
                continue;
            // Don't include signature if node is the implementation of an overloaded function. A node is considered
            // an implementation node if it has a body and the previous node is of the same kind and immediately
            // precedes the implementation node (i.e. has the same parent and ends where the implementation starts).
            if (i > 0 && decl.body) {
                var previous = symbol.declarations[i - 1];
                if (decl.parent === previous.parent && decl.kind === previous.kind && decl.pos === previous.end) {
                    continue;
                }
            }
            if ((0, ts_1.isInJSFile)(decl) && decl.jsDoc) {
                var hasJSDocOverloads = false;
                for (var _i = 0, _a = decl.jsDoc; _i < _a.length; _i++) {
                    var node = _a[_i];
                    if (node.tags) {
                        for (var _b = 0, _c = node.tags; _b < _c.length; _b++) {
                            var tag = _c[_b];
                            if ((0, ts_1.isJSDocOverloadTag)(tag)) {
                                var jsDocSignature = tag.typeExpression;
                                if (jsDocSignature.type === undefined && !(0, ts_1.isConstructorDeclaration)(decl)) {
                                    reportImplicitAny(jsDocSignature, anyType);
                                }
                                result.push(getSignatureFromDeclaration(jsDocSignature));
                                hasJSDocOverloads = true;
                            }
                        }
                    }
                }
                if (hasJSDocOverloads) {
                    continue;
                }
            }
            // If this is a function or method declaration, get the signature from the @type tag for the sake of optional parameters.
            // Exclude contextually-typed kinds because we already apply the @type tag to the context, plus applying it here to the initializer would supress checks that the two are compatible.
            result.push((!(0, ts_1.isFunctionExpressionOrArrowFunction)(decl) &&
                !(0, ts_1.isObjectLiteralMethod)(decl) &&
                getSignatureOfTypeTag(decl)) ||
                getSignatureFromDeclaration(decl));
        }
        return result;
    }
    function resolveExternalModuleTypeByLiteral(name) {
        var moduleSym = resolveExternalModuleName(name, name);
        if (moduleSym) {
            var resolvedModuleSymbol = resolveExternalModuleSymbol(moduleSym);
            if (resolvedModuleSymbol) {
                return getTypeOfSymbol(resolvedModuleSymbol);
            }
        }
        return anyType;
    }
    function getThisTypeOfSignature(signature) {
        if (signature.thisParameter) {
            return getTypeOfSymbol(signature.thisParameter);
        }
    }
    function getTypePredicateOfSignature(signature) {
        if (!signature.resolvedTypePredicate) {
            if (signature.target) {
                var targetTypePredicate = getTypePredicateOfSignature(signature.target);
                signature.resolvedTypePredicate = targetTypePredicate ? instantiateTypePredicate(targetTypePredicate, signature.mapper) : noTypePredicate;
            }
            else if (signature.compositeSignatures) {
                signature.resolvedTypePredicate = getUnionOrIntersectionTypePredicate(signature.compositeSignatures, signature.compositeKind) || noTypePredicate;
            }
            else {
                var type = signature.declaration && (0, ts_1.getEffectiveReturnTypeNode)(signature.declaration);
                var jsdocPredicate = void 0;
                if (!type) {
                    var jsdocSignature = getSignatureOfTypeTag(signature.declaration);
                    if (jsdocSignature && signature !== jsdocSignature) {
                        jsdocPredicate = getTypePredicateOfSignature(jsdocSignature);
                    }
                }
                signature.resolvedTypePredicate = type && (0, ts_1.isTypePredicateNode)(type) ?
                    createTypePredicateFromTypePredicateNode(type, signature) :
                    jsdocPredicate || noTypePredicate;
            }
            ts_1.Debug.assert(!!signature.resolvedTypePredicate);
        }
        return signature.resolvedTypePredicate === noTypePredicate ? undefined : signature.resolvedTypePredicate;
    }
    function createTypePredicateFromTypePredicateNode(node, signature) {
        var parameterName = node.parameterName;
        var type = node.type && getTypeFromTypeNode(node.type);
        return parameterName.kind === 196 /* SyntaxKind.ThisType */ ?
            createTypePredicate(node.assertsModifier ? 2 /* TypePredicateKind.AssertsThis */ : 0 /* TypePredicateKind.This */, /*parameterName*/ undefined, /*parameterIndex*/ undefined, type) :
            createTypePredicate(node.assertsModifier ? 3 /* TypePredicateKind.AssertsIdentifier */ : 1 /* TypePredicateKind.Identifier */, parameterName.escapedText, (0, ts_1.findIndex)(signature.parameters, function (p) { return p.escapedName === parameterName.escapedText; }), type);
    }
    function getUnionOrIntersectionType(types, kind, unionReduction) {
        return kind !== 2097152 /* TypeFlags.Intersection */ ? getUnionType(types, unionReduction) : getIntersectionType(types);
    }
    function getReturnTypeOfSignature(signature) {
        if (!signature.resolvedReturnType) {
            if (!pushTypeResolution(signature, 3 /* TypeSystemPropertyName.ResolvedReturnType */)) {
                return errorType;
            }
            var type = signature.target ? instantiateType(getReturnTypeOfSignature(signature.target), signature.mapper) :
                signature.compositeSignatures ? instantiateType(getUnionOrIntersectionType((0, ts_1.map)(signature.compositeSignatures, getReturnTypeOfSignature), signature.compositeKind, 2 /* UnionReduction.Subtype */), signature.mapper) :
                    getReturnTypeFromAnnotation(signature.declaration) ||
                        ((0, ts_1.nodeIsMissing)(signature.declaration.body) ? anyType : getReturnTypeFromBody(signature.declaration));
            if (signature.flags & 8 /* SignatureFlags.IsInnerCallChain */) {
                type = addOptionalTypeMarker(type);
            }
            else if (signature.flags & 16 /* SignatureFlags.IsOuterCallChain */) {
                type = getOptionalType(type);
            }
            if (!popTypeResolution()) {
                if (signature.declaration) {
                    var typeNode = (0, ts_1.getEffectiveReturnTypeNode)(signature.declaration);
                    if (typeNode) {
                        error(typeNode, ts_1.Diagnostics.Return_type_annotation_circularly_references_itself);
                    }
                    else if (noImplicitAny) {
                        var declaration = signature.declaration;
                        var name_19 = (0, ts_1.getNameOfDeclaration)(declaration);
                        if (name_19) {
                            error(name_19, ts_1.Diagnostics._0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions, (0, ts_1.declarationNameToString)(name_19));
                        }
                        else {
                            error(declaration, ts_1.Diagnostics.Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions);
                        }
                    }
                }
                type = anyType;
            }
            signature.resolvedReturnType = type;
        }
        return signature.resolvedReturnType;
    }
    function getReturnTypeFromAnnotation(declaration) {
        if (declaration.kind === 175 /* SyntaxKind.Constructor */) {
            return getDeclaredTypeOfClassOrInterface(getMergedSymbol(declaration.parent.symbol));
        }
        var typeNode = (0, ts_1.getEffectiveReturnTypeNode)(declaration);
        if ((0, ts_1.isJSDocSignature)(declaration)) {
            var root = (0, ts_1.getJSDocRoot)(declaration);
            if (root && (0, ts_1.isConstructorDeclaration)(root.parent) && !typeNode) {
                return getDeclaredTypeOfClassOrInterface(getMergedSymbol(root.parent.parent.symbol));
            }
        }
        if ((0, ts_1.isJSDocConstructSignature)(declaration)) {
            return getTypeFromTypeNode(declaration.parameters[0].type); // TODO: GH#18217
        }
        if (typeNode) {
            return getTypeFromTypeNode(typeNode);
        }
        if (declaration.kind === 176 /* SyntaxKind.GetAccessor */ && hasBindableName(declaration)) {
            var jsDocType = (0, ts_1.isInJSFile)(declaration) && getTypeForDeclarationFromJSDocComment(declaration);
            if (jsDocType) {
                return jsDocType;
            }
            var setter = (0, ts_1.getDeclarationOfKind)(getSymbolOfDeclaration(declaration), 177 /* SyntaxKind.SetAccessor */);
            var setterType = getAnnotatedAccessorType(setter);
            if (setterType) {
                return setterType;
            }
        }
        return getReturnTypeOfTypeTag(declaration);
    }
    function isResolvingReturnTypeOfSignature(signature) {
        return !signature.resolvedReturnType && findResolutionCycleStartIndex(signature, 3 /* TypeSystemPropertyName.ResolvedReturnType */) >= 0;
    }
    function getRestTypeOfSignature(signature) {
        return tryGetRestTypeOfSignature(signature) || anyType;
    }
    function tryGetRestTypeOfSignature(signature) {
        if (signatureHasRestParameter(signature)) {
            var sigRestType = getTypeOfSymbol(signature.parameters[signature.parameters.length - 1]);
            var restType = isTupleType(sigRestType) ? getRestTypeOfTupleType(sigRestType) : sigRestType;
            return restType && getIndexTypeOfType(restType, numberType);
        }
        return undefined;
    }
    function getSignatureInstantiation(signature, typeArguments, isJavascript, inferredTypeParameters) {
        var instantiatedSignature = getSignatureInstantiationWithoutFillingInTypeArguments(signature, fillMissingTypeArguments(typeArguments, signature.typeParameters, getMinTypeArgumentCount(signature.typeParameters), isJavascript));
        if (inferredTypeParameters) {
            var returnSignature = getSingleCallOrConstructSignature(getReturnTypeOfSignature(instantiatedSignature));
            if (returnSignature) {
                var newReturnSignature = cloneSignature(returnSignature);
                newReturnSignature.typeParameters = inferredTypeParameters;
                var newInstantiatedSignature = cloneSignature(instantiatedSignature);
                newInstantiatedSignature.resolvedReturnType = getOrCreateTypeFromSignature(newReturnSignature);
                return newInstantiatedSignature;
            }
        }
        return instantiatedSignature;
    }
    function getSignatureInstantiationWithoutFillingInTypeArguments(signature, typeArguments) {
        var instantiations = signature.instantiations || (signature.instantiations = new Map());
        var id = getTypeListId(typeArguments);
        var instantiation = instantiations.get(id);
        if (!instantiation) {
            instantiations.set(id, instantiation = createSignatureInstantiation(signature, typeArguments));
        }
        return instantiation;
    }
    function createSignatureInstantiation(signature, typeArguments) {
        return instantiateSignature(signature, createSignatureTypeMapper(signature, typeArguments), /*eraseTypeParameters*/ true);
    }
    function createSignatureTypeMapper(signature, typeArguments) {
        return createTypeMapper(signature.typeParameters, typeArguments);
    }
    function getErasedSignature(signature) {
        return signature.typeParameters ?
            signature.erasedSignatureCache || (signature.erasedSignatureCache = createErasedSignature(signature)) :
            signature;
    }
    function createErasedSignature(signature) {
        // Create an instantiation of the signature where all type arguments are the any type.
        return instantiateSignature(signature, createTypeEraser(signature.typeParameters), /*eraseTypeParameters*/ true);
    }
    function getCanonicalSignature(signature) {
        return signature.typeParameters ?
            signature.canonicalSignatureCache || (signature.canonicalSignatureCache = createCanonicalSignature(signature)) :
            signature;
    }
    function createCanonicalSignature(signature) {
        // Create an instantiation of the signature where each unconstrained type parameter is replaced with
        // its original. When a generic class or interface is instantiated, each generic method in the class or
        // interface is instantiated with a fresh set of cloned type parameters (which we need to handle scenarios
        // where different generations of the same type parameter are in scope). This leads to a lot of new type
        // identities, and potentially a lot of work comparing those identities, so here we create an instantiation
        // that uses the original type identities for all unconstrained type parameters.
        return getSignatureInstantiation(signature, (0, ts_1.map)(signature.typeParameters, function (tp) { return tp.target && !getConstraintOfTypeParameter(tp.target) ? tp.target : tp; }), (0, ts_1.isInJSFile)(signature.declaration));
    }
    function getBaseSignature(signature) {
        var typeParameters = signature.typeParameters;
        if (typeParameters) {
            if (signature.baseSignatureCache) {
                return signature.baseSignatureCache;
            }
            var typeEraser = createTypeEraser(typeParameters);
            var baseConstraintMapper_1 = createTypeMapper(typeParameters, (0, ts_1.map)(typeParameters, function (tp) { return getConstraintOfTypeParameter(tp) || unknownType; }));
            var baseConstraints = (0, ts_1.map)(typeParameters, function (tp) { return instantiateType(tp, baseConstraintMapper_1) || unknownType; });
            // Run N type params thru the immediate constraint mapper up to N times
            // This way any noncircular interdependent type parameters are definitely resolved to their external dependencies
            for (var i = 0; i < typeParameters.length - 1; i++) {
                baseConstraints = instantiateTypes(baseConstraints, baseConstraintMapper_1);
            }
            // and then apply a type eraser to remove any remaining circularly dependent type parameters
            baseConstraints = instantiateTypes(baseConstraints, typeEraser);
            return signature.baseSignatureCache = instantiateSignature(signature, createTypeMapper(typeParameters, baseConstraints), /*eraseTypeParameters*/ true);
        }
        return signature;
    }
    function getOrCreateTypeFromSignature(signature) {
        var _a;
        // There are two ways to declare a construct signature, one is by declaring a class constructor
        // using the constructor keyword, and the other is declaring a bare construct signature in an
        // object type literal or interface (using the new keyword). Each way of declaring a constructor
        // will result in a different declaration kind.
        if (!signature.isolatedSignatureType) {
            var kind = (_a = signature.declaration) === null || _a === void 0 ? void 0 : _a.kind;
            // If declaration is undefined, it is likely to be the signature of the default constructor.
            var isConstructor = kind === undefined || kind === 175 /* SyntaxKind.Constructor */ || kind === 179 /* SyntaxKind.ConstructSignature */ || kind === 184 /* SyntaxKind.ConstructorType */;
            var type = createObjectType(16 /* ObjectFlags.Anonymous */);
            type.members = emptySymbols;
            type.properties = ts_1.emptyArray;
            type.callSignatures = !isConstructor ? [signature] : ts_1.emptyArray;
            type.constructSignatures = isConstructor ? [signature] : ts_1.emptyArray;
            type.indexInfos = ts_1.emptyArray;
            signature.isolatedSignatureType = type;
        }
        return signature.isolatedSignatureType;
    }
    function getIndexSymbol(symbol) {
        return symbol.members ? getIndexSymbolFromSymbolTable(symbol.members) : undefined;
    }
    function getIndexSymbolFromSymbolTable(symbolTable) {
        return symbolTable.get("__index" /* InternalSymbolName.Index */);
    }
    function createIndexInfo(keyType, type, isReadonly, declaration) {
        return { keyType: keyType, type: type, isReadonly: isReadonly, declaration: declaration };
    }
    function getIndexInfosOfSymbol(symbol) {
        var indexSymbol = getIndexSymbol(symbol);
        return indexSymbol ? getIndexInfosOfIndexSymbol(indexSymbol) : ts_1.emptyArray;
    }
    function getIndexInfosOfIndexSymbol(indexSymbol) {
        if (indexSymbol.declarations) {
            var indexInfos_4 = [];
            var _loop_9 = function (declaration) {
                if (declaration.parameters.length === 1) {
                    var parameter = declaration.parameters[0];
                    if (parameter.type) {
                        forEachType(getTypeFromTypeNode(parameter.type), function (keyType) {
                            if (isValidIndexKeyType(keyType) && !findIndexInfo(indexInfos_4, keyType)) {
                                indexInfos_4.push(createIndexInfo(keyType, declaration.type ? getTypeFromTypeNode(declaration.type) : anyType, (0, ts_1.hasEffectiveModifier)(declaration, 64 /* ModifierFlags.Readonly */), declaration));
                            }
                        });
                    }
                }
            };
            for (var _i = 0, _a = indexSymbol.declarations; _i < _a.length; _i++) {
                var declaration = _a[_i];
                _loop_9(declaration);
            }
            return indexInfos_4;
        }
        return ts_1.emptyArray;
    }
    function isValidIndexKeyType(type) {
        return !!(type.flags & (4 /* TypeFlags.String */ | 8 /* TypeFlags.Number */ | 4096 /* TypeFlags.ESSymbol */)) || isPatternLiteralType(type) ||
            !!(type.flags & 2097152 /* TypeFlags.Intersection */) && !isGenericType(type) && (0, ts_1.some)(type.types, isValidIndexKeyType);
    }
    function getConstraintDeclaration(type) {
        return (0, ts_1.mapDefined)((0, ts_1.filter)(type.symbol && type.symbol.declarations, ts_1.isTypeParameterDeclaration), ts_1.getEffectiveConstraintOfTypeParameter)[0];
    }
    function getInferredTypeParameterConstraint(typeParameter, omitTypeReferences) {
        var _a;
        var inferences;
        if ((_a = typeParameter.symbol) === null || _a === void 0 ? void 0 : _a.declarations) {
            var _loop_10 = function (declaration) {
                if (declaration.parent.kind === 194 /* SyntaxKind.InferType */) {
                    // When an 'infer T' declaration is immediately contained in a type reference node
                    // (such as 'Foo<infer T>'), T's constraint is inferred from the constraint of the
                    // corresponding type parameter in 'Foo'. When multiple 'infer T' declarations are
                    // present, we form an intersection of the inferred constraint types.
                    var _c = (0, ts_1.walkUpParenthesizedTypesAndGetParentAndChild)(declaration.parent.parent), _d = _c[0], childTypeParameter = _d === void 0 ? declaration.parent : _d, grandParent = _c[1];
                    if (grandParent.kind === 182 /* SyntaxKind.TypeReference */ && !omitTypeReferences) {
                        var typeReference_1 = grandParent;
                        var typeParameters_1 = getTypeParametersForTypeReferenceOrImport(typeReference_1);
                        if (typeParameters_1) {
                            var index = typeReference_1.typeArguments.indexOf(childTypeParameter);
                            if (index < typeParameters_1.length) {
                                var declaredConstraint = getConstraintOfTypeParameter(typeParameters_1[index]);
                                if (declaredConstraint) {
                                    // Type parameter constraints can reference other type parameters so
                                    // constraints need to be instantiated. If instantiation produces the
                                    // type parameter itself, we discard that inference. For example, in
                                    //   type Foo<T extends string, U extends T> = [T, U];
                                    //   type Bar<T> = T extends Foo<infer X, infer X> ? Foo<X, X> : T;
                                    // the instantiated constraint for U is X, so we discard that inference.
                                    var mapper = makeDeferredTypeMapper(typeParameters_1, typeParameters_1.map(function (_, index) { return function () {
                                        return getEffectiveTypeArgumentAtIndex(typeReference_1, typeParameters_1, index);
                                    }; }));
                                    var constraint = instantiateType(declaredConstraint, mapper);
                                    if (constraint !== typeParameter) {
                                        inferences = (0, ts_1.append)(inferences, constraint);
                                    }
                                }
                            }
                        }
                    }
                    // When an 'infer T' declaration is immediately contained in a rest parameter declaration, a rest type
                    // or a named rest tuple element, we infer an 'unknown[]' constraint.
                    else if (grandParent.kind === 168 /* SyntaxKind.Parameter */ && grandParent.dotDotDotToken ||
                        grandParent.kind === 190 /* SyntaxKind.RestType */ ||
                        grandParent.kind === 201 /* SyntaxKind.NamedTupleMember */ && grandParent.dotDotDotToken) {
                        inferences = (0, ts_1.append)(inferences, createArrayType(unknownType));
                    }
                    // When an 'infer T' declaration is immediately contained in a string template type, we infer a 'string'
                    // constraint.
                    else if (grandParent.kind === 203 /* SyntaxKind.TemplateLiteralTypeSpan */) {
                        inferences = (0, ts_1.append)(inferences, stringType);
                    }
                    // When an 'infer T' declaration is in the constraint position of a mapped type, we infer a 'keyof any'
                    // constraint.
                    else if (grandParent.kind === 167 /* SyntaxKind.TypeParameter */ && grandParent.parent.kind === 199 /* SyntaxKind.MappedType */) {
                        inferences = (0, ts_1.append)(inferences, keyofConstraintType);
                    }
                    // When an 'infer T' declaration is the template of a mapped type, and that mapped type is the extends
                    // clause of a conditional whose check type is also a mapped type, give it a constraint equal to the template
                    // of the check type's mapped type
                    else if (grandParent.kind === 199 /* SyntaxKind.MappedType */ && grandParent.type &&
                        (0, ts_1.skipParentheses)(grandParent.type) === declaration.parent && grandParent.parent.kind === 193 /* SyntaxKind.ConditionalType */ &&
                        grandParent.parent.extendsType === grandParent && grandParent.parent.checkType.kind === 199 /* SyntaxKind.MappedType */ &&
                        grandParent.parent.checkType.type) {
                        var checkMappedType_1 = grandParent.parent.checkType;
                        var nodeType = getTypeFromTypeNode(checkMappedType_1.type);
                        inferences = (0, ts_1.append)(inferences, instantiateType(nodeType, makeUnaryTypeMapper(getDeclaredTypeOfTypeParameter(getSymbolOfDeclaration(checkMappedType_1.typeParameter)), checkMappedType_1.typeParameter.constraint ? getTypeFromTypeNode(checkMappedType_1.typeParameter.constraint) : keyofConstraintType)));
                    }
                }
            };
            for (var _i = 0, _b = typeParameter.symbol.declarations; _i < _b.length; _i++) {
                var declaration = _b[_i];
                _loop_10(declaration);
            }
        }
        return inferences && getIntersectionType(inferences);
    }
    /** This is a worker function. Use getConstraintOfTypeParameter which guards against circular constraints. */
    function getConstraintFromTypeParameter(typeParameter) {
        if (!typeParameter.constraint) {
            if (typeParameter.target) {
                var targetConstraint = getConstraintOfTypeParameter(typeParameter.target);
                typeParameter.constraint = targetConstraint ? instantiateType(targetConstraint, typeParameter.mapper) : noConstraintType;
            }
            else {
                var constraintDeclaration = getConstraintDeclaration(typeParameter);
                if (!constraintDeclaration) {
                    typeParameter.constraint = getInferredTypeParameterConstraint(typeParameter) || noConstraintType;
                }
                else {
                    var type = getTypeFromTypeNode(constraintDeclaration);
                    if (type.flags & 1 /* TypeFlags.Any */ && !isErrorType(type)) { // Allow errorType to propegate to keep downstream errors suppressed
                        // use keyofConstraintType as the base constraint for mapped type key constraints (unknown isn;t assignable to that, but `any` was),
                        // use unknown otherwise
                        type = constraintDeclaration.parent.parent.kind === 199 /* SyntaxKind.MappedType */ ? keyofConstraintType : unknownType;
                    }
                    typeParameter.constraint = type;
                }
            }
        }
        return typeParameter.constraint === noConstraintType ? undefined : typeParameter.constraint;
    }
    function getParentSymbolOfTypeParameter(typeParameter) {
        var tp = (0, ts_1.getDeclarationOfKind)(typeParameter.symbol, 167 /* SyntaxKind.TypeParameter */);
        var host = (0, ts_1.isJSDocTemplateTag)(tp.parent) ? (0, ts_1.getEffectiveContainerForJSDocTemplateTag)(tp.parent) : tp.parent;
        return host && getSymbolOfNode(host);
    }
    function getTypeListId(types) {
        var result = "";
        if (types) {
            var length_3 = types.length;
            var i = 0;
            while (i < length_3) {
                var startId = types[i].id;
                var count = 1;
                while (i + count < length_3 && types[i + count].id === startId + count) {
                    count++;
                }
                if (result.length) {
                    result += ",";
                }
                result += startId;
                if (count > 1) {
                    result += ":" + count;
                }
                i += count;
            }
        }
        return result;
    }
    function getAliasId(aliasSymbol, aliasTypeArguments) {
        return aliasSymbol ? "@".concat(getSymbolId(aliasSymbol)) + (aliasTypeArguments ? ":".concat(getTypeListId(aliasTypeArguments)) : "") : "";
    }
    // This function is used to propagate certain flags when creating new object type references and union types.
    // It is only necessary to do so if a constituent type might be the undefined type, the null type, the type
    // of an object literal or a non-inferrable type. This is because there are operations in the type checker
    // that care about the presence of such types at arbitrary depth in a containing type.
    function getPropagatingFlagsOfTypes(types, excludeKinds) {
        var result = 0;
        for (var _i = 0, types_8 = types; _i < types_8.length; _i++) {
            var type = types_8[_i];
            if (excludeKinds === undefined || !(type.flags & excludeKinds)) {
                result |= (0, ts_1.getObjectFlags)(type);
            }
        }
        return result & 458752 /* ObjectFlags.PropagatingFlags */;
    }
    function tryCreateTypeReference(target, typeArguments) {
        if ((0, ts_1.some)(typeArguments) && target === emptyGenericType) {
            return unknownType;
        }
        return createTypeReference(target, typeArguments);
    }
    function createTypeReference(target, typeArguments) {
        var id = getTypeListId(typeArguments);
        var type = target.instantiations.get(id);
        if (!type) {
            type = createObjectType(4 /* ObjectFlags.Reference */, target.symbol);
            target.instantiations.set(id, type);
            type.objectFlags |= typeArguments ? getPropagatingFlagsOfTypes(typeArguments) : 0;
            type.target = target;
            type.resolvedTypeArguments = typeArguments;
        }
        return type;
    }
    function cloneTypeReference(source) {
        var type = createTypeWithSymbol(source.flags, source.symbol);
        type.objectFlags = source.objectFlags;
        type.target = source.target;
        type.resolvedTypeArguments = source.resolvedTypeArguments;
        return type;
    }
    function createDeferredTypeReference(target, node, mapper, aliasSymbol, aliasTypeArguments) {
        if (!aliasSymbol) {
            aliasSymbol = getAliasSymbolForTypeNode(node);
            var localAliasTypeArguments = getTypeArgumentsForAliasSymbol(aliasSymbol);
            aliasTypeArguments = mapper ? instantiateTypes(localAliasTypeArguments, mapper) : localAliasTypeArguments;
        }
        var type = createObjectType(4 /* ObjectFlags.Reference */, target.symbol);
        type.target = target;
        type.node = node;
        type.mapper = mapper;
        type.aliasSymbol = aliasSymbol;
        type.aliasTypeArguments = aliasTypeArguments;
        return type;
    }
    function getTypeArguments(type) {
        var _a, _b;
        if (!type.resolvedTypeArguments) {
            if (!pushTypeResolution(type, 6 /* TypeSystemPropertyName.ResolvedTypeArguments */)) {
                return ((_a = type.target.localTypeParameters) === null || _a === void 0 ? void 0 : _a.map(function () { return errorType; })) || ts_1.emptyArray;
            }
            var node = type.node;
            var typeArguments = !node ? ts_1.emptyArray :
                node.kind === 182 /* SyntaxKind.TypeReference */ ? (0, ts_1.concatenate)(type.target.outerTypeParameters, getEffectiveTypeArguments(node, type.target.localTypeParameters)) :
                    node.kind === 187 /* SyntaxKind.ArrayType */ ? [getTypeFromTypeNode(node.elementType)] :
                        (0, ts_1.map)(node.elements, getTypeFromTypeNode);
            if (popTypeResolution()) {
                type.resolvedTypeArguments = type.mapper ? instantiateTypes(typeArguments, type.mapper) : typeArguments;
            }
            else {
                type.resolvedTypeArguments = ((_b = type.target.localTypeParameters) === null || _b === void 0 ? void 0 : _b.map(function () { return errorType; })) || ts_1.emptyArray;
                error(type.node || currentNode, type.target.symbol ? ts_1.Diagnostics.Type_arguments_for_0_circularly_reference_themselves : ts_1.Diagnostics.Tuple_type_arguments_circularly_reference_themselves, type.target.symbol && symbolToString(type.target.symbol));
            }
        }
        return type.resolvedTypeArguments;
    }
    function getTypeReferenceArity(type) {
        return (0, ts_1.length)(type.target.typeParameters);
    }
    /**
     * Get type from type-reference that reference to class or interface
     */
    function getTypeFromClassOrInterfaceReference(node, symbol) {
        var type = getDeclaredTypeOfSymbol(getMergedSymbol(symbol));
        var typeParameters = type.localTypeParameters;
        if (typeParameters) {
            var numTypeArguments = (0, ts_1.length)(node.typeArguments);
            var minTypeArgumentCount = getMinTypeArgumentCount(typeParameters);
            var isJs = (0, ts_1.isInJSFile)(node);
            var isJsImplicitAny = !noImplicitAny && isJs;
            if (!isJsImplicitAny && (numTypeArguments < minTypeArgumentCount || numTypeArguments > typeParameters.length)) {
                var missingAugmentsTag = isJs && (0, ts_1.isExpressionWithTypeArguments)(node) && !(0, ts_1.isJSDocAugmentsTag)(node.parent);
                var diag = minTypeArgumentCount === typeParameters.length ?
                    missingAugmentsTag ?
                        ts_1.Diagnostics.Expected_0_type_arguments_provide_these_with_an_extends_tag :
                        ts_1.Diagnostics.Generic_type_0_requires_1_type_argument_s :
                    missingAugmentsTag ?
                        ts_1.Diagnostics.Expected_0_1_type_arguments_provide_these_with_an_extends_tag :
                        ts_1.Diagnostics.Generic_type_0_requires_between_1_and_2_type_arguments;
                var typeStr = typeToString(type, /*enclosingDeclaration*/ undefined, 2 /* TypeFormatFlags.WriteArrayAsGenericType */);
                error(node, diag, typeStr, minTypeArgumentCount, typeParameters.length);
                if (!isJs) {
                    // TODO: Adopt same permissive behavior in TS as in JS to reduce follow-on editing experience failures (requires editing fillMissingTypeArguments)
                    return errorType;
                }
            }
            if (node.kind === 182 /* SyntaxKind.TypeReference */ && isDeferredTypeReferenceNode(node, (0, ts_1.length)(node.typeArguments) !== typeParameters.length)) {
                return createDeferredTypeReference(type, node, /*mapper*/ undefined);
            }
            // In a type reference, the outer type parameters of the referenced class or interface are automatically
            // supplied as type arguments and the type reference only specifies arguments for the local type parameters
            // of the class or interface.
            var typeArguments = (0, ts_1.concatenate)(type.outerTypeParameters, fillMissingTypeArguments(typeArgumentsFromTypeReferenceNode(node), typeParameters, minTypeArgumentCount, isJs));
            return createTypeReference(type, typeArguments);
        }
        return checkNoTypeArguments(node, symbol) ? type : errorType;
    }
    function getTypeAliasInstantiation(symbol, typeArguments, aliasSymbol, aliasTypeArguments) {
        var type = getDeclaredTypeOfSymbol(symbol);
        if (type === intrinsicMarkerType && intrinsicTypeKinds.has(symbol.escapedName) && typeArguments && typeArguments.length === 1) {
            return getStringMappingType(symbol, typeArguments[0]);
        }
        var links = getSymbolLinks(symbol);
        var typeParameters = links.typeParameters;
        var id = getTypeListId(typeArguments) + getAliasId(aliasSymbol, aliasTypeArguments);
        var instantiation = links.instantiations.get(id);
        if (!instantiation) {
            links.instantiations.set(id, instantiation = instantiateTypeWithAlias(type, createTypeMapper(typeParameters, fillMissingTypeArguments(typeArguments, typeParameters, getMinTypeArgumentCount(typeParameters), (0, ts_1.isInJSFile)(symbol.valueDeclaration))), aliasSymbol, aliasTypeArguments));
        }
        return instantiation;
    }
    /**
     * Get type from reference to type alias. When a type alias is generic, the declared type of the type alias may include
     * references to the type parameters of the alias. We replace those with the actual type arguments by instantiating the
     * declared type. Instantiations are cached using the type identities of the type arguments as the key.
     */
    function getTypeFromTypeAliasReference(node, symbol) {
        if ((0, ts_1.getCheckFlags)(symbol) & 1048576 /* CheckFlags.Unresolved */) {
            var typeArguments = typeArgumentsFromTypeReferenceNode(node);
            var id = getAliasId(symbol, typeArguments);
            var errorType_1 = errorTypes.get(id);
            if (!errorType_1) {
                errorType_1 = createIntrinsicType(1 /* TypeFlags.Any */, "error");
                errorType_1.aliasSymbol = symbol;
                errorType_1.aliasTypeArguments = typeArguments;
                errorTypes.set(id, errorType_1);
            }
            return errorType_1;
        }
        var type = getDeclaredTypeOfSymbol(symbol);
        var typeParameters = getSymbolLinks(symbol).typeParameters;
        if (typeParameters) {
            var numTypeArguments = (0, ts_1.length)(node.typeArguments);
            var minTypeArgumentCount = getMinTypeArgumentCount(typeParameters);
            if (numTypeArguments < minTypeArgumentCount || numTypeArguments > typeParameters.length) {
                error(node, minTypeArgumentCount === typeParameters.length ?
                    ts_1.Diagnostics.Generic_type_0_requires_1_type_argument_s :
                    ts_1.Diagnostics.Generic_type_0_requires_between_1_and_2_type_arguments, symbolToString(symbol), minTypeArgumentCount, typeParameters.length);
                return errorType;
            }
            // We refrain from associating a local type alias with an instantiation of a top-level type alias
            // because the local alias may end up being referenced in an inferred return type where it is not
            // accessible--which in turn may lead to a large structural expansion of the type when generating
            // a .d.ts file. See #43622 for an example.
            var aliasSymbol = getAliasSymbolForTypeNode(node);
            var newAliasSymbol = aliasSymbol && (isLocalTypeAlias(symbol) || !isLocalTypeAlias(aliasSymbol)) ? aliasSymbol : undefined;
            var aliasTypeArguments = void 0;
            if (newAliasSymbol) {
                aliasTypeArguments = getTypeArgumentsForAliasSymbol(newAliasSymbol);
            }
            else if ((0, ts_1.isTypeReferenceType)(node)) {
                var aliasSymbol_1 = resolveTypeReferenceName(node, 2097152 /* SymbolFlags.Alias */, /*ignoreErrors*/ true);
                // refers to an alias import/export/reexport - by making sure we use the target as an aliasSymbol,
                // we ensure the exported symbol is used to refer to the type when it's reserialized later
                if (aliasSymbol_1 && aliasSymbol_1 !== unknownSymbol) {
                    var resolved = resolveAlias(aliasSymbol_1);
                    if (resolved && resolved.flags & 524288 /* SymbolFlags.TypeAlias */) {
                        newAliasSymbol = resolved;
                        aliasTypeArguments = typeArgumentsFromTypeReferenceNode(node) || (typeParameters ? [] : undefined);
                    }
                }
            }
            return getTypeAliasInstantiation(symbol, typeArgumentsFromTypeReferenceNode(node), newAliasSymbol, aliasTypeArguments);
        }
        return checkNoTypeArguments(node, symbol) ? type : errorType;
    }
    function isLocalTypeAlias(symbol) {
        var _a;
        var declaration = (_a = symbol.declarations) === null || _a === void 0 ? void 0 : _a.find(ts_1.isTypeAlias);
        return !!(declaration && (0, ts_1.getContainingFunction)(declaration));
    }
    function getTypeReferenceName(node) {
        switch (node.kind) {
            case 182 /* SyntaxKind.TypeReference */:
                return node.typeName;
            case 232 /* SyntaxKind.ExpressionWithTypeArguments */:
                // We only support expressions that are simple qualified names. For other
                // expressions this produces undefined.
                var expr = node.expression;
                if ((0, ts_1.isEntityNameExpression)(expr)) {
                    return expr;
                }
            // fall through;
        }
        return undefined;
    }
    function getSymbolPath(symbol) {
        return symbol.parent ? "".concat(getSymbolPath(symbol.parent), ".").concat(symbol.escapedName) : symbol.escapedName;
    }
    function getUnresolvedSymbolForEntityName(name) {
        var identifier = name.kind === 165 /* SyntaxKind.QualifiedName */ ? name.right :
            name.kind === 210 /* SyntaxKind.PropertyAccessExpression */ ? name.name :
                name;
        var text = identifier.escapedText;
        if (text) {
            var parentSymbol = name.kind === 165 /* SyntaxKind.QualifiedName */ ? getUnresolvedSymbolForEntityName(name.left) :
                name.kind === 210 /* SyntaxKind.PropertyAccessExpression */ ? getUnresolvedSymbolForEntityName(name.expression) :
                    undefined;
            var path = parentSymbol ? "".concat(getSymbolPath(parentSymbol), ".").concat(text) : text;
            var result = unresolvedSymbols.get(path);
            if (!result) {
                unresolvedSymbols.set(path, result = createSymbol(524288 /* SymbolFlags.TypeAlias */, text, 1048576 /* CheckFlags.Unresolved */));
                result.parent = parentSymbol;
                result.links.declaredType = unresolvedType;
            }
            return result;
        }
        return unknownSymbol;
    }
    function resolveTypeReferenceName(typeReference, meaning, ignoreErrors) {
        var name = getTypeReferenceName(typeReference);
        if (!name) {
            return unknownSymbol;
        }
        var symbol = resolveEntityName(name, meaning, ignoreErrors);
        return symbol && symbol !== unknownSymbol ? symbol :
            ignoreErrors ? unknownSymbol : getUnresolvedSymbolForEntityName(name);
    }
    function getTypeReferenceType(node, symbol) {
        if (symbol === unknownSymbol) {
            return errorType;
        }
        symbol = getExpandoSymbol(symbol) || symbol;
        if (symbol.flags & (32 /* SymbolFlags.Class */ | 64 /* SymbolFlags.Interface */)) {
            return getTypeFromClassOrInterfaceReference(node, symbol);
        }
        if (symbol.flags & 524288 /* SymbolFlags.TypeAlias */) {
            return getTypeFromTypeAliasReference(node, symbol);
        }
        // Get type from reference to named type that cannot be generic (enum or type parameter)
        var res = tryGetDeclaredTypeOfSymbol(symbol);
        if (res) {
            return checkNoTypeArguments(node, symbol) ? getRegularTypeOfLiteralType(res) : errorType;
        }
        if (symbol.flags & 111551 /* SymbolFlags.Value */ && isJSDocTypeReference(node)) {
            var jsdocType = getTypeFromJSDocValueReference(node, symbol);
            if (jsdocType) {
                return jsdocType;
            }
            else {
                // Resolve the type reference as a Type for the purpose of reporting errors.
                resolveTypeReferenceName(node, 788968 /* SymbolFlags.Type */);
                return getTypeOfSymbol(symbol);
            }
        }
        return errorType;
    }
    /**
     * A JSdoc TypeReference may be to a value, but resolve it as a type anyway.
     * Example: import('./b').ConstructorFunction
     */
    function getTypeFromJSDocValueReference(node, symbol) {
        var links = getNodeLinks(node);
        if (!links.resolvedJSDocType) {
            var valueType = getTypeOfSymbol(symbol);
            var typeType = valueType;
            if (symbol.valueDeclaration) {
                var isImportTypeWithQualifier = node.kind === 204 /* SyntaxKind.ImportType */ && node.qualifier;
                // valueType might not have a symbol, eg, {import('./b').STRING_LITERAL}
                if (valueType.symbol && valueType.symbol !== symbol && isImportTypeWithQualifier) {
                    typeType = getTypeReferenceType(node, valueType.symbol);
                }
            }
            links.resolvedJSDocType = typeType;
        }
        return links.resolvedJSDocType;
    }
    function getSubstitutionType(baseType, constraint) {
        if (constraint.flags & 3 /* TypeFlags.AnyOrUnknown */ || constraint === baseType || baseType.flags & 1 /* TypeFlags.Any */) {
            return baseType;
        }
        var id = "".concat(getTypeId(baseType), ">").concat(getTypeId(constraint));
        var cached = substitutionTypes.get(id);
        if (cached) {
            return cached;
        }
        var result = createType(33554432 /* TypeFlags.Substitution */);
        result.baseType = baseType;
        result.constraint = constraint;
        substitutionTypes.set(id, result);
        return result;
    }
    function getSubstitutionIntersection(substitutionType) {
        return getIntersectionType([substitutionType.constraint, substitutionType.baseType]);
    }
    function isUnaryTupleTypeNode(node) {
        return node.kind === 188 /* SyntaxKind.TupleType */ && node.elements.length === 1;
    }
    function getImpliedConstraint(type, checkNode, extendsNode) {
        return isUnaryTupleTypeNode(checkNode) && isUnaryTupleTypeNode(extendsNode) ? getImpliedConstraint(type, checkNode.elements[0], extendsNode.elements[0]) :
            getActualTypeVariable(getTypeFromTypeNode(checkNode)) === getActualTypeVariable(type) ? getTypeFromTypeNode(extendsNode) :
                undefined;
    }
    function getConditionalFlowTypeOfType(type, node) {
        var constraints;
        var covariant = true;
        while (node && !(0, ts_1.isStatement)(node) && node.kind !== 326 /* SyntaxKind.JSDoc */) {
            var parent_7 = node.parent;
            // only consider variance flipped by parameter locations - `keyof` types would usually be considered variance inverting, but
            // often get used in indexed accesses where they behave sortof invariantly, but our checking is lax
            if (parent_7.kind === 168 /* SyntaxKind.Parameter */) {
                covariant = !covariant;
            }
            // Always substitute on type parameters, regardless of variance, since even
            // in contravariant positions, they may rely on substituted constraints to be valid
            if ((covariant || type.flags & 8650752 /* TypeFlags.TypeVariable */) && parent_7.kind === 193 /* SyntaxKind.ConditionalType */ && node === parent_7.trueType) {
                var constraint = getImpliedConstraint(type, parent_7.checkType, parent_7.extendsType);
                if (constraint) {
                    constraints = (0, ts_1.append)(constraints, constraint);
                }
            }
            // Given a homomorphic mapped type { [K in keyof T]: XXX }, where T is constrained to an array or tuple type, in the
            // template type XXX, K has an added constraint of number | `${number}`.
            else if (type.flags & 262144 /* TypeFlags.TypeParameter */ && parent_7.kind === 199 /* SyntaxKind.MappedType */ && node === parent_7.type) {
                var mappedType = getTypeFromTypeNode(parent_7);
                if (getTypeParameterFromMappedType(mappedType) === getActualTypeVariable(type)) {
                    var typeParameter = getHomomorphicTypeVariable(mappedType);
                    if (typeParameter) {
                        var constraint = getConstraintOfTypeParameter(typeParameter);
                        if (constraint && everyType(constraint, isArrayOrTupleType)) {
                            constraints = (0, ts_1.append)(constraints, getUnionType([numberType, numericStringType]));
                        }
                    }
                }
            }
            node = parent_7;
        }
        return constraints ? getSubstitutionType(type, getIntersectionType(constraints)) : type;
    }
    function isJSDocTypeReference(node) {
        return !!(node.flags & 8388608 /* NodeFlags.JSDoc */) && (node.kind === 182 /* SyntaxKind.TypeReference */ || node.kind === 204 /* SyntaxKind.ImportType */);
    }
    function checkNoTypeArguments(node, symbol) {
        if (node.typeArguments) {
            error(node, ts_1.Diagnostics.Type_0_is_not_generic, symbol ? symbolToString(symbol) : node.typeName ? (0, ts_1.declarationNameToString)(node.typeName) : anon);
            return false;
        }
        return true;
    }
    function getIntendedTypeFromJSDocTypeReference(node) {
        if ((0, ts_1.isIdentifier)(node.typeName)) {
            var typeArgs = node.typeArguments;
            switch (node.typeName.escapedText) {
                case "String":
                    checkNoTypeArguments(node);
                    return stringType;
                case "Number":
                    checkNoTypeArguments(node);
                    return numberType;
                case "Boolean":
                    checkNoTypeArguments(node);
                    return booleanType;
                case "Void":
                    checkNoTypeArguments(node);
                    return voidType;
                case "Undefined":
                    checkNoTypeArguments(node);
                    return undefinedType;
                case "Null":
                    checkNoTypeArguments(node);
                    return nullType;
                case "Function":
                case "function":
                    checkNoTypeArguments(node);
                    return globalFunctionType;
                case "array":
                    return (!typeArgs || !typeArgs.length) && !noImplicitAny ? anyArrayType : undefined;
                case "promise":
                    return (!typeArgs || !typeArgs.length) && !noImplicitAny ? createPromiseType(anyType) : undefined;
                case "Object":
                    if (typeArgs && typeArgs.length === 2) {
                        if ((0, ts_1.isJSDocIndexSignature)(node)) {
                            var indexed = getTypeFromTypeNode(typeArgs[0]);
                            var target = getTypeFromTypeNode(typeArgs[1]);
                            var indexInfo = indexed === stringType || indexed === numberType ? [createIndexInfo(indexed, target, /*isReadonly*/ false)] : ts_1.emptyArray;
                            return createAnonymousType(/*symbol*/ undefined, emptySymbols, ts_1.emptyArray, ts_1.emptyArray, indexInfo);
                        }
                        return anyType;
                    }
                    checkNoTypeArguments(node);
                    return !noImplicitAny ? anyType : undefined;
            }
        }
    }
    function getTypeFromJSDocNullableTypeNode(node) {
        var type = getTypeFromTypeNode(node.type);
        return strictNullChecks ? getNullableType(type, 65536 /* TypeFlags.Null */) : type;
    }
    function getTypeFromTypeReference(node) {
        var links = getNodeLinks(node);
        if (!links.resolvedType) {
            // handle LS queries on the `const` in `x as const` by resolving to the type of `x`
            if ((0, ts_1.isConstTypeReference)(node) && (0, ts_1.isAssertionExpression)(node.parent)) {
                links.resolvedSymbol = unknownSymbol;
                return links.resolvedType = checkExpressionCached(node.parent.expression);
            }
            var symbol = void 0;
            var type = void 0;
            var meaning = 788968 /* SymbolFlags.Type */;
            if (isJSDocTypeReference(node)) {
                type = getIntendedTypeFromJSDocTypeReference(node);
                if (!type) {
                    symbol = resolveTypeReferenceName(node, meaning, /*ignoreErrors*/ true);
                    if (symbol === unknownSymbol) {
                        symbol = resolveTypeReferenceName(node, meaning | 111551 /* SymbolFlags.Value */);
                    }
                    else {
                        resolveTypeReferenceName(node, meaning); // Resolve again to mark errors, if any
                    }
                    type = getTypeReferenceType(node, symbol);
                }
            }
            if (!type) {
                symbol = resolveTypeReferenceName(node, meaning);
                type = getTypeReferenceType(node, symbol);
            }
            // Cache both the resolved symbol and the resolved type. The resolved symbol is needed when we check the
            // type reference in checkTypeReferenceNode.
            links.resolvedSymbol = symbol;
            links.resolvedType = type;
        }
        return links.resolvedType;
    }
    function typeArgumentsFromTypeReferenceNode(node) {
        return (0, ts_1.map)(node.typeArguments, getTypeFromTypeNode);
    }
    function getTypeFromTypeQueryNode(node) {
        var links = getNodeLinks(node);
        if (!links.resolvedType) {
            // TypeScript 1.0 spec (April 2014): 3.6.3
            // The expression is processed as an identifier expression (section 4.3)
            // or property access expression(section 4.10),
            // the widened type(section 3.9) of which becomes the result.
            var type = checkExpressionWithTypeArguments(node);
            links.resolvedType = getRegularTypeOfLiteralType(getWidenedType(type));
        }
        return links.resolvedType;
    }
    function getTypeOfGlobalSymbol(symbol, arity) {
        function getTypeDeclaration(symbol) {
            var declarations = symbol.declarations;
            if (declarations) {
                for (var _i = 0, declarations_2 = declarations; _i < declarations_2.length; _i++) {
                    var declaration = declarations_2[_i];
                    switch (declaration.kind) {
                        case 262 /* SyntaxKind.ClassDeclaration */:
                        case 263 /* SyntaxKind.InterfaceDeclaration */:
                        case 265 /* SyntaxKind.EnumDeclaration */:
                            return declaration;
                    }
                }
            }
        }
        if (!symbol) {
            return arity ? emptyGenericType : emptyObjectType;
        }
        var type = getDeclaredTypeOfSymbol(symbol);
        if (!(type.flags & 524288 /* TypeFlags.Object */)) {
            error(getTypeDeclaration(symbol), ts_1.Diagnostics.Global_type_0_must_be_a_class_or_interface_type, (0, ts_1.symbolName)(symbol));
            return arity ? emptyGenericType : emptyObjectType;
        }
        if ((0, ts_1.length)(type.typeParameters) !== arity) {
            error(getTypeDeclaration(symbol), ts_1.Diagnostics.Global_type_0_must_have_1_type_parameter_s, (0, ts_1.symbolName)(symbol), arity);
            return arity ? emptyGenericType : emptyObjectType;
        }
        return type;
    }
    function getGlobalValueSymbol(name, reportErrors) {
        return getGlobalSymbol(name, 111551 /* SymbolFlags.Value */, reportErrors ? ts_1.Diagnostics.Cannot_find_global_value_0 : undefined);
    }
    function getGlobalTypeSymbol(name, reportErrors) {
        return getGlobalSymbol(name, 788968 /* SymbolFlags.Type */, reportErrors ? ts_1.Diagnostics.Cannot_find_global_type_0 : undefined);
    }
    function getGlobalTypeAliasSymbol(name, arity, reportErrors) {
        var symbol = getGlobalSymbol(name, 788968 /* SymbolFlags.Type */, reportErrors ? ts_1.Diagnostics.Cannot_find_global_type_0 : undefined);
        if (symbol) {
            // Resolve the declared type of the symbol. This resolves type parameters for the type
            // alias so that we can check arity.
            getDeclaredTypeOfSymbol(symbol);
            if ((0, ts_1.length)(getSymbolLinks(symbol).typeParameters) !== arity) {
                var decl = symbol.declarations && (0, ts_1.find)(symbol.declarations, ts_1.isTypeAliasDeclaration);
                error(decl, ts_1.Diagnostics.Global_type_0_must_have_1_type_parameter_s, (0, ts_1.symbolName)(symbol), arity);
                return undefined;
            }
        }
        return symbol;
    }
    function getGlobalSymbol(name, meaning, diagnostic) {
        // Don't track references for global symbols anyway, so value if `isReference` is arbitrary
        return resolveName(/*location*/ undefined, name, meaning, diagnostic, name, /*isUse*/ false, /*excludeGlobals*/ false, /*getSpellingSuggestions*/ false);
    }
    function getGlobalType(name, arity, reportErrors) {
        var symbol = getGlobalTypeSymbol(name, reportErrors);
        return symbol || reportErrors ? getTypeOfGlobalSymbol(symbol, arity) : undefined;
    }
    function getGlobalTypedPropertyDescriptorType() {
        // We always report an error, so store a result in the event we could not resolve the symbol to prevent reporting it multiple times
        return deferredGlobalTypedPropertyDescriptorType || (deferredGlobalTypedPropertyDescriptorType = getGlobalType("TypedPropertyDescriptor", /*arity*/ 1, /*reportErrors*/ true) || emptyGenericType);
    }
    function getGlobalTemplateStringsArrayType() {
        // We always report an error, so store a result in the event we could not resolve the symbol to prevent reporting it multiple times
        return deferredGlobalTemplateStringsArrayType || (deferredGlobalTemplateStringsArrayType = getGlobalType("TemplateStringsArray", /*arity*/ 0, /*reportErrors*/ true) || emptyObjectType);
    }
    function getGlobalImportMetaType() {
        // We always report an error, so store a result in the event we could not resolve the symbol to prevent reporting it multiple times
        return deferredGlobalImportMetaType || (deferredGlobalImportMetaType = getGlobalType("ImportMeta", /*arity*/ 0, /*reportErrors*/ true) || emptyObjectType);
    }
    function getGlobalImportMetaExpressionType() {
        if (!deferredGlobalImportMetaExpressionType) {
            // Create a synthetic type `ImportMetaExpression { meta: MetaProperty }`
            var symbol = createSymbol(0 /* SymbolFlags.None */, "ImportMetaExpression");
            var importMetaType = getGlobalImportMetaType();
            var metaPropertySymbol = createSymbol(4 /* SymbolFlags.Property */, "meta", 8 /* CheckFlags.Readonly */);
            metaPropertySymbol.parent = symbol;
            metaPropertySymbol.links.type = importMetaType;
            var members = (0, ts_1.createSymbolTable)([metaPropertySymbol]);
            symbol.members = members;
            deferredGlobalImportMetaExpressionType = createAnonymousType(symbol, members, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
        }
        return deferredGlobalImportMetaExpressionType;
    }
    function getGlobalImportCallOptionsType(reportErrors) {
        return (deferredGlobalImportCallOptionsType || (deferredGlobalImportCallOptionsType = getGlobalType("ImportCallOptions", /*arity*/ 0, reportErrors))) || emptyObjectType;
    }
    function getGlobalESSymbolConstructorSymbol(reportErrors) {
        return deferredGlobalESSymbolConstructorSymbol || (deferredGlobalESSymbolConstructorSymbol = getGlobalValueSymbol("Symbol", reportErrors));
    }
    function getGlobalESSymbolConstructorTypeSymbol(reportErrors) {
        return deferredGlobalESSymbolConstructorTypeSymbol || (deferredGlobalESSymbolConstructorTypeSymbol = getGlobalTypeSymbol("SymbolConstructor", reportErrors));
    }
    function getGlobalESSymbolType() {
        return (deferredGlobalESSymbolType || (deferredGlobalESSymbolType = getGlobalType("Symbol", /*arity*/ 0, /*reportErrors*/ false))) || emptyObjectType;
    }
    function getGlobalPromiseType(reportErrors) {
        return (deferredGlobalPromiseType || (deferredGlobalPromiseType = getGlobalType("Promise", /*arity*/ 1, reportErrors))) || emptyGenericType;
    }
    function getGlobalPromiseLikeType(reportErrors) {
        return (deferredGlobalPromiseLikeType || (deferredGlobalPromiseLikeType = getGlobalType("PromiseLike", /*arity*/ 1, reportErrors))) || emptyGenericType;
    }
    function getGlobalPromiseConstructorSymbol(reportErrors) {
        return deferredGlobalPromiseConstructorSymbol || (deferredGlobalPromiseConstructorSymbol = getGlobalValueSymbol("Promise", reportErrors));
    }
    function getGlobalPromiseConstructorLikeType(reportErrors) {
        return (deferredGlobalPromiseConstructorLikeType || (deferredGlobalPromiseConstructorLikeType = getGlobalType("PromiseConstructorLike", /*arity*/ 0, reportErrors))) || emptyObjectType;
    }
    function getGlobalAsyncIterableType(reportErrors) {
        return (deferredGlobalAsyncIterableType || (deferredGlobalAsyncIterableType = getGlobalType("AsyncIterable", /*arity*/ 1, reportErrors))) || emptyGenericType;
    }
    function getGlobalAsyncIteratorType(reportErrors) {
        return (deferredGlobalAsyncIteratorType || (deferredGlobalAsyncIteratorType = getGlobalType("AsyncIterator", /*arity*/ 3, reportErrors))) || emptyGenericType;
    }
    function getGlobalAsyncIterableIteratorType(reportErrors) {
        return (deferredGlobalAsyncIterableIteratorType || (deferredGlobalAsyncIterableIteratorType = getGlobalType("AsyncIterableIterator", /*arity*/ 1, reportErrors))) || emptyGenericType;
    }
    function getGlobalAsyncGeneratorType(reportErrors) {
        return (deferredGlobalAsyncGeneratorType || (deferredGlobalAsyncGeneratorType = getGlobalType("AsyncGenerator", /*arity*/ 3, reportErrors))) || emptyGenericType;
    }
    function getGlobalIterableType(reportErrors) {
        return (deferredGlobalIterableType || (deferredGlobalIterableType = getGlobalType("Iterable", /*arity*/ 1, reportErrors))) || emptyGenericType;
    }
    function getGlobalIteratorType(reportErrors) {
        return (deferredGlobalIteratorType || (deferredGlobalIteratorType = getGlobalType("Iterator", /*arity*/ 3, reportErrors))) || emptyGenericType;
    }
    function getGlobalIterableIteratorType(reportErrors) {
        return (deferredGlobalIterableIteratorType || (deferredGlobalIterableIteratorType = getGlobalType("IterableIterator", /*arity*/ 1, reportErrors))) || emptyGenericType;
    }
    function getGlobalGeneratorType(reportErrors) {
        return (deferredGlobalGeneratorType || (deferredGlobalGeneratorType = getGlobalType("Generator", /*arity*/ 3, reportErrors))) || emptyGenericType;
    }
    function getGlobalIteratorYieldResultType(reportErrors) {
        return (deferredGlobalIteratorYieldResultType || (deferredGlobalIteratorYieldResultType = getGlobalType("IteratorYieldResult", /*arity*/ 1, reportErrors))) || emptyGenericType;
    }
    function getGlobalIteratorReturnResultType(reportErrors) {
        return (deferredGlobalIteratorReturnResultType || (deferredGlobalIteratorReturnResultType = getGlobalType("IteratorReturnResult", /*arity*/ 1, reportErrors))) || emptyGenericType;
    }
    function getGlobalTypeOrUndefined(name, arity) {
        if (arity === void 0) { arity = 0; }
        var symbol = getGlobalSymbol(name, 788968 /* SymbolFlags.Type */, /*diagnostic*/ undefined);
        return symbol && getTypeOfGlobalSymbol(symbol, arity);
    }
    function getGlobalExtractSymbol() {
        // We always report an error, so cache a result in the event we could not resolve the symbol to prevent reporting it multiple times
        deferredGlobalExtractSymbol || (deferredGlobalExtractSymbol = getGlobalTypeAliasSymbol("Extract", /*arity*/ 2, /*reportErrors*/ true) || unknownSymbol);
        return deferredGlobalExtractSymbol === unknownSymbol ? undefined : deferredGlobalExtractSymbol;
    }
    function getGlobalOmitSymbol() {
        // We always report an error, so cache a result in the event we could not resolve the symbol to prevent reporting it multiple times
        deferredGlobalOmitSymbol || (deferredGlobalOmitSymbol = getGlobalTypeAliasSymbol("Omit", /*arity*/ 2, /*reportErrors*/ true) || unknownSymbol);
        return deferredGlobalOmitSymbol === unknownSymbol ? undefined : deferredGlobalOmitSymbol;
    }
    function getGlobalAwaitedSymbol(reportErrors) {
        // Only cache `unknownSymbol` if we are reporting errors so that we don't report the error more than once.
        deferredGlobalAwaitedSymbol || (deferredGlobalAwaitedSymbol = getGlobalTypeAliasSymbol("Awaited", /*arity*/ 1, reportErrors) || (reportErrors ? unknownSymbol : undefined));
        return deferredGlobalAwaitedSymbol === unknownSymbol ? undefined : deferredGlobalAwaitedSymbol;
    }
    function getGlobalBigIntType() {
        return (deferredGlobalBigIntType || (deferredGlobalBigIntType = getGlobalType("BigInt", /*arity*/ 0, /*reportErrors*/ false))) || emptyObjectType;
    }
    function getGlobalClassDecoratorContextType(reportErrors) {
        var _a;
        return (_a = (deferredGlobalClassDecoratorContextType !== null && deferredGlobalClassDecoratorContextType !== void 0 ? deferredGlobalClassDecoratorContextType : (deferredGlobalClassDecoratorContextType = getGlobalType("ClassDecoratorContext", /*arity*/ 1, reportErrors)))) !== null && _a !== void 0 ? _a : emptyGenericType;
    }
    function getGlobalClassMethodDecoratorContextType(reportErrors) {
        var _a;
        return (_a = (deferredGlobalClassMethodDecoratorContextType !== null && deferredGlobalClassMethodDecoratorContextType !== void 0 ? deferredGlobalClassMethodDecoratorContextType : (deferredGlobalClassMethodDecoratorContextType = getGlobalType("ClassMethodDecoratorContext", /*arity*/ 2, reportErrors)))) !== null && _a !== void 0 ? _a : emptyGenericType;
    }
    function getGlobalClassGetterDecoratorContextType(reportErrors) {
        var _a;
        return (_a = (deferredGlobalClassGetterDecoratorContextType !== null && deferredGlobalClassGetterDecoratorContextType !== void 0 ? deferredGlobalClassGetterDecoratorContextType : (deferredGlobalClassGetterDecoratorContextType = getGlobalType("ClassGetterDecoratorContext", /*arity*/ 2, reportErrors)))) !== null && _a !== void 0 ? _a : emptyGenericType;
    }
    function getGlobalClassSetterDecoratorContextType(reportErrors) {
        var _a;
        return (_a = (deferredGlobalClassSetterDecoratorContextType !== null && deferredGlobalClassSetterDecoratorContextType !== void 0 ? deferredGlobalClassSetterDecoratorContextType : (deferredGlobalClassSetterDecoratorContextType = getGlobalType("ClassSetterDecoratorContext", /*arity*/ 2, reportErrors)))) !== null && _a !== void 0 ? _a : emptyGenericType;
    }
    function getGlobalClassAccessorDecoratorContextType(reportErrors) {
        var _a;
        return (_a = (deferredGlobalClassAccessorDecoratorContextType !== null && deferredGlobalClassAccessorDecoratorContextType !== void 0 ? deferredGlobalClassAccessorDecoratorContextType : (deferredGlobalClassAccessorDecoratorContextType = getGlobalType("ClassAccessorDecoratorContext", /*arity*/ 2, reportErrors)))) !== null && _a !== void 0 ? _a : emptyGenericType;
    }
    function getGlobalClassAccessorDecoratorTargetType(reportErrors) {
        var _a;
        return (_a = (deferredGlobalClassAccessorDecoratorTargetType !== null && deferredGlobalClassAccessorDecoratorTargetType !== void 0 ? deferredGlobalClassAccessorDecoratorTargetType : (deferredGlobalClassAccessorDecoratorTargetType = getGlobalType("ClassAccessorDecoratorTarget", /*arity*/ 2, reportErrors)))) !== null && _a !== void 0 ? _a : emptyGenericType;
    }
    function getGlobalClassAccessorDecoratorResultType(reportErrors) {
        var _a;
        return (_a = (deferredGlobalClassAccessorDecoratorResultType !== null && deferredGlobalClassAccessorDecoratorResultType !== void 0 ? deferredGlobalClassAccessorDecoratorResultType : (deferredGlobalClassAccessorDecoratorResultType = getGlobalType("ClassAccessorDecoratorResult", /*arity*/ 2, reportErrors)))) !== null && _a !== void 0 ? _a : emptyGenericType;
    }
    function getGlobalClassFieldDecoratorContextType(reportErrors) {
        var _a;
        return (_a = (deferredGlobalClassFieldDecoratorContextType !== null && deferredGlobalClassFieldDecoratorContextType !== void 0 ? deferredGlobalClassFieldDecoratorContextType : (deferredGlobalClassFieldDecoratorContextType = getGlobalType("ClassFieldDecoratorContext", /*arity*/ 2, reportErrors)))) !== null && _a !== void 0 ? _a : emptyGenericType;
    }
    function getGlobalNaNSymbol() {
        return (deferredGlobalNaNSymbol || (deferredGlobalNaNSymbol = getGlobalValueSymbol("NaN", /*reportErrors*/ false)));
    }
    function getGlobalRecordSymbol() {
        deferredGlobalRecordSymbol || (deferredGlobalRecordSymbol = getGlobalTypeAliasSymbol("Record", /*arity*/ 2, /*reportErrors*/ true) || unknownSymbol);
        return deferredGlobalRecordSymbol === unknownSymbol ? undefined : deferredGlobalRecordSymbol;
    }
    /**
     * Instantiates a global type that is generic with some element type, and returns that instantiation.
     */
    function createTypeFromGenericGlobalType(genericGlobalType, typeArguments) {
        return genericGlobalType !== emptyGenericType ? createTypeReference(genericGlobalType, typeArguments) : emptyObjectType;
    }
    function createTypedPropertyDescriptorType(propertyType) {
        return createTypeFromGenericGlobalType(getGlobalTypedPropertyDescriptorType(), [propertyType]);
    }
    function createIterableType(iteratedType) {
        return createTypeFromGenericGlobalType(getGlobalIterableType(/*reportErrors*/ true), [iteratedType]);
    }
    function createArrayType(elementType, readonly) {
        return createTypeFromGenericGlobalType(readonly ? globalReadonlyArrayType : globalArrayType, [elementType]);
    }
    function getTupleElementFlags(node) {
        switch (node.kind) {
            case 189 /* SyntaxKind.OptionalType */:
                return 2 /* ElementFlags.Optional */;
            case 190 /* SyntaxKind.RestType */:
                return getRestTypeElementFlags(node);
            case 201 /* SyntaxKind.NamedTupleMember */:
                return node.questionToken ? 2 /* ElementFlags.Optional */ :
                    node.dotDotDotToken ? getRestTypeElementFlags(node) :
                        1 /* ElementFlags.Required */;
            default:
                return 1 /* ElementFlags.Required */;
        }
    }
    function getRestTypeElementFlags(node) {
        return getArrayElementTypeNode(node.type) ? 4 /* ElementFlags.Rest */ : 8 /* ElementFlags.Variadic */;
    }
    function getArrayOrTupleTargetType(node) {
        var readonly = isReadonlyTypeOperator(node.parent);
        var elementType = getArrayElementTypeNode(node);
        if (elementType) {
            return readonly ? globalReadonlyArrayType : globalArrayType;
        }
        var elementFlags = (0, ts_1.map)(node.elements, getTupleElementFlags);
        var missingName = (0, ts_1.some)(node.elements, function (e) { return e.kind !== 201 /* SyntaxKind.NamedTupleMember */; });
        return getTupleTargetType(elementFlags, readonly, /*associatedNames*/ missingName ? undefined : node.elements);
    }
    // Return true if the given type reference node is directly aliased or if it needs to be deferred
    // because it is possibly contained in a circular chain of eagerly resolved types.
    function isDeferredTypeReferenceNode(node, hasDefaultTypeArguments) {
        return !!getAliasSymbolForTypeNode(node) || isResolvedByTypeAlias(node) && (node.kind === 187 /* SyntaxKind.ArrayType */ ? mayResolveTypeAlias(node.elementType) :
            node.kind === 188 /* SyntaxKind.TupleType */ ? (0, ts_1.some)(node.elements, mayResolveTypeAlias) :
                hasDefaultTypeArguments || (0, ts_1.some)(node.typeArguments, mayResolveTypeAlias));
    }
    // Return true when the given node is transitively contained in type constructs that eagerly
    // resolve their constituent types. We include SyntaxKind.TypeReference because type arguments
    // of type aliases are eagerly resolved.
    function isResolvedByTypeAlias(node) {
        var parent = node.parent;
        switch (parent.kind) {
            case 195 /* SyntaxKind.ParenthesizedType */:
            case 201 /* SyntaxKind.NamedTupleMember */:
            case 182 /* SyntaxKind.TypeReference */:
            case 191 /* SyntaxKind.UnionType */:
            case 192 /* SyntaxKind.IntersectionType */:
            case 198 /* SyntaxKind.IndexedAccessType */:
            case 193 /* SyntaxKind.ConditionalType */:
            case 197 /* SyntaxKind.TypeOperator */:
            case 187 /* SyntaxKind.ArrayType */:
            case 188 /* SyntaxKind.TupleType */:
                return isResolvedByTypeAlias(parent);
            case 264 /* SyntaxKind.TypeAliasDeclaration */:
                return true;
        }
        return false;
    }
    // Return true if resolving the given node (i.e. getTypeFromTypeNode) possibly causes resolution
    // of a type alias.
    function mayResolveTypeAlias(node) {
        switch (node.kind) {
            case 182 /* SyntaxKind.TypeReference */:
                return isJSDocTypeReference(node) || !!(resolveTypeReferenceName(node, 788968 /* SymbolFlags.Type */).flags & 524288 /* SymbolFlags.TypeAlias */);
            case 185 /* SyntaxKind.TypeQuery */:
                return true;
            case 197 /* SyntaxKind.TypeOperator */:
                return node.operator !== 158 /* SyntaxKind.UniqueKeyword */ && mayResolveTypeAlias(node.type);
            case 195 /* SyntaxKind.ParenthesizedType */:
            case 189 /* SyntaxKind.OptionalType */:
            case 201 /* SyntaxKind.NamedTupleMember */:
            case 322 /* SyntaxKind.JSDocOptionalType */:
            case 320 /* SyntaxKind.JSDocNullableType */:
            case 321 /* SyntaxKind.JSDocNonNullableType */:
            case 315 /* SyntaxKind.JSDocTypeExpression */:
                return mayResolveTypeAlias(node.type);
            case 190 /* SyntaxKind.RestType */:
                return node.type.kind !== 187 /* SyntaxKind.ArrayType */ || mayResolveTypeAlias(node.type.elementType);
            case 191 /* SyntaxKind.UnionType */:
            case 192 /* SyntaxKind.IntersectionType */:
                return (0, ts_1.some)(node.types, mayResolveTypeAlias);
            case 198 /* SyntaxKind.IndexedAccessType */:
                return mayResolveTypeAlias(node.objectType) || mayResolveTypeAlias(node.indexType);
            case 193 /* SyntaxKind.ConditionalType */:
                return mayResolveTypeAlias(node.checkType) || mayResolveTypeAlias(node.extendsType) ||
                    mayResolveTypeAlias(node.trueType) || mayResolveTypeAlias(node.falseType);
        }
        return false;
    }
    function getTypeFromArrayOrTupleTypeNode(node) {
        var links = getNodeLinks(node);
        if (!links.resolvedType) {
            var target = getArrayOrTupleTargetType(node);
            if (target === emptyGenericType) {
                links.resolvedType = emptyObjectType;
            }
            else if (!(node.kind === 188 /* SyntaxKind.TupleType */ && (0, ts_1.some)(node.elements, function (e) { return !!(getTupleElementFlags(e) & 8 /* ElementFlags.Variadic */); })) && isDeferredTypeReferenceNode(node)) {
                links.resolvedType = node.kind === 188 /* SyntaxKind.TupleType */ && node.elements.length === 0 ? target :
                    createDeferredTypeReference(target, node, /*mapper*/ undefined);
            }
            else {
                var elementTypes = node.kind === 187 /* SyntaxKind.ArrayType */ ? [getTypeFromTypeNode(node.elementType)] : (0, ts_1.map)(node.elements, getTypeFromTypeNode);
                links.resolvedType = createNormalizedTypeReference(target, elementTypes);
            }
        }
        return links.resolvedType;
    }
    function isReadonlyTypeOperator(node) {
        return (0, ts_1.isTypeOperatorNode)(node) && node.operator === 148 /* SyntaxKind.ReadonlyKeyword */;
    }
    function createTupleType(elementTypes, elementFlags, readonly, namedMemberDeclarations) {
        if (readonly === void 0) { readonly = false; }
        var tupleTarget = getTupleTargetType(elementFlags || (0, ts_1.map)(elementTypes, function (_) { return 1 /* ElementFlags.Required */; }), readonly, namedMemberDeclarations);
        return tupleTarget === emptyGenericType ? emptyObjectType :
            elementTypes.length ? createNormalizedTypeReference(tupleTarget, elementTypes) :
                tupleTarget;
    }
    function getTupleTargetType(elementFlags, readonly, namedMemberDeclarations) {
        if (elementFlags.length === 1 && elementFlags[0] & 4 /* ElementFlags.Rest */) {
            // [...X[]] is equivalent to just X[]
            return readonly ? globalReadonlyArrayType : globalArrayType;
        }
        var key = (0, ts_1.map)(elementFlags, function (f) { return f & 1 /* ElementFlags.Required */ ? "#" : f & 2 /* ElementFlags.Optional */ ? "?" : f & 4 /* ElementFlags.Rest */ ? "." : "*"; }).join() +
            (readonly ? "R" : "") +
            (namedMemberDeclarations && namedMemberDeclarations.length ? "," + (0, ts_1.map)(namedMemberDeclarations, getNodeId).join(",") : "");
        var type = tupleTypes.get(key);
        if (!type) {
            tupleTypes.set(key, type = createTupleTargetType(elementFlags, readonly, namedMemberDeclarations));
        }
        return type;
    }
    // We represent tuple types as type references to synthesized generic interface types created by
    // this function. The types are of the form:
    //
    //   interface Tuple<T0, T1, T2, ...> extends Array<T0 | T1 | T2 | ...> { 0: T0, 1: T1, 2: T2, ... }
    //
    // Note that the generic type created by this function has no symbol associated with it. The same
    // is true for each of the synthesized type parameters.
    function createTupleTargetType(elementFlags, readonly, namedMemberDeclarations) {
        var arity = elementFlags.length;
        var minLength = (0, ts_1.countWhere)(elementFlags, function (f) { return !!(f & (1 /* ElementFlags.Required */ | 8 /* ElementFlags.Variadic */)); });
        var typeParameters;
        var properties = [];
        var combinedFlags = 0;
        if (arity) {
            typeParameters = new Array(arity);
            for (var i = 0; i < arity; i++) {
                var typeParameter = typeParameters[i] = createTypeParameter();
                var flags = elementFlags[i];
                combinedFlags |= flags;
                if (!(combinedFlags & 12 /* ElementFlags.Variable */)) {
                    var property = createSymbol(4 /* SymbolFlags.Property */ | (flags & 2 /* ElementFlags.Optional */ ? 16777216 /* SymbolFlags.Optional */ : 0), "" + i, readonly ? 8 /* CheckFlags.Readonly */ : 0);
                    property.links.tupleLabelDeclaration = namedMemberDeclarations === null || namedMemberDeclarations === void 0 ? void 0 : namedMemberDeclarations[i];
                    property.links.type = typeParameter;
                    properties.push(property);
                }
            }
        }
        var fixedLength = properties.length;
        var lengthSymbol = createSymbol(4 /* SymbolFlags.Property */, "length", readonly ? 8 /* CheckFlags.Readonly */ : 0);
        if (combinedFlags & 12 /* ElementFlags.Variable */) {
            lengthSymbol.links.type = numberType;
        }
        else {
            var literalTypes = [];
            for (var i = minLength; i <= arity; i++)
                literalTypes.push(getNumberLiteralType(i));
            lengthSymbol.links.type = getUnionType(literalTypes);
        }
        properties.push(lengthSymbol);
        var type = createObjectType(8 /* ObjectFlags.Tuple */ | 4 /* ObjectFlags.Reference */);
        type.typeParameters = typeParameters;
        type.outerTypeParameters = undefined;
        type.localTypeParameters = typeParameters;
        type.instantiations = new Map();
        type.instantiations.set(getTypeListId(type.typeParameters), type);
        type.target = type;
        type.resolvedTypeArguments = type.typeParameters;
        type.thisType = createTypeParameter();
        type.thisType.isThisType = true;
        type.thisType.constraint = type;
        type.declaredProperties = properties;
        type.declaredCallSignatures = ts_1.emptyArray;
        type.declaredConstructSignatures = ts_1.emptyArray;
        type.declaredIndexInfos = ts_1.emptyArray;
        type.elementFlags = elementFlags;
        type.minLength = minLength;
        type.fixedLength = fixedLength;
        type.hasRestElement = !!(combinedFlags & 12 /* ElementFlags.Variable */);
        type.combinedFlags = combinedFlags;
        type.readonly = readonly;
        type.labeledElementDeclarations = namedMemberDeclarations;
        return type;
    }
    function createNormalizedTypeReference(target, typeArguments) {
        return target.objectFlags & 8 /* ObjectFlags.Tuple */ ? createNormalizedTupleType(target, typeArguments) : createTypeReference(target, typeArguments);
    }
    function createNormalizedTupleType(target, elementTypes) {
        var _a, _b, _c;
        if (!(target.combinedFlags & 14 /* ElementFlags.NonRequired */)) {
            // No need to normalize when we only have regular required elements
            return createTypeReference(target, elementTypes);
        }
        if (target.combinedFlags & 8 /* ElementFlags.Variadic */) {
            // Transform [A, ...(X | Y | Z)] into [A, ...X] | [A, ...Y] | [A, ...Z]
            var unionIndex_1 = (0, ts_1.findIndex)(elementTypes, function (t, i) { return !!(target.elementFlags[i] & 8 /* ElementFlags.Variadic */ && t.flags & (131072 /* TypeFlags.Never */ | 1048576 /* TypeFlags.Union */)); });
            if (unionIndex_1 >= 0) {
                return checkCrossProductUnion((0, ts_1.map)(elementTypes, function (t, i) { return target.elementFlags[i] & 8 /* ElementFlags.Variadic */ ? t : unknownType; })) ?
                    mapType(elementTypes[unionIndex_1], function (t) { return createNormalizedTupleType(target, (0, ts_1.replaceElement)(elementTypes, unionIndex_1, t)); }) :
                    errorType;
            }
        }
        // We have optional, rest, or variadic elements that may need normalizing. Normalization ensures that all variadic
        // elements are generic and that the tuple type has one of the following layouts, disregarding variadic elements:
        // (1) Zero or more required elements, followed by zero or more optional elements, followed by zero or one rest element.
        // (2) Zero or more required elements, followed by a rest element, followed by zero or more required elements.
        // In either layout, zero or more generic variadic elements may be present at any location.
        var expandedTypes = [];
        var expandedFlags = [];
        var expandedDeclarations = [];
        var lastRequiredIndex = -1;
        var firstRestIndex = -1;
        var lastOptionalOrRestIndex = -1;
        var _loop_11 = function (i) {
            var type = elementTypes[i];
            var flags = target.elementFlags[i];
            if (flags & 8 /* ElementFlags.Variadic */) {
                if (type.flags & 58982400 /* TypeFlags.InstantiableNonPrimitive */ || isGenericMappedType(type)) {
                    // Generic variadic elements stay as they are.
                    addElement(type, 8 /* ElementFlags.Variadic */, (_a = target.labeledElementDeclarations) === null || _a === void 0 ? void 0 : _a[i]);
                }
                else if (isTupleType(type)) {
                    var elements = getElementTypes(type);
                    if (elements.length + expandedTypes.length >= 10000) {
                        error(currentNode, (0, ts_1.isPartOfTypeNode)(currentNode)
                            ? ts_1.Diagnostics.Type_produces_a_tuple_type_that_is_too_large_to_represent
                            : ts_1.Diagnostics.Expression_produces_a_tuple_type_that_is_too_large_to_represent);
                        return { value: errorType };
                    }
                    // Spread variadic elements with tuple types into the resulting tuple.
                    (0, ts_1.forEach)(elements, function (t, n) { var _a; return addElement(t, type.target.elementFlags[n], (_a = type.target.labeledElementDeclarations) === null || _a === void 0 ? void 0 : _a[n]); });
                }
                else {
                    // Treat everything else as an array type and create a rest element.
                    addElement(isArrayLikeType(type) && getIndexTypeOfType(type, numberType) || errorType, 4 /* ElementFlags.Rest */, (_b = target.labeledElementDeclarations) === null || _b === void 0 ? void 0 : _b[i]);
                }
            }
            else {
                // Copy other element kinds with no change.
                addElement(type, flags, (_c = target.labeledElementDeclarations) === null || _c === void 0 ? void 0 : _c[i]);
            }
        };
        for (var i = 0; i < elementTypes.length; i++) {
            var state_4 = _loop_11(i);
            if (typeof state_4 === "object")
                return state_4.value;
        }
        // Turn optional elements preceding the last required element into required elements
        for (var i = 0; i < lastRequiredIndex; i++) {
            if (expandedFlags[i] & 2 /* ElementFlags.Optional */)
                expandedFlags[i] = 1 /* ElementFlags.Required */;
        }
        if (firstRestIndex >= 0 && firstRestIndex < lastOptionalOrRestIndex) {
            // Turn elements between first rest and last optional/rest into a single rest element
            expandedTypes[firstRestIndex] = getUnionType((0, ts_1.sameMap)(expandedTypes.slice(firstRestIndex, lastOptionalOrRestIndex + 1), function (t, i) { return expandedFlags[firstRestIndex + i] & 8 /* ElementFlags.Variadic */ ? getIndexedAccessType(t, numberType) : t; }));
            expandedTypes.splice(firstRestIndex + 1, lastOptionalOrRestIndex - firstRestIndex);
            expandedFlags.splice(firstRestIndex + 1, lastOptionalOrRestIndex - firstRestIndex);
            expandedDeclarations === null || expandedDeclarations === void 0 ? void 0 : expandedDeclarations.splice(firstRestIndex + 1, lastOptionalOrRestIndex - firstRestIndex);
        }
        var tupleTarget = getTupleTargetType(expandedFlags, target.readonly, expandedDeclarations);
        return tupleTarget === emptyGenericType ? emptyObjectType :
            expandedFlags.length ? createTypeReference(tupleTarget, expandedTypes) :
                tupleTarget;
        function addElement(type, flags, declaration) {
            if (flags & 1 /* ElementFlags.Required */) {
                lastRequiredIndex = expandedFlags.length;
            }
            if (flags & 4 /* ElementFlags.Rest */ && firstRestIndex < 0) {
                firstRestIndex = expandedFlags.length;
            }
            if (flags & (2 /* ElementFlags.Optional */ | 4 /* ElementFlags.Rest */)) {
                lastOptionalOrRestIndex = expandedFlags.length;
            }
            expandedTypes.push(flags & 2 /* ElementFlags.Optional */ ? addOptionality(type, /*isProperty*/ true) : type);
            expandedFlags.push(flags);
            if (expandedDeclarations && declaration) {
                expandedDeclarations.push(declaration);
            }
            else {
                expandedDeclarations = undefined;
            }
        }
    }
    function sliceTupleType(type, index, endSkipCount) {
        if (endSkipCount === void 0) { endSkipCount = 0; }
        var target = type.target;
        var endIndex = getTypeReferenceArity(type) - endSkipCount;
        return index > target.fixedLength ? getRestArrayTypeOfTupleType(type) || createTupleType(ts_1.emptyArray) :
            createTupleType(getTypeArguments(type).slice(index, endIndex), target.elementFlags.slice(index, endIndex), 
            /*readonly*/ false, target.labeledElementDeclarations && target.labeledElementDeclarations.slice(index, endIndex));
    }
    function getKnownKeysOfTupleType(type) {
        return getUnionType((0, ts_1.append)((0, ts_1.arrayOf)(type.target.fixedLength, function (i) { return getStringLiteralType("" + i); }), getIndexType(type.target.readonly ? globalReadonlyArrayType : globalArrayType)));
    }
    // Return count of starting consecutive tuple elements of the given kind(s)
    function getStartElementCount(type, flags) {
        var index = (0, ts_1.findIndex)(type.elementFlags, function (f) { return !(f & flags); });
        return index >= 0 ? index : type.elementFlags.length;
    }
    // Return count of ending consecutive tuple elements of the given kind(s)
    function getEndElementCount(type, flags) {
        return type.elementFlags.length - (0, ts_1.findLastIndex)(type.elementFlags, function (f) { return !(f & flags); }) - 1;
    }
    function getElementTypes(type) {
        var typeArguments = getTypeArguments(type);
        var arity = getTypeReferenceArity(type);
        return typeArguments.length === arity ? typeArguments : typeArguments.slice(0, arity);
    }
    function getTypeFromOptionalTypeNode(node) {
        return addOptionality(getTypeFromTypeNode(node.type), /*isProperty*/ true);
    }
    function getTypeId(type) {
        return type.id;
    }
    function containsType(types, type) {
        return (0, ts_1.binarySearch)(types, type, getTypeId, ts_1.compareValues) >= 0;
    }
    function insertType(types, type) {
        var index = (0, ts_1.binarySearch)(types, type, getTypeId, ts_1.compareValues);
        if (index < 0) {
            types.splice(~index, 0, type);
            return true;
        }
        return false;
    }
    function addTypeToUnion(typeSet, includes, type) {
        var flags = type.flags;
        // We ignore 'never' types in unions
        if (!(flags & 131072 /* TypeFlags.Never */)) {
            includes |= flags & 473694207 /* TypeFlags.IncludesMask */;
            if (flags & 465829888 /* TypeFlags.Instantiable */)
                includes |= 33554432 /* TypeFlags.IncludesInstantiable */;
            if (type === wildcardType)
                includes |= 8388608 /* TypeFlags.IncludesWildcard */;
            if (!strictNullChecks && flags & 98304 /* TypeFlags.Nullable */) {
                if (!((0, ts_1.getObjectFlags)(type) & 65536 /* ObjectFlags.ContainsWideningType */))
                    includes |= 4194304 /* TypeFlags.IncludesNonWideningType */;
            }
            else {
                var len = typeSet.length;
                var index = len && type.id > typeSet[len - 1].id ? ~len : (0, ts_1.binarySearch)(typeSet, type, getTypeId, ts_1.compareValues);
                if (index < 0) {
                    typeSet.splice(~index, 0, type);
                }
            }
        }
        return includes;
    }
    // Add the given types to the given type set. Order is preserved, duplicates are removed,
    // and nested types of the given kind are flattened into the set.
    function addTypesToUnion(typeSet, includes, types) {
        var lastType;
        for (var _i = 0, types_9 = types; _i < types_9.length; _i++) {
            var type = types_9[_i];
            // We skip the type if it is the same as the last type we processed. This simple test particularly
            // saves a lot of work for large lists of the same union type, such as when resolving `Record<A, B>[A]`,
            // where A and B are large union types.
            if (type !== lastType) {
                includes = type.flags & 1048576 /* TypeFlags.Union */ ?
                    addTypesToUnion(typeSet, includes | (isNamedUnionType(type) ? 1048576 /* TypeFlags.Union */ : 0), type.types) :
                    addTypeToUnion(typeSet, includes, type);
                lastType = type;
            }
        }
        return includes;
    }
    function removeSubtypes(types, hasObjectTypes) {
        // [] and [T] immediately reduce to [] and [T] respectively
        if (types.length < 2) {
            return types;
        }
        var id = getTypeListId(types);
        var match = subtypeReductionCache.get(id);
        if (match) {
            return match;
        }
        // We assume that redundant primitive types have already been removed from the types array and that there
        // are no any and unknown types in the array. Thus, the only possible supertypes for primitive types are empty
        // object types, and if none of those are present we can exclude primitive types from the subtype check.
        var hasEmptyObject = hasObjectTypes && (0, ts_1.some)(types, function (t) { return !!(t.flags & 524288 /* TypeFlags.Object */) && !isGenericMappedType(t) && isEmptyResolvedType(resolveStructuredTypeMembers(t)); });
        var len = types.length;
        var i = len;
        var count = 0;
        var _loop_12 = function () {
            i--;
            var source = types[i];
            if (hasEmptyObject || source.flags & 469499904 /* TypeFlags.StructuredOrInstantiable */) {
                // A type parameter with a union constraint may be a subtype of some union, but not a subtype of the
                // individual constituents of that union. For example, `T extends A | B` is a subtype of `A | B`, but not
                // a subtype of just `A` or just `B`. When we encounter such a type parameter, we therefore check if the
                // type parameter is a subtype of a union of all the other types.
                if (source.flags & 262144 /* TypeFlags.TypeParameter */ && getBaseConstraintOrType(source).flags & 1048576 /* TypeFlags.Union */) {
                    if (isTypeRelatedTo(source, getUnionType((0, ts_1.map)(types, function (t) { return t === source ? neverType : t; })), strictSubtypeRelation)) {
                        (0, ts_1.orderedRemoveItemAt)(types, i);
                    }
                    return "continue";
                }
                // Find the first property with a unit type, if any. When constituents have a property by the same name
                // but of a different unit type, we can quickly disqualify them from subtype checks. This helps subtype
                // reduction of large discriminated union types.
                var keyProperty = source.flags & (524288 /* TypeFlags.Object */ | 2097152 /* TypeFlags.Intersection */ | 58982400 /* TypeFlags.InstantiableNonPrimitive */) ?
                    (0, ts_1.find)(getPropertiesOfType(source), function (p) { return isUnitType(getTypeOfSymbol(p)); }) :
                    undefined;
                var keyPropertyType = keyProperty && getRegularTypeOfLiteralType(getTypeOfSymbol(keyProperty));
                for (var _i = 0, types_10 = types; _i < types_10.length; _i++) {
                    var target = types_10[_i];
                    if (source !== target) {
                        if (count === 100000) {
                            // After 100000 subtype checks we estimate the remaining amount of work by assuming the
                            // same ratio of checks per element. If the estimated number of remaining type checks is
                            // greater than 1M we deem the union type too complex to represent. This for example
                            // caps union types at 1000 unique object types.
                            var estimatedCount = (count / (len - i)) * len;
                            if (estimatedCount > 1000000) {
                                ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.instant("checkTypes" /* tracing.Phase.CheckTypes */, "removeSubtypes_DepthLimit", { typeIds: types.map(function (t) { return t.id; }) });
                                error(currentNode, ts_1.Diagnostics.Expression_produces_a_union_type_that_is_too_complex_to_represent);
                                return { value: undefined };
                            }
                        }
                        count++;
                        if (keyProperty && target.flags & (524288 /* TypeFlags.Object */ | 2097152 /* TypeFlags.Intersection */ | 58982400 /* TypeFlags.InstantiableNonPrimitive */)) {
                            var t = getTypeOfPropertyOfType(target, keyProperty.escapedName);
                            if (t && isUnitType(t) && getRegularTypeOfLiteralType(t) !== keyPropertyType) {
                                continue;
                            }
                        }
                        if (isTypeRelatedTo(source, target, strictSubtypeRelation) && (!((0, ts_1.getObjectFlags)(getTargetType(source)) & 1 /* ObjectFlags.Class */) ||
                            !((0, ts_1.getObjectFlags)(getTargetType(target)) & 1 /* ObjectFlags.Class */) ||
                            isTypeDerivedFrom(source, target))) {
                            (0, ts_1.orderedRemoveItemAt)(types, i);
                            break;
                        }
                    }
                }
            }
        };
        while (i > 0) {
            var state_5 = _loop_12();
            if (typeof state_5 === "object")
                return state_5.value;
        }
        subtypeReductionCache.set(id, types);
        return types;
    }
    function removeRedundantLiteralTypes(types, includes, reduceVoidUndefined) {
        var i = types.length;
        while (i > 0) {
            i--;
            var t = types[i];
            var flags = t.flags;
            var remove = flags & (128 /* TypeFlags.StringLiteral */ | 134217728 /* TypeFlags.TemplateLiteral */ | 268435456 /* TypeFlags.StringMapping */) && includes & 4 /* TypeFlags.String */ ||
                flags & 256 /* TypeFlags.NumberLiteral */ && includes & 8 /* TypeFlags.Number */ ||
                flags & 2048 /* TypeFlags.BigIntLiteral */ && includes & 64 /* TypeFlags.BigInt */ ||
                flags & 8192 /* TypeFlags.UniqueESSymbol */ && includes & 4096 /* TypeFlags.ESSymbol */ ||
                reduceVoidUndefined && flags & 32768 /* TypeFlags.Undefined */ && includes & 16384 /* TypeFlags.Void */ ||
                isFreshLiteralType(t) && containsType(types, t.regularType);
            if (remove) {
                (0, ts_1.orderedRemoveItemAt)(types, i);
            }
        }
    }
    function removeStringLiteralsMatchedByTemplateLiterals(types) {
        var templates = (0, ts_1.filter)(types, function (t) { return !!(t.flags & 134217728 /* TypeFlags.TemplateLiteral */) && isPatternLiteralType(t); });
        if (templates.length) {
            var i = types.length;
            var _loop_13 = function () {
                i--;
                var t = types[i];
                if (t.flags & 128 /* TypeFlags.StringLiteral */ && (0, ts_1.some)(templates, function (template) { return isTypeMatchedByTemplateLiteralType(t, template); })) {
                    (0, ts_1.orderedRemoveItemAt)(types, i);
                }
            };
            while (i > 0) {
                _loop_13();
            }
        }
    }
    function isNamedUnionType(type) {
        return !!(type.flags & 1048576 /* TypeFlags.Union */ && (type.aliasSymbol || type.origin));
    }
    function addNamedUnions(namedUnions, types) {
        for (var _i = 0, types_11 = types; _i < types_11.length; _i++) {
            var t = types_11[_i];
            if (t.flags & 1048576 /* TypeFlags.Union */) {
                var origin_1 = t.origin;
                if (t.aliasSymbol || origin_1 && !(origin_1.flags & 1048576 /* TypeFlags.Union */)) {
                    (0, ts_1.pushIfUnique)(namedUnions, t);
                }
                else if (origin_1 && origin_1.flags & 1048576 /* TypeFlags.Union */) {
                    addNamedUnions(namedUnions, origin_1.types);
                }
            }
        }
    }
    function createOriginUnionOrIntersectionType(flags, types) {
        var result = createOriginType(flags);
        result.types = types;
        return result;
    }
    // We sort and deduplicate the constituent types based on object identity. If the subtypeReduction
    // flag is specified we also reduce the constituent type set to only include types that aren't subtypes
    // of other types. Subtype reduction is expensive for large union types and is possible only when union
    // types are known not to circularly reference themselves (as is the case with union types created by
    // expression constructs such as array literals and the || and ?: operators). Named types can
    // circularly reference themselves and therefore cannot be subtype reduced during their declaration.
    // For example, "type Item = string | (() => Item" is a named type that circularly references itself.
    function getUnionType(types, unionReduction, aliasSymbol, aliasTypeArguments, origin) {
        if (unionReduction === void 0) { unionReduction = 1 /* UnionReduction.Literal */; }
        if (types.length === 0) {
            return neverType;
        }
        if (types.length === 1) {
            return types[0];
        }
        // We optimize for the common case of unioning a union type with some other type (such as `undefined`).
        if (types.length === 2 && !origin && (types[0].flags & 1048576 /* TypeFlags.Union */ || types[1].flags & 1048576 /* TypeFlags.Union */)) {
            var infix = unionReduction === 0 /* UnionReduction.None */ ? "N" : unionReduction === 2 /* UnionReduction.Subtype */ ? "S" : "L";
            var index = types[0].id < types[1].id ? 0 : 1;
            var id = types[index].id + infix + types[1 - index].id + getAliasId(aliasSymbol, aliasTypeArguments);
            var type = unionOfUnionTypes.get(id);
            if (!type) {
                type = getUnionTypeWorker(types, unionReduction, aliasSymbol, aliasTypeArguments, /*origin*/ undefined);
                unionOfUnionTypes.set(id, type);
            }
            return type;
        }
        return getUnionTypeWorker(types, unionReduction, aliasSymbol, aliasTypeArguments, origin);
    }
    function getUnionTypeWorker(types, unionReduction, aliasSymbol, aliasTypeArguments, origin) {
        var typeSet = [];
        var includes = addTypesToUnion(typeSet, 0, types);
        if (unionReduction !== 0 /* UnionReduction.None */) {
            if (includes & 3 /* TypeFlags.AnyOrUnknown */) {
                return includes & 1 /* TypeFlags.Any */ ?
                    includes & 8388608 /* TypeFlags.IncludesWildcard */ ? wildcardType : anyType :
                    includes & 65536 /* TypeFlags.Null */ || containsType(typeSet, unknownType) ? unknownType : nonNullUnknownType;
            }
            if (includes & 32768 /* TypeFlags.Undefined */) {
                // If type set contains both undefinedType and missingType, remove missingType
                if (typeSet.length >= 2 && typeSet[0] === undefinedType && typeSet[1] === missingType) {
                    (0, ts_1.orderedRemoveItemAt)(typeSet, 1);
                }
            }
            if (includes & (32 /* TypeFlags.Enum */ | 2944 /* TypeFlags.Literal */ | 8192 /* TypeFlags.UniqueESSymbol */ | 134217728 /* TypeFlags.TemplateLiteral */ | 268435456 /* TypeFlags.StringMapping */) || includes & 16384 /* TypeFlags.Void */ && includes & 32768 /* TypeFlags.Undefined */) {
                removeRedundantLiteralTypes(typeSet, includes, !!(unionReduction & 2 /* UnionReduction.Subtype */));
            }
            if (includes & 128 /* TypeFlags.StringLiteral */ && includes & 134217728 /* TypeFlags.TemplateLiteral */) {
                removeStringLiteralsMatchedByTemplateLiterals(typeSet);
            }
            if (unionReduction === 2 /* UnionReduction.Subtype */) {
                typeSet = removeSubtypes(typeSet, !!(includes & 524288 /* TypeFlags.Object */));
                if (!typeSet) {
                    return errorType;
                }
            }
            if (typeSet.length === 0) {
                return includes & 65536 /* TypeFlags.Null */ ? includes & 4194304 /* TypeFlags.IncludesNonWideningType */ ? nullType : nullWideningType :
                    includes & 32768 /* TypeFlags.Undefined */ ? includes & 4194304 /* TypeFlags.IncludesNonWideningType */ ? undefinedType : undefinedWideningType :
                        neverType;
            }
        }
        if (!origin && includes & 1048576 /* TypeFlags.Union */) {
            var namedUnions = [];
            addNamedUnions(namedUnions, types);
            var reducedTypes = [];
            var _loop_14 = function (t) {
                if (!(0, ts_1.some)(namedUnions, function (union) { return containsType(union.types, t); })) {
                    reducedTypes.push(t);
                }
            };
            for (var _i = 0, typeSet_1 = typeSet; _i < typeSet_1.length; _i++) {
                var t = typeSet_1[_i];
                _loop_14(t);
            }
            if (!aliasSymbol && namedUnions.length === 1 && reducedTypes.length === 0) {
                return namedUnions[0];
            }
            // We create a denormalized origin type only when the union was created from one or more named unions
            // (unions with alias symbols or origins) and when there is no overlap between those named unions.
            var namedTypesCount = (0, ts_1.reduceLeft)(namedUnions, function (sum, union) { return sum + union.types.length; }, 0);
            if (namedTypesCount + reducedTypes.length === typeSet.length) {
                for (var _a = 0, namedUnions_1 = namedUnions; _a < namedUnions_1.length; _a++) {
                    var t = namedUnions_1[_a];
                    insertType(reducedTypes, t);
                }
                origin = createOriginUnionOrIntersectionType(1048576 /* TypeFlags.Union */, reducedTypes);
            }
        }
        var objectFlags = (includes & 36323331 /* TypeFlags.NotPrimitiveUnion */ ? 0 : 32768 /* ObjectFlags.PrimitiveUnion */) |
            (includes & 2097152 /* TypeFlags.Intersection */ ? 16777216 /* ObjectFlags.ContainsIntersections */ : 0);
        return getUnionTypeFromSortedList(typeSet, objectFlags, aliasSymbol, aliasTypeArguments, origin);
    }
    function getUnionOrIntersectionTypePredicate(signatures, kind) {
        var last;
        var types = [];
        for (var _i = 0, signatures_6 = signatures; _i < signatures_6.length; _i++) {
            var sig = signatures_6[_i];
            var pred = getTypePredicateOfSignature(sig);
            if (pred) {
                // Constituent type predicates must all have matching kinds. We don't create composite type predicates for assertions.
                if (pred.kind !== 0 /* TypePredicateKind.This */ && pred.kind !== 1 /* TypePredicateKind.Identifier */ || last && !typePredicateKindsMatch(last, pred)) {
                    return undefined;
                }
                last = pred;
                types.push(pred.type);
            }
            else {
                // In composite union signatures we permit and ignore signatures with a return type `false`.
                var returnType = kind !== 2097152 /* TypeFlags.Intersection */ ? getReturnTypeOfSignature(sig) : undefined;
                if (returnType !== falseType && returnType !== regularFalseType) {
                    return undefined;
                }
            }
        }
        if (!last) {
            return undefined;
        }
        var compositeType = getUnionOrIntersectionType(types, kind);
        return createTypePredicate(last.kind, last.parameterName, last.parameterIndex, compositeType);
    }
    function typePredicateKindsMatch(a, b) {
        return a.kind === b.kind && a.parameterIndex === b.parameterIndex;
    }
    // This function assumes the constituent type list is sorted and deduplicated.
    function getUnionTypeFromSortedList(types, precomputedObjectFlags, aliasSymbol, aliasTypeArguments, origin) {
        if (types.length === 0) {
            return neverType;
        }
        if (types.length === 1) {
            return types[0];
        }
        var typeKey = !origin ? getTypeListId(types) :
            origin.flags & 1048576 /* TypeFlags.Union */ ? "|".concat(getTypeListId(origin.types)) :
                origin.flags & 2097152 /* TypeFlags.Intersection */ ? "&".concat(getTypeListId(origin.types)) :
                    "#".concat(origin.type.id, "|").concat(getTypeListId(types)); // origin type id alone is insufficient, as `keyof x` may resolve to multiple WIP values while `x` is still resolving
        var id = typeKey + getAliasId(aliasSymbol, aliasTypeArguments);
        var type = unionTypes.get(id);
        if (!type) {
            type = createType(1048576 /* TypeFlags.Union */);
            type.objectFlags = precomputedObjectFlags | getPropagatingFlagsOfTypes(types, /*excludeKinds*/ 98304 /* TypeFlags.Nullable */);
            type.types = types;
            type.origin = origin;
            type.aliasSymbol = aliasSymbol;
            type.aliasTypeArguments = aliasTypeArguments;
            if (types.length === 2 && types[0].flags & 512 /* TypeFlags.BooleanLiteral */ && types[1].flags & 512 /* TypeFlags.BooleanLiteral */) {
                type.flags |= 16 /* TypeFlags.Boolean */;
                type.intrinsicName = "boolean";
            }
            unionTypes.set(id, type);
        }
        return type;
    }
    function getTypeFromUnionTypeNode(node) {
        var links = getNodeLinks(node);
        if (!links.resolvedType) {
            var aliasSymbol = getAliasSymbolForTypeNode(node);
            links.resolvedType = getUnionType((0, ts_1.map)(node.types, getTypeFromTypeNode), 1 /* UnionReduction.Literal */, aliasSymbol, getTypeArgumentsForAliasSymbol(aliasSymbol));
        }
        return links.resolvedType;
    }
    function addTypeToIntersection(typeSet, includes, type) {
        var flags = type.flags;
        if (flags & 2097152 /* TypeFlags.Intersection */) {
            return addTypesToIntersection(typeSet, includes, type.types);
        }
        if (isEmptyAnonymousObjectType(type)) {
            if (!(includes & 16777216 /* TypeFlags.IncludesEmptyObject */)) {
                includes |= 16777216 /* TypeFlags.IncludesEmptyObject */;
                typeSet.set(type.id.toString(), type);
            }
        }
        else {
            if (flags & 3 /* TypeFlags.AnyOrUnknown */) {
                if (type === wildcardType)
                    includes |= 8388608 /* TypeFlags.IncludesWildcard */;
            }
            else if (strictNullChecks || !(flags & 98304 /* TypeFlags.Nullable */)) {
                if (type === missingType) {
                    includes |= 262144 /* TypeFlags.IncludesMissingType */;
                    type = undefinedType;
                }
                if (!typeSet.has(type.id.toString())) {
                    if (type.flags & 109472 /* TypeFlags.Unit */ && includes & 109472 /* TypeFlags.Unit */) {
                        // We have seen two distinct unit types which means we should reduce to an
                        // empty intersection. Adding TypeFlags.NonPrimitive causes that to happen.
                        includes |= 67108864 /* TypeFlags.NonPrimitive */;
                    }
                    typeSet.set(type.id.toString(), type);
                }
            }
            includes |= flags & 473694207 /* TypeFlags.IncludesMask */;
        }
        return includes;
    }
    // Add the given types to the given type set. Order is preserved, freshness is removed from literal
    // types, duplicates are removed, and nested types of the given kind are flattened into the set.
    function addTypesToIntersection(typeSet, includes, types) {
        for (var _i = 0, types_12 = types; _i < types_12.length; _i++) {
            var type = types_12[_i];
            includes = addTypeToIntersection(typeSet, includes, getRegularTypeOfLiteralType(type));
        }
        return includes;
    }
    function removeRedundantSupertypes(types, includes) {
        var i = types.length;
        while (i > 0) {
            i--;
            var t = types[i];
            var remove = t.flags & 4 /* TypeFlags.String */ && includes & (128 /* TypeFlags.StringLiteral */ | 134217728 /* TypeFlags.TemplateLiteral */ | 268435456 /* TypeFlags.StringMapping */) ||
                t.flags & 8 /* TypeFlags.Number */ && includes & 256 /* TypeFlags.NumberLiteral */ ||
                t.flags & 64 /* TypeFlags.BigInt */ && includes & 2048 /* TypeFlags.BigIntLiteral */ ||
                t.flags & 4096 /* TypeFlags.ESSymbol */ && includes & 8192 /* TypeFlags.UniqueESSymbol */ ||
                t.flags & 16384 /* TypeFlags.Void */ && includes & 32768 /* TypeFlags.Undefined */ ||
                isEmptyAnonymousObjectType(t) && includes & 470302716 /* TypeFlags.DefinitelyNonNullable */;
            if (remove) {
                (0, ts_1.orderedRemoveItemAt)(types, i);
            }
        }
    }
    // Check that the given type has a match in every union. A given type is matched by
    // an identical type, and a literal type is additionally matched by its corresponding
    // primitive type.
    function eachUnionContains(unionTypes, type) {
        for (var _i = 0, unionTypes_1 = unionTypes; _i < unionTypes_1.length; _i++) {
            var u = unionTypes_1[_i];
            if (!containsType(u.types, type)) {
                var primitive = type.flags & 128 /* TypeFlags.StringLiteral */ ? stringType :
                    type.flags & (32 /* TypeFlags.Enum */ | 256 /* TypeFlags.NumberLiteral */) ? numberType :
                        type.flags & 2048 /* TypeFlags.BigIntLiteral */ ? bigintType :
                            type.flags & 8192 /* TypeFlags.UniqueESSymbol */ ? esSymbolType :
                                undefined;
                if (!primitive || !containsType(u.types, primitive)) {
                    return false;
                }
            }
        }
        return true;
    }
    /**
     * Returns `true` if the intersection of the template literals and string literals is the empty set, eg `get${string}` & "setX", and should reduce to `never`
     */
    function extractRedundantTemplateLiterals(types) {
        var i = types.length;
        var literals = (0, ts_1.filter)(types, function (t) { return !!(t.flags & 128 /* TypeFlags.StringLiteral */); });
        while (i > 0) {
            i--;
            var t = types[i];
            if (!(t.flags & 134217728 /* TypeFlags.TemplateLiteral */))
                continue;
            for (var _i = 0, literals_1 = literals; _i < literals_1.length; _i++) {
                var t2 = literals_1[_i];
                if (isTypeSubtypeOf(t2, t)) {
                    // eg, ``get${T}` & "getX"` is just `"getX"`
                    (0, ts_1.orderedRemoveItemAt)(types, i);
                    break;
                }
                else if (isPatternLiteralType(t)) {
                    return true;
                }
            }
        }
        return false;
    }
    function removeFromEach(types, flag) {
        for (var i = 0; i < types.length; i++) {
            types[i] = filterType(types[i], function (t) { return !(t.flags & flag); });
        }
    }
    // If the given list of types contains more than one union of primitive types, replace the
    // first with a union containing an intersection of those primitive types, then remove the
    // other unions and return true. Otherwise, do nothing and return false.
    function intersectUnionsOfPrimitiveTypes(types) {
        var unionTypes;
        var index = (0, ts_1.findIndex)(types, function (t) { return !!((0, ts_1.getObjectFlags)(t) & 32768 /* ObjectFlags.PrimitiveUnion */); });
        if (index < 0) {
            return false;
        }
        var i = index + 1;
        // Remove all but the first union of primitive types and collect them in
        // the unionTypes array.
        while (i < types.length) {
            var t = types[i];
            if ((0, ts_1.getObjectFlags)(t) & 32768 /* ObjectFlags.PrimitiveUnion */) {
                (unionTypes || (unionTypes = [types[index]])).push(t);
                (0, ts_1.orderedRemoveItemAt)(types, i);
            }
            else {
                i++;
            }
        }
        // Return false if there was only one union of primitive types
        if (!unionTypes) {
            return false;
        }
        // We have more than one union of primitive types, now intersect them. For each
        // type in each union we check if the type is matched in every union and if so
        // we include it in the result.
        var checked = [];
        var result = [];
        for (var _i = 0, unionTypes_2 = unionTypes; _i < unionTypes_2.length; _i++) {
            var u = unionTypes_2[_i];
            for (var _a = 0, _b = u.types; _a < _b.length; _a++) {
                var t = _b[_a];
                if (insertType(checked, t)) {
                    if (eachUnionContains(unionTypes, t)) {
                        insertType(result, t);
                    }
                }
            }
        }
        // Finally replace the first union with the result
        types[index] = getUnionTypeFromSortedList(result, 32768 /* ObjectFlags.PrimitiveUnion */);
        return true;
    }
    function createIntersectionType(types, aliasSymbol, aliasTypeArguments) {
        var result = createType(2097152 /* TypeFlags.Intersection */);
        result.objectFlags = getPropagatingFlagsOfTypes(types, /*excludeKinds*/ 98304 /* TypeFlags.Nullable */);
        result.types = types;
        result.aliasSymbol = aliasSymbol;
        result.aliasTypeArguments = aliasTypeArguments;
        return result;
    }
    // We normalize combinations of intersection and union types based on the distributive property of the '&'
    // operator. Specifically, because X & (A | B) is equivalent to X & A | X & B, we can transform intersection
    // types with union type constituents into equivalent union types with intersection type constituents and
    // effectively ensure that union types are always at the top level in type representations.
    //
    // We do not perform structural deduplication on intersection types. Intersection types are created only by the &
    // type operator and we can't reduce those because we want to support recursive intersection types. For example,
    // a type alias of the form "type List<T> = T & { next: List<T> }" cannot be reduced during its declaration.
    // Also, unlike union types, the order of the constituent types is preserved in order that overload resolution
    // for intersections of types with signatures can be deterministic.
    function getIntersectionType(types, aliasSymbol, aliasTypeArguments, noSupertypeReduction) {
        var typeMembershipMap = new Map();
        var includes = addTypesToIntersection(typeMembershipMap, 0, types);
        var typeSet = (0, ts_1.arrayFrom)(typeMembershipMap.values());
        // An intersection type is considered empty if it contains
        // the type never, or
        // more than one unit type or,
        // an object type and a nullable type (null or undefined), or
        // a string-like type and a type known to be non-string-like, or
        // a number-like type and a type known to be non-number-like, or
        // a symbol-like type and a type known to be non-symbol-like, or
        // a void-like type and a type known to be non-void-like, or
        // a non-primitive type and a type known to be primitive.
        if (includes & 131072 /* TypeFlags.Never */) {
            return (0, ts_1.contains)(typeSet, silentNeverType) ? silentNeverType : neverType;
        }
        if (strictNullChecks && includes & 98304 /* TypeFlags.Nullable */ && includes & (524288 /* TypeFlags.Object */ | 67108864 /* TypeFlags.NonPrimitive */ | 16777216 /* TypeFlags.IncludesEmptyObject */) ||
            includes & 67108864 /* TypeFlags.NonPrimitive */ && includes & (469892092 /* TypeFlags.DisjointDomains */ & ~67108864 /* TypeFlags.NonPrimitive */) ||
            includes & 402653316 /* TypeFlags.StringLike */ && includes & (469892092 /* TypeFlags.DisjointDomains */ & ~402653316 /* TypeFlags.StringLike */) ||
            includes & 296 /* TypeFlags.NumberLike */ && includes & (469892092 /* TypeFlags.DisjointDomains */ & ~296 /* TypeFlags.NumberLike */) ||
            includes & 2112 /* TypeFlags.BigIntLike */ && includes & (469892092 /* TypeFlags.DisjointDomains */ & ~2112 /* TypeFlags.BigIntLike */) ||
            includes & 12288 /* TypeFlags.ESSymbolLike */ && includes & (469892092 /* TypeFlags.DisjointDomains */ & ~12288 /* TypeFlags.ESSymbolLike */) ||
            includes & 49152 /* TypeFlags.VoidLike */ && includes & (469892092 /* TypeFlags.DisjointDomains */ & ~49152 /* TypeFlags.VoidLike */)) {
            return neverType;
        }
        if (includes & 134217728 /* TypeFlags.TemplateLiteral */ && includes & 128 /* TypeFlags.StringLiteral */ && extractRedundantTemplateLiterals(typeSet)) {
            return neverType;
        }
        if (includes & 1 /* TypeFlags.Any */) {
            return includes & 8388608 /* TypeFlags.IncludesWildcard */ ? wildcardType : anyType;
        }
        if (!strictNullChecks && includes & 98304 /* TypeFlags.Nullable */) {
            return includes & 16777216 /* TypeFlags.IncludesEmptyObject */ ? neverType : includes & 32768 /* TypeFlags.Undefined */ ? undefinedType : nullType;
        }
        if (includes & 4 /* TypeFlags.String */ && includes & (128 /* TypeFlags.StringLiteral */ | 134217728 /* TypeFlags.TemplateLiteral */ | 268435456 /* TypeFlags.StringMapping */) ||
            includes & 8 /* TypeFlags.Number */ && includes & 256 /* TypeFlags.NumberLiteral */ ||
            includes & 64 /* TypeFlags.BigInt */ && includes & 2048 /* TypeFlags.BigIntLiteral */ ||
            includes & 4096 /* TypeFlags.ESSymbol */ && includes & 8192 /* TypeFlags.UniqueESSymbol */ ||
            includes & 16384 /* TypeFlags.Void */ && includes & 32768 /* TypeFlags.Undefined */ ||
            includes & 16777216 /* TypeFlags.IncludesEmptyObject */ && includes & 470302716 /* TypeFlags.DefinitelyNonNullable */) {
            if (!noSupertypeReduction)
                removeRedundantSupertypes(typeSet, includes);
        }
        if (includes & 262144 /* TypeFlags.IncludesMissingType */) {
            typeSet[typeSet.indexOf(undefinedType)] = missingType;
        }
        if (typeSet.length === 0) {
            return unknownType;
        }
        if (typeSet.length === 1) {
            return typeSet[0];
        }
        var id = getTypeListId(typeSet) + getAliasId(aliasSymbol, aliasTypeArguments);
        var result = intersectionTypes.get(id);
        if (!result) {
            if (includes & 1048576 /* TypeFlags.Union */) {
                if (intersectUnionsOfPrimitiveTypes(typeSet)) {
                    // When the intersection creates a reduced set (which might mean that *all* union types have
                    // disappeared), we restart the operation to get a new set of combined flags. Once we have
                    // reduced we'll never reduce again, so this occurs at most once.
                    result = getIntersectionType(typeSet, aliasSymbol, aliasTypeArguments);
                }
                else if ((0, ts_1.every)(typeSet, function (t) { return !!(t.flags & 1048576 /* TypeFlags.Union */ && t.types[0].flags & 32768 /* TypeFlags.Undefined */); })) {
                    var containedUndefinedType = (0, ts_1.some)(typeSet, containsMissingType) ? missingType : undefinedType;
                    removeFromEach(typeSet, 32768 /* TypeFlags.Undefined */);
                    result = getUnionType([getIntersectionType(typeSet), containedUndefinedType], 1 /* UnionReduction.Literal */, aliasSymbol, aliasTypeArguments);
                }
                else if ((0, ts_1.every)(typeSet, function (t) { return !!(t.flags & 1048576 /* TypeFlags.Union */ && (t.types[0].flags & 65536 /* TypeFlags.Null */ || t.types[1].flags & 65536 /* TypeFlags.Null */)); })) {
                    removeFromEach(typeSet, 65536 /* TypeFlags.Null */);
                    result = getUnionType([getIntersectionType(typeSet), nullType], 1 /* UnionReduction.Literal */, aliasSymbol, aliasTypeArguments);
                }
                else {
                    // We are attempting to construct a type of the form X & (A | B) & (C | D). Transform this into a type of
                    // the form X & A & C | X & A & D | X & B & C | X & B & D. If the estimated size of the resulting union type
                    // exceeds 100000 constituents, report an error.
                    if (!checkCrossProductUnion(typeSet)) {
                        return errorType;
                    }
                    var constituents = getCrossProductIntersections(typeSet);
                    // We attach a denormalized origin type when at least one constituent of the cross-product union is an
                    // intersection (i.e. when the intersection didn't just reduce one or more unions to smaller unions) and
                    // the denormalized origin has fewer constituents than the union itself.
                    var origin_2 = (0, ts_1.some)(constituents, function (t) { return !!(t.flags & 2097152 /* TypeFlags.Intersection */); }) && getConstituentCountOfTypes(constituents) > getConstituentCountOfTypes(typeSet) ? createOriginUnionOrIntersectionType(2097152 /* TypeFlags.Intersection */, typeSet) : undefined;
                    result = getUnionType(constituents, 1 /* UnionReduction.Literal */, aliasSymbol, aliasTypeArguments, origin_2);
                }
            }
            else {
                result = createIntersectionType(typeSet, aliasSymbol, aliasTypeArguments);
            }
            intersectionTypes.set(id, result);
        }
        return result;
    }
    function getCrossProductUnionSize(types) {
        return (0, ts_1.reduceLeft)(types, function (n, t) { return t.flags & 1048576 /* TypeFlags.Union */ ? n * t.types.length : t.flags & 131072 /* TypeFlags.Never */ ? 0 : n; }, 1);
    }
    function checkCrossProductUnion(types) {
        var size = getCrossProductUnionSize(types);
        if (size >= 100000) {
            ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.instant("checkTypes" /* tracing.Phase.CheckTypes */, "checkCrossProductUnion_DepthLimit", { typeIds: types.map(function (t) { return t.id; }), size: size });
            error(currentNode, ts_1.Diagnostics.Expression_produces_a_union_type_that_is_too_complex_to_represent);
            return false;
        }
        return true;
    }
    function getCrossProductIntersections(types) {
        var count = getCrossProductUnionSize(types);
        var intersections = [];
        for (var i = 0; i < count; i++) {
            var constituents = types.slice();
            var n = i;
            for (var j = types.length - 1; j >= 0; j--) {
                if (types[j].flags & 1048576 /* TypeFlags.Union */) {
                    var sourceTypes = types[j].types;
                    var length_4 = sourceTypes.length;
                    constituents[j] = sourceTypes[n % length_4];
                    n = Math.floor(n / length_4);
                }
            }
            var t = getIntersectionType(constituents);
            if (!(t.flags & 131072 /* TypeFlags.Never */))
                intersections.push(t);
        }
        return intersections;
    }
    function getConstituentCount(type) {
        return !(type.flags & 3145728 /* TypeFlags.UnionOrIntersection */) || type.aliasSymbol ? 1 :
            type.flags & 1048576 /* TypeFlags.Union */ && type.origin ? getConstituentCount(type.origin) :
                getConstituentCountOfTypes(type.types);
    }
    function getConstituentCountOfTypes(types) {
        return (0, ts_1.reduceLeft)(types, function (n, t) { return n + getConstituentCount(t); }, 0);
    }
    function areIntersectedTypesAvoidingPrimitiveReduction(t1, t2) {
        return !!(t1.flags & (4 /* TypeFlags.String */ | 8 /* TypeFlags.Number */ | 64 /* TypeFlags.BigInt */)) && t2 === emptyTypeLiteralType;
    }
    function getTypeFromIntersectionTypeNode(node) {
        var links = getNodeLinks(node);
        if (!links.resolvedType) {
            var aliasSymbol = getAliasSymbolForTypeNode(node);
            var types = (0, ts_1.map)(node.types, getTypeFromTypeNode);
            var noSupertypeReduction = types.length === 2 && (areIntersectedTypesAvoidingPrimitiveReduction(types[0], types[1]) || areIntersectedTypesAvoidingPrimitiveReduction(types[1], types[0]));
            links.resolvedType = getIntersectionType(types, aliasSymbol, getTypeArgumentsForAliasSymbol(aliasSymbol), noSupertypeReduction);
        }
        return links.resolvedType;
    }
    function createIndexType(type, indexFlags) {
        var result = createType(4194304 /* TypeFlags.Index */);
        result.type = type;
        result.indexFlags = indexFlags;
        return result;
    }
    function createOriginIndexType(type) {
        var result = createOriginType(4194304 /* TypeFlags.Index */);
        result.type = type;
        return result;
    }
    function getIndexTypeForGenericType(type, indexFlags) {
        return indexFlags & 1 /* IndexFlags.StringsOnly */ ?
            type.resolvedStringIndexType || (type.resolvedStringIndexType = createIndexType(type, 1 /* IndexFlags.StringsOnly */)) :
            type.resolvedIndexType || (type.resolvedIndexType = createIndexType(type, 0 /* IndexFlags.None */));
    }
    /**
     * This roughly mirrors `resolveMappedTypeMembers` in the nongeneric case, except only reports a union of the keys calculated,
     * rather than manufacturing the properties. We can't just fetch the `constraintType` since that would ignore mappings
     * and mapping the `constraintType` directly ignores how mapped types map _properties_ and not keys (thus ignoring subtype
     * reduction in the constraintType) when possible.
     * @param noIndexSignatures Indicates if _string_ index signatures should be elided. (other index signatures are always reported)
     */
    function getIndexTypeForMappedType(type, indexFlags) {
        var typeParameter = getTypeParameterFromMappedType(type);
        var constraintType = getConstraintTypeFromMappedType(type);
        var nameType = getNameTypeFromMappedType(type.target || type);
        if (!nameType && !(indexFlags & 2 /* IndexFlags.NoIndexSignatures */)) {
            // no mapping and no filtering required, just quickly bail to returning the constraint in the common case
            return constraintType;
        }
        var keyTypes = [];
        if (isMappedTypeWithKeyofConstraintDeclaration(type)) {
            // We have a { [P in keyof T]: X }
            // `getApparentType` on the T in a generic mapped type can trigger a circularity
            // (conditionals and `infer` types create a circular dependency in the constraint resolution)
            // so we only eagerly manifest the keys if the constraint is nongeneric
            if (!isGenericIndexType(constraintType)) {
                var modifiersType = getApparentType(getModifiersTypeFromMappedType(type)); // The 'T' in 'keyof T'
                forEachMappedTypePropertyKeyTypeAndIndexSignatureKeyType(modifiersType, 8576 /* TypeFlags.StringOrNumberLiteralOrUnique */, !!(indexFlags & 1 /* IndexFlags.StringsOnly */), addMemberForKeyType);
            }
            else {
                // we have a generic index and a homomorphic mapping (but a distributive key remapping) - we need to defer the whole `keyof whatever` for later
                // since it's not safe to resolve the shape of modifier type
                return getIndexTypeForGenericType(type, indexFlags);
            }
        }
        else {
            forEachType(getLowerBoundOfKeyType(constraintType), addMemberForKeyType);
        }
        if (isGenericIndexType(constraintType)) { // include the generic component in the resulting type
            forEachType(constraintType, addMemberForKeyType);
        }
        // we had to pick apart the constraintType to potentially map/filter it - compare the final resulting list with the original constraintType,
        // so we can return the union that preserves aliases/origin data if possible
        var result = indexFlags & 2 /* IndexFlags.NoIndexSignatures */ ? filterType(getUnionType(keyTypes), function (t) { return !(t.flags & (1 /* TypeFlags.Any */ | 4 /* TypeFlags.String */)); }) : getUnionType(keyTypes);
        if (result.flags & 1048576 /* TypeFlags.Union */ && constraintType.flags & 1048576 /* TypeFlags.Union */ && getTypeListId(result.types) === getTypeListId(constraintType.types)) {
            return constraintType;
        }
        return result;
        function addMemberForKeyType(keyType) {
            var propNameType = nameType ? instantiateType(nameType, appendTypeMapping(type.mapper, typeParameter, keyType)) : keyType;
            // `keyof` currently always returns `string | number` for concrete `string` index signatures - the below ternary keeps that behavior for mapped types
            // See `getLiteralTypeFromProperties` where there's a similar ternary to cause the same behavior.
            keyTypes.push(propNameType === stringType ? stringOrNumberType : propNameType);
        }
    }
    // Ordinarily we reduce a keyof M, where M is a mapped type { [P in K as N<P>]: X }, to simply N<K>. This however presumes
    // that N distributes over union types, i.e. that N<A | B | C> is equivalent to N<A> | N<B> | N<C>. Specifically, we only
    // want to perform the reduction when the name type of a mapped type is distributive with respect to the type variable
    // introduced by the 'in' clause of the mapped type. Note that non-generic types are considered to be distributive because
    // they're the same type regardless of what's being distributed over.
    function hasDistributiveNameType(mappedType) {
        var typeVariable = getTypeParameterFromMappedType(mappedType);
        return isDistributive(getNameTypeFromMappedType(mappedType) || typeVariable);
        function isDistributive(type) {
            return type.flags & (3 /* TypeFlags.AnyOrUnknown */ | 402784252 /* TypeFlags.Primitive */ | 131072 /* TypeFlags.Never */ | 262144 /* TypeFlags.TypeParameter */ | 524288 /* TypeFlags.Object */ | 67108864 /* TypeFlags.NonPrimitive */) ? true :
                type.flags & 16777216 /* TypeFlags.Conditional */ ? type.root.isDistributive && type.checkType === typeVariable :
                    type.flags & (3145728 /* TypeFlags.UnionOrIntersection */ | 134217728 /* TypeFlags.TemplateLiteral */) ? (0, ts_1.every)(type.types, isDistributive) :
                        type.flags & 8388608 /* TypeFlags.IndexedAccess */ ? isDistributive(type.objectType) && isDistributive(type.indexType) :
                            type.flags & 33554432 /* TypeFlags.Substitution */ ? isDistributive(type.baseType) && isDistributive(type.constraint) :
                                type.flags & 268435456 /* TypeFlags.StringMapping */ ? isDistributive(type.type) :
                                    false;
        }
    }
    function getLiteralTypeFromPropertyName(name) {
        if ((0, ts_1.isPrivateIdentifier)(name)) {
            return neverType;
        }
        if ((0, ts_1.isNumericLiteral)(name)) {
            return getRegularTypeOfLiteralType(checkExpression(name));
        }
        if ((0, ts_1.isComputedPropertyName)(name)) {
            return getRegularTypeOfLiteralType(checkComputedPropertyName(name));
        }
        var propertyName = (0, ts_1.getPropertyNameForPropertyNameNode)(name);
        if (propertyName !== undefined) {
            return getStringLiteralType((0, ts_1.unescapeLeadingUnderscores)(propertyName));
        }
        if ((0, ts_1.isExpression)(name)) {
            return getRegularTypeOfLiteralType(checkExpression(name));
        }
        return neverType;
    }
    function getLiteralTypeFromProperty(prop, include, includeNonPublic) {
        if (includeNonPublic || !((0, ts_1.getDeclarationModifierFlagsFromSymbol)(prop) & 24 /* ModifierFlags.NonPublicAccessibilityModifier */)) {
            var type = getSymbolLinks(getLateBoundSymbol(prop)).nameType;
            if (!type) {
                var name_20 = (0, ts_1.getNameOfDeclaration)(prop.valueDeclaration);
                type = prop.escapedName === "default" /* InternalSymbolName.Default */ ? getStringLiteralType("default") :
                    name_20 && getLiteralTypeFromPropertyName(name_20) || (!(0, ts_1.isKnownSymbol)(prop) ? getStringLiteralType((0, ts_1.symbolName)(prop)) : undefined);
            }
            if (type && type.flags & include) {
                return type;
            }
        }
        return neverType;
    }
    function isKeyTypeIncluded(keyType, include) {
        return !!(keyType.flags & include || keyType.flags & 2097152 /* TypeFlags.Intersection */ && (0, ts_1.some)(keyType.types, function (t) { return isKeyTypeIncluded(t, include); }));
    }
    function getLiteralTypeFromProperties(type, include, includeOrigin) {
        var origin = includeOrigin && ((0, ts_1.getObjectFlags)(type) & (3 /* ObjectFlags.ClassOrInterface */ | 4 /* ObjectFlags.Reference */) || type.aliasSymbol) ? createOriginIndexType(type) : undefined;
        var propertyTypes = (0, ts_1.map)(getPropertiesOfType(type), function (prop) { return getLiteralTypeFromProperty(prop, include); });
        var indexKeyTypes = (0, ts_1.map)(getIndexInfosOfType(type), function (info) { return info !== enumNumberIndexInfo && isKeyTypeIncluded(info.keyType, include) ?
            info.keyType === stringType && include & 8 /* TypeFlags.Number */ ? stringOrNumberType : info.keyType : neverType; });
        return getUnionType((0, ts_1.concatenate)(propertyTypes, indexKeyTypes), 1 /* UnionReduction.Literal */, 
        /*aliasSymbol*/ undefined, /*aliasTypeArguments*/ undefined, origin);
    }
    function shouldDeferIndexType(type, indexFlags) {
        if (indexFlags === void 0) { indexFlags = 0 /* IndexFlags.None */; }
        return !!(type.flags & 58982400 /* TypeFlags.InstantiableNonPrimitive */ ||
            isGenericTupleType(type) ||
            isGenericMappedType(type) && !hasDistributiveNameType(type) ||
            type.flags & 1048576 /* TypeFlags.Union */ && !(indexFlags & 4 /* IndexFlags.NoReducibleCheck */) && isGenericReducibleType(type) ||
            type.flags & 2097152 /* TypeFlags.Intersection */ && maybeTypeOfKind(type, 465829888 /* TypeFlags.Instantiable */) && (0, ts_1.some)(type.types, isEmptyAnonymousObjectType));
    }
    function getIndexType(type, indexFlags) {
        if (indexFlags === void 0) { indexFlags = defaultIndexFlags; }
        type = getReducedType(type);
        return shouldDeferIndexType(type, indexFlags) ? getIndexTypeForGenericType(type, indexFlags) :
            type.flags & 1048576 /* TypeFlags.Union */ ? getIntersectionType((0, ts_1.map)(type.types, function (t) { return getIndexType(t, indexFlags); })) :
                type.flags & 2097152 /* TypeFlags.Intersection */ ? getUnionType((0, ts_1.map)(type.types, function (t) { return getIndexType(t, indexFlags); })) :
                    (0, ts_1.getObjectFlags)(type) & 32 /* ObjectFlags.Mapped */ ? getIndexTypeForMappedType(type, indexFlags) :
                        type === wildcardType ? wildcardType :
                            type.flags & 2 /* TypeFlags.Unknown */ ? neverType :
                                type.flags & (1 /* TypeFlags.Any */ | 131072 /* TypeFlags.Never */) ? keyofConstraintType :
                                    getLiteralTypeFromProperties(type, (indexFlags & 2 /* IndexFlags.NoIndexSignatures */ ? 128 /* TypeFlags.StringLiteral */ : 402653316 /* TypeFlags.StringLike */) | (indexFlags & 1 /* IndexFlags.StringsOnly */ ? 0 : 296 /* TypeFlags.NumberLike */ | 12288 /* TypeFlags.ESSymbolLike */), indexFlags === defaultIndexFlags);
    }
    function getExtractStringType(type) {
        if (keyofStringsOnly) {
            return type;
        }
        var extractTypeAlias = getGlobalExtractSymbol();
        return extractTypeAlias ? getTypeAliasInstantiation(extractTypeAlias, [type, stringType]) : stringType;
    }
    function getIndexTypeOrString(type) {
        var indexType = getExtractStringType(getIndexType(type));
        return indexType.flags & 131072 /* TypeFlags.Never */ ? stringType : indexType;
    }
    function getTypeFromTypeOperatorNode(node) {
        var links = getNodeLinks(node);
        if (!links.resolvedType) {
            switch (node.operator) {
                case 143 /* SyntaxKind.KeyOfKeyword */:
                    links.resolvedType = getIndexType(getTypeFromTypeNode(node.type));
                    break;
                case 158 /* SyntaxKind.UniqueKeyword */:
                    links.resolvedType = node.type.kind === 155 /* SyntaxKind.SymbolKeyword */
                        ? getESSymbolLikeTypeForNode((0, ts_1.walkUpParenthesizedTypes)(node.parent))
                        : errorType;
                    break;
                case 148 /* SyntaxKind.ReadonlyKeyword */:
                    links.resolvedType = getTypeFromTypeNode(node.type);
                    break;
                default:
                    ts_1.Debug.assertNever(node.operator);
            }
        }
        return links.resolvedType;
    }
    function getTypeFromTemplateTypeNode(node) {
        var links = getNodeLinks(node);
        if (!links.resolvedType) {
            links.resolvedType = getTemplateLiteralType(__spreadArray([node.head.text], (0, ts_1.map)(node.templateSpans, function (span) { return span.literal.text; }), true), (0, ts_1.map)(node.templateSpans, function (span) { return getTypeFromTypeNode(span.type); }));
        }
        return links.resolvedType;
    }
    function getTemplateLiteralType(texts, types) {
        var unionIndex = (0, ts_1.findIndex)(types, function (t) { return !!(t.flags & (131072 /* TypeFlags.Never */ | 1048576 /* TypeFlags.Union */)); });
        if (unionIndex >= 0) {
            return checkCrossProductUnion(types) ?
                mapType(types[unionIndex], function (t) { return getTemplateLiteralType(texts, (0, ts_1.replaceElement)(types, unionIndex, t)); }) :
                errorType;
        }
        if ((0, ts_1.contains)(types, wildcardType)) {
            return wildcardType;
        }
        var newTypes = [];
        var newTexts = [];
        var text = texts[0];
        if (!addSpans(texts, types)) {
            return stringType;
        }
        if (newTypes.length === 0) {
            return getStringLiteralType(text);
        }
        newTexts.push(text);
        if ((0, ts_1.every)(newTexts, function (t) { return t === ""; })) {
            if ((0, ts_1.every)(newTypes, function (t) { return !!(t.flags & 4 /* TypeFlags.String */); })) {
                return stringType;
            }
            // Normalize `${Mapping<xxx>}` into Mapping<xxx>
            if (newTypes.length === 1 && isPatternLiteralType(newTypes[0])) {
                return newTypes[0];
            }
        }
        var id = "".concat(getTypeListId(newTypes), "|").concat((0, ts_1.map)(newTexts, function (t) { return t.length; }).join(","), "|").concat(newTexts.join(""));
        var type = templateLiteralTypes.get(id);
        if (!type) {
            templateLiteralTypes.set(id, type = createTemplateLiteralType(newTexts, newTypes));
        }
        return type;
        function addSpans(texts, types) {
            for (var i = 0; i < types.length; i++) {
                var t = types[i];
                if (t.flags & (2944 /* TypeFlags.Literal */ | 65536 /* TypeFlags.Null */ | 32768 /* TypeFlags.Undefined */)) {
                    text += getTemplateStringForType(t) || "";
                    text += texts[i + 1];
                }
                else if (t.flags & 134217728 /* TypeFlags.TemplateLiteral */) {
                    text += t.texts[0];
                    if (!addSpans(t.texts, t.types))
                        return false;
                    text += texts[i + 1];
                }
                else if (isGenericIndexType(t) || isPatternLiteralPlaceholderType(t)) {
                    newTypes.push(t);
                    newTexts.push(text);
                    text = texts[i + 1];
                }
                else {
                    return false;
                }
            }
            return true;
        }
    }
    function getTemplateStringForType(type) {
        return type.flags & 128 /* TypeFlags.StringLiteral */ ? type.value :
            type.flags & 256 /* TypeFlags.NumberLiteral */ ? "" + type.value :
                type.flags & 2048 /* TypeFlags.BigIntLiteral */ ? (0, ts_1.pseudoBigIntToString)(type.value) :
                    type.flags & (512 /* TypeFlags.BooleanLiteral */ | 98304 /* TypeFlags.Nullable */) ? type.intrinsicName :
                        undefined;
    }
    function createTemplateLiteralType(texts, types) {
        var type = createType(134217728 /* TypeFlags.TemplateLiteral */);
        type.objectFlags = getPropagatingFlagsOfTypes(types, /*excludeKinds*/ 98304 /* TypeFlags.Nullable */);
        type.texts = texts;
        type.types = types;
        return type;
    }
    function getStringMappingType(symbol, type) {
        return type.flags & (1048576 /* TypeFlags.Union */ | 131072 /* TypeFlags.Never */) ? mapType(type, function (t) { return getStringMappingType(symbol, t); }) :
            type.flags & 128 /* TypeFlags.StringLiteral */ ? getStringLiteralType(applyStringMapping(symbol, type.value)) :
                type.flags & 134217728 /* TypeFlags.TemplateLiteral */ ? getTemplateLiteralType.apply(void 0, applyTemplateStringMapping(symbol, type.texts, type.types)) :
                    // Mapping<Mapping<T>> === Mapping<T>
                    type.flags & 268435456 /* TypeFlags.StringMapping */ && symbol === type.symbol ? type :
                        type.flags & (1 /* TypeFlags.Any */ | 4 /* TypeFlags.String */ | 268435456 /* TypeFlags.StringMapping */) || isGenericIndexType(type) ? getStringMappingTypeForGenericType(symbol, type) :
                            // This handles Mapping<`${number}`> and Mapping<`${bigint}`>
                            isPatternLiteralPlaceholderType(type) ? getStringMappingTypeForGenericType(symbol, getTemplateLiteralType(["", ""], [type])) :
                                type;
    }
    function applyStringMapping(symbol, str) {
        switch (intrinsicTypeKinds.get(symbol.escapedName)) {
            case 0 /* IntrinsicTypeKind.Uppercase */: return str.toUpperCase();
            case 1 /* IntrinsicTypeKind.Lowercase */: return str.toLowerCase();
            case 2 /* IntrinsicTypeKind.Capitalize */: return str.charAt(0).toUpperCase() + str.slice(1);
            case 3 /* IntrinsicTypeKind.Uncapitalize */: return str.charAt(0).toLowerCase() + str.slice(1);
        }
        return str;
    }
    function applyTemplateStringMapping(symbol, texts, types) {
        switch (intrinsicTypeKinds.get(symbol.escapedName)) {
            case 0 /* IntrinsicTypeKind.Uppercase */: return [texts.map(function (t) { return t.toUpperCase(); }), types.map(function (t) { return getStringMappingType(symbol, t); })];
            case 1 /* IntrinsicTypeKind.Lowercase */: return [texts.map(function (t) { return t.toLowerCase(); }), types.map(function (t) { return getStringMappingType(symbol, t); })];
            case 2 /* IntrinsicTypeKind.Capitalize */: return [texts[0] === "" ? texts : __spreadArray([texts[0].charAt(0).toUpperCase() + texts[0].slice(1)], texts.slice(1), true), texts[0] === "" ? __spreadArray([getStringMappingType(symbol, types[0])], types.slice(1), true) : types];
            case 3 /* IntrinsicTypeKind.Uncapitalize */: return [texts[0] === "" ? texts : __spreadArray([texts[0].charAt(0).toLowerCase() + texts[0].slice(1)], texts.slice(1), true), texts[0] === "" ? __spreadArray([getStringMappingType(symbol, types[0])], types.slice(1), true) : types];
        }
        return [texts, types];
    }
    function getStringMappingTypeForGenericType(symbol, type) {
        var id = "".concat(getSymbolId(symbol), ",").concat(getTypeId(type));
        var result = stringMappingTypes.get(id);
        if (!result) {
            stringMappingTypes.set(id, result = createStringMappingType(symbol, type));
        }
        return result;
    }
    function createStringMappingType(symbol, type) {
        var result = createTypeWithSymbol(268435456 /* TypeFlags.StringMapping */, symbol);
        result.type = type;
        return result;
    }
    function createIndexedAccessType(objectType, indexType, accessFlags, aliasSymbol, aliasTypeArguments) {
        var type = createType(8388608 /* TypeFlags.IndexedAccess */);
        type.objectType = objectType;
        type.indexType = indexType;
        type.accessFlags = accessFlags;
        type.aliasSymbol = aliasSymbol;
        type.aliasTypeArguments = aliasTypeArguments;
        return type;
    }
    /**
     * Returns if a type is or consists of a JSLiteral object type
     * In addition to objects which are directly literals,
     * * unions where every element is a jsliteral
     * * intersections where at least one element is a jsliteral
     * * and instantiable types constrained to a jsliteral
     * Should all count as literals and not print errors on access or assignment of possibly existing properties.
     * This mirrors the behavior of the index signature propagation, to which this behaves similarly (but doesn't affect assignability or inference).
     */
    function isJSLiteralType(type) {
        if (noImplicitAny) {
            return false; // Flag is meaningless under `noImplicitAny` mode
        }
        if ((0, ts_1.getObjectFlags)(type) & 4096 /* ObjectFlags.JSLiteral */) {
            return true;
        }
        if (type.flags & 1048576 /* TypeFlags.Union */) {
            return (0, ts_1.every)(type.types, isJSLiteralType);
        }
        if (type.flags & 2097152 /* TypeFlags.Intersection */) {
            return (0, ts_1.some)(type.types, isJSLiteralType);
        }
        if (type.flags & 465829888 /* TypeFlags.Instantiable */) {
            var constraint = getResolvedBaseConstraint(type);
            return constraint !== type && isJSLiteralType(constraint);
        }
        return false;
    }
    function getPropertyNameFromIndex(indexType, accessNode) {
        return isTypeUsableAsPropertyName(indexType) ?
            getPropertyNameFromType(indexType) :
            accessNode && (0, ts_1.isPropertyName)(accessNode) ?
                // late bound names are handled in the first branch, so here we only need to handle normal names
                (0, ts_1.getPropertyNameForPropertyNameNode)(accessNode) :
                undefined;
    }
    function isUncalledFunctionReference(node, symbol) {
        if (symbol.flags & (16 /* SymbolFlags.Function */ | 8192 /* SymbolFlags.Method */)) {
            var parent_8 = (0, ts_1.findAncestor)(node.parent, function (n) { return !(0, ts_1.isAccessExpression)(n); }) || node.parent;
            if ((0, ts_1.isCallLikeExpression)(parent_8)) {
                return (0, ts_1.isCallOrNewExpression)(parent_8) && (0, ts_1.isIdentifier)(node) && hasMatchingArgument(parent_8, node);
            }
            return (0, ts_1.every)(symbol.declarations, function (d) { return !(0, ts_1.isFunctionLike)(d) || !!((0, ts_1.getCombinedNodeFlags)(d) & 268435456 /* NodeFlags.Deprecated */); });
        }
        return true;
    }
    function getPropertyTypeForIndexType(originalObjectType, objectType, indexType, fullIndexType, accessNode, accessFlags) {
        var _a;
        var accessExpression = accessNode && accessNode.kind === 211 /* SyntaxKind.ElementAccessExpression */ ? accessNode : undefined;
        var propName = accessNode && (0, ts_1.isPrivateIdentifier)(accessNode) ? undefined : getPropertyNameFromIndex(indexType, accessNode);
        if (propName !== undefined) {
            if (accessFlags & 256 /* AccessFlags.Contextual */) {
                return getTypeOfPropertyOfContextualType(objectType, propName) || anyType;
            }
            var prop = getPropertyOfType(objectType, propName);
            if (prop) {
                if (accessFlags & 64 /* AccessFlags.ReportDeprecated */ && accessNode && prop.declarations && isDeprecatedSymbol(prop) && isUncalledFunctionReference(accessNode, prop)) {
                    var deprecatedNode = (_a = accessExpression === null || accessExpression === void 0 ? void 0 : accessExpression.argumentExpression) !== null && _a !== void 0 ? _a : ((0, ts_1.isIndexedAccessTypeNode)(accessNode) ? accessNode.indexType : accessNode);
                    addDeprecatedSuggestion(deprecatedNode, prop.declarations, propName);
                }
                if (accessExpression) {
                    markPropertyAsReferenced(prop, accessExpression, isSelfTypeAccess(accessExpression.expression, objectType.symbol));
                    if (isAssignmentToReadonlyEntity(accessExpression, prop, (0, ts_1.getAssignmentTargetKind)(accessExpression))) {
                        error(accessExpression.argumentExpression, ts_1.Diagnostics.Cannot_assign_to_0_because_it_is_a_read_only_property, symbolToString(prop));
                        return undefined;
                    }
                    if (accessFlags & 8 /* AccessFlags.CacheSymbol */) {
                        getNodeLinks(accessNode).resolvedSymbol = prop;
                    }
                    if (isThisPropertyAccessInConstructor(accessExpression, prop)) {
                        return autoType;
                    }
                }
                var propType = getTypeOfSymbol(prop);
                return accessExpression && (0, ts_1.getAssignmentTargetKind)(accessExpression) !== 1 /* AssignmentKind.Definite */ ? getFlowTypeOfReference(accessExpression, propType) :
                    accessNode && (0, ts_1.isIndexedAccessTypeNode)(accessNode) && containsMissingType(propType) ? getUnionType([propType, undefinedType]) :
                        propType;
            }
            if (everyType(objectType, isTupleType) && (0, ts_1.isNumericLiteralName)(propName)) {
                var index = +propName;
                if (accessNode && everyType(objectType, function (t) { return !t.target.hasRestElement; }) && !(accessFlags & 16 /* AccessFlags.NoTupleBoundsCheck */)) {
                    var indexNode = getIndexNodeForAccessExpression(accessNode);
                    if (isTupleType(objectType)) {
                        if (index < 0) {
                            error(indexNode, ts_1.Diagnostics.A_tuple_type_cannot_be_indexed_with_a_negative_value);
                            return undefinedType;
                        }
                        error(indexNode, ts_1.Diagnostics.Tuple_type_0_of_length_1_has_no_element_at_index_2, typeToString(objectType), getTypeReferenceArity(objectType), (0, ts_1.unescapeLeadingUnderscores)(propName));
                    }
                    else {
                        error(indexNode, ts_1.Diagnostics.Property_0_does_not_exist_on_type_1, (0, ts_1.unescapeLeadingUnderscores)(propName), typeToString(objectType));
                    }
                }
                if (index >= 0) {
                    errorIfWritingToReadonlyIndex(getIndexInfoOfType(objectType, numberType));
                    return mapType(objectType, function (t) {
                        var restType = getRestTypeOfTupleType(t) || undefinedType;
                        return accessFlags & 1 /* AccessFlags.IncludeUndefined */ ? getUnionType([restType, missingType]) : restType;
                    });
                }
            }
        }
        if (!(indexType.flags & 98304 /* TypeFlags.Nullable */) && isTypeAssignableToKind(indexType, 402653316 /* TypeFlags.StringLike */ | 296 /* TypeFlags.NumberLike */ | 12288 /* TypeFlags.ESSymbolLike */)) {
            if (objectType.flags & (1 /* TypeFlags.Any */ | 131072 /* TypeFlags.Never */)) {
                return objectType;
            }
            // If no index signature is applicable, we default to the string index signature. In effect, this means the string
            // index signature applies even when accessing with a symbol-like type.
            var indexInfo = getApplicableIndexInfo(objectType, indexType) || getIndexInfoOfType(objectType, stringType);
            if (indexInfo) {
                if (accessFlags & 2 /* AccessFlags.NoIndexSignatures */ && indexInfo.keyType !== numberType) {
                    if (accessExpression) {
                        error(accessExpression, ts_1.Diagnostics.Type_0_cannot_be_used_to_index_type_1, typeToString(indexType), typeToString(originalObjectType));
                    }
                    return undefined;
                }
                if (accessNode && indexInfo.keyType === stringType && !isTypeAssignableToKind(indexType, 4 /* TypeFlags.String */ | 8 /* TypeFlags.Number */)) {
                    var indexNode = getIndexNodeForAccessExpression(accessNode);
                    error(indexNode, ts_1.Diagnostics.Type_0_cannot_be_used_as_an_index_type, typeToString(indexType));
                    return accessFlags & 1 /* AccessFlags.IncludeUndefined */ ? getUnionType([indexInfo.type, missingType]) : indexInfo.type;
                }
                errorIfWritingToReadonlyIndex(indexInfo);
                // When accessing an enum object with its own type,
                // e.g. E[E.A] for enum E { A }, undefined shouldn't
                // be included in the result type
                if ((accessFlags & 1 /* AccessFlags.IncludeUndefined */) &&
                    !(objectType.symbol &&
                        objectType.symbol.flags & (256 /* SymbolFlags.RegularEnum */ | 128 /* SymbolFlags.ConstEnum */) &&
                        (indexType.symbol &&
                            indexType.flags & 1024 /* TypeFlags.EnumLiteral */ &&
                            getParentOfSymbol(indexType.symbol) === objectType.symbol))) {
                    return getUnionType([indexInfo.type, missingType]);
                }
                return indexInfo.type;
            }
            if (indexType.flags & 131072 /* TypeFlags.Never */) {
                return neverType;
            }
            if (isJSLiteralType(objectType)) {
                return anyType;
            }
            if (accessExpression && !isConstEnumObjectType(objectType)) {
                if (isObjectLiteralType(objectType)) {
                    if (noImplicitAny && indexType.flags & (128 /* TypeFlags.StringLiteral */ | 256 /* TypeFlags.NumberLiteral */)) {
                        diagnostics.add((0, ts_1.createDiagnosticForNode)(accessExpression, ts_1.Diagnostics.Property_0_does_not_exist_on_type_1, indexType.value, typeToString(objectType)));
                        return undefinedType;
                    }
                    else if (indexType.flags & (8 /* TypeFlags.Number */ | 4 /* TypeFlags.String */)) {
                        var types = (0, ts_1.map)(objectType.properties, function (property) {
                            return getTypeOfSymbol(property);
                        });
                        return getUnionType((0, ts_1.append)(types, undefinedType));
                    }
                }
                if (objectType.symbol === globalThisSymbol && propName !== undefined && globalThisSymbol.exports.has(propName) && (globalThisSymbol.exports.get(propName).flags & 418 /* SymbolFlags.BlockScoped */)) {
                    error(accessExpression, ts_1.Diagnostics.Property_0_does_not_exist_on_type_1, (0, ts_1.unescapeLeadingUnderscores)(propName), typeToString(objectType));
                }
                else if (noImplicitAny && !compilerOptions.suppressImplicitAnyIndexErrors && !(accessFlags & 128 /* AccessFlags.SuppressNoImplicitAnyError */)) {
                    if (propName !== undefined && typeHasStaticProperty(propName, objectType)) {
                        var typeName = typeToString(objectType);
                        error(accessExpression, ts_1.Diagnostics.Property_0_does_not_exist_on_type_1_Did_you_mean_to_access_the_static_member_2_instead, propName, typeName, typeName + "[" + (0, ts_1.getTextOfNode)(accessExpression.argumentExpression) + "]");
                    }
                    else if (getIndexTypeOfType(objectType, numberType)) {
                        error(accessExpression.argumentExpression, ts_1.Diagnostics.Element_implicitly_has_an_any_type_because_index_expression_is_not_of_type_number);
                    }
                    else {
                        var suggestion = void 0;
                        if (propName !== undefined && (suggestion = getSuggestionForNonexistentProperty(propName, objectType))) {
                            if (suggestion !== undefined) {
                                error(accessExpression.argumentExpression, ts_1.Diagnostics.Property_0_does_not_exist_on_type_1_Did_you_mean_2, propName, typeToString(objectType), suggestion);
                            }
                        }
                        else {
                            var suggestion_1 = getSuggestionForNonexistentIndexSignature(objectType, accessExpression, indexType);
                            if (suggestion_1 !== undefined) {
                                error(accessExpression, ts_1.Diagnostics.Element_implicitly_has_an_any_type_because_type_0_has_no_index_signature_Did_you_mean_to_call_1, typeToString(objectType), suggestion_1);
                            }
                            else {
                                var errorInfo = void 0;
                                if (indexType.flags & 1024 /* TypeFlags.EnumLiteral */) {
                                    errorInfo = (0, ts_1.chainDiagnosticMessages)(/*details*/ undefined, ts_1.Diagnostics.Property_0_does_not_exist_on_type_1, "[" + typeToString(indexType) + "]", typeToString(objectType));
                                }
                                else if (indexType.flags & 8192 /* TypeFlags.UniqueESSymbol */) {
                                    var symbolName_2 = getFullyQualifiedName(indexType.symbol, accessExpression);
                                    errorInfo = (0, ts_1.chainDiagnosticMessages)(/*details*/ undefined, ts_1.Diagnostics.Property_0_does_not_exist_on_type_1, "[" + symbolName_2 + "]", typeToString(objectType));
                                }
                                else if (indexType.flags & 128 /* TypeFlags.StringLiteral */) {
                                    errorInfo = (0, ts_1.chainDiagnosticMessages)(/*details*/ undefined, ts_1.Diagnostics.Property_0_does_not_exist_on_type_1, indexType.value, typeToString(objectType));
                                }
                                else if (indexType.flags & 256 /* TypeFlags.NumberLiteral */) {
                                    errorInfo = (0, ts_1.chainDiagnosticMessages)(/*details*/ undefined, ts_1.Diagnostics.Property_0_does_not_exist_on_type_1, indexType.value, typeToString(objectType));
                                }
                                else if (indexType.flags & (8 /* TypeFlags.Number */ | 4 /* TypeFlags.String */)) {
                                    errorInfo = (0, ts_1.chainDiagnosticMessages)(/*details*/ undefined, ts_1.Diagnostics.No_index_signature_with_a_parameter_of_type_0_was_found_on_type_1, typeToString(indexType), typeToString(objectType));
                                }
                                errorInfo = (0, ts_1.chainDiagnosticMessages)(errorInfo, ts_1.Diagnostics.Element_implicitly_has_an_any_type_because_expression_of_type_0_can_t_be_used_to_index_type_1, typeToString(fullIndexType), typeToString(objectType));
                                diagnostics.add((0, ts_1.createDiagnosticForNodeFromMessageChain)((0, ts_1.getSourceFileOfNode)(accessExpression), accessExpression, errorInfo));
                            }
                        }
                    }
                }
                return undefined;
            }
        }
        if (isJSLiteralType(objectType)) {
            return anyType;
        }
        if (accessNode) {
            var indexNode = getIndexNodeForAccessExpression(accessNode);
            if (indexType.flags & (128 /* TypeFlags.StringLiteral */ | 256 /* TypeFlags.NumberLiteral */)) {
                error(indexNode, ts_1.Diagnostics.Property_0_does_not_exist_on_type_1, "" + indexType.value, typeToString(objectType));
            }
            else if (indexType.flags & (4 /* TypeFlags.String */ | 8 /* TypeFlags.Number */)) {
                error(indexNode, ts_1.Diagnostics.Type_0_has_no_matching_index_signature_for_type_1, typeToString(objectType), typeToString(indexType));
            }
            else {
                error(indexNode, ts_1.Diagnostics.Type_0_cannot_be_used_as_an_index_type, typeToString(indexType));
            }
        }
        if (isTypeAny(indexType)) {
            return indexType;
        }
        return undefined;
        function errorIfWritingToReadonlyIndex(indexInfo) {
            if (indexInfo && indexInfo.isReadonly && accessExpression && ((0, ts_1.isAssignmentTarget)(accessExpression) || (0, ts_1.isDeleteTarget)(accessExpression))) {
                error(accessExpression, ts_1.Diagnostics.Index_signature_in_type_0_only_permits_reading, typeToString(objectType));
            }
        }
    }
    function getIndexNodeForAccessExpression(accessNode) {
        return accessNode.kind === 211 /* SyntaxKind.ElementAccessExpression */ ? accessNode.argumentExpression :
            accessNode.kind === 198 /* SyntaxKind.IndexedAccessType */ ? accessNode.indexType :
                accessNode.kind === 166 /* SyntaxKind.ComputedPropertyName */ ? accessNode.expression :
                    accessNode;
    }
    function isPatternLiteralPlaceholderType(type) {
        if (type.flags & 2097152 /* TypeFlags.Intersection */) {
            return (0, ts_1.some)(type.types, function (t) { return !!(t.flags & (2944 /* TypeFlags.Literal */ | 65536 /* TypeFlags.Null */ | 32768 /* TypeFlags.Undefined */)) || isPatternLiteralPlaceholderType(t); });
        }
        return !!(type.flags & (1 /* TypeFlags.Any */ | 4 /* TypeFlags.String */ | 8 /* TypeFlags.Number */ | 64 /* TypeFlags.BigInt */)) || isPatternLiteralType(type);
    }
    function isPatternLiteralType(type) {
        return !!(type.flags & 134217728 /* TypeFlags.TemplateLiteral */) && (0, ts_1.every)(type.types, isPatternLiteralPlaceholderType) ||
            !!(type.flags & 268435456 /* TypeFlags.StringMapping */) && isPatternLiteralPlaceholderType(type.type);
    }
    function isGenericType(type) {
        return !!getGenericObjectFlags(type);
    }
    function isGenericObjectType(type) {
        return !!(getGenericObjectFlags(type) & 4194304 /* ObjectFlags.IsGenericObjectType */);
    }
    function isGenericIndexType(type) {
        return !!(getGenericObjectFlags(type) & 8388608 /* ObjectFlags.IsGenericIndexType */);
    }
    function getGenericObjectFlags(type) {
        if (type.flags & (3145728 /* TypeFlags.UnionOrIntersection */ | 134217728 /* TypeFlags.TemplateLiteral */)) {
            if (!(type.objectFlags & 2097152 /* ObjectFlags.IsGenericTypeComputed */)) {
                type.objectFlags |= 2097152 /* ObjectFlags.IsGenericTypeComputed */ |
                    (0, ts_1.reduceLeft)(type.types, function (flags, t) { return flags | getGenericObjectFlags(t); }, 0);
            }
            return type.objectFlags & 12582912 /* ObjectFlags.IsGenericType */;
        }
        if (type.flags & 33554432 /* TypeFlags.Substitution */) {
            if (!(type.objectFlags & 2097152 /* ObjectFlags.IsGenericTypeComputed */)) {
                type.objectFlags |= 2097152 /* ObjectFlags.IsGenericTypeComputed */ |
                    getGenericObjectFlags(type.baseType) | getGenericObjectFlags(type.constraint);
            }
            return type.objectFlags & 12582912 /* ObjectFlags.IsGenericType */;
        }
        return (type.flags & 58982400 /* TypeFlags.InstantiableNonPrimitive */ || isGenericMappedType(type) || isGenericTupleType(type) ? 4194304 /* ObjectFlags.IsGenericObjectType */ : 0) |
            (type.flags & (58982400 /* TypeFlags.InstantiableNonPrimitive */ | 4194304 /* TypeFlags.Index */ | 268435456 /* TypeFlags.StringMapping */) && !isPatternLiteralType(type) ? 8388608 /* ObjectFlags.IsGenericIndexType */ : 0);
    }
    function getSimplifiedType(type, writing) {
        return type.flags & 8388608 /* TypeFlags.IndexedAccess */ ? getSimplifiedIndexedAccessType(type, writing) :
            type.flags & 16777216 /* TypeFlags.Conditional */ ? getSimplifiedConditionalType(type, writing) :
                type;
    }
    function distributeIndexOverObjectType(objectType, indexType, writing) {
        // (T | U)[K] -> T[K] | U[K] (reading)
        // (T | U)[K] -> T[K] & U[K] (writing)
        // (T & U)[K] -> T[K] & U[K]
        if (objectType.flags & 1048576 /* TypeFlags.Union */ || objectType.flags & 2097152 /* TypeFlags.Intersection */ && !shouldDeferIndexType(objectType)) {
            var types = (0, ts_1.map)(objectType.types, function (t) { return getSimplifiedType(getIndexedAccessType(t, indexType), writing); });
            return objectType.flags & 2097152 /* TypeFlags.Intersection */ || writing ? getIntersectionType(types) : getUnionType(types);
        }
    }
    function distributeObjectOverIndexType(objectType, indexType, writing) {
        // T[A | B] -> T[A] | T[B] (reading)
        // T[A | B] -> T[A] & T[B] (writing)
        if (indexType.flags & 1048576 /* TypeFlags.Union */) {
            var types = (0, ts_1.map)(indexType.types, function (t) { return getSimplifiedType(getIndexedAccessType(objectType, t), writing); });
            return writing ? getIntersectionType(types) : getUnionType(types);
        }
    }
    // Transform an indexed access to a simpler form, if possible. Return the simpler form, or return
    // the type itself if no transformation is possible. The writing flag indicates that the type is
    // the target of an assignment.
    function getSimplifiedIndexedAccessType(type, writing) {
        var cache = writing ? "simplifiedForWriting" : "simplifiedForReading";
        if (type[cache]) {
            return type[cache] === circularConstraintType ? type : type[cache];
        }
        type[cache] = circularConstraintType;
        // We recursively simplify the object type as it may in turn be an indexed access type. For example, with
        // '{ [P in T]: { [Q in U]: number } }[T][U]' we want to first simplify the inner indexed access type.
        var objectType = getSimplifiedType(type.objectType, writing);
        var indexType = getSimplifiedType(type.indexType, writing);
        // T[A | B] -> T[A] | T[B] (reading)
        // T[A | B] -> T[A] & T[B] (writing)
        var distributedOverIndex = distributeObjectOverIndexType(objectType, indexType, writing);
        if (distributedOverIndex) {
            return type[cache] = distributedOverIndex;
        }
        // Only do the inner distributions if the index can no longer be instantiated to cause index distribution again
        if (!(indexType.flags & 465829888 /* TypeFlags.Instantiable */)) {
            // (T | U)[K] -> T[K] | U[K] (reading)
            // (T | U)[K] -> T[K] & U[K] (writing)
            // (T & U)[K] -> T[K] & U[K]
            var distributedOverObject = distributeIndexOverObjectType(objectType, indexType, writing);
            if (distributedOverObject) {
                return type[cache] = distributedOverObject;
            }
        }
        // So ultimately (reading):
        // ((A & B) | C)[K1 | K2] -> ((A & B) | C)[K1] | ((A & B) | C)[K2] -> (A & B)[K1] | C[K1] | (A & B)[K2] | C[K2] -> (A[K1] & B[K1]) | C[K1] | (A[K2] & B[K2]) | C[K2]
        // A generic tuple type indexed by a number exists only when the index type doesn't select a
        // fixed element. We simplify to either the combined type of all elements (when the index type
        // the actual number type) or to the combined type of all non-fixed elements.
        if (isGenericTupleType(objectType) && indexType.flags & 296 /* TypeFlags.NumberLike */) {
            var elementType = getElementTypeOfSliceOfTupleType(objectType, indexType.flags & 8 /* TypeFlags.Number */ ? 0 : objectType.target.fixedLength, /*endSkipCount*/ 0, writing);
            if (elementType) {
                return type[cache] = elementType;
            }
        }
        // If the object type is a mapped type { [P in K]: E }, where K is generic, or { [P in K as N]: E }, where
        // K is generic and N is assignable to P, instantiate E using a mapper that substitutes the index type for P.
        // For example, for an index access { [P in K]: Box<T[P]> }[X], we construct the type Box<T[X]>.
        if (isGenericMappedType(objectType)) {
            if (!getNameTypeFromMappedType(objectType) || isFilteringMappedType(objectType)) {
                return type[cache] = mapType(substituteIndexedMappedType(objectType, type.indexType), function (t) { return getSimplifiedType(t, writing); });
            }
        }
        return type[cache] = type;
    }
    function getSimplifiedConditionalType(type, writing) {
        var checkType = type.checkType;
        var extendsType = type.extendsType;
        var trueType = getTrueTypeFromConditionalType(type);
        var falseType = getFalseTypeFromConditionalType(type);
        // Simplifications for types of the form `T extends U ? T : never` and `T extends U ? never : T`.
        if (falseType.flags & 131072 /* TypeFlags.Never */ && getActualTypeVariable(trueType) === getActualTypeVariable(checkType)) {
            if (checkType.flags & 1 /* TypeFlags.Any */ || isTypeAssignableTo(getRestrictiveInstantiation(checkType), getRestrictiveInstantiation(extendsType))) { // Always true
                return getSimplifiedType(trueType, writing);
            }
            else if (isIntersectionEmpty(checkType, extendsType)) { // Always false
                return neverType;
            }
        }
        else if (trueType.flags & 131072 /* TypeFlags.Never */ && getActualTypeVariable(falseType) === getActualTypeVariable(checkType)) {
            if (!(checkType.flags & 1 /* TypeFlags.Any */) && isTypeAssignableTo(getRestrictiveInstantiation(checkType), getRestrictiveInstantiation(extendsType))) { // Always true
                return neverType;
            }
            else if (checkType.flags & 1 /* TypeFlags.Any */ || isIntersectionEmpty(checkType, extendsType)) { // Always false
                return getSimplifiedType(falseType, writing);
            }
        }
        return type;
    }
    /**
     * Invokes union simplification logic to determine if an intersection is considered empty as a union constituent
     */
    function isIntersectionEmpty(type1, type2) {
        return !!(getUnionType([intersectTypes(type1, type2), neverType]).flags & 131072 /* TypeFlags.Never */);
    }
    function substituteIndexedMappedType(objectType, index) {
        var mapper = createTypeMapper([getTypeParameterFromMappedType(objectType)], [index]);
        var templateMapper = combineTypeMappers(objectType.mapper, mapper);
        return instantiateType(getTemplateTypeFromMappedType(objectType.target || objectType), templateMapper);
    }
    function getIndexedAccessType(objectType, indexType, accessFlags, accessNode, aliasSymbol, aliasTypeArguments) {
        if (accessFlags === void 0) { accessFlags = 0 /* AccessFlags.None */; }
        return getIndexedAccessTypeOrUndefined(objectType, indexType, accessFlags, accessNode, aliasSymbol, aliasTypeArguments) || (accessNode ? errorType : unknownType);
    }
    function indexTypeLessThan(indexType, limit) {
        return everyType(indexType, function (t) {
            if (t.flags & 384 /* TypeFlags.StringOrNumberLiteral */) {
                var propName = getPropertyNameFromType(t);
                if ((0, ts_1.isNumericLiteralName)(propName)) {
                    var index = +propName;
                    return index >= 0 && index < limit;
                }
            }
            return false;
        });
    }
    function getIndexedAccessTypeOrUndefined(objectType, indexType, accessFlags, accessNode, aliasSymbol, aliasTypeArguments) {
        if (accessFlags === void 0) { accessFlags = 0 /* AccessFlags.None */; }
        if (objectType === wildcardType || indexType === wildcardType) {
            return wildcardType;
        }
        objectType = getReducedType(objectType);
        // If the object type has a string index signature and no other members we know that the result will
        // always be the type of that index signature and we can simplify accordingly.
        if (isStringIndexSignatureOnlyType(objectType) && !(indexType.flags & 98304 /* TypeFlags.Nullable */) && isTypeAssignableToKind(indexType, 4 /* TypeFlags.String */ | 8 /* TypeFlags.Number */)) {
            indexType = stringType;
        }
        // In noUncheckedIndexedAccess mode, indexed access operations that occur in an expression in a read position and resolve to
        // an index signature have 'undefined' included in their type.
        if (compilerOptions.noUncheckedIndexedAccess && accessFlags & 32 /* AccessFlags.ExpressionPosition */)
            accessFlags |= 1 /* AccessFlags.IncludeUndefined */;
        // If the index type is generic, or if the object type is generic and doesn't originate in an expression and
        // the operation isn't exclusively indexing the fixed (non-variadic) portion of a tuple type, we are performing
        // a higher-order index access where we cannot meaningfully access the properties of the object type. Note that
        // for a generic T and a non-generic K, we eagerly resolve T[K] if it originates in an expression. This is to
        // preserve backwards compatibility. For example, an element access 'this["foo"]' has always been resolved
        // eagerly using the constraint type of 'this' at the given location.
        if (isGenericIndexType(indexType) || (accessNode && accessNode.kind !== 198 /* SyntaxKind.IndexedAccessType */ ?
            isGenericTupleType(objectType) && !indexTypeLessThan(indexType, objectType.target.fixedLength) :
            isGenericObjectType(objectType) && !(isTupleType(objectType) && indexTypeLessThan(indexType, objectType.target.fixedLength)) || isGenericReducibleType(objectType))) {
            if (objectType.flags & 3 /* TypeFlags.AnyOrUnknown */) {
                return objectType;
            }
            // Defer the operation by creating an indexed access type.
            var persistentAccessFlags = accessFlags & 1 /* AccessFlags.Persistent */;
            var id = objectType.id + "," + indexType.id + "," + persistentAccessFlags + getAliasId(aliasSymbol, aliasTypeArguments);
            var type = indexedAccessTypes.get(id);
            if (!type) {
                indexedAccessTypes.set(id, type = createIndexedAccessType(objectType, indexType, persistentAccessFlags, aliasSymbol, aliasTypeArguments));
            }
            return type;
        }
        // In the following we resolve T[K] to the type of the property in T selected by K.
        // We treat boolean as different from other unions to improve errors;
        // skipping straight to getPropertyTypeForIndexType gives errors with 'boolean' instead of 'true'.
        var apparentObjectType = getReducedApparentType(objectType);
        if (indexType.flags & 1048576 /* TypeFlags.Union */ && !(indexType.flags & 16 /* TypeFlags.Boolean */)) {
            var propTypes = [];
            var wasMissingProp = false;
            for (var _i = 0, _a = indexType.types; _i < _a.length; _i++) {
                var t = _a[_i];
                var propType = getPropertyTypeForIndexType(objectType, apparentObjectType, t, indexType, accessNode, accessFlags | (wasMissingProp ? 128 /* AccessFlags.SuppressNoImplicitAnyError */ : 0));
                if (propType) {
                    propTypes.push(propType);
                }
                else if (!accessNode) {
                    // If there's no error node, we can immeditely stop, since error reporting is off
                    return undefined;
                }
                else {
                    // Otherwise we set a flag and return at the end of the loop so we still mark all errors
                    wasMissingProp = true;
                }
            }
            if (wasMissingProp) {
                return undefined;
            }
            return accessFlags & 4 /* AccessFlags.Writing */
                ? getIntersectionType(propTypes, aliasSymbol, aliasTypeArguments)
                : getUnionType(propTypes, 1 /* UnionReduction.Literal */, aliasSymbol, aliasTypeArguments);
        }
        return getPropertyTypeForIndexType(objectType, apparentObjectType, indexType, indexType, accessNode, accessFlags | 8 /* AccessFlags.CacheSymbol */ | 64 /* AccessFlags.ReportDeprecated */);
    }
    function getTypeFromIndexedAccessTypeNode(node) {
        var links = getNodeLinks(node);
        if (!links.resolvedType) {
            var objectType = getTypeFromTypeNode(node.objectType);
            var indexType = getTypeFromTypeNode(node.indexType);
            var potentialAlias = getAliasSymbolForTypeNode(node);
            links.resolvedType = getIndexedAccessType(objectType, indexType, 0 /* AccessFlags.None */, node, potentialAlias, getTypeArgumentsForAliasSymbol(potentialAlias));
        }
        return links.resolvedType;
    }
    function getTypeFromMappedTypeNode(node) {
        var links = getNodeLinks(node);
        if (!links.resolvedType) {
            var type = createObjectType(32 /* ObjectFlags.Mapped */, node.symbol);
            type.declaration = node;
            type.aliasSymbol = getAliasSymbolForTypeNode(node);
            type.aliasTypeArguments = getTypeArgumentsForAliasSymbol(type.aliasSymbol);
            links.resolvedType = type;
            // Eagerly resolve the constraint type which forces an error if the constraint type circularly
            // references itself through one or more type aliases.
            getConstraintTypeFromMappedType(type);
        }
        return links.resolvedType;
    }
    function getActualTypeVariable(type) {
        if (type.flags & 33554432 /* TypeFlags.Substitution */) {
            return getActualTypeVariable(type.baseType);
        }
        if (type.flags & 8388608 /* TypeFlags.IndexedAccess */ && (type.objectType.flags & 33554432 /* TypeFlags.Substitution */ ||
            type.indexType.flags & 33554432 /* TypeFlags.Substitution */)) {
            return getIndexedAccessType(getActualTypeVariable(type.objectType), getActualTypeVariable(type.indexType));
        }
        return type;
    }
    function maybeCloneTypeParameter(p) {
        var constraint = getConstraintOfTypeParameter(p);
        return constraint && (isGenericObjectType(constraint) || isGenericIndexType(constraint)) ? cloneTypeParameter(p) : p;
    }
    function isSimpleTupleType(node) {
        return (0, ts_1.isTupleTypeNode)(node) && (0, ts_1.length)(node.elements) > 0 &&
            !(0, ts_1.some)(node.elements, function (e) { return (0, ts_1.isOptionalTypeNode)(e) || (0, ts_1.isRestTypeNode)(e) || (0, ts_1.isNamedTupleMember)(e) && !!(e.questionToken || e.dotDotDotToken); });
    }
    function isDeferredType(type, checkTuples) {
        return isGenericType(type) || checkTuples && isTupleType(type) && (0, ts_1.some)(getElementTypes(type), isGenericType);
    }
    function getConditionalType(root, mapper, aliasSymbol, aliasTypeArguments) {
        var result;
        var extraTypes;
        var tailCount = 0;
        // We loop here for an immediately nested conditional type in the false position, effectively treating
        // types of the form 'A extends B ? X : C extends D ? Y : E extends F ? Z : ...' as a single construct for
        // purposes of resolution. We also loop here when resolution of a conditional type ends in resolution of
        // another (or, through recursion, possibly the same) conditional type. In the potentially tail-recursive
        // cases we increment the tail recursion counter and stop after 1000 iterations.
        while (true) {
            if (tailCount === 1000) {
                error(currentNode, ts_1.Diagnostics.Type_instantiation_is_excessively_deep_and_possibly_infinite);
                return errorType;
            }
            var checkType = instantiateType(getActualTypeVariable(root.checkType), mapper);
            var extendsType = instantiateType(root.extendsType, mapper);
            if (checkType === errorType || extendsType === errorType) {
                return errorType;
            }
            if (checkType === wildcardType || extendsType === wildcardType) {
                return wildcardType;
            }
            // When the check and extends types are simple tuple types of the same arity, we defer resolution of the
            // conditional type when any tuple elements are generic. This is such that non-distributable conditional
            // types can be written `[X] extends [Y] ? ...` and be deferred similarly to `X extends Y ? ...`.
            var checkTuples = isSimpleTupleType(root.node.checkType) && isSimpleTupleType(root.node.extendsType) &&
                (0, ts_1.length)(root.node.checkType.elements) === (0, ts_1.length)(root.node.extendsType.elements);
            var checkTypeDeferred = isDeferredType(checkType, checkTuples);
            var combinedMapper = void 0;
            if (root.inferTypeParameters) {
                // When we're looking at making an inference for an infer type, when we get its constraint, it'll automagically be
                // instantiated with the context, so it doesn't need the mapper for the inference contex - however the constraint
                // may refer to another _root_, _uncloned_ `infer` type parameter [1], or to something mapped by `mapper` [2].
                // [1] Eg, if we have `Foo<T, U extends T>` and `Foo<number, infer B>` - `B` is constrained to `T`, which, in turn, has been instantiated
                // as `number`
                // Conversely, if we have `Foo<infer A, infer B>`, `B` is still constrained to `T` and `T` is instantiated as `A`
                // [2] Eg, if we have `Foo<T, U extends T>` and `Foo<Q, infer B>` where `Q` is mapped by `mapper` into `number` - `B` is constrained to `T`
                // which is in turn instantiated as `Q`, which is in turn instantiated as `number`.
                // So we need to:
                //    * Clone the type parameters so their constraints can be instantiated in the context of `mapper` (otherwise theyd only get inference context information)
                //    * Set the clones to both map the conditional's enclosing `mapper` and the original params
                //    * instantiate the extends type with the clones
                //    * incorporate all of the component mappers into the combined mapper for the true and false members
                // This means we have three mappers that need applying:
                //    * The original `mapper` used to create this conditional
                //    * The mapper that maps the old root type parameter to the clone (`freshMapper`)
                //    * The mapper that maps the clone to its inference result (`context.mapper`)
                var freshParams = (0, ts_1.sameMap)(root.inferTypeParameters, maybeCloneTypeParameter);
                var freshMapper = freshParams !== root.inferTypeParameters ? createTypeMapper(root.inferTypeParameters, freshParams) : undefined;
                var context = createInferenceContext(freshParams, /*signature*/ undefined, 0 /* InferenceFlags.None */);
                if (freshMapper) {
                    var freshCombinedMapper = combineTypeMappers(mapper, freshMapper);
                    for (var i = 0; i < freshParams.length; i++) {
                        if (freshParams[i] !== root.inferTypeParameters[i]) {
                            freshParams[i].mapper = freshCombinedMapper;
                        }
                    }
                }
                if (!checkTypeDeferred) {
                    // We don't want inferences from constraints as they may cause us to eagerly resolve the
                    // conditional type instead of deferring resolution. Also, we always want strict function
                    // types rules (i.e. proper contravariance) for inferences.
                    inferTypes(context.inferences, checkType, instantiateType(extendsType, freshMapper), 512 /* InferencePriority.NoConstraints */ | 1024 /* InferencePriority.AlwaysStrict */);
                }
                var innerMapper = combineTypeMappers(freshMapper, context.mapper);
                // It's possible for 'infer T' type paramteters to be given uninstantiated constraints when the
                // those type parameters are used in type references (see getInferredTypeParameterConstraint). For
                // that reason we need context.mapper to be first in the combined mapper. See #42636 for examples.
                combinedMapper = mapper ? combineTypeMappers(innerMapper, mapper) : innerMapper;
            }
            // Instantiate the extends type including inferences for 'infer T' type parameters
            var inferredExtendsType = combinedMapper ? instantiateType(root.extendsType, combinedMapper) : extendsType;
            // We attempt to resolve the conditional type only when the check and extends types are non-generic
            if (!checkTypeDeferred && !isDeferredType(inferredExtendsType, checkTuples)) {
                // Return falseType for a definitely false extends check. We check an instantiations of the two
                // types with type parameters mapped to the wildcard type, the most permissive instantiations
                // possible (the wildcard type is assignable to and from all types). If those are not related,
                // then no instantiations will be and we can just return the false branch type.
                if (!(inferredExtendsType.flags & 3 /* TypeFlags.AnyOrUnknown */) && (checkType.flags & 1 /* TypeFlags.Any */ || !isTypeAssignableTo(getPermissiveInstantiation(checkType), getPermissiveInstantiation(inferredExtendsType)))) {
                    // Return union of trueType and falseType for 'any' since it matches anything
                    if (checkType.flags & 1 /* TypeFlags.Any */) {
                        (extraTypes || (extraTypes = [])).push(instantiateType(getTypeFromTypeNode(root.node.trueType), combinedMapper || mapper));
                    }
                    // If falseType is an immediately nested conditional type that isn't distributive or has an
                    // identical checkType, switch to that type and loop.
                    var falseType_1 = getTypeFromTypeNode(root.node.falseType);
                    if (falseType_1.flags & 16777216 /* TypeFlags.Conditional */) {
                        var newRoot = falseType_1.root;
                        if (newRoot.node.parent === root.node && (!newRoot.isDistributive || newRoot.checkType === root.checkType)) {
                            root = newRoot;
                            continue;
                        }
                        if (canTailRecurse(falseType_1, mapper)) {
                            continue;
                        }
                    }
                    result = instantiateType(falseType_1, mapper);
                    break;
                }
                // Return trueType for a definitely true extends check. We check instantiations of the two
                // types with type parameters mapped to their restrictive form, i.e. a form of the type parameter
                // that has no constraint. This ensures that, for example, the type
                //   type Foo<T extends { x: any }> = T extends { x: string } ? string : number
                // doesn't immediately resolve to 'string' instead of being deferred.
                if (inferredExtendsType.flags & 3 /* TypeFlags.AnyOrUnknown */ || isTypeAssignableTo(getRestrictiveInstantiation(checkType), getRestrictiveInstantiation(inferredExtendsType))) {
                    var trueType_1 = getTypeFromTypeNode(root.node.trueType);
                    var trueMapper = combinedMapper || mapper;
                    if (canTailRecurse(trueType_1, trueMapper)) {
                        continue;
                    }
                    result = instantiateType(trueType_1, trueMapper);
                    break;
                }
            }
            // Return a deferred type for a check that is neither definitely true nor definitely false
            result = createType(16777216 /* TypeFlags.Conditional */);
            result.root = root;
            result.checkType = instantiateType(root.checkType, mapper);
            result.extendsType = instantiateType(root.extendsType, mapper);
            result.mapper = mapper;
            result.combinedMapper = combinedMapper;
            result.aliasSymbol = aliasSymbol || root.aliasSymbol;
            result.aliasTypeArguments = aliasSymbol ? aliasTypeArguments : instantiateTypes(root.aliasTypeArguments, mapper); // TODO: GH#18217
            break;
        }
        return extraTypes ? getUnionType((0, ts_1.append)(extraTypes, result)) : result;
        // We tail-recurse for generic conditional types that (a) have not already been evaluated and cached, and
        // (b) are non distributive, have a check type that is unaffected by instantiation, or have a non-union check
        // type. Note that recursion is possible only through aliased conditional types, so we only increment the tail
        // recursion counter for those.
        function canTailRecurse(newType, newMapper) {
            if (newType.flags & 16777216 /* TypeFlags.Conditional */ && newMapper) {
                var newRoot = newType.root;
                if (newRoot.outerTypeParameters) {
                    var typeParamMapper_1 = combineTypeMappers(newType.mapper, newMapper);
                    var typeArguments = (0, ts_1.map)(newRoot.outerTypeParameters, function (t) { return getMappedType(t, typeParamMapper_1); });
                    var newRootMapper = createTypeMapper(newRoot.outerTypeParameters, typeArguments);
                    var newCheckType = newRoot.isDistributive ? getMappedType(newRoot.checkType, newRootMapper) : undefined;
                    if (!newCheckType || newCheckType === newRoot.checkType || !(newCheckType.flags & (1048576 /* TypeFlags.Union */ | 131072 /* TypeFlags.Never */))) {
                        root = newRoot;
                        mapper = newRootMapper;
                        aliasSymbol = undefined;
                        aliasTypeArguments = undefined;
                        if (newRoot.aliasSymbol) {
                            tailCount++;
                        }
                        return true;
                    }
                }
            }
            return false;
        }
    }
    function getTrueTypeFromConditionalType(type) {
        return type.resolvedTrueType || (type.resolvedTrueType = instantiateType(getTypeFromTypeNode(type.root.node.trueType), type.mapper));
    }
    function getFalseTypeFromConditionalType(type) {
        return type.resolvedFalseType || (type.resolvedFalseType = instantiateType(getTypeFromTypeNode(type.root.node.falseType), type.mapper));
    }
    function getInferredTrueTypeFromConditionalType(type) {
        return type.resolvedInferredTrueType || (type.resolvedInferredTrueType = type.combinedMapper ? instantiateType(getTypeFromTypeNode(type.root.node.trueType), type.combinedMapper) : getTrueTypeFromConditionalType(type));
    }
    function getInferTypeParameters(node) {
        var result;
        if (node.locals) {
            node.locals.forEach(function (symbol) {
                if (symbol.flags & 262144 /* SymbolFlags.TypeParameter */) {
                    result = (0, ts_1.append)(result, getDeclaredTypeOfSymbol(symbol));
                }
            });
        }
        return result;
    }
    function isDistributionDependent(root) {
        return root.isDistributive && (isTypeParameterPossiblyReferenced(root.checkType, root.node.trueType) ||
            isTypeParameterPossiblyReferenced(root.checkType, root.node.falseType));
    }
    function getTypeFromConditionalTypeNode(node) {
        var links = getNodeLinks(node);
        if (!links.resolvedType) {
            var checkType = getTypeFromTypeNode(node.checkType);
            var aliasSymbol = getAliasSymbolForTypeNode(node);
            var aliasTypeArguments = getTypeArgumentsForAliasSymbol(aliasSymbol);
            var allOuterTypeParameters = getOuterTypeParameters(node, /*includeThisTypes*/ true);
            var outerTypeParameters = aliasTypeArguments ? allOuterTypeParameters : (0, ts_1.filter)(allOuterTypeParameters, function (tp) { return isTypeParameterPossiblyReferenced(tp, node); });
            var root = {
                node: node,
                checkType: checkType,
                extendsType: getTypeFromTypeNode(node.extendsType),
                isDistributive: !!(checkType.flags & 262144 /* TypeFlags.TypeParameter */),
                inferTypeParameters: getInferTypeParameters(node),
                outerTypeParameters: outerTypeParameters,
                instantiations: undefined,
                aliasSymbol: aliasSymbol,
                aliasTypeArguments: aliasTypeArguments
            };
            links.resolvedType = getConditionalType(root, /*mapper*/ undefined);
            if (outerTypeParameters) {
                root.instantiations = new Map();
                root.instantiations.set(getTypeListId(outerTypeParameters), links.resolvedType);
            }
        }
        return links.resolvedType;
    }
    function getTypeFromInferTypeNode(node) {
        var links = getNodeLinks(node);
        if (!links.resolvedType) {
            links.resolvedType = getDeclaredTypeOfTypeParameter(getSymbolOfDeclaration(node.typeParameter));
        }
        return links.resolvedType;
    }
    function getIdentifierChain(node) {
        if ((0, ts_1.isIdentifier)(node)) {
            return [node];
        }
        else {
            return (0, ts_1.append)(getIdentifierChain(node.left), node.right);
        }
    }
    function getTypeFromImportTypeNode(node) {
        var _a;
        var links = getNodeLinks(node);
        if (!links.resolvedType) {
            if (!(0, ts_1.isLiteralImportTypeNode)(node)) {
                error(node.argument, ts_1.Diagnostics.String_literal_expected);
                links.resolvedSymbol = unknownSymbol;
                return links.resolvedType = errorType;
            }
            var targetMeaning = node.isTypeOf ? 111551 /* SymbolFlags.Value */ : node.flags & 8388608 /* NodeFlags.JSDoc */ ? 111551 /* SymbolFlags.Value */ | 788968 /* SymbolFlags.Type */ : 788968 /* SymbolFlags.Type */;
            // TODO: Future work: support unions/generics/whatever via a deferred import-type
            var innerModuleSymbol = resolveExternalModuleName(node, node.argument.literal);
            if (!innerModuleSymbol) {
                links.resolvedSymbol = unknownSymbol;
                return links.resolvedType = errorType;
            }
            var isExportEquals = !!((_a = innerModuleSymbol.exports) === null || _a === void 0 ? void 0 : _a.get("export=" /* InternalSymbolName.ExportEquals */));
            var moduleSymbol = resolveExternalModuleSymbol(innerModuleSymbol, /*dontResolveAlias*/ false);
            if (!(0, ts_1.nodeIsMissing)(node.qualifier)) {
                var nameStack = getIdentifierChain(node.qualifier);
                var currentNamespace = moduleSymbol;
                var current = void 0;
                while (current = nameStack.shift()) {
                    var meaning = nameStack.length ? 1920 /* SymbolFlags.Namespace */ : targetMeaning;
                    // typeof a.b.c is normally resolved using `checkExpression` which in turn defers to `checkQualifiedName`
                    // That, in turn, ultimately uses `getPropertyOfType` on the type of the symbol, which differs slightly from
                    // the `exports` lookup process that only looks up namespace members which is used for most type references
                    var mergedResolvedSymbol = getMergedSymbol(resolveSymbol(currentNamespace));
                    var symbolFromVariable = node.isTypeOf || (0, ts_1.isInJSFile)(node) && isExportEquals
                        ? getPropertyOfType(getTypeOfSymbol(mergedResolvedSymbol), current.escapedText, /*skipObjectFunctionPropertyAugment*/ false, /*includeTypeOnlyMembers*/ true)
                        : undefined;
                    var symbolFromModule = node.isTypeOf ? undefined : getSymbol(getExportsOfSymbol(mergedResolvedSymbol), current.escapedText, meaning);
                    var next = symbolFromModule !== null && symbolFromModule !== void 0 ? symbolFromModule : symbolFromVariable;
                    if (!next) {
                        error(current, ts_1.Diagnostics.Namespace_0_has_no_exported_member_1, getFullyQualifiedName(currentNamespace), (0, ts_1.declarationNameToString)(current));
                        return links.resolvedType = errorType;
                    }
                    getNodeLinks(current).resolvedSymbol = next;
                    getNodeLinks(current.parent).resolvedSymbol = next;
                    currentNamespace = next;
                }
                links.resolvedType = resolveImportSymbolType(node, links, currentNamespace, targetMeaning);
            }
            else {
                if (moduleSymbol.flags & targetMeaning) {
                    links.resolvedType = resolveImportSymbolType(node, links, moduleSymbol, targetMeaning);
                }
                else {
                    var errorMessage = targetMeaning === 111551 /* SymbolFlags.Value */
                        ? ts_1.Diagnostics.Module_0_does_not_refer_to_a_value_but_is_used_as_a_value_here
                        : ts_1.Diagnostics.Module_0_does_not_refer_to_a_type_but_is_used_as_a_type_here_Did_you_mean_typeof_import_0;
                    error(node, errorMessage, node.argument.literal.text);
                    links.resolvedSymbol = unknownSymbol;
                    links.resolvedType = errorType;
                }
            }
        }
        return links.resolvedType;
    }
    function resolveImportSymbolType(node, links, symbol, meaning) {
        var resolvedSymbol = resolveSymbol(symbol);
        links.resolvedSymbol = resolvedSymbol;
        if (meaning === 111551 /* SymbolFlags.Value */) {
            return getInstantiationExpressionType(getTypeOfSymbol(symbol), node); // intentionally doesn't use resolved symbol so type is cached as expected on the alias
        }
        else {
            return getTypeReferenceType(node, resolvedSymbol); // getTypeReferenceType doesn't handle aliases - it must get the resolved symbol
        }
    }
    function getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node) {
        var links = getNodeLinks(node);
        if (!links.resolvedType) {
            // Deferred resolution of members is handled by resolveObjectTypeMembers
            var aliasSymbol = getAliasSymbolForTypeNode(node);
            if (getMembersOfSymbol(node.symbol).size === 0 && !aliasSymbol) {
                links.resolvedType = emptyTypeLiteralType;
            }
            else {
                var type = createObjectType(16 /* ObjectFlags.Anonymous */, node.symbol);
                type.aliasSymbol = aliasSymbol;
                type.aliasTypeArguments = getTypeArgumentsForAliasSymbol(aliasSymbol);
                if ((0, ts_1.isJSDocTypeLiteral)(node) && node.isArrayType) {
                    type = createArrayType(type);
                }
                links.resolvedType = type;
            }
        }
        return links.resolvedType;
    }
    function getAliasSymbolForTypeNode(node) {
        var host = node.parent;
        while ((0, ts_1.isParenthesizedTypeNode)(host) || (0, ts_1.isJSDocTypeExpression)(host) || (0, ts_1.isTypeOperatorNode)(host) && host.operator === 148 /* SyntaxKind.ReadonlyKeyword */) {
            host = host.parent;
        }
        return (0, ts_1.isTypeAlias)(host) ? getSymbolOfDeclaration(host) : undefined;
    }
    function getTypeArgumentsForAliasSymbol(symbol) {
        return symbol ? getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol) : undefined;
    }
    function isNonGenericObjectType(type) {
        return !!(type.flags & 524288 /* TypeFlags.Object */) && !isGenericMappedType(type);
    }
    function isEmptyObjectTypeOrSpreadsIntoEmptyObject(type) {
        return isEmptyObjectType(type) || !!(type.flags & (65536 /* TypeFlags.Null */ | 32768 /* TypeFlags.Undefined */ | 528 /* TypeFlags.BooleanLike */ | 296 /* TypeFlags.NumberLike */ | 2112 /* TypeFlags.BigIntLike */ | 402653316 /* TypeFlags.StringLike */ | 1056 /* TypeFlags.EnumLike */ | 67108864 /* TypeFlags.NonPrimitive */ | 4194304 /* TypeFlags.Index */));
    }
    function tryMergeUnionOfObjectTypeAndEmptyObject(type, readonly) {
        if (!(type.flags & 1048576 /* TypeFlags.Union */)) {
            return type;
        }
        if ((0, ts_1.every)(type.types, isEmptyObjectTypeOrSpreadsIntoEmptyObject)) {
            return (0, ts_1.find)(type.types, isEmptyObjectType) || emptyObjectType;
        }
        var firstType = (0, ts_1.find)(type.types, function (t) { return !isEmptyObjectTypeOrSpreadsIntoEmptyObject(t); });
        if (!firstType) {
            return type;
        }
        var secondType = (0, ts_1.find)(type.types, function (t) { return t !== firstType && !isEmptyObjectTypeOrSpreadsIntoEmptyObject(t); });
        if (secondType) {
            return type;
        }
        return getAnonymousPartialType(firstType);
        function getAnonymousPartialType(type) {
            // gets the type as if it had been spread, but where everything in the spread is made optional
            var members = (0, ts_1.createSymbolTable)();
            for (var _i = 0, _a = getPropertiesOfType(type); _i < _a.length; _i++) {
                var prop = _a[_i];
                if ((0, ts_1.getDeclarationModifierFlagsFromSymbol)(prop) & (8 /* ModifierFlags.Private */ | 16 /* ModifierFlags.Protected */)) {
                    // do nothing, skip privates
                }
                else if (isSpreadableProperty(prop)) {
                    var isSetonlyAccessor = prop.flags & 65536 /* SymbolFlags.SetAccessor */ && !(prop.flags & 32768 /* SymbolFlags.GetAccessor */);
                    var flags = 4 /* SymbolFlags.Property */ | 16777216 /* SymbolFlags.Optional */;
                    var result = createSymbol(flags, prop.escapedName, getIsLateCheckFlag(prop) | (readonly ? 8 /* CheckFlags.Readonly */ : 0));
                    result.links.type = isSetonlyAccessor ? undefinedType : addOptionality(getTypeOfSymbol(prop), /*isProperty*/ true);
                    result.declarations = prop.declarations;
                    result.links.nameType = getSymbolLinks(prop).nameType;
                    result.links.syntheticOrigin = prop;
                    members.set(prop.escapedName, result);
                }
            }
            var spread = createAnonymousType(type.symbol, members, ts_1.emptyArray, ts_1.emptyArray, getIndexInfosOfType(type));
            spread.objectFlags |= 128 /* ObjectFlags.ObjectLiteral */ | 131072 /* ObjectFlags.ContainsObjectOrArrayLiteral */;
            return spread;
        }
    }
    /**
     * Since the source of spread types are object literals, which are not binary,
     * this function should be called in a left folding style, with left = previous result of getSpreadType
     * and right = the new element to be spread.
     */
    function getSpreadType(left, right, symbol, objectFlags, readonly) {
        if (left.flags & 1 /* TypeFlags.Any */ || right.flags & 1 /* TypeFlags.Any */) {
            return anyType;
        }
        if (left.flags & 2 /* TypeFlags.Unknown */ || right.flags & 2 /* TypeFlags.Unknown */) {
            return unknownType;
        }
        if (left.flags & 131072 /* TypeFlags.Never */) {
            return right;
        }
        if (right.flags & 131072 /* TypeFlags.Never */) {
            return left;
        }
        left = tryMergeUnionOfObjectTypeAndEmptyObject(left, readonly);
        if (left.flags & 1048576 /* TypeFlags.Union */) {
            return checkCrossProductUnion([left, right])
                ? mapType(left, function (t) { return getSpreadType(t, right, symbol, objectFlags, readonly); })
                : errorType;
        }
        right = tryMergeUnionOfObjectTypeAndEmptyObject(right, readonly);
        if (right.flags & 1048576 /* TypeFlags.Union */) {
            return checkCrossProductUnion([left, right])
                ? mapType(right, function (t) { return getSpreadType(left, t, symbol, objectFlags, readonly); })
                : errorType;
        }
        if (right.flags & (528 /* TypeFlags.BooleanLike */ | 296 /* TypeFlags.NumberLike */ | 2112 /* TypeFlags.BigIntLike */ | 402653316 /* TypeFlags.StringLike */ | 1056 /* TypeFlags.EnumLike */ | 67108864 /* TypeFlags.NonPrimitive */ | 4194304 /* TypeFlags.Index */)) {
            return left;
        }
        if (isGenericObjectType(left) || isGenericObjectType(right)) {
            if (isEmptyObjectType(left)) {
                return right;
            }
            // When the left type is an intersection, we may need to merge the last constituent of the
            // intersection with the right type. For example when the left type is 'T & { a: string }'
            // and the right type is '{ b: string }' we produce 'T & { a: string, b: string }'.
            if (left.flags & 2097152 /* TypeFlags.Intersection */) {
                var types = left.types;
                var lastLeft = types[types.length - 1];
                if (isNonGenericObjectType(lastLeft) && isNonGenericObjectType(right)) {
                    return getIntersectionType((0, ts_1.concatenate)(types.slice(0, types.length - 1), [getSpreadType(lastLeft, right, symbol, objectFlags, readonly)]));
                }
            }
            return getIntersectionType([left, right]);
        }
        var members = (0, ts_1.createSymbolTable)();
        var skippedPrivateMembers = new Set();
        var indexInfos = left === emptyObjectType ? getIndexInfosOfType(right) : getUnionIndexInfos([left, right]);
        for (var _i = 0, _a = getPropertiesOfType(right); _i < _a.length; _i++) {
            var rightProp = _a[_i];
            if ((0, ts_1.getDeclarationModifierFlagsFromSymbol)(rightProp) & (8 /* ModifierFlags.Private */ | 16 /* ModifierFlags.Protected */)) {
                skippedPrivateMembers.add(rightProp.escapedName);
            }
            else if (isSpreadableProperty(rightProp)) {
                members.set(rightProp.escapedName, getSpreadSymbol(rightProp, readonly));
            }
        }
        for (var _b = 0, _c = getPropertiesOfType(left); _b < _c.length; _b++) {
            var leftProp = _c[_b];
            if (skippedPrivateMembers.has(leftProp.escapedName) || !isSpreadableProperty(leftProp)) {
                continue;
            }
            if (members.has(leftProp.escapedName)) {
                var rightProp = members.get(leftProp.escapedName);
                var rightType = getTypeOfSymbol(rightProp);
                if (rightProp.flags & 16777216 /* SymbolFlags.Optional */) {
                    var declarations = (0, ts_1.concatenate)(leftProp.declarations, rightProp.declarations);
                    var flags = 4 /* SymbolFlags.Property */ | (leftProp.flags & 16777216 /* SymbolFlags.Optional */);
                    var result = createSymbol(flags, leftProp.escapedName);
                    // Optimization: avoid calculating the union type if spreading into the exact same type.
                    // This is common, e.g. spreading one options bag into another where the bags have the
                    // same type, or have properties which overlap. If the unions are large, it may turn out
                    // to be expensive to perform subtype reduction.
                    var leftType = getTypeOfSymbol(leftProp);
                    var leftTypeWithoutUndefined = removeMissingOrUndefinedType(leftType);
                    var rightTypeWithoutUndefined = removeMissingOrUndefinedType(rightType);
                    result.links.type = leftTypeWithoutUndefined === rightTypeWithoutUndefined ? leftType : getUnionType([leftType, rightTypeWithoutUndefined], 2 /* UnionReduction.Subtype */);
                    result.links.leftSpread = leftProp;
                    result.links.rightSpread = rightProp;
                    result.declarations = declarations;
                    result.links.nameType = getSymbolLinks(leftProp).nameType;
                    members.set(leftProp.escapedName, result);
                }
            }
            else {
                members.set(leftProp.escapedName, getSpreadSymbol(leftProp, readonly));
            }
        }
        var spread = createAnonymousType(symbol, members, ts_1.emptyArray, ts_1.emptyArray, (0, ts_1.sameMap)(indexInfos, function (info) { return getIndexInfoWithReadonly(info, readonly); }));
        spread.objectFlags |= 128 /* ObjectFlags.ObjectLiteral */ | 131072 /* ObjectFlags.ContainsObjectOrArrayLiteral */ | 2097152 /* ObjectFlags.ContainsSpread */ | objectFlags;
        return spread;
    }
    /** We approximate own properties as non-methods plus methods that are inside the object literal */
    function isSpreadableProperty(prop) {
        var _a;
        return !(0, ts_1.some)(prop.declarations, ts_1.isPrivateIdentifierClassElementDeclaration) &&
            (!(prop.flags & (8192 /* SymbolFlags.Method */ | 32768 /* SymbolFlags.GetAccessor */ | 65536 /* SymbolFlags.SetAccessor */)) ||
                !((_a = prop.declarations) === null || _a === void 0 ? void 0 : _a.some(function (decl) { return (0, ts_1.isClassLike)(decl.parent); })));
    }
    function getSpreadSymbol(prop, readonly) {
        var isSetonlyAccessor = prop.flags & 65536 /* SymbolFlags.SetAccessor */ && !(prop.flags & 32768 /* SymbolFlags.GetAccessor */);
        if (!isSetonlyAccessor && readonly === isReadonlySymbol(prop)) {
            return prop;
        }
        var flags = 4 /* SymbolFlags.Property */ | (prop.flags & 16777216 /* SymbolFlags.Optional */);
        var result = createSymbol(flags, prop.escapedName, getIsLateCheckFlag(prop) | (readonly ? 8 /* CheckFlags.Readonly */ : 0));
        result.links.type = isSetonlyAccessor ? undefinedType : getTypeOfSymbol(prop);
        result.declarations = prop.declarations;
        result.links.nameType = getSymbolLinks(prop).nameType;
        result.links.syntheticOrigin = prop;
        return result;
    }
    function getIndexInfoWithReadonly(info, readonly) {
        return info.isReadonly !== readonly ? createIndexInfo(info.keyType, info.type, readonly, info.declaration) : info;
    }
    function createLiteralType(flags, value, symbol, regularType) {
        var type = createTypeWithSymbol(flags, symbol);
        type.value = value;
        type.regularType = regularType || type;
        return type;
    }
    function getFreshTypeOfLiteralType(type) {
        if (type.flags & 2976 /* TypeFlags.Freshable */) {
            if (!type.freshType) {
                var freshType = createLiteralType(type.flags, type.value, type.symbol, type);
                freshType.freshType = freshType;
                type.freshType = freshType;
            }
            return type.freshType;
        }
        return type;
    }
    function getRegularTypeOfLiteralType(type) {
        return type.flags & 2976 /* TypeFlags.Freshable */ ? type.regularType :
            type.flags & 1048576 /* TypeFlags.Union */ ? (type.regularType || (type.regularType = mapType(type, getRegularTypeOfLiteralType))) :
                type;
    }
    function isFreshLiteralType(type) {
        return !!(type.flags & 2976 /* TypeFlags.Freshable */) && type.freshType === type;
    }
    function getStringLiteralType(value) {
        var type;
        return stringLiteralTypes.get(value) ||
            (stringLiteralTypes.set(value, type = createLiteralType(128 /* TypeFlags.StringLiteral */, value)), type);
    }
    function getNumberLiteralType(value) {
        var type;
        return numberLiteralTypes.get(value) ||
            (numberLiteralTypes.set(value, type = createLiteralType(256 /* TypeFlags.NumberLiteral */, value)), type);
    }
    function getBigIntLiteralType(value) {
        var type;
        var key = (0, ts_1.pseudoBigIntToString)(value);
        return bigIntLiteralTypes.get(key) ||
            (bigIntLiteralTypes.set(key, type = createLiteralType(2048 /* TypeFlags.BigIntLiteral */, value)), type);
    }
    function getEnumLiteralType(value, enumId, symbol) {
        var type;
        var key = "".concat(enumId).concat(typeof value === "string" ? "@" : "#").concat(value);
        var flags = 1024 /* TypeFlags.EnumLiteral */ | (typeof value === "string" ? 128 /* TypeFlags.StringLiteral */ : 256 /* TypeFlags.NumberLiteral */);
        return enumLiteralTypes.get(key) ||
            (enumLiteralTypes.set(key, type = createLiteralType(flags, value, symbol)), type);
    }
    function getTypeFromLiteralTypeNode(node) {
        if (node.literal.kind === 106 /* SyntaxKind.NullKeyword */) {
            return nullType;
        }
        var links = getNodeLinks(node);
        if (!links.resolvedType) {
            links.resolvedType = getRegularTypeOfLiteralType(checkExpression(node.literal));
        }
        return links.resolvedType;
    }
    function createUniqueESSymbolType(symbol) {
        var type = createTypeWithSymbol(8192 /* TypeFlags.UniqueESSymbol */, symbol);
        type.escapedName = "__@".concat(type.symbol.escapedName, "@").concat(getSymbolId(type.symbol));
        return type;
    }
    function getESSymbolLikeTypeForNode(node) {
        if ((0, ts_1.isValidESSymbolDeclaration)(node)) {
            var symbol = (0, ts_1.isCommonJsExportPropertyAssignment)(node) ? getSymbolOfNode(node.left) : getSymbolOfNode(node);
            if (symbol) {
                var links = getSymbolLinks(symbol);
                return links.uniqueESSymbolType || (links.uniqueESSymbolType = createUniqueESSymbolType(symbol));
            }
        }
        return esSymbolType;
    }
    function getThisType(node) {
        var container = (0, ts_1.getThisContainer)(node, /*includeArrowFunctions*/ false, /*includeClassComputedPropertyName*/ false);
        var parent = container && container.parent;
        if (parent && ((0, ts_1.isClassLike)(parent) || parent.kind === 263 /* SyntaxKind.InterfaceDeclaration */)) {
            if (!(0, ts_1.isStatic)(container) &&
                (!(0, ts_1.isConstructorDeclaration)(container) || (0, ts_1.isNodeDescendantOf)(node, container.body))) {
                return getDeclaredTypeOfClassOrInterface(getSymbolOfDeclaration(parent)).thisType;
            }
        }
        // inside x.prototype = { ... }
        if (parent && (0, ts_1.isObjectLiteralExpression)(parent) && (0, ts_1.isBinaryExpression)(parent.parent) && (0, ts_1.getAssignmentDeclarationKind)(parent.parent) === 6 /* AssignmentDeclarationKind.Prototype */) {
            return getDeclaredTypeOfClassOrInterface(getSymbolOfNode(parent.parent.left).parent).thisType;
        }
        // /** @return {this} */
        // x.prototype.m = function() { ... }
        var host = node.flags & 8388608 /* NodeFlags.JSDoc */ ? (0, ts_1.getHostSignatureFromJSDoc)(node) : undefined;
        if (host && (0, ts_1.isFunctionExpression)(host) && (0, ts_1.isBinaryExpression)(host.parent) && (0, ts_1.getAssignmentDeclarationKind)(host.parent) === 3 /* AssignmentDeclarationKind.PrototypeProperty */) {
            return getDeclaredTypeOfClassOrInterface(getSymbolOfNode(host.parent.left).parent).thisType;
        }
        // inside constructor function C() { ... }
        if (isJSConstructor(container) && (0, ts_1.isNodeDescendantOf)(node, container.body)) {
            return getDeclaredTypeOfClassOrInterface(getSymbolOfDeclaration(container)).thisType;
        }
        error(node, ts_1.Diagnostics.A_this_type_is_available_only_in_a_non_static_member_of_a_class_or_interface);
        return errorType;
    }
    function getTypeFromThisTypeNode(node) {
        var links = getNodeLinks(node);
        if (!links.resolvedType) {
            links.resolvedType = getThisType(node);
        }
        return links.resolvedType;
    }
    function getTypeFromRestTypeNode(node) {
        return getTypeFromTypeNode(getArrayElementTypeNode(node.type) || node.type);
    }
    function getArrayElementTypeNode(node) {
        switch (node.kind) {
            case 195 /* SyntaxKind.ParenthesizedType */:
                return getArrayElementTypeNode(node.type);
            case 188 /* SyntaxKind.TupleType */:
                if (node.elements.length === 1) {
                    node = node.elements[0];
                    if (node.kind === 190 /* SyntaxKind.RestType */ || node.kind === 201 /* SyntaxKind.NamedTupleMember */ && node.dotDotDotToken) {
                        return getArrayElementTypeNode(node.type);
                    }
                }
                break;
            case 187 /* SyntaxKind.ArrayType */:
                return node.elementType;
        }
        return undefined;
    }
    function getTypeFromNamedTupleTypeNode(node) {
        var links = getNodeLinks(node);
        return links.resolvedType || (links.resolvedType =
            node.dotDotDotToken ? getTypeFromRestTypeNode(node) :
                addOptionality(getTypeFromTypeNode(node.type), /*isProperty*/ true, !!node.questionToken));
    }
    function getTypeFromTypeNode(node) {
        return getConditionalFlowTypeOfType(getTypeFromTypeNodeWorker(node), node);
    }
    function getTypeFromTypeNodeWorker(node) {
        switch (node.kind) {
            case 133 /* SyntaxKind.AnyKeyword */:
            case 318 /* SyntaxKind.JSDocAllType */:
            case 319 /* SyntaxKind.JSDocUnknownType */:
                return anyType;
            case 159 /* SyntaxKind.UnknownKeyword */:
                return unknownType;
            case 154 /* SyntaxKind.StringKeyword */:
                return stringType;
            case 150 /* SyntaxKind.NumberKeyword */:
                return numberType;
            case 162 /* SyntaxKind.BigIntKeyword */:
                return bigintType;
            case 136 /* SyntaxKind.BooleanKeyword */:
                return booleanType;
            case 155 /* SyntaxKind.SymbolKeyword */:
                return esSymbolType;
            case 116 /* SyntaxKind.VoidKeyword */:
                return voidType;
            case 157 /* SyntaxKind.UndefinedKeyword */:
                return undefinedType;
            case 106 /* SyntaxKind.NullKeyword */:
                // TODO(rbuckton): `NullKeyword` is no longer a `TypeNode`, but we defensively allow it here because of incorrect casts in the Language Service.
                return nullType;
            case 146 /* SyntaxKind.NeverKeyword */:
                return neverType;
            case 151 /* SyntaxKind.ObjectKeyword */:
                return node.flags & 262144 /* NodeFlags.JavaScriptFile */ && !noImplicitAny ? anyType : nonPrimitiveType;
            case 141 /* SyntaxKind.IntrinsicKeyword */:
                return intrinsicMarkerType;
            case 196 /* SyntaxKind.ThisType */:
            case 110 /* SyntaxKind.ThisKeyword */:
                // TODO(rbuckton): `ThisKeyword` is no longer a `TypeNode`, but we defensively allow it here because of incorrect casts in the Language Service and because of `isPartOfTypeNode`.
                return getTypeFromThisTypeNode(node);
            case 200 /* SyntaxKind.LiteralType */:
                return getTypeFromLiteralTypeNode(node);
            case 182 /* SyntaxKind.TypeReference */:
                return getTypeFromTypeReference(node);
            case 181 /* SyntaxKind.TypePredicate */:
                return node.assertsModifier ? voidType : booleanType;
            case 232 /* SyntaxKind.ExpressionWithTypeArguments */:
                return getTypeFromTypeReference(node);
            case 185 /* SyntaxKind.TypeQuery */:
                return getTypeFromTypeQueryNode(node);
            case 187 /* SyntaxKind.ArrayType */:
            case 188 /* SyntaxKind.TupleType */:
                return getTypeFromArrayOrTupleTypeNode(node);
            case 189 /* SyntaxKind.OptionalType */:
                return getTypeFromOptionalTypeNode(node);
            case 191 /* SyntaxKind.UnionType */:
                return getTypeFromUnionTypeNode(node);
            case 192 /* SyntaxKind.IntersectionType */:
                return getTypeFromIntersectionTypeNode(node);
            case 320 /* SyntaxKind.JSDocNullableType */:
                return getTypeFromJSDocNullableTypeNode(node);
            case 322 /* SyntaxKind.JSDocOptionalType */:
                return addOptionality(getTypeFromTypeNode(node.type));
            case 201 /* SyntaxKind.NamedTupleMember */:
                return getTypeFromNamedTupleTypeNode(node);
            case 195 /* SyntaxKind.ParenthesizedType */:
            case 321 /* SyntaxKind.JSDocNonNullableType */:
            case 315 /* SyntaxKind.JSDocTypeExpression */:
                return getTypeFromTypeNode(node.type);
            case 190 /* SyntaxKind.RestType */:
                return getTypeFromRestTypeNode(node);
            case 324 /* SyntaxKind.JSDocVariadicType */:
                return getTypeFromJSDocVariadicType(node);
            case 183 /* SyntaxKind.FunctionType */:
            case 184 /* SyntaxKind.ConstructorType */:
            case 186 /* SyntaxKind.TypeLiteral */:
            case 328 /* SyntaxKind.JSDocTypeLiteral */:
            case 323 /* SyntaxKind.JSDocFunctionType */:
            case 329 /* SyntaxKind.JSDocSignature */:
                return getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node);
            case 197 /* SyntaxKind.TypeOperator */:
                return getTypeFromTypeOperatorNode(node);
            case 198 /* SyntaxKind.IndexedAccessType */:
                return getTypeFromIndexedAccessTypeNode(node);
            case 199 /* SyntaxKind.MappedType */:
                return getTypeFromMappedTypeNode(node);
            case 193 /* SyntaxKind.ConditionalType */:
                return getTypeFromConditionalTypeNode(node);
            case 194 /* SyntaxKind.InferType */:
                return getTypeFromInferTypeNode(node);
            case 202 /* SyntaxKind.TemplateLiteralType */:
                return getTypeFromTemplateTypeNode(node);
            case 204 /* SyntaxKind.ImportType */:
                return getTypeFromImportTypeNode(node);
            // This function assumes that an identifier, qualified name, or property access expression is a type expression
            // Callers should first ensure this by calling `isPartOfTypeNode`
            // TODO(rbuckton): These aren't valid TypeNodes, but we treat them as such because of `isPartOfTypeNode`, which returns `true` for things that aren't `TypeNode`s.
            case 80 /* SyntaxKind.Identifier */:
            case 165 /* SyntaxKind.QualifiedName */:
            case 210 /* SyntaxKind.PropertyAccessExpression */:
                var symbol = getSymbolAtLocation(node);
                return symbol ? getDeclaredTypeOfSymbol(symbol) : errorType;
            default:
                return errorType;
        }
    }
    function instantiateList(items, mapper, instantiator) {
        if (items && items.length) {
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                var mapped = instantiator(item, mapper);
                if (item !== mapped) {
                    var result = i === 0 ? [] : items.slice(0, i);
                    result.push(mapped);
                    for (i++; i < items.length; i++) {
                        result.push(instantiator(items[i], mapper));
                    }
                    return result;
                }
            }
        }
        return items;
    }
    function instantiateTypes(types, mapper) {
        return instantiateList(types, mapper, instantiateType);
    }
    function instantiateSignatures(signatures, mapper) {
        return instantiateList(signatures, mapper, instantiateSignature);
    }
    function instantiateIndexInfos(indexInfos, mapper) {
        return instantiateList(indexInfos, mapper, instantiateIndexInfo);
    }
    function createTypeMapper(sources, targets) {
        return sources.length === 1 ? makeUnaryTypeMapper(sources[0], targets ? targets[0] : anyType) : makeArrayTypeMapper(sources, targets);
    }
    function getMappedType(type, mapper) {
        switch (mapper.kind) {
            case 0 /* TypeMapKind.Simple */:
                return type === mapper.source ? mapper.target : type;
            case 1 /* TypeMapKind.Array */: {
                var sources = mapper.sources;
                var targets = mapper.targets;
                for (var i = 0; i < sources.length; i++) {
                    if (type === sources[i]) {
                        return targets ? targets[i] : anyType;
                    }
                }
                return type;
            }
            case 2 /* TypeMapKind.Deferred */: {
                var sources = mapper.sources;
                var targets = mapper.targets;
                for (var i = 0; i < sources.length; i++) {
                    if (type === sources[i]) {
                        return targets[i]();
                    }
                }
                return type;
            }
            case 3 /* TypeMapKind.Function */:
                return mapper.func(type);
            case 4 /* TypeMapKind.Composite */:
            case 5 /* TypeMapKind.Merged */:
                var t1 = getMappedType(type, mapper.mapper1);
                return t1 !== type && mapper.kind === 4 /* TypeMapKind.Composite */ ? instantiateType(t1, mapper.mapper2) : getMappedType(t1, mapper.mapper2);
        }
    }
    function makeUnaryTypeMapper(source, target) {
        return ts_1.Debug.attachDebugPrototypeIfDebug({ kind: 0 /* TypeMapKind.Simple */, source: source, target: target });
    }
    function makeArrayTypeMapper(sources, targets) {
        return ts_1.Debug.attachDebugPrototypeIfDebug({ kind: 1 /* TypeMapKind.Array */, sources: sources, targets: targets });
    }
    function makeFunctionTypeMapper(func, debugInfo) {
        return ts_1.Debug.attachDebugPrototypeIfDebug({ kind: 3 /* TypeMapKind.Function */, func: func, debugInfo: ts_1.Debug.isDebugging ? debugInfo : undefined });
    }
    function makeDeferredTypeMapper(sources, targets) {
        return ts_1.Debug.attachDebugPrototypeIfDebug({ kind: 2 /* TypeMapKind.Deferred */, sources: sources, targets: targets });
    }
    function makeCompositeTypeMapper(kind, mapper1, mapper2) {
        return ts_1.Debug.attachDebugPrototypeIfDebug({ kind: kind, mapper1: mapper1, mapper2: mapper2 });
    }
    function createTypeEraser(sources) {
        return createTypeMapper(sources, /*targets*/ undefined);
    }
    /**
     * Maps forward-references to later types parameters to the empty object type.
     * This is used during inference when instantiating type parameter defaults.
     */
    function createBackreferenceMapper(context, index) {
        var forwardInferences = context.inferences.slice(index);
        return createTypeMapper((0, ts_1.map)(forwardInferences, function (i) { return i.typeParameter; }), (0, ts_1.map)(forwardInferences, function () { return unknownType; }));
    }
    function combineTypeMappers(mapper1, mapper2) {
        return mapper1 ? makeCompositeTypeMapper(4 /* TypeMapKind.Composite */, mapper1, mapper2) : mapper2;
    }
    function mergeTypeMappers(mapper1, mapper2) {
        return mapper1 ? makeCompositeTypeMapper(5 /* TypeMapKind.Merged */, mapper1, mapper2) : mapper2;
    }
    function prependTypeMapping(source, target, mapper) {
        return !mapper ? makeUnaryTypeMapper(source, target) : makeCompositeTypeMapper(5 /* TypeMapKind.Merged */, makeUnaryTypeMapper(source, target), mapper);
    }
    function appendTypeMapping(mapper, source, target) {
        return !mapper ? makeUnaryTypeMapper(source, target) : makeCompositeTypeMapper(5 /* TypeMapKind.Merged */, mapper, makeUnaryTypeMapper(source, target));
    }
    function getRestrictiveTypeParameter(tp) {
        return !tp.constraint && !getConstraintDeclaration(tp) || tp.constraint === noConstraintType ? tp : tp.restrictiveInstantiation || (tp.restrictiveInstantiation = createTypeParameter(tp.symbol),
            tp.restrictiveInstantiation.constraint = noConstraintType,
            tp.restrictiveInstantiation);
    }
    function cloneTypeParameter(typeParameter) {
        var result = createTypeParameter(typeParameter.symbol);
        result.target = typeParameter;
        return result;
    }
    function instantiateTypePredicate(predicate, mapper) {
        return createTypePredicate(predicate.kind, predicate.parameterName, predicate.parameterIndex, instantiateType(predicate.type, mapper));
    }
    function instantiateSignature(signature, mapper, eraseTypeParameters) {
        var freshTypeParameters;
        if (signature.typeParameters && !eraseTypeParameters) {
            // First create a fresh set of type parameters, then include a mapping from the old to the
            // new type parameters in the mapper function. Finally store this mapper in the new type
            // parameters such that we can use it when instantiating constraints.
            freshTypeParameters = (0, ts_1.map)(signature.typeParameters, cloneTypeParameter);
            mapper = combineTypeMappers(createTypeMapper(signature.typeParameters, freshTypeParameters), mapper);
            for (var _i = 0, freshTypeParameters_1 = freshTypeParameters; _i < freshTypeParameters_1.length; _i++) {
                var tp = freshTypeParameters_1[_i];
                tp.mapper = mapper;
            }
        }
        // Don't compute resolvedReturnType and resolvedTypePredicate now,
        // because using `mapper` now could trigger inferences to become fixed. (See `createInferenceContext`.)
        // See GH#17600.
        var result = createSignature(signature.declaration, freshTypeParameters, signature.thisParameter && instantiateSymbol(signature.thisParameter, mapper), instantiateList(signature.parameters, mapper, instantiateSymbol), 
        /*resolvedReturnType*/ undefined, 
        /*resolvedTypePredicate*/ undefined, signature.minArgumentCount, signature.flags & 39 /* SignatureFlags.PropagatingFlags */);
        result.target = signature;
        result.mapper = mapper;
        return result;
    }
    function instantiateSymbol(symbol, mapper) {
        var links = getSymbolLinks(symbol);
        if (links.type && !couldContainTypeVariables(links.type)) {
            // If the type of the symbol is already resolved, and if that type could not possibly
            // be affected by instantiation, simply return the symbol itself.
            return symbol;
        }
        if ((0, ts_1.getCheckFlags)(symbol) & 1 /* CheckFlags.Instantiated */) {
            // If symbol being instantiated is itself a instantiation, fetch the original target and combine the
            // type mappers. This ensures that original type identities are properly preserved and that aliases
            // always reference a non-aliases.
            symbol = links.target;
            mapper = combineTypeMappers(links.mapper, mapper);
        }
        // Keep the flags from the symbol we're instantiating.  Mark that is instantiated, and
        // also transient so that we can just store data on it directly.
        var result = createSymbol(symbol.flags, symbol.escapedName, 1 /* CheckFlags.Instantiated */ | (0, ts_1.getCheckFlags)(symbol) & (8 /* CheckFlags.Readonly */ | 4096 /* CheckFlags.Late */ | 16384 /* CheckFlags.OptionalParameter */ | 32768 /* CheckFlags.RestParameter */));
        result.declarations = symbol.declarations;
        result.parent = symbol.parent;
        result.links.target = symbol;
        result.links.mapper = mapper;
        if (symbol.valueDeclaration) {
            result.valueDeclaration = symbol.valueDeclaration;
        }
        if (links.nameType) {
            result.links.nameType = links.nameType;
        }
        return result;
    }
    function getObjectTypeInstantiation(type, mapper, aliasSymbol, aliasTypeArguments) {
        var declaration = type.objectFlags & 4 /* ObjectFlags.Reference */ ? type.node :
            type.objectFlags & 8388608 /* ObjectFlags.InstantiationExpressionType */ ? type.node :
                type.symbol.declarations[0];
        var links = getNodeLinks(declaration);
        var target = type.objectFlags & 4 /* ObjectFlags.Reference */ ? links.resolvedType :
            type.objectFlags & 64 /* ObjectFlags.Instantiated */ ? type.target : type;
        var typeParameters = links.outerTypeParameters;
        if (!typeParameters) {
            // The first time an anonymous type is instantiated we compute and store a list of the type
            // parameters that are in scope (and therefore potentially referenced). For type literals that
            // aren't the right hand side of a generic type alias declaration we optimize by reducing the
            // set of type parameters to those that are possibly referenced in the literal.
            var outerTypeParameters = getOuterTypeParameters(declaration, /*includeThisTypes*/ true);
            if (isJSConstructor(declaration)) {
                var templateTagParameters = getTypeParametersFromDeclaration(declaration);
                outerTypeParameters = (0, ts_1.addRange)(outerTypeParameters, templateTagParameters);
            }
            typeParameters = outerTypeParameters || ts_1.emptyArray;
            var allDeclarations_1 = type.objectFlags & (4 /* ObjectFlags.Reference */ | 8388608 /* ObjectFlags.InstantiationExpressionType */) ? [declaration] : type.symbol.declarations;
            typeParameters = (target.objectFlags & (4 /* ObjectFlags.Reference */ | 8388608 /* ObjectFlags.InstantiationExpressionType */) || target.symbol.flags & 8192 /* SymbolFlags.Method */ || target.symbol.flags & 2048 /* SymbolFlags.TypeLiteral */) && !target.aliasTypeArguments ?
                (0, ts_1.filter)(typeParameters, function (tp) { return (0, ts_1.some)(allDeclarations_1, function (d) { return isTypeParameterPossiblyReferenced(tp, d); }); }) :
                typeParameters;
            links.outerTypeParameters = typeParameters;
        }
        if (typeParameters.length) {
            // We are instantiating an anonymous type that has one or more type parameters in scope. Apply the
            // mapper to the type parameters to produce the effective list of type arguments, and compute the
            // instantiation cache key from the type IDs of the type arguments.
            var combinedMapper_1 = combineTypeMappers(type.mapper, mapper);
            var typeArguments = (0, ts_1.map)(typeParameters, function (t) { return getMappedType(t, combinedMapper_1); });
            var newAliasSymbol = aliasSymbol || type.aliasSymbol;
            var newAliasTypeArguments = aliasSymbol ? aliasTypeArguments : instantiateTypes(type.aliasTypeArguments, mapper);
            var id = getTypeListId(typeArguments) + getAliasId(newAliasSymbol, newAliasTypeArguments);
            if (!target.instantiations) {
                target.instantiations = new Map();
                target.instantiations.set(getTypeListId(typeParameters) + getAliasId(target.aliasSymbol, target.aliasTypeArguments), target);
            }
            var result = target.instantiations.get(id);
            if (!result) {
                var newMapper = createTypeMapper(typeParameters, typeArguments);
                result = target.objectFlags & 4 /* ObjectFlags.Reference */ ? createDeferredTypeReference(type.target, type.node, newMapper, newAliasSymbol, newAliasTypeArguments) :
                    target.objectFlags & 32 /* ObjectFlags.Mapped */ ? instantiateMappedType(target, newMapper, newAliasSymbol, newAliasTypeArguments) :
                        instantiateAnonymousType(target, newMapper, newAliasSymbol, newAliasTypeArguments);
                target.instantiations.set(id, result); // Set cached result early in case we recursively invoke instantiation while eagerly computing type variable visibility below
                var resultObjectFlags = (0, ts_1.getObjectFlags)(result);
                if (result.flags & 138117121 /* TypeFlags.ObjectFlagsType */ && !(resultObjectFlags & 524288 /* ObjectFlags.CouldContainTypeVariablesComputed */)) {
                    var resultCouldContainTypeVariables = (0, ts_1.some)(typeArguments, couldContainTypeVariables); // one of the input type arguments might be or contain the result
                    if (!((0, ts_1.getObjectFlags)(result) & 524288 /* ObjectFlags.CouldContainTypeVariablesComputed */)) {
                        // if `result` is one of the object types we tried to make (it may not be, due to how `instantiateMappedType` works), we can carry forward the type variable containment check from the input type arguments
                        if (resultObjectFlags & (32 /* ObjectFlags.Mapped */ | 16 /* ObjectFlags.Anonymous */ | 4 /* ObjectFlags.Reference */)) {
                            result.objectFlags |= 524288 /* ObjectFlags.CouldContainTypeVariablesComputed */ | (resultCouldContainTypeVariables ? 1048576 /* ObjectFlags.CouldContainTypeVariables */ : 0);
                        }
                        // If none of the type arguments for the outer type parameters contain type variables, it follows
                        // that the instantiated type doesn't reference type variables.
                        // Intrinsics have `CouldContainTypeVariablesComputed` pre-set, so this should only cover unions and intersections resulting from `instantiateMappedType`
                        else {
                            result.objectFlags |= !resultCouldContainTypeVariables ? 524288 /* ObjectFlags.CouldContainTypeVariablesComputed */ : 0;
                        }
                    }
                }
            }
            return result;
        }
        return type;
    }
    function maybeTypeParameterReference(node) {
        return !(node.parent.kind === 182 /* SyntaxKind.TypeReference */ && node.parent.typeArguments && node === node.parent.typeName ||
            node.parent.kind === 204 /* SyntaxKind.ImportType */ && node.parent.typeArguments && node === node.parent.qualifier);
    }
    function isTypeParameterPossiblyReferenced(tp, node) {
        // If the type parameter doesn't have exactly one declaration, if there are intervening statement blocks
        // between the node and the type parameter declaration, if the node contains actual references to the
        // type parameter, or if the node contains type queries that we can't prove couldn't contain references to the type parameter,
        // we consider the type parameter possibly referenced.
        if (tp.symbol && tp.symbol.declarations && tp.symbol.declarations.length === 1) {
            var container = tp.symbol.declarations[0].parent;
            for (var n = node; n !== container; n = n.parent) {
                if (!n || n.kind === 240 /* SyntaxKind.Block */ || n.kind === 193 /* SyntaxKind.ConditionalType */ && (0, ts_1.forEachChild)(n.extendsType, containsReference)) {
                    return true;
                }
            }
            return containsReference(node);
        }
        return true;
        function containsReference(node) {
            switch (node.kind) {
                case 196 /* SyntaxKind.ThisType */:
                    return !!tp.isThisType;
                case 80 /* SyntaxKind.Identifier */:
                    return !tp.isThisType && (0, ts_1.isPartOfTypeNode)(node) && maybeTypeParameterReference(node) &&
                        getTypeFromTypeNodeWorker(node) === tp; // use worker because we're looking for === equality
                case 185 /* SyntaxKind.TypeQuery */:
                    var entityName = node.exprName;
                    var firstIdentifier = (0, ts_1.getFirstIdentifier)(entityName);
                    if (!(0, ts_1.isThisIdentifier)(firstIdentifier)) { // Don't attempt to analyze typeof this.xxx
                        var firstIdentifierSymbol = getResolvedSymbol(firstIdentifier);
                        var tpDeclaration = tp.symbol.declarations[0]; // There is exactly one declaration, otherwise `containsReference` is not called
                        var tpScope_1 = tpDeclaration.kind === 167 /* SyntaxKind.TypeParameter */ ? tpDeclaration.parent : // Type parameter is a regular type parameter, e.g. foo<T>
                            tp.isThisType ? tpDeclaration : // Type parameter is the this type, and its declaration is the class declaration.
                                undefined; // Type parameter's declaration was unrecognized, e.g. comes from JSDoc annotation.
                        if (firstIdentifierSymbol.declarations && tpScope_1) {
                            return (0, ts_1.some)(firstIdentifierSymbol.declarations, function (idDecl) { return (0, ts_1.isNodeDescendantOf)(idDecl, tpScope_1); }) ||
                                (0, ts_1.some)(node.typeArguments, containsReference);
                        }
                    }
                    return true;
                case 173 /* SyntaxKind.MethodDeclaration */:
                case 172 /* SyntaxKind.MethodSignature */:
                    return !node.type && !!node.body ||
                        (0, ts_1.some)(node.typeParameters, containsReference) ||
                        (0, ts_1.some)(node.parameters, containsReference) ||
                        !!node.type && containsReference(node.type);
            }
            return !!(0, ts_1.forEachChild)(node, containsReference);
        }
    }
    function getHomomorphicTypeVariable(type) {
        var constraintType = getConstraintTypeFromMappedType(type);
        if (constraintType.flags & 4194304 /* TypeFlags.Index */) {
            var typeVariable = getActualTypeVariable(constraintType.type);
            if (typeVariable.flags & 262144 /* TypeFlags.TypeParameter */) {
                return typeVariable;
            }
        }
        return undefined;
    }
    function instantiateMappedType(type, mapper, aliasSymbol, aliasTypeArguments) {
        // For a homomorphic mapped type { [P in keyof T]: X }, where T is some type variable, the mapping
        // operation depends on T as follows:
        // * If T is a primitive type no mapping is performed and the result is simply T.
        // * If T is a union type we distribute the mapped type over the union.
        // * If T is an array we map to an array where the element type has been transformed.
        // * If T is a tuple we map to a tuple where the element types have been transformed.
        // * Otherwise we map to an object type where the type of each property has been transformed.
        // For example, when T is instantiated to a union type A | B, we produce { [P in keyof A]: X } |
        // { [P in keyof B]: X }, and when when T is instantiated to a union type A | undefined, we produce
        // { [P in keyof A]: X } | undefined.
        var typeVariable = getHomomorphicTypeVariable(type);
        if (typeVariable) {
            var mappedTypeVariable = instantiateType(typeVariable, mapper);
            if (typeVariable !== mappedTypeVariable) {
                return mapTypeWithAlias(getReducedType(mappedTypeVariable), function (t) {
                    if (t.flags & (3 /* TypeFlags.AnyOrUnknown */ | 58982400 /* TypeFlags.InstantiableNonPrimitive */ | 524288 /* TypeFlags.Object */ | 2097152 /* TypeFlags.Intersection */) && t !== wildcardType && !isErrorType(t)) {
                        if (!type.declaration.nameType) {
                            var constraint = void 0;
                            if (isArrayType(t) || t.flags & 1 /* TypeFlags.Any */ && findResolutionCycleStartIndex(typeVariable, 4 /* TypeSystemPropertyName.ImmediateBaseConstraint */) < 0 &&
                                (constraint = getConstraintOfTypeParameter(typeVariable)) && everyType(constraint, isArrayOrTupleType)) {
                                return instantiateMappedArrayType(t, type, prependTypeMapping(typeVariable, t, mapper));
                            }
                            if (isGenericTupleType(t)) {
                                return instantiateMappedGenericTupleType(t, type, typeVariable, mapper);
                            }
                            if (isTupleType(t)) {
                                return instantiateMappedTupleType(t, type, prependTypeMapping(typeVariable, t, mapper));
                            }
                        }
                        return instantiateAnonymousType(type, prependTypeMapping(typeVariable, t, mapper));
                    }
                    return t;
                }, aliasSymbol, aliasTypeArguments);
            }
        }
        // If the constraint type of the instantiation is the wildcard type, return the wildcard type.
        return instantiateType(getConstraintTypeFromMappedType(type), mapper) === wildcardType ? wildcardType : instantiateAnonymousType(type, mapper, aliasSymbol, aliasTypeArguments);
    }
    function getModifiedReadonlyState(state, modifiers) {
        return modifiers & 1 /* MappedTypeModifiers.IncludeReadonly */ ? true : modifiers & 2 /* MappedTypeModifiers.ExcludeReadonly */ ? false : state;
    }
    function instantiateMappedGenericTupleType(tupleType, mappedType, typeVariable, mapper) {
        // When a tuple type is generic (i.e. when it contains variadic elements), we want to eagerly map the
        // non-generic elements and defer mapping the generic elements. In order to facilitate this, we transform
        // M<[A, B?, ...T, ...C[]] into [...M<[A]>, ...M<[B?]>, ...M<T>, ...M<C[]>] and then rely on tuple type
        // normalization to resolve the non-generic parts of the resulting tuple.
        var elementFlags = tupleType.target.elementFlags;
        var elementTypes = (0, ts_1.map)(getElementTypes(tupleType), function (t, i) {
            var singleton = elementFlags[i] & 8 /* ElementFlags.Variadic */ ? t :
                elementFlags[i] & 4 /* ElementFlags.Rest */ ? createArrayType(t) :
                    createTupleType([t], [elementFlags[i]]);
            // avoid infinite recursion, if the singleton is the type variable itself
            // then we'd just get back here with the same arguments from within instantiateMappedType
            if (singleton === typeVariable) {
                return mappedType;
            }
            // The singleton is never a generic tuple type, so it is safe to recurse here.
            return instantiateMappedType(mappedType, prependTypeMapping(typeVariable, singleton, mapper));
        });
        var newReadonly = getModifiedReadonlyState(tupleType.target.readonly, getMappedTypeModifiers(mappedType));
        return createTupleType(elementTypes, (0, ts_1.map)(elementTypes, function (_) { return 8 /* ElementFlags.Variadic */; }), newReadonly);
    }
    function instantiateMappedArrayType(arrayType, mappedType, mapper) {
        var elementType = instantiateMappedTypeTemplate(mappedType, numberType, /*isOptional*/ true, mapper);
        return isErrorType(elementType) ? errorType :
            createArrayType(elementType, getModifiedReadonlyState(isReadonlyArrayType(arrayType), getMappedTypeModifiers(mappedType)));
    }
    function instantiateMappedTupleType(tupleType, mappedType, mapper) {
        var elementFlags = tupleType.target.elementFlags;
        var elementTypes = (0, ts_1.map)(getElementTypes(tupleType), function (_, i) {
            return instantiateMappedTypeTemplate(mappedType, getStringLiteralType("" + i), !!(elementFlags[i] & 2 /* ElementFlags.Optional */), mapper);
        });
        var modifiers = getMappedTypeModifiers(mappedType);
        var newTupleModifiers = modifiers & 4 /* MappedTypeModifiers.IncludeOptional */ ? (0, ts_1.map)(elementFlags, function (f) { return f & 1 /* ElementFlags.Required */ ? 2 /* ElementFlags.Optional */ : f; }) :
            modifiers & 8 /* MappedTypeModifiers.ExcludeOptional */ ? (0, ts_1.map)(elementFlags, function (f) { return f & 2 /* ElementFlags.Optional */ ? 1 /* ElementFlags.Required */ : f; }) :
                elementFlags;
        var newReadonly = getModifiedReadonlyState(tupleType.target.readonly, modifiers);
        return (0, ts_1.contains)(elementTypes, errorType) ? errorType :
            createTupleType(elementTypes, newTupleModifiers, newReadonly, tupleType.target.labeledElementDeclarations);
    }
    function instantiateMappedTypeTemplate(type, key, isOptional, mapper) {
        var templateMapper = appendTypeMapping(mapper, getTypeParameterFromMappedType(type), key);
        var propType = instantiateType(getTemplateTypeFromMappedType(type.target || type), templateMapper);
        var modifiers = getMappedTypeModifiers(type);
        return strictNullChecks && modifiers & 4 /* MappedTypeModifiers.IncludeOptional */ && !maybeTypeOfKind(propType, 32768 /* TypeFlags.Undefined */ | 16384 /* TypeFlags.Void */) ? getOptionalType(propType, /*isProperty*/ true) :
            strictNullChecks && modifiers & 8 /* MappedTypeModifiers.ExcludeOptional */ && isOptional ? getTypeWithFacts(propType, 524288 /* TypeFacts.NEUndefined */) :
                propType;
    }
    function instantiateAnonymousType(type, mapper, aliasSymbol, aliasTypeArguments) {
        var result = createObjectType(type.objectFlags & ~(524288 /* ObjectFlags.CouldContainTypeVariablesComputed */ | 1048576 /* ObjectFlags.CouldContainTypeVariables */) | 64 /* ObjectFlags.Instantiated */, type.symbol);
        if (type.objectFlags & 32 /* ObjectFlags.Mapped */) {
            result.declaration = type.declaration;
            // C.f. instantiateSignature
            var origTypeParameter = getTypeParameterFromMappedType(type);
            var freshTypeParameter = cloneTypeParameter(origTypeParameter);
            result.typeParameter = freshTypeParameter;
            mapper = combineTypeMappers(makeUnaryTypeMapper(origTypeParameter, freshTypeParameter), mapper);
            freshTypeParameter.mapper = mapper;
        }
        if (type.objectFlags & 8388608 /* ObjectFlags.InstantiationExpressionType */) {
            result.node = type.node;
        }
        result.target = type;
        result.mapper = mapper;
        result.aliasSymbol = aliasSymbol || type.aliasSymbol;
        result.aliasTypeArguments = aliasSymbol ? aliasTypeArguments : instantiateTypes(type.aliasTypeArguments, mapper);
        result.objectFlags |= result.aliasTypeArguments ? getPropagatingFlagsOfTypes(result.aliasTypeArguments) : 0;
        return result;
    }
    function getConditionalTypeInstantiation(type, mapper, aliasSymbol, aliasTypeArguments) {
        var root = type.root;
        if (root.outerTypeParameters) {
            // We are instantiating a conditional type that has one or more type parameters in scope. Apply the
            // mapper to the type parameters to produce the effective list of type arguments, and compute the
            // instantiation cache key from the type IDs of the type arguments.
            var typeArguments = (0, ts_1.map)(root.outerTypeParameters, function (t) { return getMappedType(t, mapper); });
            var id = getTypeListId(typeArguments) + getAliasId(aliasSymbol, aliasTypeArguments);
            var result = root.instantiations.get(id);
            if (!result) {
                var newMapper_1 = createTypeMapper(root.outerTypeParameters, typeArguments);
                var checkType_1 = root.checkType;
                var distributionType = root.isDistributive ? getMappedType(checkType_1, newMapper_1) : undefined;
                // Distributive conditional types are distributed over union types. For example, when the
                // distributive conditional type T extends U ? X : Y is instantiated with A | B for T, the
                // result is (A extends U ? X : Y) | (B extends U ? X : Y).
                result = distributionType && checkType_1 !== distributionType && distributionType.flags & (1048576 /* TypeFlags.Union */ | 131072 /* TypeFlags.Never */) ?
                    mapTypeWithAlias(getReducedType(distributionType), function (t) { return getConditionalType(root, prependTypeMapping(checkType_1, t, newMapper_1)); }, aliasSymbol, aliasTypeArguments) :
                    getConditionalType(root, newMapper_1, aliasSymbol, aliasTypeArguments);
                root.instantiations.set(id, result);
            }
            return result;
        }
        return type;
    }
    function instantiateType(type, mapper) {
        return type && mapper ? instantiateTypeWithAlias(type, mapper, /*aliasSymbol*/ undefined, /*aliasTypeArguments*/ undefined) : type;
    }
    function instantiateTypeWithAlias(type, mapper, aliasSymbol, aliasTypeArguments) {
        if (!couldContainTypeVariables(type)) {
            return type;
        }
        if (instantiationDepth === 100 || instantiationCount >= 5000000) {
            // We have reached 100 recursive type instantiations, or 5M type instantiations caused by the same statement
            // or expression. There is a very high likelyhood we're dealing with a combination of infinite generic types
            // that perpetually generate new type identities, so we stop the recursion here by yielding the error type.
            ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.instant("checkTypes" /* tracing.Phase.CheckTypes */, "instantiateType_DepthLimit", { typeId: type.id, instantiationDepth: instantiationDepth, instantiationCount: instantiationCount });
            error(currentNode, ts_1.Diagnostics.Type_instantiation_is_excessively_deep_and_possibly_infinite);
            return errorType;
        }
        totalInstantiationCount++;
        instantiationCount++;
        instantiationDepth++;
        var result = instantiateTypeWorker(type, mapper, aliasSymbol, aliasTypeArguments);
        instantiationDepth--;
        return result;
    }
    function instantiateTypeWorker(type, mapper, aliasSymbol, aliasTypeArguments) {
        var flags = type.flags;
        if (flags & 262144 /* TypeFlags.TypeParameter */) {
            return getMappedType(type, mapper);
        }
        if (flags & 524288 /* TypeFlags.Object */) {
            var objectFlags = type.objectFlags;
            if (objectFlags & (4 /* ObjectFlags.Reference */ | 16 /* ObjectFlags.Anonymous */ | 32 /* ObjectFlags.Mapped */)) {
                if (objectFlags & 4 /* ObjectFlags.Reference */ && !type.node) {
                    var resolvedTypeArguments = type.resolvedTypeArguments;
                    var newTypeArguments = instantiateTypes(resolvedTypeArguments, mapper);
                    return newTypeArguments !== resolvedTypeArguments ? createNormalizedTypeReference(type.target, newTypeArguments) : type;
                }
                if (objectFlags & 1024 /* ObjectFlags.ReverseMapped */) {
                    return instantiateReverseMappedType(type, mapper);
                }
                return getObjectTypeInstantiation(type, mapper, aliasSymbol, aliasTypeArguments);
            }
            return type;
        }
        if (flags & 3145728 /* TypeFlags.UnionOrIntersection */) {
            var origin_3 = type.flags & 1048576 /* TypeFlags.Union */ ? type.origin : undefined;
            var types = origin_3 && origin_3.flags & 3145728 /* TypeFlags.UnionOrIntersection */ ? origin_3.types : type.types;
            var newTypes = instantiateTypes(types, mapper);
            if (newTypes === types && aliasSymbol === type.aliasSymbol) {
                return type;
            }
            var newAliasSymbol = aliasSymbol || type.aliasSymbol;
            var newAliasTypeArguments = aliasSymbol ? aliasTypeArguments : instantiateTypes(type.aliasTypeArguments, mapper);
            return flags & 2097152 /* TypeFlags.Intersection */ || origin_3 && origin_3.flags & 2097152 /* TypeFlags.Intersection */ ?
                getIntersectionType(newTypes, newAliasSymbol, newAliasTypeArguments) :
                getUnionType(newTypes, 1 /* UnionReduction.Literal */, newAliasSymbol, newAliasTypeArguments);
        }
        if (flags & 4194304 /* TypeFlags.Index */) {
            return getIndexType(instantiateType(type.type, mapper));
        }
        if (flags & 134217728 /* TypeFlags.TemplateLiteral */) {
            return getTemplateLiteralType(type.texts, instantiateTypes(type.types, mapper));
        }
        if (flags & 268435456 /* TypeFlags.StringMapping */) {
            return getStringMappingType(type.symbol, instantiateType(type.type, mapper));
        }
        if (flags & 8388608 /* TypeFlags.IndexedAccess */) {
            var newAliasSymbol = aliasSymbol || type.aliasSymbol;
            var newAliasTypeArguments = aliasSymbol ? aliasTypeArguments : instantiateTypes(type.aliasTypeArguments, mapper);
            return getIndexedAccessType(instantiateType(type.objectType, mapper), instantiateType(type.indexType, mapper), type.accessFlags, /*accessNode*/ undefined, newAliasSymbol, newAliasTypeArguments);
        }
        if (flags & 16777216 /* TypeFlags.Conditional */) {
            return getConditionalTypeInstantiation(type, combineTypeMappers(type.mapper, mapper), aliasSymbol, aliasTypeArguments);
        }
        if (flags & 33554432 /* TypeFlags.Substitution */) {
            var newBaseType = instantiateType(type.baseType, mapper);
            var newConstraint = instantiateType(type.constraint, mapper);
            // A substitution type originates in the true branch of a conditional type and can be resolved
            // to just the base type in the same cases as the conditional type resolves to its true branch
            // (because the base type is then known to satisfy the constraint).
            if (newBaseType.flags & 8650752 /* TypeFlags.TypeVariable */ && isGenericType(newConstraint)) {
                return getSubstitutionType(newBaseType, newConstraint);
            }
            if (newConstraint.flags & 3 /* TypeFlags.AnyOrUnknown */ || isTypeAssignableTo(getRestrictiveInstantiation(newBaseType), getRestrictiveInstantiation(newConstraint))) {
                return newBaseType;
            }
            return newBaseType.flags & 8650752 /* TypeFlags.TypeVariable */ ? getSubstitutionType(newBaseType, newConstraint) : getIntersectionType([newConstraint, newBaseType]);
        }
        return type;
    }
    function instantiateReverseMappedType(type, mapper) {
        var innerMappedType = instantiateType(type.mappedType, mapper);
        if (!((0, ts_1.getObjectFlags)(innerMappedType) & 32 /* ObjectFlags.Mapped */)) {
            return type;
        }
        var innerIndexType = instantiateType(type.constraintType, mapper);
        if (!(innerIndexType.flags & 4194304 /* TypeFlags.Index */)) {
            return type;
        }
        var instantiated = inferTypeForHomomorphicMappedType(instantiateType(type.source, mapper), innerMappedType, innerIndexType);
        if (instantiated) {
            return instantiated;
        }
        return type; // Nested invocation of `inferTypeForHomomorphicMappedType` or the `source` instantiated into something unmappable
    }
    function getPermissiveInstantiation(type) {
        return type.flags & (402784252 /* TypeFlags.Primitive */ | 3 /* TypeFlags.AnyOrUnknown */ | 131072 /* TypeFlags.Never */) ? type :
            type.permissiveInstantiation || (type.permissiveInstantiation = instantiateType(type, permissiveMapper));
    }
    function getRestrictiveInstantiation(type) {
        if (type.flags & (402784252 /* TypeFlags.Primitive */ | 3 /* TypeFlags.AnyOrUnknown */ | 131072 /* TypeFlags.Never */)) {
            return type;
        }
        if (type.restrictiveInstantiation) {
            return type.restrictiveInstantiation;
        }
        type.restrictiveInstantiation = instantiateType(type, restrictiveMapper);
        // We set the following so we don't attempt to set the restrictive instance of a restrictive instance
        // which is redundant - we'll produce new type identities, but all type params have already been mapped.
        // This also gives us a way to detect restrictive instances upon comparisons and _disable_ the "distributeive constraint"
        // assignability check for them, which is distinctly unsafe, as once you have a restrctive instance, all the type parameters
        // are constrained to `unknown` and produce tons of false positives/negatives!
        type.restrictiveInstantiation.restrictiveInstantiation = type.restrictiveInstantiation;
        return type.restrictiveInstantiation;
    }
    function instantiateIndexInfo(info, mapper) {
        return createIndexInfo(info.keyType, instantiateType(info.type, mapper), info.isReadonly, info.declaration);
    }
    // Returns true if the given expression contains (at any level of nesting) a function or arrow expression
    // that is subject to contextual typing.
    function isContextSensitive(node) {
        ts_1.Debug.assert(node.kind !== 173 /* SyntaxKind.MethodDeclaration */ || (0, ts_1.isObjectLiteralMethod)(node));
        switch (node.kind) {
            case 217 /* SyntaxKind.FunctionExpression */:
            case 218 /* SyntaxKind.ArrowFunction */:
            case 173 /* SyntaxKind.MethodDeclaration */:
            case 261 /* SyntaxKind.FunctionDeclaration */: // Function declarations can have context when annotated with a jsdoc @type
                return isContextSensitiveFunctionLikeDeclaration(node);
            case 209 /* SyntaxKind.ObjectLiteralExpression */:
                return (0, ts_1.some)(node.properties, isContextSensitive);
            case 208 /* SyntaxKind.ArrayLiteralExpression */:
                return (0, ts_1.some)(node.elements, isContextSensitive);
            case 226 /* SyntaxKind.ConditionalExpression */:
                return isContextSensitive(node.whenTrue) ||
                    isContextSensitive(node.whenFalse);
            case 225 /* SyntaxKind.BinaryExpression */:
                return (node.operatorToken.kind === 57 /* SyntaxKind.BarBarToken */ || node.operatorToken.kind === 61 /* SyntaxKind.QuestionQuestionToken */) &&
                    (isContextSensitive(node.left) || isContextSensitive(node.right));
            case 302 /* SyntaxKind.PropertyAssignment */:
                return isContextSensitive(node.initializer);
            case 216 /* SyntaxKind.ParenthesizedExpression */:
                return isContextSensitive(node.expression);
            case 291 /* SyntaxKind.JsxAttributes */:
                return (0, ts_1.some)(node.properties, isContextSensitive) || (0, ts_1.isJsxOpeningElement)(node.parent) && (0, ts_1.some)(node.parent.parent.children, isContextSensitive);
            case 290 /* SyntaxKind.JsxAttribute */: {
                // If there is no initializer, JSX attribute has a boolean value of true which is not context sensitive.
                var initializer = node.initializer;
                return !!initializer && isContextSensitive(initializer);
            }
            case 293 /* SyntaxKind.JsxExpression */: {
                // It is possible to that node.expression is undefined (e.g <div x={} />)
                var expression = node.expression;
                return !!expression && isContextSensitive(expression);
            }
        }
        return false;
    }
    function isContextSensitiveFunctionLikeDeclaration(node) {
        return (0, ts_1.hasContextSensitiveParameters)(node) || hasContextSensitiveReturnExpression(node);
    }
    function hasContextSensitiveReturnExpression(node) {
        if (node.typeParameters || (0, ts_1.getEffectiveReturnTypeNode)(node) || !node.body) {
            return false;
        }
        if (node.body.kind !== 240 /* SyntaxKind.Block */) {
            return isContextSensitive(node.body);
        }
        return !!(0, ts_1.forEachReturnStatement)(node.body, function (statement) { return !!statement.expression && isContextSensitive(statement.expression); });
    }
    function isContextSensitiveFunctionOrObjectLiteralMethod(func) {
        return ((0, ts_1.isFunctionExpressionOrArrowFunction)(func) || (0, ts_1.isObjectLiteralMethod)(func)) &&
            isContextSensitiveFunctionLikeDeclaration(func);
    }
    function getTypeWithoutSignatures(type) {
        if (type.flags & 524288 /* TypeFlags.Object */) {
            var resolved = resolveStructuredTypeMembers(type);
            if (resolved.constructSignatures.length || resolved.callSignatures.length) {
                var result = createObjectType(16 /* ObjectFlags.Anonymous */, type.symbol);
                result.members = resolved.members;
                result.properties = resolved.properties;
                result.callSignatures = ts_1.emptyArray;
                result.constructSignatures = ts_1.emptyArray;
                result.indexInfos = ts_1.emptyArray;
                return result;
            }
        }
        else if (type.flags & 2097152 /* TypeFlags.Intersection */) {
            return getIntersectionType((0, ts_1.map)(type.types, getTypeWithoutSignatures));
        }
        return type;
    }
    // TYPE CHECKING
    function isTypeIdenticalTo(source, target) {
        return isTypeRelatedTo(source, target, identityRelation);
    }
    function compareTypesIdentical(source, target) {
        return isTypeRelatedTo(source, target, identityRelation) ? -1 /* Ternary.True */ : 0 /* Ternary.False */;
    }
    function compareTypesAssignable(source, target) {
        return isTypeRelatedTo(source, target, assignableRelation) ? -1 /* Ternary.True */ : 0 /* Ternary.False */;
    }
    function compareTypesSubtypeOf(source, target) {
        return isTypeRelatedTo(source, target, subtypeRelation) ? -1 /* Ternary.True */ : 0 /* Ternary.False */;
    }
    function isTypeSubtypeOf(source, target) {
        return isTypeRelatedTo(source, target, subtypeRelation);
    }
    function isTypeStrictSubtypeOf(source, target) {
        return isTypeRelatedTo(source, target, strictSubtypeRelation);
    }
    function isTypeAssignableTo(source, target) {
        return isTypeRelatedTo(source, target, assignableRelation);
    }
    // An object type S is considered to be derived from an object type T if
    // S is a union type and every constituent of S is derived from T,
    // T is a union type and S is derived from at least one constituent of T, or
    // S is an intersection type and some constituent of S is derived from T, or
    // S is a type variable with a base constraint that is derived from T, or
    // T is {} and S is an object-like type (ensuring {} is less derived than Object), or
    // T is one of the global types Object and Function and S is a subtype of T, or
    // T occurs directly or indirectly in an 'extends' clause of S.
    // Note that this check ignores type parameters and only considers the
    // inheritance hierarchy.
    function isTypeDerivedFrom(source, target) {
        return source.flags & 1048576 /* TypeFlags.Union */ ? (0, ts_1.every)(source.types, function (t) { return isTypeDerivedFrom(t, target); }) :
            target.flags & 1048576 /* TypeFlags.Union */ ? (0, ts_1.some)(target.types, function (t) { return isTypeDerivedFrom(source, t); }) :
                source.flags & 2097152 /* TypeFlags.Intersection */ ? (0, ts_1.some)(source.types, function (t) { return isTypeDerivedFrom(t, target); }) :
                    source.flags & 58982400 /* TypeFlags.InstantiableNonPrimitive */ ? isTypeDerivedFrom(getBaseConstraintOfType(source) || unknownType, target) :
                        isEmptyAnonymousObjectType(target) ? !!(source.flags & (524288 /* TypeFlags.Object */ | 67108864 /* TypeFlags.NonPrimitive */)) :
                            target === globalObjectType ? !!(source.flags & (524288 /* TypeFlags.Object */ | 67108864 /* TypeFlags.NonPrimitive */)) && !isEmptyAnonymousObjectType(source) :
                                target === globalFunctionType ? !!(source.flags & 524288 /* TypeFlags.Object */) && isFunctionObjectType(source) :
                                    hasBaseType(source, getTargetType(target)) || (isArrayType(target) && !isReadonlyArrayType(target) && isTypeDerivedFrom(source, globalReadonlyArrayType));
    }
    /**
     * This is *not* a bi-directional relationship.
     * If one needs to check both directions for comparability, use a second call to this function or 'checkTypeComparableTo'.
     *
     * A type S is comparable to a type T if some (but not necessarily all) of the possible values of S are also possible values of T.
     * It is used to check following cases:
     *   - the types of the left and right sides of equality/inequality operators (`===`, `!==`, `==`, `!=`).
     *   - the types of `case` clause expressions and their respective `switch` expressions.
     *   - the type of an expression in a type assertion with the type being asserted.
     */
    function isTypeComparableTo(source, target) {
        return isTypeRelatedTo(source, target, comparableRelation);
    }
    function areTypesComparable(type1, type2) {
        return isTypeComparableTo(type1, type2) || isTypeComparableTo(type2, type1);
    }
    function checkTypeAssignableTo(source, target, errorNode, headMessage, containingMessageChain, errorOutputObject) {
        return checkTypeRelatedTo(source, target, assignableRelation, errorNode, headMessage, containingMessageChain, errorOutputObject);
    }
    /**
     * Like `checkTypeAssignableTo`, but if it would issue an error, instead performs structural comparisons of the types using the given expression node to
     * attempt to issue more specific errors on, for example, specific object literal properties or tuple members.
     */
    function checkTypeAssignableToAndOptionallyElaborate(source, target, errorNode, expr, headMessage, containingMessageChain) {
        return checkTypeRelatedToAndOptionallyElaborate(source, target, assignableRelation, errorNode, expr, headMessage, containingMessageChain, /*errorOutputContainer*/ undefined);
    }
    function checkTypeRelatedToAndOptionallyElaborate(source, target, relation, errorNode, expr, headMessage, containingMessageChain, errorOutputContainer) {
        if (isTypeRelatedTo(source, target, relation))
            return true;
        if (!errorNode || !elaborateError(expr, source, target, relation, headMessage, containingMessageChain, errorOutputContainer)) {
            return checkTypeRelatedTo(source, target, relation, errorNode, headMessage, containingMessageChain, errorOutputContainer);
        }
        return false;
    }
    function isOrHasGenericConditional(type) {
        return !!(type.flags & 16777216 /* TypeFlags.Conditional */ || (type.flags & 2097152 /* TypeFlags.Intersection */ && (0, ts_1.some)(type.types, isOrHasGenericConditional)));
    }
    function elaborateError(node, source, target, relation, headMessage, containingMessageChain, errorOutputContainer) {
        if (!node || isOrHasGenericConditional(target))
            return false;
        if (!checkTypeRelatedTo(source, target, relation, /*errorNode*/ undefined)
            && elaborateDidYouMeanToCallOrConstruct(node, source, target, relation, headMessage, containingMessageChain, errorOutputContainer)) {
            return true;
        }
        switch (node.kind) {
            case 233 /* SyntaxKind.AsExpression */:
                if (!isConstAssertion(node)) {
                    break;
                }
            // fallthrough
            case 293 /* SyntaxKind.JsxExpression */:
            case 216 /* SyntaxKind.ParenthesizedExpression */:
                return elaborateError(node.expression, source, target, relation, headMessage, containingMessageChain, errorOutputContainer);
            case 225 /* SyntaxKind.BinaryExpression */:
                switch (node.operatorToken.kind) {
                    case 64 /* SyntaxKind.EqualsToken */:
                    case 28 /* SyntaxKind.CommaToken */:
                        return elaborateError(node.right, source, target, relation, headMessage, containingMessageChain, errorOutputContainer);
                }
                break;
            case 209 /* SyntaxKind.ObjectLiteralExpression */:
                return elaborateObjectLiteral(node, source, target, relation, containingMessageChain, errorOutputContainer);
            case 208 /* SyntaxKind.ArrayLiteralExpression */:
                return elaborateArrayLiteral(node, source, target, relation, containingMessageChain, errorOutputContainer);
            case 291 /* SyntaxKind.JsxAttributes */:
                return elaborateJsxComponents(node, source, target, relation, containingMessageChain, errorOutputContainer);
            case 218 /* SyntaxKind.ArrowFunction */:
                return elaborateArrowFunction(node, source, target, relation, containingMessageChain, errorOutputContainer);
        }
        return false;
    }
    function elaborateDidYouMeanToCallOrConstruct(node, source, target, relation, headMessage, containingMessageChain, errorOutputContainer) {
        var callSignatures = getSignaturesOfType(source, 0 /* SignatureKind.Call */);
        var constructSignatures = getSignaturesOfType(source, 1 /* SignatureKind.Construct */);
        for (var _i = 0, _a = [constructSignatures, callSignatures]; _i < _a.length; _i++) {
            var signatures = _a[_i];
            if ((0, ts_1.some)(signatures, function (s) {
                var returnType = getReturnTypeOfSignature(s);
                return !(returnType.flags & (1 /* TypeFlags.Any */ | 131072 /* TypeFlags.Never */)) && checkTypeRelatedTo(returnType, target, relation, /*errorNode*/ undefined);
            })) {
                var resultObj = errorOutputContainer || {};
                checkTypeAssignableTo(source, target, node, headMessage, containingMessageChain, resultObj);
                var diagnostic = resultObj.errors[resultObj.errors.length - 1];
                (0, ts_1.addRelatedInfo)(diagnostic, (0, ts_1.createDiagnosticForNode)(node, signatures === constructSignatures ? ts_1.Diagnostics.Did_you_mean_to_use_new_with_this_expression : ts_1.Diagnostics.Did_you_mean_to_call_this_expression));
                return true;
            }
        }
        return false;
    }
    function elaborateArrowFunction(node, source, target, relation, containingMessageChain, errorOutputContainer) {
        // Don't elaborate blocks
        if ((0, ts_1.isBlock)(node.body)) {
            return false;
        }
        // Or functions with annotated parameter types
        if ((0, ts_1.some)(node.parameters, ts_1.hasType)) {
            return false;
        }
        var sourceSig = getSingleCallSignature(source);
        if (!sourceSig) {
            return false;
        }
        var targetSignatures = getSignaturesOfType(target, 0 /* SignatureKind.Call */);
        if (!(0, ts_1.length)(targetSignatures)) {
            return false;
        }
        var returnExpression = node.body;
        var sourceReturn = getReturnTypeOfSignature(sourceSig);
        var targetReturn = getUnionType((0, ts_1.map)(targetSignatures, getReturnTypeOfSignature));
        if (!checkTypeRelatedTo(sourceReturn, targetReturn, relation, /*errorNode*/ undefined)) {
            var elaborated = returnExpression && elaborateError(returnExpression, sourceReturn, targetReturn, relation, /*headMessage*/ undefined, containingMessageChain, errorOutputContainer);
            if (elaborated) {
                return elaborated;
            }
            var resultObj = errorOutputContainer || {};
            checkTypeRelatedTo(sourceReturn, targetReturn, relation, returnExpression, /*headMessage*/ undefined, containingMessageChain, resultObj);
            if (resultObj.errors) {
                if (target.symbol && (0, ts_1.length)(target.symbol.declarations)) {
                    (0, ts_1.addRelatedInfo)(resultObj.errors[resultObj.errors.length - 1], (0, ts_1.createDiagnosticForNode)(target.symbol.declarations[0], ts_1.Diagnostics.The_expected_type_comes_from_the_return_type_of_this_signature));
                }
                if (((0, ts_1.getFunctionFlags)(node) & 2 /* FunctionFlags.Async */) === 0
                    // exclude cases where source itself is promisy - this way we don't make a suggestion when relating
                    // an IPromise and a Promise that are slightly different
                    && !getTypeOfPropertyOfType(sourceReturn, "then")
                    && checkTypeRelatedTo(createPromiseType(sourceReturn), targetReturn, relation, /*errorNode*/ undefined)) {
                    (0, ts_1.addRelatedInfo)(resultObj.errors[resultObj.errors.length - 1], (0, ts_1.createDiagnosticForNode)(node, ts_1.Diagnostics.Did_you_mean_to_mark_this_function_as_async));
                }
                return true;
            }
        }
        return false;
    }
    function getBestMatchIndexedAccessTypeOrUndefined(source, target, nameType) {
        var idx = getIndexedAccessTypeOrUndefined(target, nameType);
        if (idx) {
            return idx;
        }
        if (target.flags & 1048576 /* TypeFlags.Union */) {
            var best = getBestMatchingType(source, target);
            if (best) {
                return getIndexedAccessTypeOrUndefined(best, nameType);
            }
        }
    }
    function checkExpressionForMutableLocationWithContextualType(next, sourcePropType) {
        pushContextualType(next, sourcePropType, /*isCache*/ false);
        var result = checkExpressionForMutableLocation(next, 1 /* CheckMode.Contextual */);
        popContextualType();
        return result;
    }
    /**
     * For every element returned from the iterator, checks that element to issue an error on a property of that element's type
     * If that element would issue an error, we first attempt to dive into that element's inner expression and issue a more specific error by recuring into `elaborateError`
     * Otherwise, we issue an error on _every_ element which fail the assignability check
     */
    function elaborateElementwise(iterator, source, target, relation, containingMessageChain, errorOutputContainer) {
        // Assignability failure - check each prop individually, and if that fails, fall back on the bad error span
        var reportedError = false;
        for (var _i = 0, iterator_1 = iterator; _i < iterator_1.length; _i++) {
            var value = iterator_1[_i];
            var prop = value.errorNode, next = value.innerExpression, nameType = value.nameType, errorMessage = value.errorMessage;
            var targetPropType = getBestMatchIndexedAccessTypeOrUndefined(source, target, nameType);
            if (!targetPropType || targetPropType.flags & 8388608 /* TypeFlags.IndexedAccess */)
                continue; // Don't elaborate on indexes on generic variables
            var sourcePropType = getIndexedAccessTypeOrUndefined(source, nameType);
            if (!sourcePropType)
                continue;
            var propName = getPropertyNameFromIndex(nameType, /*accessNode*/ undefined);
            if (!checkTypeRelatedTo(sourcePropType, targetPropType, relation, /*errorNode*/ undefined)) {
                var elaborated = next && elaborateError(next, sourcePropType, targetPropType, relation, /*headMessage*/ undefined, containingMessageChain, errorOutputContainer);
                reportedError = true;
                if (!elaborated) {
                    // Issue error on the prop itself, since the prop couldn't elaborate the error
                    var resultObj = errorOutputContainer || {};
                    // Use the expression type, if available
                    var specificSource = next ? checkExpressionForMutableLocationWithContextualType(next, sourcePropType) : sourcePropType;
                    if (exactOptionalPropertyTypes && isExactOptionalPropertyMismatch(specificSource, targetPropType)) {
                        var diag = (0, ts_1.createDiagnosticForNode)(prop, ts_1.Diagnostics.Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_type_of_the_target, typeToString(specificSource), typeToString(targetPropType));
                        diagnostics.add(diag);
                        resultObj.errors = [diag];
                    }
                    else {
                        var targetIsOptional = !!(propName && (getPropertyOfType(target, propName) || unknownSymbol).flags & 16777216 /* SymbolFlags.Optional */);
                        var sourceIsOptional = !!(propName && (getPropertyOfType(source, propName) || unknownSymbol).flags & 16777216 /* SymbolFlags.Optional */);
                        targetPropType = removeMissingType(targetPropType, targetIsOptional);
                        sourcePropType = removeMissingType(sourcePropType, targetIsOptional && sourceIsOptional);
                        var result = checkTypeRelatedTo(specificSource, targetPropType, relation, prop, errorMessage, containingMessageChain, resultObj);
                        if (result && specificSource !== sourcePropType) {
                            // If for whatever reason the expression type doesn't yield an error, make sure we still issue an error on the sourcePropType
                            checkTypeRelatedTo(sourcePropType, targetPropType, relation, prop, errorMessage, containingMessageChain, resultObj);
                        }
                    }
                    if (resultObj.errors) {
                        var reportedDiag = resultObj.errors[resultObj.errors.length - 1];
                        var propertyName = isTypeUsableAsPropertyName(nameType) ? getPropertyNameFromType(nameType) : undefined;
                        var targetProp = propertyName !== undefined ? getPropertyOfType(target, propertyName) : undefined;
                        var issuedElaboration = false;
                        if (!targetProp) {
                            var indexInfo = getApplicableIndexInfo(target, nameType);
                            if (indexInfo && indexInfo.declaration && !(0, ts_1.getSourceFileOfNode)(indexInfo.declaration).hasNoDefaultLib) {
                                issuedElaboration = true;
                                (0, ts_1.addRelatedInfo)(reportedDiag, (0, ts_1.createDiagnosticForNode)(indexInfo.declaration, ts_1.Diagnostics.The_expected_type_comes_from_this_index_signature));
                            }
                        }
                        if (!issuedElaboration && (targetProp && (0, ts_1.length)(targetProp.declarations) || target.symbol && (0, ts_1.length)(target.symbol.declarations))) {
                            var targetNode = targetProp && (0, ts_1.length)(targetProp.declarations) ? targetProp.declarations[0] : target.symbol.declarations[0];
                            if (!(0, ts_1.getSourceFileOfNode)(targetNode).hasNoDefaultLib) {
                                (0, ts_1.addRelatedInfo)(reportedDiag, (0, ts_1.createDiagnosticForNode)(targetNode, ts_1.Diagnostics.The_expected_type_comes_from_property_0_which_is_declared_here_on_type_1, propertyName && !(nameType.flags & 8192 /* TypeFlags.UniqueESSymbol */) ? (0, ts_1.unescapeLeadingUnderscores)(propertyName) : typeToString(nameType), typeToString(target)));
                            }
                        }
                    }
                }
            }
        }
        return reportedError;
    }
    /**
     * Assumes `target` type is assignable to the `Iterable` type, if `Iterable` is defined,
     * or that it's an array or tuple-like type, if `Iterable` is not defined.
     */
    function elaborateIterableOrArrayLikeTargetElementwise(iterator, source, target, relation, containingMessageChain, errorOutputContainer) {
        var tupleOrArrayLikeTargetParts = filterType(target, isArrayOrTupleLikeType);
        var nonTupleOrArrayLikeTargetParts = filterType(target, function (t) { return !isArrayOrTupleLikeType(t); });
        // If `nonTupleOrArrayLikeTargetParts` is not `never`, then that should mean `Iterable` is defined.
        var iterationType = nonTupleOrArrayLikeTargetParts !== neverType
            ? getIterationTypeOfIterable(13 /* IterationUse.ForOf */, 0 /* IterationTypeKind.Yield */, nonTupleOrArrayLikeTargetParts, /*errorNode*/ undefined)
            : undefined;
        var reportedError = false;
        for (var status_1 = iterator.next(); !status_1.done; status_1 = iterator.next()) {
            var _a = status_1.value, prop = _a.errorNode, next = _a.innerExpression, nameType = _a.nameType, errorMessage = _a.errorMessage;
            var targetPropType = iterationType;
            var targetIndexedPropType = tupleOrArrayLikeTargetParts !== neverType ? getBestMatchIndexedAccessTypeOrUndefined(source, tupleOrArrayLikeTargetParts, nameType) : undefined;
            if (targetIndexedPropType && !(targetIndexedPropType.flags & 8388608 /* TypeFlags.IndexedAccess */)) { // Don't elaborate on indexes on generic variables
                targetPropType = iterationType ? getUnionType([iterationType, targetIndexedPropType]) : targetIndexedPropType;
            }
            if (!targetPropType)
                continue;
            var sourcePropType = getIndexedAccessTypeOrUndefined(source, nameType);
            if (!sourcePropType)
                continue;
            var propName = getPropertyNameFromIndex(nameType, /*accessNode*/ undefined);
            if (!checkTypeRelatedTo(sourcePropType, targetPropType, relation, /*errorNode*/ undefined)) {
                var elaborated = next && elaborateError(next, sourcePropType, targetPropType, relation, /*headMessage*/ undefined, containingMessageChain, errorOutputContainer);
                reportedError = true;
                if (!elaborated) {
                    // Issue error on the prop itself, since the prop couldn't elaborate the error
                    var resultObj = errorOutputContainer || {};
                    // Use the expression type, if available
                    var specificSource = next ? checkExpressionForMutableLocationWithContextualType(next, sourcePropType) : sourcePropType;
                    if (exactOptionalPropertyTypes && isExactOptionalPropertyMismatch(specificSource, targetPropType)) {
                        var diag = (0, ts_1.createDiagnosticForNode)(prop, ts_1.Diagnostics.Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_type_of_the_target, typeToString(specificSource), typeToString(targetPropType));
                        diagnostics.add(diag);
                        resultObj.errors = [diag];
                    }
                    else {
                        var targetIsOptional = !!(propName && (getPropertyOfType(tupleOrArrayLikeTargetParts, propName) || unknownSymbol).flags & 16777216 /* SymbolFlags.Optional */);
                        var sourceIsOptional = !!(propName && (getPropertyOfType(source, propName) || unknownSymbol).flags & 16777216 /* SymbolFlags.Optional */);
                        targetPropType = removeMissingType(targetPropType, targetIsOptional);
                        sourcePropType = removeMissingType(sourcePropType, targetIsOptional && sourceIsOptional);
                        var result = checkTypeRelatedTo(specificSource, targetPropType, relation, prop, errorMessage, containingMessageChain, resultObj);
                        if (result && specificSource !== sourcePropType) {
                            // If for whatever reason the expression type doesn't yield an error, make sure we still issue an error on the sourcePropType
                            checkTypeRelatedTo(sourcePropType, targetPropType, relation, prop, errorMessage, containingMessageChain, resultObj);
                        }
                    }
                }
            }
        }
        return reportedError;
    }
    function generateJsxAttributes(node) {
        var _i, _a, prop;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(0, ts_1.length)(node.properties))
                        return [2 /*return*/];
                    _i = 0, _a = node.properties;
                    _b.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 4];
                    prop = _a[_i];
                    if ((0, ts_1.isJsxSpreadAttribute)(prop) || isHyphenatedJsxName((0, ts_1.getTextOfJsxAttributeName)(prop.name)))
                        return [3 /*break*/, 3];
                    return [4 /*yield*/, { errorNode: prop.name, innerExpression: prop.initializer, nameType: getStringLiteralType((0, ts_1.getTextOfJsxAttributeName)(prop.name)) }];
                case 2:
                    _b.sent();
                    _b.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    }
    function generateJsxChildren(node, getInvalidTextDiagnostic) {
        var memberOffset, i, child, nameType, elem;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(0, ts_1.length)(node.children))
                        return [2 /*return*/];
                    memberOffset = 0;
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < node.children.length)) return [3 /*break*/, 5];
                    child = node.children[i];
                    nameType = getNumberLiteralType(i - memberOffset);
                    elem = getElaborationElementForJsxChild(child, nameType, getInvalidTextDiagnostic);
                    if (!elem) return [3 /*break*/, 3];
                    return [4 /*yield*/, elem];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    memberOffset++;
                    _a.label = 4;
                case 4:
                    i++;
                    return [3 /*break*/, 1];
                case 5: return [2 /*return*/];
            }
        });
    }
    function getElaborationElementForJsxChild(child, nameType, getInvalidTextDiagnostic) {
        switch (child.kind) {
            case 293 /* SyntaxKind.JsxExpression */:
                // child is of the type of the expression
                return { errorNode: child, innerExpression: child.expression, nameType: nameType };
            case 12 /* SyntaxKind.JsxText */:
                if (child.containsOnlyTriviaWhiteSpaces) {
                    break; // Whitespace only jsx text isn't real jsx text
                }
                // child is a string
                return { errorNode: child, innerExpression: undefined, nameType: nameType, errorMessage: getInvalidTextDiagnostic() };
            case 283 /* SyntaxKind.JsxElement */:
            case 284 /* SyntaxKind.JsxSelfClosingElement */:
            case 287 /* SyntaxKind.JsxFragment */:
                // child is of type JSX.Element
                return { errorNode: child, innerExpression: child, nameType: nameType };
            default:
                return ts_1.Debug.assertNever(child, "Found invalid jsx child");
        }
    }
    function elaborateJsxComponents(node, source, target, relation, containingMessageChain, errorOutputContainer) {
        var result = elaborateElementwise(generateJsxAttributes(node), source, target, relation, containingMessageChain, errorOutputContainer);
        var invalidTextDiagnostic;
        if ((0, ts_1.isJsxOpeningElement)(node.parent) && (0, ts_1.isJsxElement)(node.parent.parent)) {
            var containingElement = node.parent.parent;
            var childPropName = getJsxElementChildrenPropertyName(getJsxNamespaceAt(node));
            var childrenPropName = childPropName === undefined ? "children" : (0, ts_1.unescapeLeadingUnderscores)(childPropName);
            var childrenNameType = getStringLiteralType(childrenPropName);
            var childrenTargetType = getIndexedAccessType(target, childrenNameType);
            var validChildren = (0, ts_1.getSemanticJsxChildren)(containingElement.children);
            if (!(0, ts_1.length)(validChildren)) {
                return result;
            }
            var moreThanOneRealChildren = (0, ts_1.length)(validChildren) > 1;
            var arrayLikeTargetParts = void 0;
            var nonArrayLikeTargetParts = void 0;
            var iterableType = getGlobalIterableType(/*reportErrors*/ false);
            if (iterableType !== emptyGenericType) {
                var anyIterable_1 = createIterableType(anyType);
                arrayLikeTargetParts = filterType(childrenTargetType, function (t) { return isTypeAssignableTo(t, anyIterable_1); });
                nonArrayLikeTargetParts = filterType(childrenTargetType, function (t) { return !isTypeAssignableTo(t, anyIterable_1); });
            }
            else {
                arrayLikeTargetParts = filterType(childrenTargetType, isArrayOrTupleLikeType);
                nonArrayLikeTargetParts = filterType(childrenTargetType, function (t) { return !isArrayOrTupleLikeType(t); });
            }
            if (moreThanOneRealChildren) {
                if (arrayLikeTargetParts !== neverType) {
                    var realSource = createTupleType(checkJsxChildren(containingElement, 0 /* CheckMode.Normal */));
                    var children = generateJsxChildren(containingElement, getInvalidTextualChildDiagnostic);
                    result = elaborateIterableOrArrayLikeTargetElementwise(children, realSource, arrayLikeTargetParts, relation, containingMessageChain, errorOutputContainer) || result;
                }
                else if (!isTypeRelatedTo(getIndexedAccessType(source, childrenNameType), childrenTargetType, relation)) {
                    // arity mismatch
                    result = true;
                    var diag = error(containingElement.openingElement.tagName, ts_1.Diagnostics.This_JSX_tag_s_0_prop_expects_a_single_child_of_type_1_but_multiple_children_were_provided, childrenPropName, typeToString(childrenTargetType));
                    if (errorOutputContainer && errorOutputContainer.skipLogging) {
                        (errorOutputContainer.errors || (errorOutputContainer.errors = [])).push(diag);
                    }
                }
            }
            else {
                if (nonArrayLikeTargetParts !== neverType) {
                    var child = validChildren[0];
                    var elem_1 = getElaborationElementForJsxChild(child, childrenNameType, getInvalidTextualChildDiagnostic);
                    if (elem_1) {
                        result = elaborateElementwise((function () { return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, elem_1];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        }); })(), source, target, relation, containingMessageChain, errorOutputContainer) || result;
                    }
                }
                else if (!isTypeRelatedTo(getIndexedAccessType(source, childrenNameType), childrenTargetType, relation)) {
                    // arity mismatch
                    result = true;
                    var diag = error(containingElement.openingElement.tagName, ts_1.Diagnostics.This_JSX_tag_s_0_prop_expects_type_1_which_requires_multiple_children_but_only_a_single_child_was_provided, childrenPropName, typeToString(childrenTargetType));
                    if (errorOutputContainer && errorOutputContainer.skipLogging) {
                        (errorOutputContainer.errors || (errorOutputContainer.errors = [])).push(diag);
                    }
                }
            }
        }
        return result;
        function getInvalidTextualChildDiagnostic() {
            if (!invalidTextDiagnostic) {
                var tagNameText = (0, ts_1.getTextOfNode)(node.parent.tagName);
                var childPropName = getJsxElementChildrenPropertyName(getJsxNamespaceAt(node));
                var childrenPropName = childPropName === undefined ? "children" : (0, ts_1.unescapeLeadingUnderscores)(childPropName);
                var childrenTargetType = getIndexedAccessType(target, getStringLiteralType(childrenPropName));
                var diagnostic = ts_1.Diagnostics._0_components_don_t_accept_text_as_child_elements_Text_in_JSX_has_the_type_string_but_the_expected_type_of_1_is_2;
                invalidTextDiagnostic = __assign(__assign({}, diagnostic), { key: "!!ALREADY FORMATTED!!", message: (0, ts_1.formatMessage)(/*dummy*/ undefined, diagnostic, tagNameText, childrenPropName, typeToString(childrenTargetType)) });
            }
            return invalidTextDiagnostic;
        }
    }
    function generateLimitedTupleElements(node, target) {
        var len, i, elem, nameType;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    len = (0, ts_1.length)(node.elements);
                    if (!len)
                        return [2 /*return*/];
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < len)) return [3 /*break*/, 4];
                    // Skip elements which do not exist in the target - a length error on the tuple overall is likely better than an error on a mismatched index signature
                    if (isTupleLikeType(target) && !getPropertyOfType(target, ("" + i)))
                        return [3 /*break*/, 3];
                    elem = node.elements[i];
                    if ((0, ts_1.isOmittedExpression)(elem))
                        return [3 /*break*/, 3];
                    nameType = getNumberLiteralType(i);
                    return [4 /*yield*/, { errorNode: elem, innerExpression: elem, nameType: nameType }];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    }
    function elaborateArrayLiteral(node, source, target, relation, containingMessageChain, errorOutputContainer) {
        if (target.flags & (402784252 /* TypeFlags.Primitive */ | 131072 /* TypeFlags.Never */))
            return false;
        if (isTupleLikeType(source)) {
            return elaborateElementwise(generateLimitedTupleElements(node, target), source, target, relation, containingMessageChain, errorOutputContainer);
        }
        // recreate a tuple from the elements, if possible
        // Since we're re-doing the expression type, we need to reapply the contextual type
        pushContextualType(node, target, /*isCache*/ false);
        var tupleizedType = checkArrayLiteral(node, 1 /* CheckMode.Contextual */, /*forceTuple*/ true);
        popContextualType();
        if (isTupleLikeType(tupleizedType)) {
            return elaborateElementwise(generateLimitedTupleElements(node, target), tupleizedType, target, relation, containingMessageChain, errorOutputContainer);
        }
        return false;
    }
    function generateObjectLiteralElements(node) {
        var _i, _a, prop, type, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!(0, ts_1.length)(node.properties))
                        return [2 /*return*/];
                    _i = 0, _a = node.properties;
                    _c.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 8];
                    prop = _a[_i];
                    if ((0, ts_1.isSpreadAssignment)(prop))
                        return [3 /*break*/, 7];
                    type = getLiteralTypeFromProperty(getSymbolOfDeclaration(prop), 8576 /* TypeFlags.StringOrNumberLiteralOrUnique */);
                    if (!type || (type.flags & 131072 /* TypeFlags.Never */)) {
                        return [3 /*break*/, 7];
                    }
                    _b = prop.kind;
                    switch (_b) {
                        case 177 /* SyntaxKind.SetAccessor */: return [3 /*break*/, 2];
                        case 176 /* SyntaxKind.GetAccessor */: return [3 /*break*/, 2];
                        case 173 /* SyntaxKind.MethodDeclaration */: return [3 /*break*/, 2];
                        case 303 /* SyntaxKind.ShorthandPropertyAssignment */: return [3 /*break*/, 2];
                        case 302 /* SyntaxKind.PropertyAssignment */: return [3 /*break*/, 4];
                    }
                    return [3 /*break*/, 6];
                case 2: return [4 /*yield*/, { errorNode: prop.name, innerExpression: undefined, nameType: type }];
                case 3:
                    _c.sent();
                    return [3 /*break*/, 7];
                case 4: return [4 /*yield*/, { errorNode: prop.name, innerExpression: prop.initializer, nameType: type, errorMessage: (0, ts_1.isComputedNonLiteralName)(prop.name) ? ts_1.Diagnostics.Type_of_computed_property_s_value_is_0_which_is_not_assignable_to_type_1 : undefined }];
                case 5:
                    _c.sent();
                    return [3 /*break*/, 7];
                case 6:
                    ts_1.Debug.assertNever(prop);
                    _c.label = 7;
                case 7:
                    _i++;
                    return [3 /*break*/, 1];
                case 8: return [2 /*return*/];
            }
        });
    }
    function elaborateObjectLiteral(node, source, target, relation, containingMessageChain, errorOutputContainer) {
        if (target.flags & (402784252 /* TypeFlags.Primitive */ | 131072 /* TypeFlags.Never */))
            return false;
        return elaborateElementwise(generateObjectLiteralElements(node), source, target, relation, containingMessageChain, errorOutputContainer);
    }
    /**
     * This is *not* a bi-directional relationship.
     * If one needs to check both directions for comparability, use a second call to this function or 'isTypeComparableTo'.
     */
    function checkTypeComparableTo(source, target, errorNode, headMessage, containingMessageChain) {
        return checkTypeRelatedTo(source, target, comparableRelation, errorNode, headMessage, containingMessageChain);
    }
    function isSignatureAssignableTo(source, target, ignoreReturnTypes) {
        return compareSignaturesRelated(source, target, ignoreReturnTypes ? 4 /* SignatureCheckMode.IgnoreReturnTypes */ : 0 /* SignatureCheckMode.None */, /*reportErrors*/ false, 
        /*errorReporter*/ undefined, /*incompatibleErrorReporter*/ undefined, compareTypesAssignable, /*reportUnreliableMarkers*/ undefined) !== 0 /* Ternary.False */;
    }
    /**
     * Returns true if `s` is `(...args: A) => R` where `A` is `any`, `any[]`, `never`, or `never[]`, and `R` is `any` or `unknown`.
     */
    function isTopSignature(s) {
        if (!s.typeParameters && (!s.thisParameter || isTypeAny(getTypeOfParameter(s.thisParameter))) && s.parameters.length === 1 && signatureHasRestParameter(s)) {
            var paramType = getTypeOfParameter(s.parameters[0]);
            var restType = isArrayType(paramType) ? getTypeArguments(paramType)[0] : paramType;
            return !!(restType.flags & (1 /* TypeFlags.Any */ | 131072 /* TypeFlags.Never */) && getReturnTypeOfSignature(s).flags & 3 /* TypeFlags.AnyOrUnknown */);
        }
        return false;
    }
    /**
     * See signatureRelatedTo, compareSignaturesIdentical
     */
    function compareSignaturesRelated(source, target, checkMode, reportErrors, errorReporter, incompatibleErrorReporter, compareTypes, reportUnreliableMarkers) {
        // TODO (drosen): De-duplicate code between related functions.
        if (source === target) {
            return -1 /* Ternary.True */;
        }
        if (!(checkMode & 16 /* SignatureCheckMode.StrictTopSignature */ && isTopSignature(source)) && isTopSignature(target)) {
            return -1 /* Ternary.True */;
        }
        if (checkMode & 16 /* SignatureCheckMode.StrictTopSignature */ && isTopSignature(source) && !isTopSignature(target)) {
            return 0 /* Ternary.False */;
        }
        var targetCount = getParameterCount(target);
        var sourceHasMoreParameters = !hasEffectiveRestParameter(target) &&
            (checkMode & 8 /* SignatureCheckMode.StrictArity */ ? hasEffectiveRestParameter(source) || getParameterCount(source) > targetCount : getMinArgumentCount(source) > targetCount);
        if (sourceHasMoreParameters) {
            if (reportErrors && !(checkMode & 8 /* SignatureCheckMode.StrictArity */)) {
                // the second condition should be redundant, because there is no error reporting when comparing signatures by strict arity
                // since it is only done for subtype reduction
                errorReporter(ts_1.Diagnostics.Target_signature_provides_too_few_arguments_Expected_0_or_more_but_got_1, getMinArgumentCount(source), targetCount);
            }
            return 0 /* Ternary.False */;
        }
        if (source.typeParameters && source.typeParameters !== target.typeParameters) {
            target = getCanonicalSignature(target);
            source = instantiateSignatureInContextOf(source, target, /*inferenceContext*/ undefined, compareTypes);
        }
        var sourceCount = getParameterCount(source);
        var sourceRestType = getNonArrayRestType(source);
        var targetRestType = getNonArrayRestType(target);
        if (sourceRestType || targetRestType) {
            void instantiateType(sourceRestType || targetRestType, reportUnreliableMarkers);
        }
        var kind = target.declaration ? target.declaration.kind : 0 /* SyntaxKind.Unknown */;
        var strictVariance = !(checkMode & 3 /* SignatureCheckMode.Callback */) && strictFunctionTypes && kind !== 173 /* SyntaxKind.MethodDeclaration */ &&
            kind !== 172 /* SyntaxKind.MethodSignature */ && kind !== 175 /* SyntaxKind.Constructor */;
        var result = -1 /* Ternary.True */;
        var sourceThisType = getThisTypeOfSignature(source);
        if (sourceThisType && sourceThisType !== voidType) {
            var targetThisType = getThisTypeOfSignature(target);
            if (targetThisType) {
                // void sources are assignable to anything.
                var related = !strictVariance && compareTypes(sourceThisType, targetThisType, /*reportErrors*/ false)
                    || compareTypes(targetThisType, sourceThisType, reportErrors);
                if (!related) {
                    if (reportErrors) {
                        errorReporter(ts_1.Diagnostics.The_this_types_of_each_signature_are_incompatible);
                    }
                    return 0 /* Ternary.False */;
                }
                result &= related;
            }
        }
        var paramCount = sourceRestType || targetRestType ? Math.min(sourceCount, targetCount) : Math.max(sourceCount, targetCount);
        var restIndex = sourceRestType || targetRestType ? paramCount - 1 : -1;
        for (var i = 0; i < paramCount; i++) {
            var sourceType = i === restIndex ? getRestTypeAtPosition(source, i) : tryGetTypeAtPosition(source, i);
            var targetType = i === restIndex ? getRestTypeAtPosition(target, i) : tryGetTypeAtPosition(target, i);
            if (sourceType && targetType) {
                // In order to ensure that any generic type Foo<T> is at least co-variant with respect to T no matter
                // how Foo uses T, we need to relate parameters bi-variantly (given that parameters are input positions,
                // they naturally relate only contra-variantly). However, if the source and target parameters both have
                // function types with a single call signature, we know we are relating two callback parameters. In
                // that case it is sufficient to only relate the parameters of the signatures co-variantly because,
                // similar to return values, callback parameters are output positions. This means that a Promise<T>,
                // where T is used only in callback parameter positions, will be co-variant (as opposed to bi-variant)
                // with respect to T.
                var sourceSig = checkMode & 3 /* SignatureCheckMode.Callback */ ? undefined : getSingleCallSignature(getNonNullableType(sourceType));
                var targetSig = checkMode & 3 /* SignatureCheckMode.Callback */ ? undefined : getSingleCallSignature(getNonNullableType(targetType));
                var callbacks = sourceSig && targetSig && !getTypePredicateOfSignature(sourceSig) && !getTypePredicateOfSignature(targetSig) &&
                    (getTypeFacts(sourceType) & 50331648 /* TypeFacts.IsUndefinedOrNull */) === (getTypeFacts(targetType) & 50331648 /* TypeFacts.IsUndefinedOrNull */);
                var related = callbacks ?
                    compareSignaturesRelated(targetSig, sourceSig, (checkMode & 8 /* SignatureCheckMode.StrictArity */) | (strictVariance ? 2 /* SignatureCheckMode.StrictCallback */ : 1 /* SignatureCheckMode.BivariantCallback */), reportErrors, errorReporter, incompatibleErrorReporter, compareTypes, reportUnreliableMarkers) :
                    !(checkMode & 3 /* SignatureCheckMode.Callback */) && !strictVariance && compareTypes(sourceType, targetType, /*reportErrors*/ false) || compareTypes(targetType, sourceType, reportErrors);
                // With strict arity, (x: number | undefined) => void is a subtype of (x?: number | undefined) => void
                if (related && checkMode & 8 /* SignatureCheckMode.StrictArity */ && i >= getMinArgumentCount(source) && i < getMinArgumentCount(target) && compareTypes(sourceType, targetType, /*reportErrors*/ false)) {
                    related = 0 /* Ternary.False */;
                }
                if (!related) {
                    if (reportErrors) {
                        errorReporter(ts_1.Diagnostics.Types_of_parameters_0_and_1_are_incompatible, (0, ts_1.unescapeLeadingUnderscores)(getParameterNameAtPosition(source, i)), (0, ts_1.unescapeLeadingUnderscores)(getParameterNameAtPosition(target, i)));
                    }
                    return 0 /* Ternary.False */;
                }
                result &= related;
            }
        }
        if (!(checkMode & 4 /* SignatureCheckMode.IgnoreReturnTypes */)) {
            // If a signature resolution is already in-flight, skip issuing a circularity error
            // here and just use the `any` type directly
            var targetReturnType = isResolvingReturnTypeOfSignature(target) ? anyType
                : target.declaration && isJSConstructor(target.declaration) ? getDeclaredTypeOfClassOrInterface(getMergedSymbol(target.declaration.symbol))
                    : getReturnTypeOfSignature(target);
            if (targetReturnType === voidType || targetReturnType === anyType) {
                return result;
            }
            var sourceReturnType = isResolvingReturnTypeOfSignature(source) ? anyType
                : source.declaration && isJSConstructor(source.declaration) ? getDeclaredTypeOfClassOrInterface(getMergedSymbol(source.declaration.symbol))
                    : getReturnTypeOfSignature(source);
            // The following block preserves behavior forbidding boolean returning functions from being assignable to type guard returning functions
            var targetTypePredicate = getTypePredicateOfSignature(target);
            if (targetTypePredicate) {
                var sourceTypePredicate = getTypePredicateOfSignature(source);
                if (sourceTypePredicate) {
                    result &= compareTypePredicateRelatedTo(sourceTypePredicate, targetTypePredicate, reportErrors, errorReporter, compareTypes);
                }
                else if ((0, ts_1.isIdentifierTypePredicate)(targetTypePredicate)) {
                    if (reportErrors) {
                        errorReporter(ts_1.Diagnostics.Signature_0_must_be_a_type_predicate, signatureToString(source));
                    }
                    return 0 /* Ternary.False */;
                }
            }
            else {
                // When relating callback signatures, we still need to relate return types bi-variantly as otherwise
                // the containing type wouldn't be co-variant. For example, interface Foo<T> { add(cb: () => T): void }
                // wouldn't be co-variant for T without this rule.
                result &= checkMode & 1 /* SignatureCheckMode.BivariantCallback */ && compareTypes(targetReturnType, sourceReturnType, /*reportErrors*/ false) ||
                    compareTypes(sourceReturnType, targetReturnType, reportErrors);
                if (!result && reportErrors && incompatibleErrorReporter) {
                    incompatibleErrorReporter(sourceReturnType, targetReturnType);
                }
            }
        }
        return result;
    }
    function compareTypePredicateRelatedTo(source, target, reportErrors, errorReporter, compareTypes) {
        if (source.kind !== target.kind) {
            if (reportErrors) {
                errorReporter(ts_1.Diagnostics.A_this_based_type_guard_is_not_compatible_with_a_parameter_based_type_guard);
                errorReporter(ts_1.Diagnostics.Type_predicate_0_is_not_assignable_to_1, typePredicateToString(source), typePredicateToString(target));
            }
            return 0 /* Ternary.False */;
        }
        if (source.kind === 1 /* TypePredicateKind.Identifier */ || source.kind === 3 /* TypePredicateKind.AssertsIdentifier */) {
            if (source.parameterIndex !== target.parameterIndex) {
                if (reportErrors) {
                    errorReporter(ts_1.Diagnostics.Parameter_0_is_not_in_the_same_position_as_parameter_1, source.parameterName, target.parameterName);
                    errorReporter(ts_1.Diagnostics.Type_predicate_0_is_not_assignable_to_1, typePredicateToString(source), typePredicateToString(target));
                }
                return 0 /* Ternary.False */;
            }
        }
        var related = source.type === target.type ? -1 /* Ternary.True */ :
            source.type && target.type ? compareTypes(source.type, target.type, reportErrors) :
                0 /* Ternary.False */;
        if (related === 0 /* Ternary.False */ && reportErrors) {
            errorReporter(ts_1.Diagnostics.Type_predicate_0_is_not_assignable_to_1, typePredicateToString(source), typePredicateToString(target));
        }
        return related;
    }
    function isImplementationCompatibleWithOverload(implementation, overload) {
        var erasedSource = getErasedSignature(implementation);
        var erasedTarget = getErasedSignature(overload);
        // First see if the return types are compatible in either direction.
        var sourceReturnType = getReturnTypeOfSignature(erasedSource);
        var targetReturnType = getReturnTypeOfSignature(erasedTarget);
        if (targetReturnType === voidType
            || isTypeRelatedTo(targetReturnType, sourceReturnType, assignableRelation)
            || isTypeRelatedTo(sourceReturnType, targetReturnType, assignableRelation)) {
            return isSignatureAssignableTo(erasedSource, erasedTarget, /*ignoreReturnTypes*/ true);
        }
        return false;
    }
    function isEmptyResolvedType(t) {
        return t !== anyFunctionType &&
            t.properties.length === 0 &&
            t.callSignatures.length === 0 &&
            t.constructSignatures.length === 0 &&
            t.indexInfos.length === 0;
    }
    function isEmptyObjectType(type) {
        return type.flags & 524288 /* TypeFlags.Object */ ? !isGenericMappedType(type) && isEmptyResolvedType(resolveStructuredTypeMembers(type)) :
            type.flags & 67108864 /* TypeFlags.NonPrimitive */ ? true :
                type.flags & 1048576 /* TypeFlags.Union */ ? (0, ts_1.some)(type.types, isEmptyObjectType) :
                    type.flags & 2097152 /* TypeFlags.Intersection */ ? (0, ts_1.every)(type.types, isEmptyObjectType) :
                        false;
    }
    function isEmptyAnonymousObjectType(type) {
        return !!((0, ts_1.getObjectFlags)(type) & 16 /* ObjectFlags.Anonymous */ && (type.members && isEmptyResolvedType(type) ||
            type.symbol && type.symbol.flags & 2048 /* SymbolFlags.TypeLiteral */ && getMembersOfSymbol(type.symbol).size === 0));
    }
    function isUnknownLikeUnionType(type) {
        if (strictNullChecks && type.flags & 1048576 /* TypeFlags.Union */) {
            if (!(type.objectFlags & 33554432 /* ObjectFlags.IsUnknownLikeUnionComputed */)) {
                var types = type.types;
                type.objectFlags |= 33554432 /* ObjectFlags.IsUnknownLikeUnionComputed */ | (types.length >= 3 && types[0].flags & 32768 /* TypeFlags.Undefined */ &&
                    types[1].flags & 65536 /* TypeFlags.Null */ && (0, ts_1.some)(types, isEmptyAnonymousObjectType) ? 67108864 /* ObjectFlags.IsUnknownLikeUnion */ : 0);
            }
            return !!(type.objectFlags & 67108864 /* ObjectFlags.IsUnknownLikeUnion */);
        }
        return false;
    }
    function containsUndefinedType(type) {
        return !!((type.flags & 1048576 /* TypeFlags.Union */ ? type.types[0] : type).flags & 32768 /* TypeFlags.Undefined */);
    }
    function isStringIndexSignatureOnlyType(type) {
        return type.flags & 524288 /* TypeFlags.Object */ && !isGenericMappedType(type) && getPropertiesOfType(type).length === 0 && getIndexInfosOfType(type).length === 1 && !!getIndexInfoOfType(type, stringType) ||
            type.flags & 3145728 /* TypeFlags.UnionOrIntersection */ && (0, ts_1.every)(type.types, isStringIndexSignatureOnlyType) ||
            false;
    }
    function isEnumTypeRelatedTo(source, target, errorReporter) {
        var sourceSymbol = source.flags & 8 /* SymbolFlags.EnumMember */ ? getParentOfSymbol(source) : source;
        var targetSymbol = target.flags & 8 /* SymbolFlags.EnumMember */ ? getParentOfSymbol(target) : target;
        if (sourceSymbol === targetSymbol) {
            return true;
        }
        if (sourceSymbol.escapedName !== targetSymbol.escapedName || !(sourceSymbol.flags & 256 /* SymbolFlags.RegularEnum */) || !(targetSymbol.flags & 256 /* SymbolFlags.RegularEnum */)) {
            return false;
        }
        var id = getSymbolId(sourceSymbol) + "," + getSymbolId(targetSymbol);
        var entry = enumRelation.get(id);
        if (entry !== undefined && !(!(entry & 4 /* RelationComparisonResult.Reported */) && entry & 2 /* RelationComparisonResult.Failed */ && errorReporter)) {
            return !!(entry & 1 /* RelationComparisonResult.Succeeded */);
        }
        var targetEnumType = getTypeOfSymbol(targetSymbol);
        for (var _i = 0, _a = getPropertiesOfType(getTypeOfSymbol(sourceSymbol)); _i < _a.length; _i++) {
            var property = _a[_i];
            if (property.flags & 8 /* SymbolFlags.EnumMember */) {
                var targetProperty = getPropertyOfType(targetEnumType, property.escapedName);
                if (!targetProperty || !(targetProperty.flags & 8 /* SymbolFlags.EnumMember */)) {
                    if (errorReporter) {
                        errorReporter(ts_1.Diagnostics.Property_0_is_missing_in_type_1, (0, ts_1.symbolName)(property), typeToString(getDeclaredTypeOfSymbol(targetSymbol), /*enclosingDeclaration*/ undefined, 64 /* TypeFormatFlags.UseFullyQualifiedType */));
                        enumRelation.set(id, 2 /* RelationComparisonResult.Failed */ | 4 /* RelationComparisonResult.Reported */);
                    }
                    else {
                        enumRelation.set(id, 2 /* RelationComparisonResult.Failed */);
                    }
                    return false;
                }
            }
        }
        enumRelation.set(id, 1 /* RelationComparisonResult.Succeeded */);
        return true;
    }
    function isSimpleTypeRelatedTo(source, target, relation, errorReporter) {
        var s = source.flags;
        var t = target.flags;
        if (t & 1 /* TypeFlags.Any */ || s & 131072 /* TypeFlags.Never */ || source === wildcardType)
            return true;
        if (t & 2 /* TypeFlags.Unknown */ && !(relation === strictSubtypeRelation && s & 1 /* TypeFlags.Any */))
            return true;
        if (t & 131072 /* TypeFlags.Never */)
            return false;
        if (s & 402653316 /* TypeFlags.StringLike */ && t & 4 /* TypeFlags.String */)
            return true;
        if (s & 128 /* TypeFlags.StringLiteral */ && s & 1024 /* TypeFlags.EnumLiteral */ &&
            t & 128 /* TypeFlags.StringLiteral */ && !(t & 1024 /* TypeFlags.EnumLiteral */) &&
            source.value === target.value)
            return true;
        if (s & 296 /* TypeFlags.NumberLike */ && t & 8 /* TypeFlags.Number */)
            return true;
        if (s & 256 /* TypeFlags.NumberLiteral */ && s & 1024 /* TypeFlags.EnumLiteral */ &&
            t & 256 /* TypeFlags.NumberLiteral */ && !(t & 1024 /* TypeFlags.EnumLiteral */) &&
            source.value === target.value)
            return true;
        if (s & 2112 /* TypeFlags.BigIntLike */ && t & 64 /* TypeFlags.BigInt */)
            return true;
        if (s & 528 /* TypeFlags.BooleanLike */ && t & 16 /* TypeFlags.Boolean */)
            return true;
        if (s & 12288 /* TypeFlags.ESSymbolLike */ && t & 4096 /* TypeFlags.ESSymbol */)
            return true;
        if (s & 32 /* TypeFlags.Enum */ && t & 32 /* TypeFlags.Enum */ && source.symbol.escapedName === target.symbol.escapedName &&
            isEnumTypeRelatedTo(source.symbol, target.symbol, errorReporter))
            return true;
        if (s & 1024 /* TypeFlags.EnumLiteral */ && t & 1024 /* TypeFlags.EnumLiteral */) {
            if (s & 1048576 /* TypeFlags.Union */ && t & 1048576 /* TypeFlags.Union */ && isEnumTypeRelatedTo(source.symbol, target.symbol, errorReporter))
                return true;
            if (s & 2944 /* TypeFlags.Literal */ && t & 2944 /* TypeFlags.Literal */ && source.value === target.value &&
                isEnumTypeRelatedTo(source.symbol, target.symbol, errorReporter))
                return true;
        }
        // In non-strictNullChecks mode, `undefined` and `null` are assignable to anything except `never`.
        // Since unions and intersections may reduce to `never`, we exclude them here.
        if (s & 32768 /* TypeFlags.Undefined */ && (!strictNullChecks && !(t & 3145728 /* TypeFlags.UnionOrIntersection */) || t & (32768 /* TypeFlags.Undefined */ | 16384 /* TypeFlags.Void */)))
            return true;
        if (s & 65536 /* TypeFlags.Null */ && (!strictNullChecks && !(t & 3145728 /* TypeFlags.UnionOrIntersection */) || t & 65536 /* TypeFlags.Null */))
            return true;
        if (s & 524288 /* TypeFlags.Object */ && t & 67108864 /* TypeFlags.NonPrimitive */ && !(relation === strictSubtypeRelation && isEmptyAnonymousObjectType(source) && !((0, ts_1.getObjectFlags)(source) & 8192 /* ObjectFlags.FreshLiteral */)))
            return true;
        if (relation === assignableRelation || relation === comparableRelation) {
            if (s & 1 /* TypeFlags.Any */)
                return true;
            // Type number is assignable to any computed numeric enum type or any numeric enum literal type, and
            // a numeric literal type is assignable any computed numeric enum type or any numeric enum literal type
            // with a matching value. These rules exist such that enums can be used for bit-flag purposes.
            if (s & 8 /* TypeFlags.Number */ && (t & 32 /* TypeFlags.Enum */ || t & 256 /* TypeFlags.NumberLiteral */ && t & 1024 /* TypeFlags.EnumLiteral */))
                return true;
            if (s & 256 /* TypeFlags.NumberLiteral */ && !(s & 1024 /* TypeFlags.EnumLiteral */) && (t & 32 /* TypeFlags.Enum */ ||
                t & 256 /* TypeFlags.NumberLiteral */ && t & 1024 /* TypeFlags.EnumLiteral */ &&
                    source.value === target.value))
                return true;
            // Anything is assignable to a union containing undefined, null, and {}
            if (isUnknownLikeUnionType(target))
                return true;
        }
        return false;
    }
    function isTypeRelatedTo(source, target, relation) {
        if (isFreshLiteralType(source)) {
            source = source.regularType;
        }
        if (isFreshLiteralType(target)) {
            target = target.regularType;
        }
        if (source === target) {
            return true;
        }
        if (relation !== identityRelation) {
            if (relation === comparableRelation && !(target.flags & 131072 /* TypeFlags.Never */) && isSimpleTypeRelatedTo(target, source, relation) || isSimpleTypeRelatedTo(source, target, relation)) {
                return true;
            }
        }
        else if (!((source.flags | target.flags) & (3145728 /* TypeFlags.UnionOrIntersection */ | 8388608 /* TypeFlags.IndexedAccess */ | 16777216 /* TypeFlags.Conditional */ | 33554432 /* TypeFlags.Substitution */))) {
            // We have excluded types that may simplify to other forms, so types must have identical flags
            if (source.flags !== target.flags)
                return false;
            if (source.flags & 67358815 /* TypeFlags.Singleton */)
                return true;
        }
        if (source.flags & 524288 /* TypeFlags.Object */ && target.flags & 524288 /* TypeFlags.Object */) {
            var related = relation.get(getRelationKey(source, target, 0 /* IntersectionState.None */, relation, /*ignoreConstraints*/ false));
            if (related !== undefined) {
                return !!(related & 1 /* RelationComparisonResult.Succeeded */);
            }
        }
        if (source.flags & 469499904 /* TypeFlags.StructuredOrInstantiable */ || target.flags & 469499904 /* TypeFlags.StructuredOrInstantiable */) {
            return checkTypeRelatedTo(source, target, relation, /*errorNode*/ undefined);
        }
        return false;
    }
    function isIgnoredJsxProperty(source, sourceProp) {
        return (0, ts_1.getObjectFlags)(source) & 2048 /* ObjectFlags.JsxAttributes */ && isHyphenatedJsxName(sourceProp.escapedName);
    }
    function getNormalizedType(type, writing) {
        while (true) {
            var t = isFreshLiteralType(type) ? type.regularType :
                isGenericTupleType(type) ? getNormalizedTupleType(type, writing) :
                    (0, ts_1.getObjectFlags)(type) & 4 /* ObjectFlags.Reference */ ? type.node ? createTypeReference(type.target, getTypeArguments(type)) : getSingleBaseForNonAugmentingSubtype(type) || type :
                        type.flags & 3145728 /* TypeFlags.UnionOrIntersection */ ? getNormalizedUnionOrIntersectionType(type, writing) :
                            type.flags & 33554432 /* TypeFlags.Substitution */ ? writing ? type.baseType : getSubstitutionIntersection(type) :
                                type.flags & 25165824 /* TypeFlags.Simplifiable */ ? getSimplifiedType(type, writing) :
                                    type;
            if (t === type)
                return t;
            type = t;
        }
    }
    function getNormalizedUnionOrIntersectionType(type, writing) {
        var reduced = getReducedType(type);
        if (reduced !== type) {
            return reduced;
        }
        if (type.flags & 2097152 /* TypeFlags.Intersection */ && (0, ts_1.some)(type.types, isEmptyAnonymousObjectType)) {
            var normalizedTypes = (0, ts_1.sameMap)(type.types, function (t) { return getNormalizedType(t, writing); });
            if (normalizedTypes !== type.types) {
                return getIntersectionType(normalizedTypes);
            }
        }
        return type;
    }
    function getNormalizedTupleType(type, writing) {
        var elements = getElementTypes(type);
        var normalizedElements = (0, ts_1.sameMap)(elements, function (t) { return t.flags & 25165824 /* TypeFlags.Simplifiable */ ? getSimplifiedType(t, writing) : t; });
        return elements !== normalizedElements ? createNormalizedTupleType(type.target, normalizedElements) : type;
    }
    /**
     * Checks if 'source' is related to 'target' (e.g.: is a assignable to).
     * @param source The left-hand-side of the relation.
     * @param target The right-hand-side of the relation.
     * @param relation The relation considered. One of 'identityRelation', 'subtypeRelation', 'assignableRelation', or 'comparableRelation'.
     * Used as both to determine which checks are performed and as a cache of previously computed results.
     * @param errorNode The suggested node upon which all errors will be reported, if defined. This may or may not be the actual node used.
     * @param headMessage If the error chain should be prepended by a head message, then headMessage will be used.
     * @param containingMessageChain A chain of errors to prepend any new errors found.
     * @param errorOutputContainer Return the diagnostic. Do not log if 'skipLogging' is truthy.
     */
    function checkTypeRelatedTo(source, target, relation, errorNode, headMessage, containingMessageChain, errorOutputContainer) {
        var errorInfo;
        var relatedInfo;
        var maybeKeys;
        var sourceStack;
        var targetStack;
        var maybeCount = 0;
        var sourceDepth = 0;
        var targetDepth = 0;
        var expandingFlags = 0 /* ExpandingFlags.None */;
        var overflow = false;
        var overrideNextErrorInfo = 0; // How many `reportRelationError` calls should be skipped in the elaboration pyramid
        var lastSkippedInfo;
        var incompatibleStack;
        ts_1.Debug.assert(relation !== identityRelation || !errorNode, "no error reporting in identity checking");
        var result = isRelatedTo(source, target, 3 /* RecursionFlags.Both */, /*reportErrors*/ !!errorNode, headMessage);
        if (incompatibleStack) {
            reportIncompatibleStack();
        }
        if (overflow) {
            ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.instant("checkTypes" /* tracing.Phase.CheckTypes */, "checkTypeRelatedTo_DepthLimit", { sourceId: source.id, targetId: target.id, depth: sourceDepth, targetDepth: targetDepth });
            var diag = error(errorNode || currentNode, ts_1.Diagnostics.Excessive_stack_depth_comparing_types_0_and_1, typeToString(source), typeToString(target));
            if (errorOutputContainer) {
                (errorOutputContainer.errors || (errorOutputContainer.errors = [])).push(diag);
            }
        }
        else if (errorInfo) {
            if (containingMessageChain) {
                var chain = containingMessageChain();
                if (chain) {
                    (0, ts_1.concatenateDiagnosticMessageChains)(chain, errorInfo);
                    errorInfo = chain;
                }
            }
            var relatedInformation = void 0;
            // Check if we should issue an extra diagnostic to produce a quickfix for a slightly incorrect import statement
            if (headMessage && errorNode && !result && source.symbol) {
                var links = getSymbolLinks(source.symbol);
                if (links.originatingImport && !(0, ts_1.isImportCall)(links.originatingImport)) {
                    var helpfulRetry = checkTypeRelatedTo(getTypeOfSymbol(links.target), target, relation, /*errorNode*/ undefined);
                    if (helpfulRetry) {
                        // Likely an incorrect import. Issue a helpful diagnostic to produce a quickfix to change the import
                        var diag_1 = (0, ts_1.createDiagnosticForNode)(links.originatingImport, ts_1.Diagnostics.Type_originates_at_this_import_A_namespace_style_import_cannot_be_called_or_constructed_and_will_cause_a_failure_at_runtime_Consider_using_a_default_import_or_import_require_here_instead);
                        relatedInformation = (0, ts_1.append)(relatedInformation, diag_1); // Cause the error to appear with the error that triggered it
                    }
                }
            }
            var diag = (0, ts_1.createDiagnosticForNodeFromMessageChain)((0, ts_1.getSourceFileOfNode)(errorNode), errorNode, errorInfo, relatedInformation);
            if (relatedInfo) {
                ts_1.addRelatedInfo.apply(void 0, __spreadArray([diag], relatedInfo, false));
            }
            if (errorOutputContainer) {
                (errorOutputContainer.errors || (errorOutputContainer.errors = [])).push(diag);
            }
            if (!errorOutputContainer || !errorOutputContainer.skipLogging) {
                diagnostics.add(diag);
            }
        }
        if (errorNode && errorOutputContainer && errorOutputContainer.skipLogging && result === 0 /* Ternary.False */) {
            ts_1.Debug.assert(!!errorOutputContainer.errors, "missed opportunity to interact with error.");
        }
        return result !== 0 /* Ternary.False */;
        function resetErrorInfo(saved) {
            errorInfo = saved.errorInfo;
            lastSkippedInfo = saved.lastSkippedInfo;
            incompatibleStack = saved.incompatibleStack;
            overrideNextErrorInfo = saved.overrideNextErrorInfo;
            relatedInfo = saved.relatedInfo;
        }
        function captureErrorCalculationState() {
            return {
                errorInfo: errorInfo,
                lastSkippedInfo: lastSkippedInfo,
                incompatibleStack: incompatibleStack === null || incompatibleStack === void 0 ? void 0 : incompatibleStack.slice(),
                overrideNextErrorInfo: overrideNextErrorInfo,
                relatedInfo: relatedInfo === null || relatedInfo === void 0 ? void 0 : relatedInfo.slice(),
            };
        }
        function reportIncompatibleError(message) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            overrideNextErrorInfo++; // Suppress the next relation error
            lastSkippedInfo = undefined; // Reset skipped info cache
            (incompatibleStack || (incompatibleStack = [])).push(__spreadArray([message], args, true));
        }
        function reportIncompatibleStack() {
            var stack = incompatibleStack || [];
            incompatibleStack = undefined;
            var info = lastSkippedInfo;
            lastSkippedInfo = undefined;
            if (stack.length === 1) {
                reportError.apply(void 0, stack[0]);
                if (info) {
                    // Actually do the last relation error
                    reportRelationError.apply(void 0, __spreadArray([/*message*/ undefined], info, false));
                }
                return;
            }
            // The first error will be the innermost, while the last will be the outermost - so by popping off the end,
            // we can build from left to right
            var path = "";
            var secondaryRootErrors = [];
            while (stack.length) {
                var _a = stack.pop(), msg = _a[0], args = _a.slice(1);
                switch (msg.code) {
                    case ts_1.Diagnostics.Types_of_property_0_are_incompatible.code: {
                        // Parenthesize a `new` if there is one
                        if (path.indexOf("new ") === 0) {
                            path = "(".concat(path, ")");
                        }
                        var str = "" + args[0];
                        // If leading, just print back the arg (irrespective of if it's a valid identifier)
                        if (path.length === 0) {
                            path = "".concat(str);
                        }
                        // Otherwise write a dotted name if possible
                        else if ((0, ts_1.isIdentifierText)(str, (0, ts_1.getEmitScriptTarget)(compilerOptions))) {
                            path = "".concat(path, ".").concat(str);
                        }
                        // Failing that, check if the name is already a computed name
                        else if (str[0] === "[" && str[str.length - 1] === "]") {
                            path = "".concat(path).concat(str);
                        }
                        // And finally write out a computed name as a last resort
                        else {
                            path = "".concat(path, "[").concat(str, "]");
                        }
                        break;
                    }
                    case ts_1.Diagnostics.Call_signature_return_types_0_and_1_are_incompatible.code:
                    case ts_1.Diagnostics.Construct_signature_return_types_0_and_1_are_incompatible.code:
                    case ts_1.Diagnostics.Call_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code:
                    case ts_1.Diagnostics.Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code: {
                        if (path.length === 0) {
                            // Don't flatten signature compatability errors at the start of a chain - instead prefer
                            // to unify (the with no arguments bit is excessive for printback) and print them back
                            var mappedMsg = msg;
                            if (msg.code === ts_1.Diagnostics.Call_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code) {
                                mappedMsg = ts_1.Diagnostics.Call_signature_return_types_0_and_1_are_incompatible;
                            }
                            else if (msg.code === ts_1.Diagnostics.Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code) {
                                mappedMsg = ts_1.Diagnostics.Construct_signature_return_types_0_and_1_are_incompatible;
                            }
                            secondaryRootErrors.unshift([mappedMsg, args[0], args[1]]);
                        }
                        else {
                            var prefix = (msg.code === ts_1.Diagnostics.Construct_signature_return_types_0_and_1_are_incompatible.code ||
                                msg.code === ts_1.Diagnostics.Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code)
                                ? "new "
                                : "";
                            var params = (msg.code === ts_1.Diagnostics.Call_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code ||
                                msg.code === ts_1.Diagnostics.Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code)
                                ? ""
                                : "...";
                            path = "".concat(prefix).concat(path, "(").concat(params, ")");
                        }
                        break;
                    }
                    case ts_1.Diagnostics.Type_at_position_0_in_source_is_not_compatible_with_type_at_position_1_in_target.code: {
                        secondaryRootErrors.unshift([ts_1.Diagnostics.Type_at_position_0_in_source_is_not_compatible_with_type_at_position_1_in_target, args[0], args[1]]);
                        break;
                    }
                    case ts_1.Diagnostics.Type_at_positions_0_through_1_in_source_is_not_compatible_with_type_at_position_2_in_target.code: {
                        secondaryRootErrors.unshift([ts_1.Diagnostics.Type_at_positions_0_through_1_in_source_is_not_compatible_with_type_at_position_2_in_target, args[0], args[1], args[2]]);
                        break;
                    }
                    default:
                        return ts_1.Debug.fail("Unhandled Diagnostic: ".concat(msg.code));
                }
            }
            if (path) {
                reportError(path[path.length - 1] === ")"
                    ? ts_1.Diagnostics.The_types_returned_by_0_are_incompatible_between_these_types
                    : ts_1.Diagnostics.The_types_of_0_are_incompatible_between_these_types, path);
            }
            else {
                // Remove the innermost secondary error as it will duplicate the error already reported by `reportRelationError` on entry
                secondaryRootErrors.shift();
            }
            for (var _i = 0, secondaryRootErrors_1 = secondaryRootErrors; _i < secondaryRootErrors_1.length; _i++) {
                var _b = secondaryRootErrors_1[_i], msg = _b[0], args = _b.slice(1);
                var originalValue = msg.elidedInCompatabilityPyramid;
                msg.elidedInCompatabilityPyramid = false; // Temporarily override elision to ensure error is reported
                reportError.apply(void 0, __spreadArray([msg], args, false));
                msg.elidedInCompatabilityPyramid = originalValue;
            }
            if (info) {
                // Actually do the last relation error
                reportRelationError.apply(void 0, __spreadArray([/*message*/ undefined], info, false));
            }
        }
        function reportError(message) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            ts_1.Debug.assert(!!errorNode);
            if (incompatibleStack)
                reportIncompatibleStack();
            if (message.elidedInCompatabilityPyramid)
                return;
            errorInfo = ts_1.chainDiagnosticMessages.apply(void 0, __spreadArray([errorInfo, message], args, false));
        }
        function associateRelatedInfo(info) {
            ts_1.Debug.assert(!!errorInfo);
            if (!relatedInfo) {
                relatedInfo = [info];
            }
            else {
                relatedInfo.push(info);
            }
        }
        function reportRelationError(message, source, target) {
            if (incompatibleStack)
                reportIncompatibleStack();
            var _a = getTypeNamesForErrorDisplay(source, target), sourceType = _a[0], targetType = _a[1];
            var generalizedSource = source;
            var generalizedSourceType = sourceType;
            if (isLiteralType(source) && !typeCouldHaveTopLevelSingletonTypes(target)) {
                generalizedSource = getBaseTypeOfLiteralType(source);
                ts_1.Debug.assert(!isTypeAssignableTo(generalizedSource, target), "generalized source shouldn't be assignable");
                generalizedSourceType = getTypeNameForErrorDisplay(generalizedSource);
            }
            // If `target` is of indexed access type (And `source` it is not), we use the object type of `target` for better error reporting
            var targetFlags = target.flags & 8388608 /* TypeFlags.IndexedAccess */ && !(source.flags & 8388608 /* TypeFlags.IndexedAccess */) ?
                target.objectType.flags :
                target.flags;
            if (targetFlags & 262144 /* TypeFlags.TypeParameter */ && target !== markerSuperTypeForCheck && target !== markerSubTypeForCheck) {
                var constraint = getBaseConstraintOfType(target);
                var needsOriginalSource = void 0;
                if (constraint && (isTypeAssignableTo(generalizedSource, constraint) || (needsOriginalSource = isTypeAssignableTo(source, constraint)))) {
                    reportError(ts_1.Diagnostics._0_is_assignable_to_the_constraint_of_type_1_but_1_could_be_instantiated_with_a_different_subtype_of_constraint_2, needsOriginalSource ? sourceType : generalizedSourceType, targetType, typeToString(constraint));
                }
                else {
                    errorInfo = undefined;
                    reportError(ts_1.Diagnostics._0_could_be_instantiated_with_an_arbitrary_type_which_could_be_unrelated_to_1, targetType, generalizedSourceType);
                }
            }
            if (!message) {
                if (relation === comparableRelation) {
                    message = ts_1.Diagnostics.Type_0_is_not_comparable_to_type_1;
                }
                else if (sourceType === targetType) {
                    message = ts_1.Diagnostics.Type_0_is_not_assignable_to_type_1_Two_different_types_with_this_name_exist_but_they_are_unrelated;
                }
                else if (exactOptionalPropertyTypes && getExactOptionalUnassignableProperties(source, target).length) {
                    message = ts_1.Diagnostics.Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_types_of_the_target_s_properties;
                }
                else {
                    if (source.flags & 128 /* TypeFlags.StringLiteral */ && target.flags & 1048576 /* TypeFlags.Union */) {
                        var suggestedType = getSuggestedTypeForNonexistentStringLiteralType(source, target);
                        if (suggestedType) {
                            reportError(ts_1.Diagnostics.Type_0_is_not_assignable_to_type_1_Did_you_mean_2, generalizedSourceType, targetType, typeToString(suggestedType));
                            return;
                        }
                    }
                    message = ts_1.Diagnostics.Type_0_is_not_assignable_to_type_1;
                }
            }
            else if (message === ts_1.Diagnostics.Argument_of_type_0_is_not_assignable_to_parameter_of_type_1
                && exactOptionalPropertyTypes
                && getExactOptionalUnassignableProperties(source, target).length) {
                message = ts_1.Diagnostics.Argument_of_type_0_is_not_assignable_to_parameter_of_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_types_of_the_target_s_properties;
            }
            reportError(message, generalizedSourceType, targetType);
        }
        function tryElaborateErrorsForPrimitivesAndObjects(source, target) {
            var sourceType = symbolValueDeclarationIsContextSensitive(source.symbol) ? typeToString(source, source.symbol.valueDeclaration) : typeToString(source);
            var targetType = symbolValueDeclarationIsContextSensitive(target.symbol) ? typeToString(target, target.symbol.valueDeclaration) : typeToString(target);
            if ((globalStringType === source && stringType === target) ||
                (globalNumberType === source && numberType === target) ||
                (globalBooleanType === source && booleanType === target) ||
                (getGlobalESSymbolType() === source && esSymbolType === target)) {
                reportError(ts_1.Diagnostics._0_is_a_primitive_but_1_is_a_wrapper_object_Prefer_using_0_when_possible, targetType, sourceType);
            }
        }
        /**
         * Try and elaborate array and tuple errors. Returns false
         * if we have found an elaboration, or we should ignore
         * any other elaborations when relating the `source` and
         * `target` types.
         */
        function tryElaborateArrayLikeErrors(source, target, reportErrors) {
            /**
             * The spec for elaboration is:
             * - If the source is a readonly tuple and the target is a mutable array or tuple, elaborate on mutability and skip property elaborations.
             * - If the source is a tuple then skip property elaborations if the target is an array or tuple.
             * - If the source is a readonly array and the target is a mutable array or tuple, elaborate on mutability and skip property elaborations.
             * - If the source an array then skip property elaborations if the target is a tuple.
             */
            if (isTupleType(source)) {
                if (source.target.readonly && isMutableArrayOrTuple(target)) {
                    if (reportErrors) {
                        reportError(ts_1.Diagnostics.The_type_0_is_readonly_and_cannot_be_assigned_to_the_mutable_type_1, typeToString(source), typeToString(target));
                    }
                    return false;
                }
                return isArrayOrTupleType(target);
            }
            if (isReadonlyArrayType(source) && isMutableArrayOrTuple(target)) {
                if (reportErrors) {
                    reportError(ts_1.Diagnostics.The_type_0_is_readonly_and_cannot_be_assigned_to_the_mutable_type_1, typeToString(source), typeToString(target));
                }
                return false;
            }
            if (isTupleType(target)) {
                return isArrayType(source);
            }
            return true;
        }
        function isRelatedToWorker(source, target, reportErrors) {
            return isRelatedTo(source, target, 3 /* RecursionFlags.Both */, reportErrors);
        }
        /**
         * Compare two types and return
         * * Ternary.True if they are related with no assumptions,
         * * Ternary.Maybe if they are related with assumptions of other relationships, or
         * * Ternary.False if they are not related.
         */
        function isRelatedTo(originalSource, originalTarget, recursionFlags, reportErrors, headMessage, intersectionState) {
            if (recursionFlags === void 0) { recursionFlags = 3 /* RecursionFlags.Both */; }
            if (reportErrors === void 0) { reportErrors = false; }
            if (intersectionState === void 0) { intersectionState = 0 /* IntersectionState.None */; }
            if (originalSource === originalTarget)
                return -1 /* Ternary.True */;
            // Before normalization: if `source` is type an object type, and `target` is primitive,
            // skip all the checks we don't need and just return `isSimpleTypeRelatedTo` result
            if (originalSource.flags & 524288 /* TypeFlags.Object */ && originalTarget.flags & 402784252 /* TypeFlags.Primitive */) {
                if (relation === comparableRelation && !(originalTarget.flags & 131072 /* TypeFlags.Never */) && isSimpleTypeRelatedTo(originalTarget, originalSource, relation) ||
                    isSimpleTypeRelatedTo(originalSource, originalTarget, relation, reportErrors ? reportError : undefined)) {
                    return -1 /* Ternary.True */;
                }
                if (reportErrors) {
                    reportErrorResults(originalSource, originalTarget, originalSource, originalTarget, headMessage);
                }
                return 0 /* Ternary.False */;
            }
            // Normalize the source and target types: Turn fresh literal types into regular literal types,
            // turn deferred type references into regular type references, simplify indexed access and
            // conditional types, and resolve substitution types to either the substitution (on the source
            // side) or the type variable (on the target side).
            var source = getNormalizedType(originalSource, /*writing*/ false);
            var target = getNormalizedType(originalTarget, /*writing*/ true);
            if (source === target)
                return -1 /* Ternary.True */;
            if (relation === identityRelation) {
                if (source.flags !== target.flags)
                    return 0 /* Ternary.False */;
                if (source.flags & 67358815 /* TypeFlags.Singleton */)
                    return -1 /* Ternary.True */;
                traceUnionsOrIntersectionsTooLarge(source, target);
                return recursiveTypeRelatedTo(source, target, /*reportErrors*/ false, 0 /* IntersectionState.None */, recursionFlags);
            }
            // We fastpath comparing a type parameter to exactly its constraint, as this is _super_ common,
            // and otherwise, for type parameters in large unions, causes us to need to compare the union to itself,
            // as we break down the _target_ union first, _then_ get the source constraint - so for every
            // member of the target, we attempt to find a match in the source. This avoids that in cases where
            // the target is exactly the constraint.
            if (source.flags & 262144 /* TypeFlags.TypeParameter */ && getConstraintOfType(source) === target) {
                return -1 /* Ternary.True */;
            }
            // See if we're relating a definitely non-nullable type to a union that includes null and/or undefined
            // plus a single non-nullable type. If so, remove null and/or undefined from the target type.
            if (source.flags & 470302716 /* TypeFlags.DefinitelyNonNullable */ && target.flags & 1048576 /* TypeFlags.Union */) {
                var types = target.types;
                var candidate = types.length === 2 && types[0].flags & 98304 /* TypeFlags.Nullable */ ? types[1] :
                    types.length === 3 && types[0].flags & 98304 /* TypeFlags.Nullable */ && types[1].flags & 98304 /* TypeFlags.Nullable */ ? types[2] :
                        undefined;
                if (candidate && !(candidate.flags & 98304 /* TypeFlags.Nullable */)) {
                    target = getNormalizedType(candidate, /*writing*/ true);
                    if (source === target)
                        return -1 /* Ternary.True */;
                }
            }
            if (relation === comparableRelation && !(target.flags & 131072 /* TypeFlags.Never */) && isSimpleTypeRelatedTo(target, source, relation) ||
                isSimpleTypeRelatedTo(source, target, relation, reportErrors ? reportError : undefined))
                return -1 /* Ternary.True */;
            if (source.flags & 469499904 /* TypeFlags.StructuredOrInstantiable */ || target.flags & 469499904 /* TypeFlags.StructuredOrInstantiable */) {
                var isPerformingExcessPropertyChecks = !(intersectionState & 2 /* IntersectionState.Target */) && (isObjectLiteralType(source) && (0, ts_1.getObjectFlags)(source) & 8192 /* ObjectFlags.FreshLiteral */);
                if (isPerformingExcessPropertyChecks) {
                    if (hasExcessProperties(source, target, reportErrors)) {
                        if (reportErrors) {
                            reportRelationError(headMessage, source, originalTarget.aliasSymbol ? originalTarget : target);
                        }
                        return 0 /* Ternary.False */;
                    }
                }
                var isPerformingCommonPropertyChecks = (relation !== comparableRelation || isUnitType(source)) &&
                    !(intersectionState & 2 /* IntersectionState.Target */) &&
                    source.flags & (402784252 /* TypeFlags.Primitive */ | 524288 /* TypeFlags.Object */ | 2097152 /* TypeFlags.Intersection */) && source !== globalObjectType &&
                    target.flags & (524288 /* TypeFlags.Object */ | 2097152 /* TypeFlags.Intersection */) && isWeakType(target) &&
                    (getPropertiesOfType(source).length > 0 || typeHasCallOrConstructSignatures(source));
                var isComparingJsxAttributes = !!((0, ts_1.getObjectFlags)(source) & 2048 /* ObjectFlags.JsxAttributes */);
                if (isPerformingCommonPropertyChecks && !hasCommonProperties(source, target, isComparingJsxAttributes)) {
                    if (reportErrors) {
                        var sourceString = typeToString(originalSource.aliasSymbol ? originalSource : source);
                        var targetString = typeToString(originalTarget.aliasSymbol ? originalTarget : target);
                        var calls = getSignaturesOfType(source, 0 /* SignatureKind.Call */);
                        var constructs = getSignaturesOfType(source, 1 /* SignatureKind.Construct */);
                        if (calls.length > 0 && isRelatedTo(getReturnTypeOfSignature(calls[0]), target, 1 /* RecursionFlags.Source */, /*reportErrors*/ false) ||
                            constructs.length > 0 && isRelatedTo(getReturnTypeOfSignature(constructs[0]), target, 1 /* RecursionFlags.Source */, /*reportErrors*/ false)) {
                            reportError(ts_1.Diagnostics.Value_of_type_0_has_no_properties_in_common_with_type_1_Did_you_mean_to_call_it, sourceString, targetString);
                        }
                        else {
                            reportError(ts_1.Diagnostics.Type_0_has_no_properties_in_common_with_type_1, sourceString, targetString);
                        }
                    }
                    return 0 /* Ternary.False */;
                }
                traceUnionsOrIntersectionsTooLarge(source, target);
                var skipCaching = source.flags & 1048576 /* TypeFlags.Union */ && source.types.length < 4 && !(target.flags & 1048576 /* TypeFlags.Union */) ||
                    target.flags & 1048576 /* TypeFlags.Union */ && target.types.length < 4 && !(source.flags & 469499904 /* TypeFlags.StructuredOrInstantiable */);
                var result_3 = skipCaching ?
                    unionOrIntersectionRelatedTo(source, target, reportErrors, intersectionState) :
                    recursiveTypeRelatedTo(source, target, reportErrors, intersectionState, recursionFlags);
                if (result_3) {
                    return result_3;
                }
            }
            if (reportErrors) {
                reportErrorResults(originalSource, originalTarget, source, target, headMessage);
            }
            return 0 /* Ternary.False */;
        }
        function reportErrorResults(originalSource, originalTarget, source, target, headMessage) {
            var _a, _b;
            var sourceHasBase = !!getSingleBaseForNonAugmentingSubtype(originalSource);
            var targetHasBase = !!getSingleBaseForNonAugmentingSubtype(originalTarget);
            source = (originalSource.aliasSymbol || sourceHasBase) ? originalSource : source;
            target = (originalTarget.aliasSymbol || targetHasBase) ? originalTarget : target;
            var maybeSuppress = overrideNextErrorInfo > 0;
            if (maybeSuppress) {
                overrideNextErrorInfo--;
            }
            if (source.flags & 524288 /* TypeFlags.Object */ && target.flags & 524288 /* TypeFlags.Object */) {
                var currentError = errorInfo;
                tryElaborateArrayLikeErrors(source, target, /*reportErrors*/ true);
                if (errorInfo !== currentError) {
                    maybeSuppress = !!errorInfo;
                }
            }
            if (source.flags & 524288 /* TypeFlags.Object */ && target.flags & 402784252 /* TypeFlags.Primitive */) {
                tryElaborateErrorsForPrimitivesAndObjects(source, target);
            }
            else if (source.symbol && source.flags & 524288 /* TypeFlags.Object */ && globalObjectType === source) {
                reportError(ts_1.Diagnostics.The_Object_type_is_assignable_to_very_few_other_types_Did_you_mean_to_use_the_any_type_instead);
            }
            else if ((0, ts_1.getObjectFlags)(source) & 2048 /* ObjectFlags.JsxAttributes */ && target.flags & 2097152 /* TypeFlags.Intersection */) {
                var targetTypes = target.types;
                var intrinsicAttributes = getJsxType(JsxNames.IntrinsicAttributes, errorNode);
                var intrinsicClassAttributes = getJsxType(JsxNames.IntrinsicClassAttributes, errorNode);
                if (!isErrorType(intrinsicAttributes) && !isErrorType(intrinsicClassAttributes) &&
                    ((0, ts_1.contains)(targetTypes, intrinsicAttributes) || (0, ts_1.contains)(targetTypes, intrinsicClassAttributes))) {
                    // do not report top error
                    return;
                }
            }
            else {
                errorInfo = elaborateNeverIntersection(errorInfo, originalTarget);
            }
            if (!headMessage && maybeSuppress) {
                lastSkippedInfo = [source, target];
                // Used by, eg, missing property checking to replace the top-level message with a more informative one
                return;
            }
            reportRelationError(headMessage, source, target);
            if (source.flags & 262144 /* TypeFlags.TypeParameter */ && ((_b = (_a = source.symbol) === null || _a === void 0 ? void 0 : _a.declarations) === null || _b === void 0 ? void 0 : _b[0]) && !getConstraintOfType(source)) {
                var syntheticParam = cloneTypeParameter(source);
                syntheticParam.constraint = instantiateType(target, makeUnaryTypeMapper(source, syntheticParam));
                if (hasNonCircularBaseConstraint(syntheticParam)) {
                    var targetConstraintString = typeToString(target, source.symbol.declarations[0]);
                    associateRelatedInfo((0, ts_1.createDiagnosticForNode)(source.symbol.declarations[0], ts_1.Diagnostics.This_type_parameter_might_need_an_extends_0_constraint, targetConstraintString));
                }
            }
        }
        function traceUnionsOrIntersectionsTooLarge(source, target) {
            if (!ts_1.tracing) {
                return;
            }
            if ((source.flags & 3145728 /* TypeFlags.UnionOrIntersection */) && (target.flags & 3145728 /* TypeFlags.UnionOrIntersection */)) {
                var sourceUnionOrIntersection = source;
                var targetUnionOrIntersection = target;
                if (sourceUnionOrIntersection.objectFlags & targetUnionOrIntersection.objectFlags & 32768 /* ObjectFlags.PrimitiveUnion */) {
                    // There's a fast path for comparing primitive unions
                    return;
                }
                var sourceSize = sourceUnionOrIntersection.types.length;
                var targetSize = targetUnionOrIntersection.types.length;
                if (sourceSize * targetSize > 1E6) {
                    ts_1.tracing.instant("checkTypes" /* tracing.Phase.CheckTypes */, "traceUnionsOrIntersectionsTooLarge_DepthLimit", {
                        sourceId: source.id,
                        sourceSize: sourceSize,
                        targetId: target.id,
                        targetSize: targetSize,
                        pos: errorNode === null || errorNode === void 0 ? void 0 : errorNode.pos,
                        end: errorNode === null || errorNode === void 0 ? void 0 : errorNode.end
                    });
                }
            }
        }
        function getTypeOfPropertyInTypes(types, name) {
            var appendPropType = function (propTypes, type) {
                var _a;
                type = getApparentType(type);
                var prop = type.flags & 3145728 /* TypeFlags.UnionOrIntersection */ ? getPropertyOfUnionOrIntersectionType(type, name) : getPropertyOfObjectType(type, name);
                var propType = prop && getTypeOfSymbol(prop) || ((_a = getApplicableIndexInfoForName(type, name)) === null || _a === void 0 ? void 0 : _a.type) || undefinedType;
                return (0, ts_1.append)(propTypes, propType);
            };
            return getUnionType((0, ts_1.reduceLeft)(types, appendPropType, /*initial*/ undefined) || ts_1.emptyArray);
        }
        function hasExcessProperties(source, target, reportErrors) {
            var _a;
            if (!isExcessPropertyCheckTarget(target) || !noImplicitAny && (0, ts_1.getObjectFlags)(target) & 4096 /* ObjectFlags.JSLiteral */) {
                return false; // Disable excess property checks on JS literals to simulate having an implicit "index signature" - but only outside of noImplicitAny
            }
            var isComparingJsxAttributes = !!((0, ts_1.getObjectFlags)(source) & 2048 /* ObjectFlags.JsxAttributes */);
            if ((relation === assignableRelation || relation === comparableRelation) &&
                (isTypeSubsetOf(globalObjectType, target) || (!isComparingJsxAttributes && isEmptyObjectType(target)))) {
                return false;
            }
            var reducedTarget = target;
            var checkTypes;
            if (target.flags & 1048576 /* TypeFlags.Union */) {
                reducedTarget = findMatchingDiscriminantType(source, target, isRelatedTo) || filterPrimitivesIfContainsNonPrimitive(target);
                checkTypes = reducedTarget.flags & 1048576 /* TypeFlags.Union */ ? reducedTarget.types : [reducedTarget];
            }
            var _loop_15 = function (prop) {
                if (shouldCheckAsExcessProperty(prop, source.symbol) && !isIgnoredJsxProperty(source, prop)) {
                    if (!isKnownProperty(reducedTarget, prop.escapedName, isComparingJsxAttributes)) {
                        if (reportErrors) {
                            // Report error in terms of object types in the target as those are the only ones
                            // we check in isKnownProperty.
                            var errorTarget = filterType(reducedTarget, isExcessPropertyCheckTarget);
                            // We know *exactly* where things went wrong when comparing the types.
                            // Use this property as the error node as this will be more helpful in
                            // reasoning about what went wrong.
                            if (!errorNode)
                                return { value: ts_1.Debug.fail() };
                            if ((0, ts_1.isJsxAttributes)(errorNode) || (0, ts_1.isJsxOpeningLikeElement)(errorNode) || (0, ts_1.isJsxOpeningLikeElement)(errorNode.parent)) {
                                // JsxAttributes has an object-literal flag and undergo same type-assignablity check as normal object-literal.
                                // However, using an object-literal error message will be very confusing to the users so we give different a message.
                                if (prop.valueDeclaration && (0, ts_1.isJsxAttribute)(prop.valueDeclaration) && (0, ts_1.getSourceFileOfNode)(errorNode) === (0, ts_1.getSourceFileOfNode)(prop.valueDeclaration.name)) {
                                    // Note that extraneous children (as in `<NoChild>extra</NoChild>`) don't pass this check,
                                    // since `children` is a SyntaxKind.PropertySignature instead of a SyntaxKind.JsxAttribute.
                                    errorNode = prop.valueDeclaration.name;
                                }
                                var propName = symbolToString(prop);
                                var suggestionSymbol = getSuggestedSymbolForNonexistentJSXAttribute(propName, errorTarget);
                                var suggestion = suggestionSymbol ? symbolToString(suggestionSymbol) : undefined;
                                if (suggestion) {
                                    reportError(ts_1.Diagnostics.Property_0_does_not_exist_on_type_1_Did_you_mean_2, propName, typeToString(errorTarget), suggestion);
                                }
                                else {
                                    reportError(ts_1.Diagnostics.Property_0_does_not_exist_on_type_1, propName, typeToString(errorTarget));
                                }
                            }
                            else {
                                // use the property's value declaration if the property is assigned inside the literal itself
                                var objectLiteralDeclaration_1 = ((_a = source.symbol) === null || _a === void 0 ? void 0 : _a.declarations) && (0, ts_1.firstOrUndefined)(source.symbol.declarations);
                                var suggestion = void 0;
                                if (prop.valueDeclaration && (0, ts_1.findAncestor)(prop.valueDeclaration, function (d) { return d === objectLiteralDeclaration_1; }) && (0, ts_1.getSourceFileOfNode)(objectLiteralDeclaration_1) === (0, ts_1.getSourceFileOfNode)(errorNode)) {
                                    var propDeclaration = prop.valueDeclaration;
                                    ts_1.Debug.assertNode(propDeclaration, ts_1.isObjectLiteralElementLike);
                                    var name_21 = propDeclaration.name;
                                    errorNode = name_21;
                                    if ((0, ts_1.isIdentifier)(name_21)) {
                                        suggestion = getSuggestionForNonexistentProperty(name_21, errorTarget);
                                    }
                                }
                                if (suggestion !== undefined) {
                                    reportError(ts_1.Diagnostics.Object_literal_may_only_specify_known_properties_but_0_does_not_exist_in_type_1_Did_you_mean_to_write_2, symbolToString(prop), typeToString(errorTarget), suggestion);
                                }
                                else {
                                    reportError(ts_1.Diagnostics.Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1, symbolToString(prop), typeToString(errorTarget));
                                }
                            }
                        }
                        return { value: true };
                    }
                    if (checkTypes && !isRelatedTo(getTypeOfSymbol(prop), getTypeOfPropertyInTypes(checkTypes, prop.escapedName), 3 /* RecursionFlags.Both */, reportErrors)) {
                        if (reportErrors) {
                            reportIncompatibleError(ts_1.Diagnostics.Types_of_property_0_are_incompatible, symbolToString(prop));
                        }
                        return { value: true };
                    }
                }
            };
            for (var _i = 0, _b = getPropertiesOfType(source); _i < _b.length; _i++) {
                var prop = _b[_i];
                var state_6 = _loop_15(prop);
                if (typeof state_6 === "object")
                    return state_6.value;
            }
            return false;
        }
        function shouldCheckAsExcessProperty(prop, container) {
            return prop.valueDeclaration && container.valueDeclaration && prop.valueDeclaration.parent === container.valueDeclaration;
        }
        function unionOrIntersectionRelatedTo(source, target, reportErrors, intersectionState) {
            // Note that these checks are specifically ordered to produce correct results. In particular,
            // we need to deconstruct unions before intersections (because unions are always at the top),
            // and we need to handle "each" relations before "some" relations for the same kind of type.
            if (source.flags & 1048576 /* TypeFlags.Union */) {
                return relation === comparableRelation ?
                    someTypeRelatedToType(source, target, reportErrors && !(source.flags & 402784252 /* TypeFlags.Primitive */), intersectionState) :
                    eachTypeRelatedToType(source, target, reportErrors && !(source.flags & 402784252 /* TypeFlags.Primitive */), intersectionState);
            }
            if (target.flags & 1048576 /* TypeFlags.Union */) {
                return typeRelatedToSomeType(getRegularTypeOfObjectLiteral(source), target, reportErrors && !(source.flags & 402784252 /* TypeFlags.Primitive */) && !(target.flags & 402784252 /* TypeFlags.Primitive */));
            }
            if (target.flags & 2097152 /* TypeFlags.Intersection */) {
                return typeRelatedToEachType(source, target, reportErrors, 2 /* IntersectionState.Target */);
            }
            // Source is an intersection. For the comparable relation, if the target is a primitive type we hoist the
            // constraints of all non-primitive types in the source into a new intersection. We do this because the
            // intersection may further constrain the constraints of the non-primitive types. For example, given a type
            // parameter 'T extends 1 | 2', the intersection 'T & 1' should be reduced to '1' such that it doesn't
            // appear to be comparable to '2'.
            if (relation === comparableRelation && target.flags & 402784252 /* TypeFlags.Primitive */) {
                var constraints = (0, ts_1.sameMap)(source.types, function (t) { return t.flags & 465829888 /* TypeFlags.Instantiable */ ? getBaseConstraintOfType(t) || unknownType : t; });
                if (constraints !== source.types) {
                    source = getIntersectionType(constraints);
                    if (source.flags & 131072 /* TypeFlags.Never */) {
                        return 0 /* Ternary.False */;
                    }
                    if (!(source.flags & 2097152 /* TypeFlags.Intersection */)) {
                        return isRelatedTo(source, target, 1 /* RecursionFlags.Source */, /*reportErrors*/ false) ||
                            isRelatedTo(target, source, 1 /* RecursionFlags.Source */, /*reportErrors*/ false);
                    }
                }
            }
            // Check to see if any constituents of the intersection are immediately related to the target.
            // Don't report errors though. Elaborating on whether a source constituent is related to the target is
            // not actually useful and leads to some confusing error messages. Instead, we rely on the caller
            // checking whether the full intersection viewed as an object is related to the target.
            return someTypeRelatedToType(source, target, /*reportErrors*/ false, 1 /* IntersectionState.Source */);
        }
        function eachTypeRelatedToSomeType(source, target) {
            var result = -1 /* Ternary.True */;
            var sourceTypes = source.types;
            for (var _i = 0, sourceTypes_1 = sourceTypes; _i < sourceTypes_1.length; _i++) {
                var sourceType = sourceTypes_1[_i];
                var related = typeRelatedToSomeType(sourceType, target, /*reportErrors*/ false);
                if (!related) {
                    return 0 /* Ternary.False */;
                }
                result &= related;
            }
            return result;
        }
        function typeRelatedToSomeType(source, target, reportErrors) {
            var targetTypes = target.types;
            if (target.flags & 1048576 /* TypeFlags.Union */) {
                if (containsType(targetTypes, source)) {
                    return -1 /* Ternary.True */;
                }
                if (relation !== comparableRelation && (0, ts_1.getObjectFlags)(target) & 32768 /* ObjectFlags.PrimitiveUnion */ && !(source.flags & 1024 /* TypeFlags.EnumLiteral */) && (source.flags & (128 /* TypeFlags.StringLiteral */ | 512 /* TypeFlags.BooleanLiteral */ | 2048 /* TypeFlags.BigIntLiteral */) ||
                    (relation === subtypeRelation || relation === strictSubtypeRelation) && source.flags & 256 /* TypeFlags.NumberLiteral */)) {
                    // When relating a literal type to a union of primitive types, we know the relation is false unless
                    // the union contains the base primitive type or the literal type in one of its fresh/regular forms.
                    // We exclude numeric literals for non-subtype relations because numeric literals are assignable to
                    // numeric enum literals with the same value. Similarly, we exclude enum literal types because
                    // identically named enum types are related (see isEnumTypeRelatedTo). We exclude the comparable
                    // relation in entirety because it needs to be checked in both directions.
                    var alternateForm = source === source.regularType ? source.freshType : source.regularType;
                    var primitive = source.flags & 128 /* TypeFlags.StringLiteral */ ? stringType :
                        source.flags & 256 /* TypeFlags.NumberLiteral */ ? numberType :
                            source.flags & 2048 /* TypeFlags.BigIntLiteral */ ? bigintType :
                                undefined;
                    return primitive && containsType(targetTypes, primitive) || alternateForm && containsType(targetTypes, alternateForm) ? -1 /* Ternary.True */ : 0 /* Ternary.False */;
                }
                var match = getMatchingUnionConstituentForType(target, source);
                if (match) {
                    var related = isRelatedTo(source, match, 2 /* RecursionFlags.Target */, /*reportErrors*/ false);
                    if (related) {
                        return related;
                    }
                }
            }
            for (var _i = 0, targetTypes_1 = targetTypes; _i < targetTypes_1.length; _i++) {
                var type = targetTypes_1[_i];
                var related = isRelatedTo(source, type, 2 /* RecursionFlags.Target */, /*reportErrors*/ false);
                if (related) {
                    return related;
                }
            }
            if (reportErrors) {
                // Elaborate only if we can find a best matching type in the target union
                var bestMatchingType = getBestMatchingType(source, target, isRelatedTo);
                if (bestMatchingType) {
                    isRelatedTo(source, bestMatchingType, 2 /* RecursionFlags.Target */, /*reportErrors*/ true);
                }
            }
            return 0 /* Ternary.False */;
        }
        function typeRelatedToEachType(source, target, reportErrors, intersectionState) {
            var result = -1 /* Ternary.True */;
            var targetTypes = target.types;
            for (var _i = 0, targetTypes_2 = targetTypes; _i < targetTypes_2.length; _i++) {
                var targetType = targetTypes_2[_i];
                var related = isRelatedTo(source, targetType, 2 /* RecursionFlags.Target */, reportErrors, /*headMessage*/ undefined, intersectionState);
                if (!related) {
                    return 0 /* Ternary.False */;
                }
                result &= related;
            }
            return result;
        }
        function someTypeRelatedToType(source, target, reportErrors, intersectionState) {
            var sourceTypes = source.types;
            if (source.flags & 1048576 /* TypeFlags.Union */ && containsType(sourceTypes, target)) {
                return -1 /* Ternary.True */;
            }
            var len = sourceTypes.length;
            for (var i = 0; i < len; i++) {
                var related = isRelatedTo(sourceTypes[i], target, 1 /* RecursionFlags.Source */, reportErrors && i === len - 1, /*headMessage*/ undefined, intersectionState);
                if (related) {
                    return related;
                }
            }
            return 0 /* Ternary.False */;
        }
        function getUndefinedStrippedTargetIfNeeded(source, target) {
            if (source.flags & 1048576 /* TypeFlags.Union */ && target.flags & 1048576 /* TypeFlags.Union */ &&
                !(source.types[0].flags & 32768 /* TypeFlags.Undefined */) && target.types[0].flags & 32768 /* TypeFlags.Undefined */) {
                return extractTypesOfKind(target, ~32768 /* TypeFlags.Undefined */);
            }
            return target;
        }
        function eachTypeRelatedToType(source, target, reportErrors, intersectionState) {
            var result = -1 /* Ternary.True */;
            var sourceTypes = source.types;
            // We strip `undefined` from the target if the `source` trivially doesn't contain it for our correspondence-checking fastpath
            // since `undefined` is frequently added by optionality and would otherwise spoil a potentially useful correspondence
            var undefinedStrippedTarget = getUndefinedStrippedTargetIfNeeded(source, target);
            for (var i = 0; i < sourceTypes.length; i++) {
                var sourceType = sourceTypes[i];
                if (undefinedStrippedTarget.flags & 1048576 /* TypeFlags.Union */ && sourceTypes.length >= undefinedStrippedTarget.types.length && sourceTypes.length % undefinedStrippedTarget.types.length === 0) {
                    // many unions are mappings of one another; in such cases, simply comparing members at the same index can shortcut the comparison
                    // such unions will have identical lengths, and their corresponding elements will match up. Another common scenario is where a large
                    // union has a union of objects intersected with it. In such cases, if the input was, eg `("a" | "b" | "c") & (string | boolean | {} | {whatever})`,
                    // the result will have the structure `"a" | "b" | "c" | "a" & {} | "b" & {} | "c" & {} | "a" & {whatever} | "b" & {whatever} | "c" & {whatever}`
                    // - the resulting union has a length which is a multiple of the original union, and the elements correspond modulo the length of the original union
                    var related_1 = isRelatedTo(sourceType, undefinedStrippedTarget.types[i % undefinedStrippedTarget.types.length], 3 /* RecursionFlags.Both */, /*reportErrors*/ false, /*headMessage*/ undefined, intersectionState);
                    if (related_1) {
                        result &= related_1;
                        continue;
                    }
                }
                var related = isRelatedTo(sourceType, target, 1 /* RecursionFlags.Source */, reportErrors, /*headMessage*/ undefined, intersectionState);
                if (!related) {
                    return 0 /* Ternary.False */;
                }
                result &= related;
            }
            return result;
        }
        function typeArgumentsRelatedTo(sources, targets, variances, reportErrors, intersectionState) {
            if (sources === void 0) { sources = ts_1.emptyArray; }
            if (targets === void 0) { targets = ts_1.emptyArray; }
            if (variances === void 0) { variances = ts_1.emptyArray; }
            if (sources.length !== targets.length && relation === identityRelation) {
                return 0 /* Ternary.False */;
            }
            var length = sources.length <= targets.length ? sources.length : targets.length;
            var result = -1 /* Ternary.True */;
            for (var i = 0; i < length; i++) {
                // When variance information isn't available we default to covariance. This happens
                // in the process of computing variance information for recursive types and when
                // comparing 'this' type arguments.
                var varianceFlags = i < variances.length ? variances[i] : 1 /* VarianceFlags.Covariant */;
                var variance = varianceFlags & 7 /* VarianceFlags.VarianceMask */;
                // We ignore arguments for independent type parameters (because they're never witnessed).
                if (variance !== 4 /* VarianceFlags.Independent */) {
                    var s = sources[i];
                    var t = targets[i];
                    var related = -1 /* Ternary.True */;
                    if (varianceFlags & 8 /* VarianceFlags.Unmeasurable */) {
                        // Even an `Unmeasurable` variance works out without a structural check if the source and target are _identical_.
                        // We can't simply assume invariance, because `Unmeasurable` marks nonlinear relations, for example, a relation tained by
                        // the `-?` modifier in a mapped type (where, no matter how the inputs are related, the outputs still might not be)
                        related = relation === identityRelation ? isRelatedTo(s, t, 3 /* RecursionFlags.Both */, /*reportErrors*/ false) : compareTypesIdentical(s, t);
                    }
                    else if (variance === 1 /* VarianceFlags.Covariant */) {
                        related = isRelatedTo(s, t, 3 /* RecursionFlags.Both */, reportErrors, /*headMessage*/ undefined, intersectionState);
                    }
                    else if (variance === 2 /* VarianceFlags.Contravariant */) {
                        related = isRelatedTo(t, s, 3 /* RecursionFlags.Both */, reportErrors, /*headMessage*/ undefined, intersectionState);
                    }
                    else if (variance === 3 /* VarianceFlags.Bivariant */) {
                        // In the bivariant case we first compare contravariantly without reporting
                        // errors. Then, if that doesn't succeed, we compare covariantly with error
                        // reporting. Thus, error elaboration will be based on the the covariant check,
                        // which is generally easier to reason about.
                        related = isRelatedTo(t, s, 3 /* RecursionFlags.Both */, /*reportErrors*/ false);
                        if (!related) {
                            related = isRelatedTo(s, t, 3 /* RecursionFlags.Both */, reportErrors, /*headMessage*/ undefined, intersectionState);
                        }
                    }
                    else {
                        // In the invariant case we first compare covariantly, and only when that
                        // succeeds do we proceed to compare contravariantly. Thus, error elaboration
                        // will typically be based on the covariant check.
                        related = isRelatedTo(s, t, 3 /* RecursionFlags.Both */, reportErrors, /*headMessage*/ undefined, intersectionState);
                        if (related) {
                            related &= isRelatedTo(t, s, 3 /* RecursionFlags.Both */, reportErrors, /*headMessage*/ undefined, intersectionState);
                        }
                    }
                    if (!related) {
                        return 0 /* Ternary.False */;
                    }
                    result &= related;
                }
            }
            return result;
        }
        // Determine if possibly recursive types are related. First, check if the result is already available in the global cache.
        // Second, check if we have already started a comparison of the given two types in which case we assume the result to be true.
        // Third, check if both types are part of deeply nested chains of generic type instantiations and if so assume the types are
        // equal and infinitely expanding. Fourth, if we have reached a depth of 100 nested comparisons, assume we have runaway recursion
        // and issue an error. Otherwise, actually compare the structure of the two types.
        function recursiveTypeRelatedTo(source, target, reportErrors, intersectionState, recursionFlags) {
            if (overflow) {
                return 0 /* Ternary.False */;
            }
            var id = getRelationKey(source, target, intersectionState, relation, /*ignoreConstraints*/ false);
            var entry = relation.get(id);
            if (entry !== undefined) {
                if (reportErrors && entry & 2 /* RelationComparisonResult.Failed */ && !(entry & 4 /* RelationComparisonResult.Reported */)) {
                    // We are elaborating errors and the cached result is an unreported failure. The result will be reported
                    // as a failure, and should be updated as a reported failure by the bottom of this function.
                }
                else {
                    if (outofbandVarianceMarkerHandler) {
                        // We're in the middle of variance checking - integrate any unmeasurable/unreliable flags from this cached component
                        var saved = entry & 24 /* RelationComparisonResult.ReportsMask */;
                        if (saved & 8 /* RelationComparisonResult.ReportsUnmeasurable */) {
                            instantiateType(source, reportUnmeasurableMapper);
                        }
                        if (saved & 16 /* RelationComparisonResult.ReportsUnreliable */) {
                            instantiateType(source, reportUnreliableMapper);
                        }
                    }
                    return entry & 1 /* RelationComparisonResult.Succeeded */ ? -1 /* Ternary.True */ : 0 /* Ternary.False */;
                }
            }
            if (!maybeKeys) {
                maybeKeys = [];
                sourceStack = [];
                targetStack = [];
            }
            else {
                // A key that starts with "*" is an indication that we have type references that reference constrained
                // type parameters. For such keys we also check against the key we would have gotten if all type parameters
                // were unconstrained.
                var broadestEquivalentId = id.startsWith("*") ? getRelationKey(source, target, intersectionState, relation, /*ignoreConstraints*/ true) : undefined;
                for (var i = 0; i < maybeCount; i++) {
                    // If source and target are already being compared, consider them related with assumptions
                    if (id === maybeKeys[i] || broadestEquivalentId && broadestEquivalentId === maybeKeys[i]) {
                        return 3 /* Ternary.Maybe */;
                    }
                }
                if (sourceDepth === 100 || targetDepth === 100) {
                    overflow = true;
                    return 0 /* Ternary.False */;
                }
            }
            var maybeStart = maybeCount;
            maybeKeys[maybeCount] = id;
            maybeCount++;
            var saveExpandingFlags = expandingFlags;
            if (recursionFlags & 1 /* RecursionFlags.Source */) {
                sourceStack[sourceDepth] = source;
                sourceDepth++;
                if (!(expandingFlags & 1 /* ExpandingFlags.Source */) && isDeeplyNestedType(source, sourceStack, sourceDepth))
                    expandingFlags |= 1 /* ExpandingFlags.Source */;
            }
            if (recursionFlags & 2 /* RecursionFlags.Target */) {
                targetStack[targetDepth] = target;
                targetDepth++;
                if (!(expandingFlags & 2 /* ExpandingFlags.Target */) && isDeeplyNestedType(target, targetStack, targetDepth))
                    expandingFlags |= 2 /* ExpandingFlags.Target */;
            }
            var originalHandler;
            var propagatingVarianceFlags = 0;
            if (outofbandVarianceMarkerHandler) {
                originalHandler = outofbandVarianceMarkerHandler;
                outofbandVarianceMarkerHandler = function (onlyUnreliable) {
                    propagatingVarianceFlags |= onlyUnreliable ? 16 /* RelationComparisonResult.ReportsUnreliable */ : 8 /* RelationComparisonResult.ReportsUnmeasurable */;
                    return originalHandler(onlyUnreliable);
                };
            }
            var result;
            if (expandingFlags === 3 /* ExpandingFlags.Both */) {
                ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.instant("checkTypes" /* tracing.Phase.CheckTypes */, "recursiveTypeRelatedTo_DepthLimit", {
                    sourceId: source.id,
                    sourceIdStack: sourceStack.map(function (t) { return t.id; }),
                    targetId: target.id,
                    targetIdStack: targetStack.map(function (t) { return t.id; }),
                    depth: sourceDepth,
                    targetDepth: targetDepth
                });
                result = 3 /* Ternary.Maybe */;
            }
            else {
                ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.push("checkTypes" /* tracing.Phase.CheckTypes */, "structuredTypeRelatedTo", { sourceId: source.id, targetId: target.id });
                result = structuredTypeRelatedTo(source, target, reportErrors, intersectionState);
                ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.pop();
            }
            if (outofbandVarianceMarkerHandler) {
                outofbandVarianceMarkerHandler = originalHandler;
            }
            if (recursionFlags & 1 /* RecursionFlags.Source */) {
                sourceDepth--;
            }
            if (recursionFlags & 2 /* RecursionFlags.Target */) {
                targetDepth--;
            }
            expandingFlags = saveExpandingFlags;
            if (result) {
                if (result === -1 /* Ternary.True */ || (sourceDepth === 0 && targetDepth === 0)) {
                    if (result === -1 /* Ternary.True */ || result === 3 /* Ternary.Maybe */) {
                        // If result is definitely true, record all maybe keys as having succeeded. Also, record Ternary.Maybe
                        // results as having succeeded once we reach depth 0, but never record Ternary.Unknown results.
                        for (var i = maybeStart; i < maybeCount; i++) {
                            relation.set(maybeKeys[i], 1 /* RelationComparisonResult.Succeeded */ | propagatingVarianceFlags);
                        }
                    }
                    maybeCount = maybeStart;
                }
            }
            else {
                // A false result goes straight into global cache (when something is false under
                // assumptions it will also be false without assumptions)
                relation.set(id, (reportErrors ? 4 /* RelationComparisonResult.Reported */ : 0) | 2 /* RelationComparisonResult.Failed */ | propagatingVarianceFlags);
                maybeCount = maybeStart;
            }
            return result;
        }
        function structuredTypeRelatedTo(source, target, reportErrors, intersectionState) {
            var saveErrorInfo = captureErrorCalculationState();
            var result = structuredTypeRelatedToWorker(source, target, reportErrors, intersectionState, saveErrorInfo);
            if (relation !== identityRelation) {
                // The combined constraint of an intersection type is the intersection of the constraints of
                // the constituents. When an intersection type contains instantiable types with union type
                // constraints, there are situations where we need to examine the combined constraint. One is
                // when the target is a union type. Another is when the intersection contains types belonging
                // to one of the disjoint domains. For example, given type variables T and U, each with the
                // constraint 'string | number', the combined constraint of 'T & U' is 'string | number' and
                // we need to check this constraint against a union on the target side. Also, given a type
                // variable V constrained to 'string | number', 'V & number' has a combined constraint of
                // 'string & number | number & number' which reduces to just 'number'.
                // This also handles type parameters, as a type parameter with a union constraint compared against a union
                // needs to have its constraint hoisted into an intersection with said type parameter, this way
                // the type param can be compared with itself in the target (with the influence of its constraint to match other parts)
                // For example, if `T extends 1 | 2` and `U extends 2 | 3` and we compare `T & U` to `T & U & (1 | 2 | 3)`
                if (!result && (source.flags & 2097152 /* TypeFlags.Intersection */ || source.flags & 262144 /* TypeFlags.TypeParameter */ && target.flags & 1048576 /* TypeFlags.Union */)) {
                    var constraint = getEffectiveConstraintOfIntersection(source.flags & 2097152 /* TypeFlags.Intersection */ ? source.types : [source], !!(target.flags & 1048576 /* TypeFlags.Union */));
                    if (constraint && everyType(constraint, function (c) { return c !== source; })) { // Skip comparison if expansion contains the source itself
                        // TODO: Stack errors so we get a pyramid for the "normal" comparison above, _and_ a second for this
                        result = isRelatedTo(constraint, target, 1 /* RecursionFlags.Source */, /*reportErrors*/ false, /*headMessage*/ undefined, intersectionState);
                    }
                }
                // When the target is an intersection we need an extra property check in order to detect nested excess
                // properties and nested weak types. The following are motivating examples that all should be errors, but
                // aren't without this extra property check:
                //
                //   let obj: { a: { x: string } } & { c: number } = { a: { x: 'hello', y: 2 }, c: 5 };  // Nested excess property
                //
                //   declare let wrong: { a: { y: string } };
                //   let weak: { a?: { x?: number } } & { c?: string } = wrong;  // Nested weak object type
                //
                if (result && !(intersectionState & 2 /* IntersectionState.Target */) && target.flags & 2097152 /* TypeFlags.Intersection */ &&
                    !isGenericObjectType(target) && source.flags & (524288 /* TypeFlags.Object */ | 2097152 /* TypeFlags.Intersection */)) {
                    result &= propertiesRelatedTo(source, target, reportErrors, /*excludedProperties*/ undefined, /*optionalsOnly*/ false, 0 /* IntersectionState.None */);
                    if (result && isObjectLiteralType(source) && (0, ts_1.getObjectFlags)(source) & 8192 /* ObjectFlags.FreshLiteral */) {
                        result &= indexSignaturesRelatedTo(source, target, /*sourceIsPrimitive*/ false, reportErrors, 0 /* IntersectionState.None */);
                    }
                }
                // When the source is an intersection we need an extra check of any optional properties in the target to
                // detect possible mismatched property types. For example:
                //
                //   function foo<T extends object>(x: { a?: string }, y: T & { a: boolean }) {
                //     x = y;  // Mismatched property in source intersection
                //   }
                //
                else if (result && isNonGenericObjectType(target) && !isArrayOrTupleType(target) &&
                    source.flags & 2097152 /* TypeFlags.Intersection */ && getApparentType(source).flags & 3670016 /* TypeFlags.StructuredType */ &&
                    !(0, ts_1.some)(source.types, function (t) { return t === target || !!((0, ts_1.getObjectFlags)(t) & 262144 /* ObjectFlags.NonInferrableType */); })) {
                    result &= propertiesRelatedTo(source, target, reportErrors, /*excludedProperties*/ undefined, /*optionalsOnly*/ true, intersectionState);
                }
            }
            if (result) {
                resetErrorInfo(saveErrorInfo);
            }
            return result;
        }
        function structuredTypeRelatedToWorker(source, target, reportErrors, intersectionState, saveErrorInfo) {
            var result;
            var originalErrorInfo;
            var varianceCheckFailed = false;
            var sourceFlags = source.flags;
            var targetFlags = target.flags;
            if (relation === identityRelation) {
                // We've already checked that source.flags and target.flags are identical
                if (sourceFlags & 3145728 /* TypeFlags.UnionOrIntersection */) {
                    var result_4 = eachTypeRelatedToSomeType(source, target);
                    if (result_4) {
                        result_4 &= eachTypeRelatedToSomeType(target, source);
                    }
                    return result_4;
                }
                if (sourceFlags & 4194304 /* TypeFlags.Index */) {
                    return isRelatedTo(source.type, target.type, 3 /* RecursionFlags.Both */, /*reportErrors*/ false);
                }
                if (sourceFlags & 8388608 /* TypeFlags.IndexedAccess */) {
                    if (result = isRelatedTo(source.objectType, target.objectType, 3 /* RecursionFlags.Both */, /*reportErrors*/ false)) {
                        if (result &= isRelatedTo(source.indexType, target.indexType, 3 /* RecursionFlags.Both */, /*reportErrors*/ false)) {
                            return result;
                        }
                    }
                }
                if (sourceFlags & 16777216 /* TypeFlags.Conditional */) {
                    if (source.root.isDistributive === target.root.isDistributive) {
                        if (result = isRelatedTo(source.checkType, target.checkType, 3 /* RecursionFlags.Both */, /*reportErrors*/ false)) {
                            if (result &= isRelatedTo(source.extendsType, target.extendsType, 3 /* RecursionFlags.Both */, /*reportErrors*/ false)) {
                                if (result &= isRelatedTo(getTrueTypeFromConditionalType(source), getTrueTypeFromConditionalType(target), 3 /* RecursionFlags.Both */, /*reportErrors*/ false)) {
                                    if (result &= isRelatedTo(getFalseTypeFromConditionalType(source), getFalseTypeFromConditionalType(target), 3 /* RecursionFlags.Both */, /*reportErrors*/ false)) {
                                        return result;
                                    }
                                }
                            }
                        }
                    }
                }
                if (sourceFlags & 33554432 /* TypeFlags.Substitution */) {
                    if (result = isRelatedTo(source.baseType, target.baseType, 3 /* RecursionFlags.Both */, /*reportErrors*/ false)) {
                        if (result &= isRelatedTo(source.constraint, target.constraint, 3 /* RecursionFlags.Both */, /*reportErrors*/ false)) {
                            return result;
                        }
                    }
                }
                if (!(sourceFlags & 524288 /* TypeFlags.Object */)) {
                    return 0 /* Ternary.False */;
                }
            }
            else if (sourceFlags & 3145728 /* TypeFlags.UnionOrIntersection */ || targetFlags & 3145728 /* TypeFlags.UnionOrIntersection */) {
                if (result = unionOrIntersectionRelatedTo(source, target, reportErrors, intersectionState)) {
                    return result;
                }
                // The ordered decomposition above doesn't handle all cases. Specifically, we also need to handle:
                // Source is instantiable (e.g. source has union or intersection constraint).
                // Source is an object, target is a union (e.g. { a, b: boolean } <=> { a, b: true } | { a, b: false }).
                // Source is an intersection, target is an object (e.g. { a } & { b } <=> { a, b }).
                // Source is an intersection, target is a union (e.g. { a } & { b: boolean } <=> { a, b: true } | { a, b: false }).
                // Source is an intersection, target instantiable (e.g. string & { tag } <=> T["a"] constrained to string & { tag }).
                if (!(sourceFlags & 465829888 /* TypeFlags.Instantiable */ ||
                    sourceFlags & 524288 /* TypeFlags.Object */ && targetFlags & 1048576 /* TypeFlags.Union */ ||
                    sourceFlags & 2097152 /* TypeFlags.Intersection */ && targetFlags & (524288 /* TypeFlags.Object */ | 1048576 /* TypeFlags.Union */ | 465829888 /* TypeFlags.Instantiable */))) {
                    return 0 /* Ternary.False */;
                }
            }
            // We limit alias variance probing to only object and conditional types since their alias behavior
            // is more predictable than other, interned types, which may or may not have an alias depending on
            // the order in which things were checked.
            if (sourceFlags & (524288 /* TypeFlags.Object */ | 16777216 /* TypeFlags.Conditional */) && source.aliasSymbol && source.aliasTypeArguments &&
                source.aliasSymbol === target.aliasSymbol && !(isMarkerType(source) || isMarkerType(target))) {
                var variances = getAliasVariances(source.aliasSymbol);
                if (variances === ts_1.emptyArray) {
                    return 1 /* Ternary.Unknown */;
                }
                var params = getSymbolLinks(source.aliasSymbol).typeParameters;
                var minParams = getMinTypeArgumentCount(params);
                var sourceTypes = fillMissingTypeArguments(source.aliasTypeArguments, params, minParams, (0, ts_1.isInJSFile)(source.aliasSymbol.valueDeclaration));
                var targetTypes = fillMissingTypeArguments(target.aliasTypeArguments, params, minParams, (0, ts_1.isInJSFile)(source.aliasSymbol.valueDeclaration));
                var varianceResult = relateVariances(sourceTypes, targetTypes, variances, intersectionState);
                if (varianceResult !== undefined) {
                    return varianceResult;
                }
            }
            // For a generic type T and a type U that is assignable to T, [...U] is assignable to T, U is assignable to readonly [...T],
            // and U is assignable to [...T] when U is constrained to a mutable array or tuple type.
            if (isSingleElementGenericTupleType(source) && !source.target.readonly && (result = isRelatedTo(getTypeArguments(source)[0], target, 1 /* RecursionFlags.Source */)) ||
                isSingleElementGenericTupleType(target) && (target.target.readonly || isMutableArrayOrTuple(getBaseConstraintOfType(source) || source)) && (result = isRelatedTo(source, getTypeArguments(target)[0], 2 /* RecursionFlags.Target */))) {
                return result;
            }
            if (targetFlags & 262144 /* TypeFlags.TypeParameter */) {
                // A source type { [P in Q]: X } is related to a target type T if keyof T is related to Q and X is related to T[Q].
                if ((0, ts_1.getObjectFlags)(source) & 32 /* ObjectFlags.Mapped */ && !source.declaration.nameType && isRelatedTo(getIndexType(target), getConstraintTypeFromMappedType(source), 3 /* RecursionFlags.Both */)) {
                    if (!(getMappedTypeModifiers(source) & 4 /* MappedTypeModifiers.IncludeOptional */)) {
                        var templateType = getTemplateTypeFromMappedType(source);
                        var indexedAccessType = getIndexedAccessType(target, getTypeParameterFromMappedType(source));
                        if (result = isRelatedTo(templateType, indexedAccessType, 3 /* RecursionFlags.Both */, reportErrors)) {
                            return result;
                        }
                    }
                }
                if (relation === comparableRelation && sourceFlags & 262144 /* TypeFlags.TypeParameter */) {
                    // This is a carve-out in comparability to essentially forbid comparing a type parameter
                    // with another type parameter unless one extends the other. (Remember: comparability is mostly bidirectional!)
                    var constraint = getConstraintOfTypeParameter(source);
                    if (constraint && hasNonCircularBaseConstraint(source)) {
                        while (constraint && someType(constraint, function (c) { return !!(c.flags & 262144 /* TypeFlags.TypeParameter */); })) {
                            if (result = isRelatedTo(constraint, target, 1 /* RecursionFlags.Source */, /*reportErrors*/ false)) {
                                return result;
                            }
                            constraint = getConstraintOfTypeParameter(constraint);
                        }
                    }
                    return 0 /* Ternary.False */;
                }
            }
            else if (targetFlags & 4194304 /* TypeFlags.Index */) {
                var targetType_1 = target.type;
                // A keyof S is related to a keyof T if T is related to S.
                if (sourceFlags & 4194304 /* TypeFlags.Index */) {
                    if (result = isRelatedTo(targetType_1, source.type, 3 /* RecursionFlags.Both */, /*reportErrors*/ false)) {
                        return result;
                    }
                }
                if (isTupleType(targetType_1)) {
                    // An index type can have a tuple type target when the tuple type contains variadic elements.
                    // Check if the source is related to the known keys of the tuple type.
                    if (result = isRelatedTo(source, getKnownKeysOfTupleType(targetType_1), 2 /* RecursionFlags.Target */, reportErrors)) {
                        return result;
                    }
                }
                else {
                    // A type S is assignable to keyof T if S is assignable to keyof C, where C is the
                    // simplified form of T or, if T doesn't simplify, the constraint of T.
                    var constraint = getSimplifiedTypeOrConstraint(targetType_1);
                    if (constraint) {
                        // We require Ternary.True here such that circular constraints don't cause
                        // false positives. For example, given 'T extends { [K in keyof T]: string }',
                        // 'keyof T' has itself as its constraint and produces a Ternary.Maybe when
                        // related to other types.
                        if (isRelatedTo(source, getIndexType(constraint, target.indexFlags | 4 /* IndexFlags.NoReducibleCheck */), 2 /* RecursionFlags.Target */, reportErrors) === -1 /* Ternary.True */) {
                            return -1 /* Ternary.True */;
                        }
                    }
                    else if (isGenericMappedType(targetType_1)) {
                        // generic mapped types that don't simplify or have a constraint still have a very simple set of keys we can compare against
                        // - their nameType or constraintType.
                        // In many ways, this comparison is a deferred version of what `getIndexTypeForMappedType` does to actually resolve the keys for _non_-generic types
                        var nameType_1 = getNameTypeFromMappedType(targetType_1);
                        var constraintType = getConstraintTypeFromMappedType(targetType_1);
                        var targetKeys = void 0;
                        if (nameType_1 && isMappedTypeWithKeyofConstraintDeclaration(targetType_1)) {
                            // we need to get the apparent mappings and union them with the generic mappings, since some properties may be
                            // missing from the `constraintType` which will otherwise be mapped in the object
                            var modifiersType = getApparentType(getModifiersTypeFromMappedType(targetType_1));
                            var mappedKeys_1 = [];
                            forEachMappedTypePropertyKeyTypeAndIndexSignatureKeyType(modifiersType, 8576 /* TypeFlags.StringOrNumberLiteralOrUnique */, 
                            /*stringsOnly*/ false, function (t) { return void mappedKeys_1.push(instantiateType(nameType_1, appendTypeMapping(targetType_1.mapper, getTypeParameterFromMappedType(targetType_1), t))); });
                            // We still need to include the non-apparent (and thus still generic) keys in the target side of the comparison (in case they're in the source side)
                            targetKeys = getUnionType(__spreadArray(__spreadArray([], mappedKeys_1, true), [nameType_1], false));
                        }
                        else {
                            targetKeys = nameType_1 || constraintType;
                        }
                        if (isRelatedTo(source, targetKeys, 2 /* RecursionFlags.Target */, reportErrors) === -1 /* Ternary.True */) {
                            return -1 /* Ternary.True */;
                        }
                    }
                }
            }
            else if (targetFlags & 8388608 /* TypeFlags.IndexedAccess */) {
                if (sourceFlags & 8388608 /* TypeFlags.IndexedAccess */) {
                    // Relate components directly before falling back to constraint relationships
                    // A type S[K] is related to a type T[J] if S is related to T and K is related to J.
                    if (result = isRelatedTo(source.objectType, target.objectType, 3 /* RecursionFlags.Both */, reportErrors)) {
                        // This does _not_ generalize - specific instantiations of `S[K]` and `T[J]` may be related, even if the indexed accesses generally are not.
                        // For example, `S = {x: string, a: string}`, `T = {x: string, b: string}`, `K = J = "x"`. `S` and `T` are unrelated, but the result of executing
                        // `S["x"]` and `T["x"]` _are_. Given that, we have to flag the object type comparison here as "unreliable", since while the generic result can reliably
                        // be used in the affirmative case, it failing is not an indicator that the structural result will not succeed.
                        instantiateType(source.objectType, reportUnreliableMapper);
                        result &= isRelatedTo(source.indexType, target.indexType, 3 /* RecursionFlags.Both */, reportErrors);
                    }
                    if (result) {
                        return result;
                    }
                    if (reportErrors) {
                        originalErrorInfo = errorInfo;
                    }
                }
                // A type S is related to a type T[K] if S is related to C, where C is the base
                // constraint of T[K] for writing.
                if (relation === assignableRelation || relation === comparableRelation) {
                    var objectType = target.objectType;
                    var indexType = target.indexType;
                    var baseObjectType = getBaseConstraintOfType(objectType) || objectType;
                    var baseIndexType = getBaseConstraintOfType(indexType) || indexType;
                    if (!isGenericObjectType(baseObjectType) && !isGenericIndexType(baseIndexType)) {
                        var accessFlags = 4 /* AccessFlags.Writing */ | (baseObjectType !== objectType ? 2 /* AccessFlags.NoIndexSignatures */ : 0);
                        var constraint = getIndexedAccessTypeOrUndefined(baseObjectType, baseIndexType, accessFlags);
                        if (constraint) {
                            if (reportErrors && originalErrorInfo) {
                                // create a new chain for the constraint error
                                resetErrorInfo(saveErrorInfo);
                            }
                            if (result = isRelatedTo(source, constraint, 2 /* RecursionFlags.Target */, reportErrors, /*headMessage*/ undefined, intersectionState)) {
                                return result;
                            }
                            // prefer the shorter chain of the constraint comparison chain, and the direct comparison chain
                            if (reportErrors && originalErrorInfo && errorInfo) {
                                errorInfo = countMessageChainBreadth([originalErrorInfo]) <= countMessageChainBreadth([errorInfo]) ? originalErrorInfo : errorInfo;
                            }
                        }
                    }
                }
                if (reportErrors) {
                    originalErrorInfo = undefined;
                }
            }
            else if (isGenericMappedType(target) && relation !== identityRelation) {
                // Check if source type `S` is related to target type `{ [P in Q]: T }` or `{ [P in Q as R]: T}`.
                var keysRemapped = !!target.declaration.nameType;
                var templateType = getTemplateTypeFromMappedType(target);
                var modifiers = getMappedTypeModifiers(target);
                if (!(modifiers & 8 /* MappedTypeModifiers.ExcludeOptional */)) {
                    // If the mapped type has shape `{ [P in Q]: T[P] }`,
                    // source `S` is related to target if `T` = `S`, i.e. `S` is related to `{ [P in Q]: S[P] }`.
                    if (!keysRemapped && templateType.flags & 8388608 /* TypeFlags.IndexedAccess */ && templateType.objectType === source &&
                        templateType.indexType === getTypeParameterFromMappedType(target)) {
                        return -1 /* Ternary.True */;
                    }
                    if (!isGenericMappedType(source)) {
                        // If target has shape `{ [P in Q as R]: T}`, then its keys have type `R`.
                        // If target has shape `{ [P in Q]: T }`, then its keys have type `Q`.
                        var targetKeys = keysRemapped ? getNameTypeFromMappedType(target) : getConstraintTypeFromMappedType(target);
                        // Type of the keys of source type `S`, i.e. `keyof S`.
                        var sourceKeys = getIndexType(source, 2 /* IndexFlags.NoIndexSignatures */);
                        var includeOptional = modifiers & 4 /* MappedTypeModifiers.IncludeOptional */;
                        var filteredByApplicability = includeOptional ? intersectTypes(targetKeys, sourceKeys) : undefined;
                        // A source type `S` is related to a target type `{ [P in Q]: T }` if `Q` is related to `keyof S` and `S[Q]` is related to `T`.
                        // A source type `S` is related to a target type `{ [P in Q as R]: T }` if `R` is related to `keyof S` and `S[R]` is related to `T.
                        // A source type `S` is related to a target type `{ [P in Q]?: T }` if some constituent `Q'` of `Q` is related to `keyof S` and `S[Q']` is related to `T`.
                        // A source type `S` is related to a target type `{ [P in Q as R]?: T }` if some constituent `R'` of `R` is related to `keyof S` and `S[R']` is related to `T`.
                        if (includeOptional
                            ? !(filteredByApplicability.flags & 131072 /* TypeFlags.Never */)
                            : isRelatedTo(targetKeys, sourceKeys, 3 /* RecursionFlags.Both */)) {
                            var templateType_1 = getTemplateTypeFromMappedType(target);
                            var typeParameter = getTypeParameterFromMappedType(target);
                            // Fastpath: When the template type has the form `Obj[P]` where `P` is the mapped type parameter, directly compare source `S` with `Obj`
                            // to avoid creating the (potentially very large) number of new intermediate types made by manufacturing `S[P]`.
                            var nonNullComponent = extractTypesOfKind(templateType_1, ~98304 /* TypeFlags.Nullable */);
                            if (!keysRemapped && nonNullComponent.flags & 8388608 /* TypeFlags.IndexedAccess */ && nonNullComponent.indexType === typeParameter) {
                                if (result = isRelatedTo(source, nonNullComponent.objectType, 2 /* RecursionFlags.Target */, reportErrors)) {
                                    return result;
                                }
                            }
                            else {
                                // We need to compare the type of a property on the source type `S` to the type of the same property on the target type,
                                // so we need to construct an indexing type representing a property, and then use indexing type to index the source type for comparison.
                                // If the target type has shape `{ [P in Q]: T }`, then a property of the target has type `P`.
                                // If the target type has shape `{ [P in Q]?: T }`, then a property of the target has type `P`,
                                // but the property is optional, so we only want to compare properties `P` that are common between `keyof S` and `Q`.
                                // If the target type has shape `{ [P in Q as R]: T }`, then a property of the target has type `R`.
                                // If the target type has shape `{ [P in Q as R]?: T }`, then a property of the target has type `R`,
                                // but the property is optional, so we only want to compare properties `R` that are common between `keyof S` and `R`.
                                var indexingType = keysRemapped
                                    ? (filteredByApplicability || targetKeys)
                                    : filteredByApplicability
                                        ? getIntersectionType([filteredByApplicability, typeParameter])
                                        : typeParameter;
                                var indexedAccessType = getIndexedAccessType(source, indexingType);
                                // Compare `S[indexingType]` to `T`, where `T` is the type of a property of the target type.
                                if (result = isRelatedTo(indexedAccessType, templateType_1, 3 /* RecursionFlags.Both */, reportErrors)) {
                                    return result;
                                }
                            }
                        }
                        originalErrorInfo = errorInfo;
                        resetErrorInfo(saveErrorInfo);
                    }
                }
            }
            else if (targetFlags & 16777216 /* TypeFlags.Conditional */) {
                // If we reach 10 levels of nesting for the same conditional type, assume it is an infinitely expanding recursive
                // conditional type and bail out with a Ternary.Maybe result.
                if (isDeeplyNestedType(target, targetStack, targetDepth, 10)) {
                    return 3 /* Ternary.Maybe */;
                }
                var c = target;
                // We check for a relationship to a conditional type target only when the conditional type has no
                // 'infer' positions, is not distributive or is distributive but doesn't reference the check type
                // parameter in either of the result types, and the source isn't an instantiation of the same
                // conditional type (as happens when computing variance).
                if (!c.root.inferTypeParameters && !isDistributionDependent(c.root) && !(source.flags & 16777216 /* TypeFlags.Conditional */ && source.root === c.root)) {
                    // Check if the conditional is always true or always false but still deferred for distribution purposes.
                    var skipTrue = !isTypeAssignableTo(getPermissiveInstantiation(c.checkType), getPermissiveInstantiation(c.extendsType));
                    var skipFalse = !skipTrue && isTypeAssignableTo(getRestrictiveInstantiation(c.checkType), getRestrictiveInstantiation(c.extendsType));
                    // TODO: Find a nice way to include potential conditional type breakdowns in error output, if they seem good (they usually don't)
                    if (result = skipTrue ? -1 /* Ternary.True */ : isRelatedTo(source, getTrueTypeFromConditionalType(c), 2 /* RecursionFlags.Target */, /*reportErrors*/ false, /*headMessage*/ undefined, intersectionState)) {
                        result &= skipFalse ? -1 /* Ternary.True */ : isRelatedTo(source, getFalseTypeFromConditionalType(c), 2 /* RecursionFlags.Target */, /*reportErrors*/ false, /*headMessage*/ undefined, intersectionState);
                        if (result) {
                            return result;
                        }
                    }
                }
            }
            else if (targetFlags & 134217728 /* TypeFlags.TemplateLiteral */) {
                if (sourceFlags & 134217728 /* TypeFlags.TemplateLiteral */) {
                    if (relation === comparableRelation) {
                        return templateLiteralTypesDefinitelyUnrelated(source, target) ? 0 /* Ternary.False */ : -1 /* Ternary.True */;
                    }
                    // Report unreliable variance for type variables referenced in template literal type placeholders.
                    // For example, `foo-${number}` is related to `foo-${string}` even though number isn't related to string.
                    instantiateType(source, reportUnreliableMapper);
                }
                if (isTypeMatchedByTemplateLiteralType(source, target)) {
                    return -1 /* Ternary.True */;
                }
            }
            else if (target.flags & 268435456 /* TypeFlags.StringMapping */) {
                if (!(source.flags & 268435456 /* TypeFlags.StringMapping */)) {
                    if (isMemberOfStringMapping(source, target)) {
                        return -1 /* Ternary.True */;
                    }
                }
            }
            if (sourceFlags & 8650752 /* TypeFlags.TypeVariable */) {
                // IndexedAccess comparisons are handled above in the `targetFlags & TypeFlage.IndexedAccess` branch
                if (!(sourceFlags & 8388608 /* TypeFlags.IndexedAccess */ && targetFlags & 8388608 /* TypeFlags.IndexedAccess */)) {
                    var constraint = getConstraintOfType(source) || unknownType;
                    // hi-speed no-this-instantiation check (less accurate, but avoids costly `this`-instantiation when the constraint will suffice), see #28231 for report on why this is needed
                    if (result = isRelatedTo(constraint, target, 1 /* RecursionFlags.Source */, /*reportErrors*/ false, /*headMessage*/ undefined, intersectionState)) {
                        return result;
                    }
                    // slower, fuller, this-instantiated check (necessary when comparing raw `this` types from base classes), see `subclassWithPolymorphicThisIsAssignable.ts` test for example
                    else if (result = isRelatedTo(getTypeWithThisArgument(constraint, source), target, 1 /* RecursionFlags.Source */, reportErrors && constraint !== unknownType && !(targetFlags & sourceFlags & 262144 /* TypeFlags.TypeParameter */), /*headMessage*/ undefined, intersectionState)) {
                        return result;
                    }
                    if (sourceFlags & 8388608 /* TypeFlags.IndexedAccess */) {
                        var indexType = source.indexType;
                        if (indexType.flags & 4194304 /* TypeFlags.Index */) {
                            var unresolvedIndexConstraint = getBaseConstraintOfType(indexType.type);
                            var indexConstraint = unresolvedIndexConstraint && unresolvedIndexConstraint !== noConstraintType ? getIndexType(unresolvedIndexConstraint) : keyofConstraintType;
                            var constraint_1 = getIndexedAccessType(source.objectType, indexConstraint);
                            if (result = isRelatedTo(constraint_1, target, 1 /* RecursionFlags.Source */, /*reportErrors*/ false, /*headMessage*/ undefined, intersectionState)) {
                                return result;
                            }
                        }
                    }
                    if (isMappedTypeGenericIndexedAccess(source)) {
                        // For an indexed access type { [P in K]: E}[X], above we have already explored an instantiation of E with X
                        // substituted for P. We also want to explore type { [P in K]: E }[C], where C is the constraint of X.
                        var indexConstraint = getConstraintOfType(source.indexType);
                        if (indexConstraint) {
                            if (result = isRelatedTo(getIndexedAccessType(source.objectType, indexConstraint), target, 1 /* RecursionFlags.Source */, reportErrors)) {
                                return result;
                            }
                        }
                    }
                }
            }
            else if (sourceFlags & 4194304 /* TypeFlags.Index */) {
                if (result = isRelatedTo(keyofConstraintType, target, 1 /* RecursionFlags.Source */, reportErrors)) {
                    return result;
                }
            }
            else if (sourceFlags & 134217728 /* TypeFlags.TemplateLiteral */ && !(targetFlags & 524288 /* TypeFlags.Object */)) {
                if (!(targetFlags & 134217728 /* TypeFlags.TemplateLiteral */)) {
                    var constraint = getBaseConstraintOfType(source);
                    if (constraint && constraint !== source && (result = isRelatedTo(constraint, target, 1 /* RecursionFlags.Source */, reportErrors))) {
                        return result;
                    }
                }
            }
            else if (sourceFlags & 268435456 /* TypeFlags.StringMapping */) {
                if (targetFlags & 268435456 /* TypeFlags.StringMapping */) {
                    if (source.symbol !== target.symbol) {
                        return 0 /* Ternary.False */;
                    }
                    if (result = isRelatedTo(source.type, target.type, 3 /* RecursionFlags.Both */, reportErrors)) {
                        return result;
                    }
                }
                else {
                    var constraint = getBaseConstraintOfType(source);
                    if (constraint && (result = isRelatedTo(constraint, target, 1 /* RecursionFlags.Source */, reportErrors))) {
                        return result;
                    }
                }
            }
            else if (sourceFlags & 16777216 /* TypeFlags.Conditional */) {
                // If we reach 10 levels of nesting for the same conditional type, assume it is an infinitely expanding recursive
                // conditional type and bail out with a Ternary.Maybe result.
                if (isDeeplyNestedType(source, sourceStack, sourceDepth, 10)) {
                    return 3 /* Ternary.Maybe */;
                }
                if (targetFlags & 16777216 /* TypeFlags.Conditional */) {
                    // Two conditional types 'T1 extends U1 ? X1 : Y1' and 'T2 extends U2 ? X2 : Y2' are related if
                    // one of T1 and T2 is related to the other, U1 and U2 are identical types, X1 is related to X2,
                    // and Y1 is related to Y2.
                    var sourceParams = source.root.inferTypeParameters;
                    var sourceExtends = source.extendsType;
                    var mapper = void 0;
                    if (sourceParams) {
                        // If the source has infer type parameters, we instantiate them in the context of the target
                        var ctx = createInferenceContext(sourceParams, /*signature*/ undefined, 0 /* InferenceFlags.None */, isRelatedToWorker);
                        inferTypes(ctx.inferences, target.extendsType, sourceExtends, 512 /* InferencePriority.NoConstraints */ | 1024 /* InferencePriority.AlwaysStrict */);
                        sourceExtends = instantiateType(sourceExtends, ctx.mapper);
                        mapper = ctx.mapper;
                    }
                    if (isTypeIdenticalTo(sourceExtends, target.extendsType) &&
                        (isRelatedTo(source.checkType, target.checkType, 3 /* RecursionFlags.Both */) || isRelatedTo(target.checkType, source.checkType, 3 /* RecursionFlags.Both */))) {
                        if (result = isRelatedTo(instantiateType(getTrueTypeFromConditionalType(source), mapper), getTrueTypeFromConditionalType(target), 3 /* RecursionFlags.Both */, reportErrors)) {
                            result &= isRelatedTo(getFalseTypeFromConditionalType(source), getFalseTypeFromConditionalType(target), 3 /* RecursionFlags.Both */, reportErrors);
                        }
                        if (result) {
                            return result;
                        }
                    }
                }
                else {
                    // conditionals aren't related to one another via distributive constraint as it is much too inaccurate and allows way
                    // more assignments than are desirable (since it maps the source check type to its constraint, it loses information)
                    var distributiveConstraint = hasNonCircularBaseConstraint(source) ? getConstraintOfDistributiveConditionalType(source) : undefined;
                    if (distributiveConstraint) {
                        if (result = isRelatedTo(distributiveConstraint, target, 1 /* RecursionFlags.Source */, reportErrors)) {
                            return result;
                        }
                    }
                }
                // conditionals _can_ be related to one another via normal constraint, as, eg, `A extends B ? O : never` should be assignable to `O`
                // when `O` is a conditional (`never` is trivially assignable to `O`, as is `O`!).
                var defaultConstraint = getDefaultConstraintOfConditionalType(source);
                if (defaultConstraint) {
                    if (result = isRelatedTo(defaultConstraint, target, 1 /* RecursionFlags.Source */, reportErrors)) {
                        return result;
                    }
                }
            }
            else {
                // An empty object type is related to any mapped type that includes a '?' modifier.
                if (relation !== subtypeRelation && relation !== strictSubtypeRelation && isPartialMappedType(target) && isEmptyObjectType(source)) {
                    return -1 /* Ternary.True */;
                }
                if (isGenericMappedType(target)) {
                    if (isGenericMappedType(source)) {
                        if (result = mappedTypeRelatedTo(source, target, reportErrors)) {
                            return result;
                        }
                    }
                    return 0 /* Ternary.False */;
                }
                var sourceIsPrimitive = !!(sourceFlags & 402784252 /* TypeFlags.Primitive */);
                if (relation !== identityRelation) {
                    source = getApparentType(source);
                    sourceFlags = source.flags;
                }
                else if (isGenericMappedType(source)) {
                    return 0 /* Ternary.False */;
                }
                if ((0, ts_1.getObjectFlags)(source) & 4 /* ObjectFlags.Reference */ && (0, ts_1.getObjectFlags)(target) & 4 /* ObjectFlags.Reference */ && source.target === target.target &&
                    !isTupleType(source) && !(isMarkerType(source) || isMarkerType(target))) {
                    // When strictNullChecks is disabled, the element type of the empty array literal is undefinedWideningType,
                    // and an empty array literal wouldn't be assignable to a `never[]` without this check.
                    if (isEmptyArrayLiteralType(source)) {
                        return -1 /* Ternary.True */;
                    }
                    // We have type references to the same generic type, and the type references are not marker
                    // type references (which are intended by be compared structurally). Obtain the variance
                    // information for the type parameters and relate the type arguments accordingly.
                    var variances = getVariances(source.target);
                    // We return Ternary.Maybe for a recursive invocation of getVariances (signalled by emptyArray). This
                    // effectively means we measure variance only from type parameter occurrences that aren't nested in
                    // recursive instantiations of the generic type.
                    if (variances === ts_1.emptyArray) {
                        return 1 /* Ternary.Unknown */;
                    }
                    var varianceResult = relateVariances(getTypeArguments(source), getTypeArguments(target), variances, intersectionState);
                    if (varianceResult !== undefined) {
                        return varianceResult;
                    }
                }
                else if (isReadonlyArrayType(target) ? everyType(source, isArrayOrTupleType) : isArrayType(target) && everyType(source, function (t) { return isTupleType(t) && !t.target.readonly; })) {
                    if (relation !== identityRelation) {
                        return isRelatedTo(getIndexTypeOfType(source, numberType) || anyType, getIndexTypeOfType(target, numberType) || anyType, 3 /* RecursionFlags.Both */, reportErrors);
                    }
                    else {
                        // By flags alone, we know that the `target` is a readonly array while the source is a normal array or tuple
                        // or `target` is an array and source is a tuple - in both cases the types cannot be identical, by construction
                        return 0 /* Ternary.False */;
                    }
                }
                else if (isGenericTupleType(source) && isTupleType(target) && !isGenericTupleType(target)) {
                    var constraint = getBaseConstraintOrType(source);
                    if (constraint !== source) {
                        return isRelatedTo(constraint, target, 1 /* RecursionFlags.Source */, reportErrors);
                    }
                }
                // A fresh empty object type is never a subtype of a non-empty object type. This ensures fresh({}) <: { [x: string]: xxx }
                // but not vice-versa. Without this rule, those types would be mutual subtypes.
                else if ((relation === subtypeRelation || relation === strictSubtypeRelation) && isEmptyObjectType(target) && (0, ts_1.getObjectFlags)(target) & 8192 /* ObjectFlags.FreshLiteral */ && !isEmptyObjectType(source)) {
                    return 0 /* Ternary.False */;
                }
                // Even if relationship doesn't hold for unions, intersections, or generic type references,
                // it may hold in a structural comparison.
                // In a check of the form X = A & B, we will have previously checked if A relates to X or B relates
                // to X. Failing both of those we want to check if the aggregation of A and B's members structurally
                // relates to X. Thus, we include intersection types on the source side here.
                if (sourceFlags & (524288 /* TypeFlags.Object */ | 2097152 /* TypeFlags.Intersection */) && targetFlags & 524288 /* TypeFlags.Object */) {
                    // Report structural errors only if we haven't reported any errors yet
                    var reportStructuralErrors = reportErrors && errorInfo === saveErrorInfo.errorInfo && !sourceIsPrimitive;
                    result = propertiesRelatedTo(source, target, reportStructuralErrors, /*excludedProperties*/ undefined, /*optionalsOnly*/ false, intersectionState);
                    if (result) {
                        result &= signaturesRelatedTo(source, target, 0 /* SignatureKind.Call */, reportStructuralErrors, intersectionState);
                        if (result) {
                            result &= signaturesRelatedTo(source, target, 1 /* SignatureKind.Construct */, reportStructuralErrors, intersectionState);
                            if (result) {
                                result &= indexSignaturesRelatedTo(source, target, sourceIsPrimitive, reportStructuralErrors, intersectionState);
                            }
                        }
                    }
                    if (varianceCheckFailed && result) {
                        errorInfo = originalErrorInfo || errorInfo || saveErrorInfo.errorInfo; // Use variance error (there is no structural one) and return false
                    }
                    else if (result) {
                        return result;
                    }
                }
                // If S is an object type and T is a discriminated union, S may be related to T if
                // there exists a constituent of T for every combination of the discriminants of S
                // with respect to T. We do not report errors here, as we will use the existing
                // error result from checking each constituent of the union.
                if (sourceFlags & (524288 /* TypeFlags.Object */ | 2097152 /* TypeFlags.Intersection */) && targetFlags & 1048576 /* TypeFlags.Union */) {
                    var objectOnlyTarget = extractTypesOfKind(target, 524288 /* TypeFlags.Object */ | 2097152 /* TypeFlags.Intersection */ | 33554432 /* TypeFlags.Substitution */);
                    if (objectOnlyTarget.flags & 1048576 /* TypeFlags.Union */) {
                        var result_5 = typeRelatedToDiscriminatedType(source, objectOnlyTarget);
                        if (result_5) {
                            return result_5;
                        }
                    }
                }
            }
            return 0 /* Ternary.False */;
            function countMessageChainBreadth(info) {
                if (!info)
                    return 0;
                return (0, ts_1.reduceLeft)(info, function (value, chain) { return value + 1 + countMessageChainBreadth(chain.next); }, 0);
            }
            function relateVariances(sourceTypeArguments, targetTypeArguments, variances, intersectionState) {
                if (result = typeArgumentsRelatedTo(sourceTypeArguments, targetTypeArguments, variances, reportErrors, intersectionState)) {
                    return result;
                }
                if ((0, ts_1.some)(variances, function (v) { return !!(v & 24 /* VarianceFlags.AllowsStructuralFallback */); })) {
                    // If some type parameter was `Unmeasurable` or `Unreliable`, and we couldn't pass by assuming it was identical, then we
                    // have to allow a structural fallback check
                    // We elide the variance-based error elaborations, since those might not be too helpful, since we'll potentially
                    // be assuming identity of the type parameter.
                    originalErrorInfo = undefined;
                    resetErrorInfo(saveErrorInfo);
                    return undefined;
                }
                var allowStructuralFallback = targetTypeArguments && hasCovariantVoidArgument(targetTypeArguments, variances);
                varianceCheckFailed = !allowStructuralFallback;
                // The type arguments did not relate appropriately, but it may be because we have no variance
                // information (in which case typeArgumentsRelatedTo defaulted to covariance for all type
                // arguments). It might also be the case that the target type has a 'void' type argument for
                // a covariant type parameter that is only used in return positions within the generic type
                // (in which case any type argument is permitted on the source side). In those cases we proceed
                // with a structural comparison. Otherwise, we know for certain the instantiations aren't
                // related and we can return here.
                if (variances !== ts_1.emptyArray && !allowStructuralFallback) {
                    // In some cases generic types that are covariant in regular type checking mode become
                    // invariant in --strictFunctionTypes mode because one or more type parameters are used in
                    // both co- and contravariant positions. In order to make it easier to diagnose *why* such
                    // types are invariant, if any of the type parameters are invariant we reset the reported
                    // errors and instead force a structural comparison (which will include elaborations that
                    // reveal the reason).
                    // We can switch on `reportErrors` here, since varianceCheckFailed guarantees we return `False`,
                    // we can return `False` early here to skip calculating the structural error message we don't need.
                    if (varianceCheckFailed && !(reportErrors && (0, ts_1.some)(variances, function (v) { return (v & 7 /* VarianceFlags.VarianceMask */) === 0 /* VarianceFlags.Invariant */; }))) {
                        return 0 /* Ternary.False */;
                    }
                    // We remember the original error information so we can restore it in case the structural
                    // comparison unexpectedly succeeds. This can happen when the structural comparison result
                    // is a Ternary.Maybe for example caused by the recursion depth limiter.
                    originalErrorInfo = errorInfo;
                    resetErrorInfo(saveErrorInfo);
                }
            }
        }
        // A type [P in S]: X is related to a type [Q in T]: Y if T is related to S and X' is
        // related to Y, where X' is an instantiation of X in which P is replaced with Q. Notice
        // that S and T are contra-variant whereas X and Y are co-variant.
        function mappedTypeRelatedTo(source, target, reportErrors) {
            var modifiersRelated = relation === comparableRelation || (relation === identityRelation ? getMappedTypeModifiers(source) === getMappedTypeModifiers(target) :
                getCombinedMappedTypeOptionality(source) <= getCombinedMappedTypeOptionality(target));
            if (modifiersRelated) {
                var result_6;
                var targetConstraint = getConstraintTypeFromMappedType(target);
                var sourceConstraint = instantiateType(getConstraintTypeFromMappedType(source), getCombinedMappedTypeOptionality(source) < 0 ? reportUnmeasurableMapper : reportUnreliableMapper);
                if (result_6 = isRelatedTo(targetConstraint, sourceConstraint, 3 /* RecursionFlags.Both */, reportErrors)) {
                    var mapper = createTypeMapper([getTypeParameterFromMappedType(source)], [getTypeParameterFromMappedType(target)]);
                    if (instantiateType(getNameTypeFromMappedType(source), mapper) === instantiateType(getNameTypeFromMappedType(target), mapper)) {
                        return result_6 & isRelatedTo(instantiateType(getTemplateTypeFromMappedType(source), mapper), getTemplateTypeFromMappedType(target), 3 /* RecursionFlags.Both */, reportErrors);
                    }
                }
            }
            return 0 /* Ternary.False */;
        }
        function typeRelatedToDiscriminatedType(source, target) {
            // 1. Generate the combinations of discriminant properties & types 'source' can satisfy.
            //    a. If the number of combinations is above a set limit, the comparison is too complex.
            // 2. Filter 'target' to the subset of types whose discriminants exist in the matrix.
            //    a. If 'target' does not satisfy all discriminants in the matrix, 'source' is not related.
            // 3. For each type in the filtered 'target', determine if all non-discriminant properties of
            //    'target' are related to a property in 'source'.
            //
            // NOTE: See ~/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithDiscriminatedUnion.ts
            //       for examples.
            var sourceProperties = getPropertiesOfType(source);
            var sourcePropertiesFiltered = findDiscriminantProperties(sourceProperties, target);
            if (!sourcePropertiesFiltered)
                return 0 /* Ternary.False */;
            // Though we could compute the number of combinations as we generate
            // the matrix, this would incur additional memory overhead due to
            // array allocations. To reduce this overhead, we first compute
            // the number of combinations to ensure we will not surpass our
            // fixed limit before incurring the cost of any allocations:
            var numCombinations = 1;
            for (var _i = 0, sourcePropertiesFiltered_1 = sourcePropertiesFiltered; _i < sourcePropertiesFiltered_1.length; _i++) {
                var sourceProperty = sourcePropertiesFiltered_1[_i];
                numCombinations *= countTypes(getNonMissingTypeOfSymbol(sourceProperty));
                if (numCombinations > 25) {
                    // We've reached the complexity limit.
                    ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.instant("checkTypes" /* tracing.Phase.CheckTypes */, "typeRelatedToDiscriminatedType_DepthLimit", { sourceId: source.id, targetId: target.id, numCombinations: numCombinations });
                    return 0 /* Ternary.False */;
                }
            }
            // Compute the set of types for each discriminant property.
            var sourceDiscriminantTypes = new Array(sourcePropertiesFiltered.length);
            var excludedProperties = new Set();
            for (var i = 0; i < sourcePropertiesFiltered.length; i++) {
                var sourceProperty = sourcePropertiesFiltered[i];
                var sourcePropertyType = getNonMissingTypeOfSymbol(sourceProperty);
                sourceDiscriminantTypes[i] = sourcePropertyType.flags & 1048576 /* TypeFlags.Union */
                    ? sourcePropertyType.types
                    : [sourcePropertyType];
                excludedProperties.add(sourceProperty.escapedName);
            }
            // Match each combination of the cartesian product of discriminant properties to one or more
            // constituents of 'target'. If any combination does not have a match then 'source' is not relatable.
            var discriminantCombinations = (0, ts_1.cartesianProduct)(sourceDiscriminantTypes);
            var matchingTypes = [];
            var _loop_16 = function (combination) {
                var hasMatch = false;
                outer: for (var _c = 0, _d = target.types; _c < _d.length; _c++) {
                    var type = _d[_c];
                    var _loop_17 = function (i) {
                        var sourceProperty = sourcePropertiesFiltered[i];
                        var targetProperty = getPropertyOfType(type, sourceProperty.escapedName);
                        if (!targetProperty)
                            return "continue-outer";
                        if (sourceProperty === targetProperty)
                            return "continue";
                        // We compare the source property to the target in the context of a single discriminant type.
                        var related = propertyRelatedTo(source, target, sourceProperty, targetProperty, function (_) { return combination[i]; }, /*reportErrors*/ false, 0 /* IntersectionState.None */, /*skipOptional*/ strictNullChecks || relation === comparableRelation);
                        // If the target property could not be found, or if the properties were not related,
                        // then this constituent is not a match.
                        if (!related) {
                            return "continue-outer";
                        }
                    };
                    for (var i = 0; i < sourcePropertiesFiltered.length; i++) {
                        var state_8 = _loop_17(i);
                        switch (state_8) {
                            case "continue-outer": continue outer;
                        }
                    }
                    (0, ts_1.pushIfUnique)(matchingTypes, type, ts_1.equateValues);
                    hasMatch = true;
                }
                if (!hasMatch) {
                    return { value: 0 /* Ternary.False */ };
                }
            };
            for (var _a = 0, discriminantCombinations_1 = discriminantCombinations; _a < discriminantCombinations_1.length; _a++) {
                var combination = discriminantCombinations_1[_a];
                var state_7 = _loop_16(combination);
                if (typeof state_7 === "object")
                    return state_7.value;
            }
            // Compare the remaining non-discriminant properties of each match.
            var result = -1 /* Ternary.True */;
            for (var _b = 0, matchingTypes_1 = matchingTypes; _b < matchingTypes_1.length; _b++) {
                var type = matchingTypes_1[_b];
                result &= propertiesRelatedTo(source, type, /*reportErrors*/ false, excludedProperties, /*optionalsOnly*/ false, 0 /* IntersectionState.None */);
                if (result) {
                    result &= signaturesRelatedTo(source, type, 0 /* SignatureKind.Call */, /*reportErrors*/ false, 0 /* IntersectionState.None */);
                    if (result) {
                        result &= signaturesRelatedTo(source, type, 1 /* SignatureKind.Construct */, /*reportErrors*/ false, 0 /* IntersectionState.None */);
                        if (result && !(isTupleType(source) && isTupleType(type))) {
                            // Comparing numeric index types when both `source` and `type` are tuples is unnecessary as the
                            // element types should be sufficiently covered by `propertiesRelatedTo`. It also causes problems
                            // with index type assignability as the types for the excluded discriminants are still included
                            // in the index type.
                            result &= indexSignaturesRelatedTo(source, type, /*sourceIsPrimitive*/ false, /*reportErrors*/ false, 0 /* IntersectionState.None */);
                        }
                    }
                }
                if (!result) {
                    return result;
                }
            }
            return result;
        }
        function excludeProperties(properties, excludedProperties) {
            if (!excludedProperties || properties.length === 0)
                return properties;
            var result;
            for (var i = 0; i < properties.length; i++) {
                if (!excludedProperties.has(properties[i].escapedName)) {
                    if (result) {
                        result.push(properties[i]);
                    }
                }
                else if (!result) {
                    result = properties.slice(0, i);
                }
            }
            return result || properties;
        }
        function isPropertySymbolTypeRelated(sourceProp, targetProp, getTypeOfSourceProperty, reportErrors, intersectionState) {
            var targetIsOptional = strictNullChecks && !!((0, ts_1.getCheckFlags)(targetProp) & 48 /* CheckFlags.Partial */);
            var effectiveTarget = addOptionality(getNonMissingTypeOfSymbol(targetProp), /*isProperty*/ false, targetIsOptional);
            var effectiveSource = getTypeOfSourceProperty(sourceProp);
            return isRelatedTo(effectiveSource, effectiveTarget, 3 /* RecursionFlags.Both */, reportErrors, /*headMessage*/ undefined, intersectionState);
        }
        function propertyRelatedTo(source, target, sourceProp, targetProp, getTypeOfSourceProperty, reportErrors, intersectionState, skipOptional) {
            var sourcePropFlags = (0, ts_1.getDeclarationModifierFlagsFromSymbol)(sourceProp);
            var targetPropFlags = (0, ts_1.getDeclarationModifierFlagsFromSymbol)(targetProp);
            if (sourcePropFlags & 8 /* ModifierFlags.Private */ || targetPropFlags & 8 /* ModifierFlags.Private */) {
                if (sourceProp.valueDeclaration !== targetProp.valueDeclaration) {
                    if (reportErrors) {
                        if (sourcePropFlags & 8 /* ModifierFlags.Private */ && targetPropFlags & 8 /* ModifierFlags.Private */) {
                            reportError(ts_1.Diagnostics.Types_have_separate_declarations_of_a_private_property_0, symbolToString(targetProp));
                        }
                        else {
                            reportError(ts_1.Diagnostics.Property_0_is_private_in_type_1_but_not_in_type_2, symbolToString(targetProp), typeToString(sourcePropFlags & 8 /* ModifierFlags.Private */ ? source : target), typeToString(sourcePropFlags & 8 /* ModifierFlags.Private */ ? target : source));
                        }
                    }
                    return 0 /* Ternary.False */;
                }
            }
            else if (targetPropFlags & 16 /* ModifierFlags.Protected */) {
                if (!isValidOverrideOf(sourceProp, targetProp)) {
                    if (reportErrors) {
                        reportError(ts_1.Diagnostics.Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2, symbolToString(targetProp), typeToString(getDeclaringClass(sourceProp) || source), typeToString(getDeclaringClass(targetProp) || target));
                    }
                    return 0 /* Ternary.False */;
                }
            }
            else if (sourcePropFlags & 16 /* ModifierFlags.Protected */) {
                if (reportErrors) {
                    reportError(ts_1.Diagnostics.Property_0_is_protected_in_type_1_but_public_in_type_2, symbolToString(targetProp), typeToString(source), typeToString(target));
                }
                return 0 /* Ternary.False */;
            }
            // Ensure {readonly a: whatever} is not a subtype of {a: whatever},
            // while {a: whatever} is a subtype of {readonly a: whatever}.
            // This ensures the subtype relationship is ordered, and preventing declaration order
            // from deciding which type "wins" in union subtype reduction.
            // They're still assignable to one another, since `readonly` doesn't affect assignability.
            // This is only applied during the strictSubtypeRelation -- currently used in subtype reduction
            if (relation === strictSubtypeRelation &&
                isReadonlySymbol(sourceProp) && !isReadonlySymbol(targetProp)) {
                return 0 /* Ternary.False */;
            }
            // If the target comes from a partial union prop, allow `undefined` in the target type
            var related = isPropertySymbolTypeRelated(sourceProp, targetProp, getTypeOfSourceProperty, reportErrors, intersectionState);
            if (!related) {
                if (reportErrors) {
                    reportIncompatibleError(ts_1.Diagnostics.Types_of_property_0_are_incompatible, symbolToString(targetProp));
                }
                return 0 /* Ternary.False */;
            }
            // When checking for comparability, be more lenient with optional properties.
            if (!skipOptional && sourceProp.flags & 16777216 /* SymbolFlags.Optional */ && targetProp.flags & 106500 /* SymbolFlags.ClassMember */ && !(targetProp.flags & 16777216 /* SymbolFlags.Optional */)) {
                // TypeScript 1.0 spec (April 2014): 3.8.3
                // S is a subtype of a type T, and T is a supertype of S if ...
                // S' and T are object types and, for each member M in T..
                // M is a property and S' contains a property N where
                // if M is a required property, N is also a required property
                // (M - property in T)
                // (N - property in S)
                if (reportErrors) {
                    reportError(ts_1.Diagnostics.Property_0_is_optional_in_type_1_but_required_in_type_2, symbolToString(targetProp), typeToString(source), typeToString(target));
                }
                return 0 /* Ternary.False */;
            }
            return related;
        }
        function reportUnmatchedProperty(source, target, unmatchedProperty, requireOptionalProperties) {
            var shouldSkipElaboration = false;
            // give specific error in case where private names have the same description
            if (unmatchedProperty.valueDeclaration
                && (0, ts_1.isNamedDeclaration)(unmatchedProperty.valueDeclaration)
                && (0, ts_1.isPrivateIdentifier)(unmatchedProperty.valueDeclaration.name)
                && source.symbol
                && source.symbol.flags & 32 /* SymbolFlags.Class */) {
                var privateIdentifierDescription = unmatchedProperty.valueDeclaration.name.escapedText;
                var symbolTableKey = (0, ts_1.getSymbolNameForPrivateIdentifier)(source.symbol, privateIdentifierDescription);
                if (symbolTableKey && getPropertyOfType(source, symbolTableKey)) {
                    var sourceName = ts_1.factory.getDeclarationName(source.symbol.valueDeclaration);
                    var targetName = ts_1.factory.getDeclarationName(target.symbol.valueDeclaration);
                    reportError(ts_1.Diagnostics.Property_0_in_type_1_refers_to_a_different_member_that_cannot_be_accessed_from_within_type_2, diagnosticName(privateIdentifierDescription), diagnosticName(sourceName.escapedText === "" ? anon : sourceName), diagnosticName(targetName.escapedText === "" ? anon : targetName));
                    return;
                }
            }
            var props = (0, ts_1.arrayFrom)(getUnmatchedProperties(source, target, requireOptionalProperties, /*matchDiscriminantProperties*/ false));
            if (!headMessage || (headMessage.code !== ts_1.Diagnostics.Class_0_incorrectly_implements_interface_1.code &&
                headMessage.code !== ts_1.Diagnostics.Class_0_incorrectly_implements_class_1_Did_you_mean_to_extend_1_and_inherit_its_members_as_a_subclass.code)) {
                shouldSkipElaboration = true; // Retain top-level error for interface implementing issues, otherwise omit it
            }
            if (props.length === 1) {
                var propName = symbolToString(unmatchedProperty, /*enclosingDeclaration*/ undefined, 0 /* SymbolFlags.None */, 4 /* SymbolFormatFlags.AllowAnyNodeKind */ | 16 /* SymbolFormatFlags.WriteComputedProps */);
                reportError.apply(void 0, __spreadArray([ts_1.Diagnostics.Property_0_is_missing_in_type_1_but_required_in_type_2, propName], getTypeNamesForErrorDisplay(source, target), false));
                if ((0, ts_1.length)(unmatchedProperty.declarations)) {
                    associateRelatedInfo((0, ts_1.createDiagnosticForNode)(unmatchedProperty.declarations[0], ts_1.Diagnostics._0_is_declared_here, propName));
                }
                if (shouldSkipElaboration && errorInfo) {
                    overrideNextErrorInfo++;
                }
            }
            else if (tryElaborateArrayLikeErrors(source, target, /*reportErrors*/ false)) {
                if (props.length > 5) { // arbitrary cutoff for too-long list form
                    reportError(ts_1.Diagnostics.Type_0_is_missing_the_following_properties_from_type_1_Colon_2_and_3_more, typeToString(source), typeToString(target), (0, ts_1.map)(props.slice(0, 4), function (p) { return symbolToString(p); }).join(", "), props.length - 4);
                }
                else {
                    reportError(ts_1.Diagnostics.Type_0_is_missing_the_following_properties_from_type_1_Colon_2, typeToString(source), typeToString(target), (0, ts_1.map)(props, function (p) { return symbolToString(p); }).join(", "));
                }
                if (shouldSkipElaboration && errorInfo) {
                    overrideNextErrorInfo++;
                }
            }
            // No array like or unmatched property error - just issue top level error (errorInfo = undefined)
        }
        function propertiesRelatedTo(source, target, reportErrors, excludedProperties, optionalsOnly, intersectionState) {
            if (relation === identityRelation) {
                return propertiesIdenticalTo(source, target, excludedProperties);
            }
            var result = -1 /* Ternary.True */;
            if (isTupleType(target)) {
                if (isArrayOrTupleType(source)) {
                    if (!target.target.readonly && (isReadonlyArrayType(source) || isTupleType(source) && source.target.readonly)) {
                        return 0 /* Ternary.False */;
                    }
                    var sourceArity = getTypeReferenceArity(source);
                    var targetArity = getTypeReferenceArity(target);
                    var sourceRestFlag = isTupleType(source) ? source.target.combinedFlags & 4 /* ElementFlags.Rest */ : 4 /* ElementFlags.Rest */;
                    var targetRestFlag = target.target.combinedFlags & 4 /* ElementFlags.Rest */;
                    var sourceMinLength = isTupleType(source) ? source.target.minLength : 0;
                    var targetMinLength = target.target.minLength;
                    if (!sourceRestFlag && sourceArity < targetMinLength) {
                        if (reportErrors) {
                            reportError(ts_1.Diagnostics.Source_has_0_element_s_but_target_requires_1, sourceArity, targetMinLength);
                        }
                        return 0 /* Ternary.False */;
                    }
                    if (!targetRestFlag && targetArity < sourceMinLength) {
                        if (reportErrors) {
                            reportError(ts_1.Diagnostics.Source_has_0_element_s_but_target_allows_only_1, sourceMinLength, targetArity);
                        }
                        return 0 /* Ternary.False */;
                    }
                    if (!targetRestFlag && (sourceRestFlag || targetArity < sourceArity)) {
                        if (reportErrors) {
                            if (sourceMinLength < targetMinLength) {
                                reportError(ts_1.Diagnostics.Target_requires_0_element_s_but_source_may_have_fewer, targetMinLength);
                            }
                            else {
                                reportError(ts_1.Diagnostics.Target_allows_only_0_element_s_but_source_may_have_more, targetArity);
                            }
                        }
                        return 0 /* Ternary.False */;
                    }
                    var sourceTypeArguments = getTypeArguments(source);
                    var targetTypeArguments = getTypeArguments(target);
                    var targetStartCount = getStartElementCount(target.target, 11 /* ElementFlags.NonRest */);
                    var targetEndCount = getEndElementCount(target.target, 11 /* ElementFlags.NonRest */);
                    var targetHasRestElement = target.target.hasRestElement;
                    var canExcludeDiscriminants = !!excludedProperties;
                    for (var sourcePosition = 0; sourcePosition < sourceArity; sourcePosition++) {
                        var sourceFlags = isTupleType(source) ? source.target.elementFlags[sourcePosition] : 4 /* ElementFlags.Rest */;
                        var sourcePositionFromEnd = sourceArity - 1 - sourcePosition;
                        var targetPosition = targetHasRestElement && sourcePosition >= targetStartCount
                            ? targetArity - 1 - Math.min(sourcePositionFromEnd, targetEndCount)
                            : sourcePosition;
                        var targetFlags = target.target.elementFlags[targetPosition];
                        if (targetFlags & 8 /* ElementFlags.Variadic */ && !(sourceFlags & 8 /* ElementFlags.Variadic */)) {
                            if (reportErrors) {
                                reportError(ts_1.Diagnostics.Source_provides_no_match_for_variadic_element_at_position_0_in_target, targetPosition);
                            }
                            return 0 /* Ternary.False */;
                        }
                        if (sourceFlags & 8 /* ElementFlags.Variadic */ && !(targetFlags & 12 /* ElementFlags.Variable */)) {
                            if (reportErrors) {
                                reportError(ts_1.Diagnostics.Variadic_element_at_position_0_in_source_does_not_match_element_at_position_1_in_target, sourcePosition, targetPosition);
                            }
                            return 0 /* Ternary.False */;
                        }
                        if (targetFlags & 1 /* ElementFlags.Required */ && !(sourceFlags & 1 /* ElementFlags.Required */)) {
                            if (reportErrors) {
                                reportError(ts_1.Diagnostics.Source_provides_no_match_for_required_element_at_position_0_in_target, targetPosition);
                            }
                            return 0 /* Ternary.False */;
                        }
                        // We can only exclude discriminant properties if we have not yet encountered a variable-length element.
                        if (canExcludeDiscriminants) {
                            if (sourceFlags & 12 /* ElementFlags.Variable */ || targetFlags & 12 /* ElementFlags.Variable */) {
                                canExcludeDiscriminants = false;
                            }
                            if (canExcludeDiscriminants && (excludedProperties === null || excludedProperties === void 0 ? void 0 : excludedProperties.has(("" + sourcePosition)))) {
                                continue;
                            }
                        }
                        var sourceType = removeMissingType(sourceTypeArguments[sourcePosition], !!(sourceFlags & targetFlags & 2 /* ElementFlags.Optional */));
                        var targetType = targetTypeArguments[targetPosition];
                        var targetCheckType = sourceFlags & 8 /* ElementFlags.Variadic */ && targetFlags & 4 /* ElementFlags.Rest */ ? createArrayType(targetType) :
                            removeMissingType(targetType, !!(targetFlags & 2 /* ElementFlags.Optional */));
                        var related = isRelatedTo(sourceType, targetCheckType, 3 /* RecursionFlags.Both */, reportErrors, /*headMessage*/ undefined, intersectionState);
                        if (!related) {
                            if (reportErrors && (targetArity > 1 || sourceArity > 1)) {
                                if (targetHasRestElement && sourcePosition >= targetStartCount && sourcePositionFromEnd >= targetEndCount && targetStartCount !== sourceArity - targetEndCount - 1) {
                                    reportIncompatibleError(ts_1.Diagnostics.Type_at_positions_0_through_1_in_source_is_not_compatible_with_type_at_position_2_in_target, targetStartCount, sourceArity - targetEndCount - 1, targetPosition);
                                }
                                else {
                                    reportIncompatibleError(ts_1.Diagnostics.Type_at_position_0_in_source_is_not_compatible_with_type_at_position_1_in_target, sourcePosition, targetPosition);
                                }
                            }
                            return 0 /* Ternary.False */;
                        }
                        result &= related;
                    }
                    return result;
                }
                if (target.target.combinedFlags & 12 /* ElementFlags.Variable */) {
                    return 0 /* Ternary.False */;
                }
            }
            var requireOptionalProperties = (relation === subtypeRelation || relation === strictSubtypeRelation) && !isObjectLiteralType(source) && !isEmptyArrayLiteralType(source) && !isTupleType(source);
            var unmatchedProperty = getUnmatchedProperty(source, target, requireOptionalProperties, /*matchDiscriminantProperties*/ false);
            if (unmatchedProperty) {
                if (reportErrors && shouldReportUnmatchedPropertyError(source, target)) {
                    reportUnmatchedProperty(source, target, unmatchedProperty, requireOptionalProperties);
                }
                return 0 /* Ternary.False */;
            }
            if (isObjectLiteralType(target)) {
                for (var _i = 0, _a = excludeProperties(getPropertiesOfType(source), excludedProperties); _i < _a.length; _i++) {
                    var sourceProp = _a[_i];
                    if (!getPropertyOfObjectType(target, sourceProp.escapedName)) {
                        var sourceType = getTypeOfSymbol(sourceProp);
                        if (!(sourceType.flags & 32768 /* TypeFlags.Undefined */)) {
                            if (reportErrors) {
                                reportError(ts_1.Diagnostics.Property_0_does_not_exist_on_type_1, symbolToString(sourceProp), typeToString(target));
                            }
                            return 0 /* Ternary.False */;
                        }
                    }
                }
            }
            // We only call this for union target types when we're attempting to do excess property checking - in those cases, we want to get _all possible props_
            // from the target union, across all members
            var properties = getPropertiesOfType(target);
            var numericNamesOnly = isTupleType(source) && isTupleType(target);
            for (var _b = 0, _c = excludeProperties(properties, excludedProperties); _b < _c.length; _b++) {
                var targetProp = _c[_b];
                var name_22 = targetProp.escapedName;
                if (!(targetProp.flags & 4194304 /* SymbolFlags.Prototype */) && (!numericNamesOnly || (0, ts_1.isNumericLiteralName)(name_22) || name_22 === "length") && (!optionalsOnly || targetProp.flags & 16777216 /* SymbolFlags.Optional */)) {
                    var sourceProp = getPropertyOfType(source, name_22);
                    if (sourceProp && sourceProp !== targetProp) {
                        var related = propertyRelatedTo(source, target, sourceProp, targetProp, getNonMissingTypeOfSymbol, reportErrors, intersectionState, relation === comparableRelation);
                        if (!related) {
                            return 0 /* Ternary.False */;
                        }
                        result &= related;
                    }
                }
            }
            return result;
        }
        function propertiesIdenticalTo(source, target, excludedProperties) {
            if (!(source.flags & 524288 /* TypeFlags.Object */ && target.flags & 524288 /* TypeFlags.Object */)) {
                return 0 /* Ternary.False */;
            }
            var sourceProperties = excludeProperties(getPropertiesOfObjectType(source), excludedProperties);
            var targetProperties = excludeProperties(getPropertiesOfObjectType(target), excludedProperties);
            if (sourceProperties.length !== targetProperties.length) {
                return 0 /* Ternary.False */;
            }
            var result = -1 /* Ternary.True */;
            for (var _i = 0, sourceProperties_1 = sourceProperties; _i < sourceProperties_1.length; _i++) {
                var sourceProp = sourceProperties_1[_i];
                var targetProp = getPropertyOfObjectType(target, sourceProp.escapedName);
                if (!targetProp) {
                    return 0 /* Ternary.False */;
                }
                var related = compareProperties(sourceProp, targetProp, isRelatedTo);
                if (!related) {
                    return 0 /* Ternary.False */;
                }
                result &= related;
            }
            return result;
        }
        function signaturesRelatedTo(source, target, kind, reportErrors, intersectionState) {
            var _a, _b;
            if (relation === identityRelation) {
                return signaturesIdenticalTo(source, target, kind);
            }
            if (target === anyFunctionType || source === anyFunctionType) {
                return -1 /* Ternary.True */;
            }
            var sourceIsJSConstructor = source.symbol && isJSConstructor(source.symbol.valueDeclaration);
            var targetIsJSConstructor = target.symbol && isJSConstructor(target.symbol.valueDeclaration);
            var sourceSignatures = getSignaturesOfType(source, (sourceIsJSConstructor && kind === 1 /* SignatureKind.Construct */) ?
                0 /* SignatureKind.Call */ : kind);
            var targetSignatures = getSignaturesOfType(target, (targetIsJSConstructor && kind === 1 /* SignatureKind.Construct */) ?
                0 /* SignatureKind.Call */ : kind);
            if (kind === 1 /* SignatureKind.Construct */ && sourceSignatures.length && targetSignatures.length) {
                var sourceIsAbstract = !!(sourceSignatures[0].flags & 4 /* SignatureFlags.Abstract */);
                var targetIsAbstract = !!(targetSignatures[0].flags & 4 /* SignatureFlags.Abstract */);
                if (sourceIsAbstract && !targetIsAbstract) {
                    // An abstract constructor type is not assignable to a non-abstract constructor type
                    // as it would otherwise be possible to new an abstract class. Note that the assignability
                    // check we perform for an extends clause excludes construct signatures from the target,
                    // so this check never proceeds.
                    if (reportErrors) {
                        reportError(ts_1.Diagnostics.Cannot_assign_an_abstract_constructor_type_to_a_non_abstract_constructor_type);
                    }
                    return 0 /* Ternary.False */;
                }
                if (!constructorVisibilitiesAreCompatible(sourceSignatures[0], targetSignatures[0], reportErrors)) {
                    return 0 /* Ternary.False */;
                }
            }
            var result = -1 /* Ternary.True */;
            var incompatibleReporter = kind === 1 /* SignatureKind.Construct */ ? reportIncompatibleConstructSignatureReturn : reportIncompatibleCallSignatureReturn;
            var sourceObjectFlags = (0, ts_1.getObjectFlags)(source);
            var targetObjectFlags = (0, ts_1.getObjectFlags)(target);
            if (sourceObjectFlags & 64 /* ObjectFlags.Instantiated */ && targetObjectFlags & 64 /* ObjectFlags.Instantiated */ && source.symbol === target.symbol ||
                sourceObjectFlags & 4 /* ObjectFlags.Reference */ && targetObjectFlags & 4 /* ObjectFlags.Reference */ && source.target === target.target) {
                // We have instantiations of the same anonymous type (which typically will be the type of a
                // method). Simply do a pairwise comparison of the signatures in the two signature lists instead
                // of the much more expensive N * M comparison matrix we explore below. We erase type parameters
                // as they are known to always be the same.
                for (var i = 0; i < targetSignatures.length; i++) {
                    var related = signatureRelatedTo(sourceSignatures[i], targetSignatures[i], /*erase*/ true, reportErrors, intersectionState, incompatibleReporter(sourceSignatures[i], targetSignatures[i]));
                    if (!related) {
                        return 0 /* Ternary.False */;
                    }
                    result &= related;
                }
            }
            else if (sourceSignatures.length === 1 && targetSignatures.length === 1) {
                // For simple functions (functions with a single signature) we only erase type parameters for
                // the comparable relation. Otherwise, if the source signature is generic, we instantiate it
                // in the context of the target signature before checking the relationship. Ideally we'd do
                // this regardless of the number of signatures, but the potential costs are prohibitive due
                // to the quadratic nature of the logic below.
                var eraseGenerics = relation === comparableRelation || !!compilerOptions.noStrictGenericChecks;
                var sourceSignature = (0, ts_1.first)(sourceSignatures);
                var targetSignature = (0, ts_1.first)(targetSignatures);
                result = signatureRelatedTo(sourceSignature, targetSignature, eraseGenerics, reportErrors, intersectionState, incompatibleReporter(sourceSignature, targetSignature));
                if (!result && reportErrors && kind === 1 /* SignatureKind.Construct */ && (sourceObjectFlags & targetObjectFlags) &&
                    (((_a = targetSignature.declaration) === null || _a === void 0 ? void 0 : _a.kind) === 175 /* SyntaxKind.Constructor */ || ((_b = sourceSignature.declaration) === null || _b === void 0 ? void 0 : _b.kind) === 175 /* SyntaxKind.Constructor */)) {
                    var constructSignatureToString = function (signature) {
                        return signatureToString(signature, /*enclosingDeclaration*/ undefined, 262144 /* TypeFormatFlags.WriteArrowStyleSignature */, kind);
                    };
                    reportError(ts_1.Diagnostics.Type_0_is_not_assignable_to_type_1, constructSignatureToString(sourceSignature), constructSignatureToString(targetSignature));
                    reportError(ts_1.Diagnostics.Types_of_construct_signatures_are_incompatible);
                    return result;
                }
            }
            else {
                outer: for (var _i = 0, targetSignatures_1 = targetSignatures; _i < targetSignatures_1.length; _i++) {
                    var t = targetSignatures_1[_i];
                    var saveErrorInfo = captureErrorCalculationState();
                    // Only elaborate errors from the first failure
                    var shouldElaborateErrors = reportErrors;
                    for (var _c = 0, sourceSignatures_1 = sourceSignatures; _c < sourceSignatures_1.length; _c++) {
                        var s = sourceSignatures_1[_c];
                        var related = signatureRelatedTo(s, t, /*erase*/ true, shouldElaborateErrors, intersectionState, incompatibleReporter(s, t));
                        if (related) {
                            result &= related;
                            resetErrorInfo(saveErrorInfo);
                            continue outer;
                        }
                        shouldElaborateErrors = false;
                    }
                    if (shouldElaborateErrors) {
                        reportError(ts_1.Diagnostics.Type_0_provides_no_match_for_the_signature_1, typeToString(source), signatureToString(t, /*enclosingDeclaration*/ undefined, /*flags*/ undefined, kind));
                    }
                    return 0 /* Ternary.False */;
                }
            }
            return result;
        }
        function shouldReportUnmatchedPropertyError(source, target) {
            var typeCallSignatures = getSignaturesOfStructuredType(source, 0 /* SignatureKind.Call */);
            var typeConstructSignatures = getSignaturesOfStructuredType(source, 1 /* SignatureKind.Construct */);
            var typeProperties = getPropertiesOfObjectType(source);
            if ((typeCallSignatures.length || typeConstructSignatures.length) && !typeProperties.length) {
                if ((getSignaturesOfType(target, 0 /* SignatureKind.Call */).length && typeCallSignatures.length) ||
                    (getSignaturesOfType(target, 1 /* SignatureKind.Construct */).length && typeConstructSignatures.length)) {
                    return true; // target has similar signature kinds to source, still focus on the unmatched property
                }
                return false;
            }
            return true;
        }
        function reportIncompatibleCallSignatureReturn(siga, sigb) {
            if (siga.parameters.length === 0 && sigb.parameters.length === 0) {
                return function (source, target) { return reportIncompatibleError(ts_1.Diagnostics.Call_signatures_with_no_arguments_have_incompatible_return_types_0_and_1, typeToString(source), typeToString(target)); };
            }
            return function (source, target) { return reportIncompatibleError(ts_1.Diagnostics.Call_signature_return_types_0_and_1_are_incompatible, typeToString(source), typeToString(target)); };
        }
        function reportIncompatibleConstructSignatureReturn(siga, sigb) {
            if (siga.parameters.length === 0 && sigb.parameters.length === 0) {
                return function (source, target) { return reportIncompatibleError(ts_1.Diagnostics.Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1, typeToString(source), typeToString(target)); };
            }
            return function (source, target) { return reportIncompatibleError(ts_1.Diagnostics.Construct_signature_return_types_0_and_1_are_incompatible, typeToString(source), typeToString(target)); };
        }
        /**
         * See signatureAssignableTo, compareSignaturesIdentical
         */
        function signatureRelatedTo(source, target, erase, reportErrors, intersectionState, incompatibleReporter) {
            var checkMode = relation === subtypeRelation ? 16 /* SignatureCheckMode.StrictTopSignature */ :
                relation === strictSubtypeRelation ? 16 /* SignatureCheckMode.StrictTopSignature */ | 8 /* SignatureCheckMode.StrictArity */ :
                    0 /* SignatureCheckMode.None */;
            return compareSignaturesRelated(erase ? getErasedSignature(source) : source, erase ? getErasedSignature(target) : target, checkMode, reportErrors, reportError, incompatibleReporter, isRelatedToWorker, reportUnreliableMapper);
            function isRelatedToWorker(source, target, reportErrors) {
                return isRelatedTo(source, target, 3 /* RecursionFlags.Both */, reportErrors, /*headMessage*/ undefined, intersectionState);
            }
        }
        function signaturesIdenticalTo(source, target, kind) {
            var sourceSignatures = getSignaturesOfType(source, kind);
            var targetSignatures = getSignaturesOfType(target, kind);
            if (sourceSignatures.length !== targetSignatures.length) {
                return 0 /* Ternary.False */;
            }
            var result = -1 /* Ternary.True */;
            for (var i = 0; i < sourceSignatures.length; i++) {
                var related = compareSignaturesIdentical(sourceSignatures[i], targetSignatures[i], /*partialMatch*/ false, /*ignoreThisTypes*/ false, /*ignoreReturnTypes*/ false, isRelatedTo);
                if (!related) {
                    return 0 /* Ternary.False */;
                }
                result &= related;
            }
            return result;
        }
        function membersRelatedToIndexInfo(source, targetInfo, reportErrors, intersectionState) {
            var result = -1 /* Ternary.True */;
            var keyType = targetInfo.keyType;
            var props = source.flags & 2097152 /* TypeFlags.Intersection */ ? getPropertiesOfUnionOrIntersectionType(source) : getPropertiesOfObjectType(source);
            for (var _i = 0, props_2 = props; _i < props_2.length; _i++) {
                var prop = props_2[_i];
                // Skip over ignored JSX and symbol-named members
                if (isIgnoredJsxProperty(source, prop)) {
                    continue;
                }
                if (isApplicableIndexType(getLiteralTypeFromProperty(prop, 8576 /* TypeFlags.StringOrNumberLiteralOrUnique */), keyType)) {
                    var propType = getNonMissingTypeOfSymbol(prop);
                    var type = exactOptionalPropertyTypes || propType.flags & 32768 /* TypeFlags.Undefined */ || keyType === numberType || !(prop.flags & 16777216 /* SymbolFlags.Optional */)
                        ? propType
                        : getTypeWithFacts(propType, 524288 /* TypeFacts.NEUndefined */);
                    var related = isRelatedTo(type, targetInfo.type, 3 /* RecursionFlags.Both */, reportErrors, /*headMessage*/ undefined, intersectionState);
                    if (!related) {
                        if (reportErrors) {
                            reportError(ts_1.Diagnostics.Property_0_is_incompatible_with_index_signature, symbolToString(prop));
                        }
                        return 0 /* Ternary.False */;
                    }
                    result &= related;
                }
            }
            for (var _a = 0, _b = getIndexInfosOfType(source); _a < _b.length; _a++) {
                var info = _b[_a];
                if (isApplicableIndexType(info.keyType, keyType)) {
                    var related = indexInfoRelatedTo(info, targetInfo, reportErrors, intersectionState);
                    if (!related) {
                        return 0 /* Ternary.False */;
                    }
                    result &= related;
                }
            }
            return result;
        }
        function indexInfoRelatedTo(sourceInfo, targetInfo, reportErrors, intersectionState) {
            var related = isRelatedTo(sourceInfo.type, targetInfo.type, 3 /* RecursionFlags.Both */, reportErrors, /*headMessage*/ undefined, intersectionState);
            if (!related && reportErrors) {
                if (sourceInfo.keyType === targetInfo.keyType) {
                    reportError(ts_1.Diagnostics._0_index_signatures_are_incompatible, typeToString(sourceInfo.keyType));
                }
                else {
                    reportError(ts_1.Diagnostics._0_and_1_index_signatures_are_incompatible, typeToString(sourceInfo.keyType), typeToString(targetInfo.keyType));
                }
            }
            return related;
        }
        function indexSignaturesRelatedTo(source, target, sourceIsPrimitive, reportErrors, intersectionState) {
            if (relation === identityRelation) {
                return indexSignaturesIdenticalTo(source, target);
            }
            var indexInfos = getIndexInfosOfType(target);
            var targetHasStringIndex = (0, ts_1.some)(indexInfos, function (info) { return info.keyType === stringType; });
            var result = -1 /* Ternary.True */;
            for (var _i = 0, indexInfos_5 = indexInfos; _i < indexInfos_5.length; _i++) {
                var targetInfo = indexInfos_5[_i];
                var related = relation !== strictSubtypeRelation && !sourceIsPrimitive && targetHasStringIndex && targetInfo.type.flags & 1 /* TypeFlags.Any */ ? -1 /* Ternary.True */ :
                    isGenericMappedType(source) && targetHasStringIndex ? isRelatedTo(getTemplateTypeFromMappedType(source), targetInfo.type, 3 /* RecursionFlags.Both */, reportErrors) :
                        typeRelatedToIndexInfo(source, targetInfo, reportErrors, intersectionState);
                if (!related) {
                    return 0 /* Ternary.False */;
                }
                result &= related;
            }
            return result;
        }
        function typeRelatedToIndexInfo(source, targetInfo, reportErrors, intersectionState) {
            var sourceInfo = getApplicableIndexInfo(source, targetInfo.keyType);
            if (sourceInfo) {
                return indexInfoRelatedTo(sourceInfo, targetInfo, reportErrors, intersectionState);
            }
            // Intersection constituents are never considered to have an inferred index signature. Also, in the strict subtype relation,
            // only fresh object literals are considered to have inferred index signatures. This ensures { [x: string]: xxx } <: {} but
            // not vice-versa. Without this rule, those types would be mutual strict subtypes.
            if (!(intersectionState & 1 /* IntersectionState.Source */) && (relation !== strictSubtypeRelation || (0, ts_1.getObjectFlags)(source) & 8192 /* ObjectFlags.FreshLiteral */) && isObjectTypeWithInferableIndex(source)) {
                return membersRelatedToIndexInfo(source, targetInfo, reportErrors, intersectionState);
            }
            if (reportErrors) {
                reportError(ts_1.Diagnostics.Index_signature_for_type_0_is_missing_in_type_1, typeToString(targetInfo.keyType), typeToString(source));
            }
            return 0 /* Ternary.False */;
        }
        function indexSignaturesIdenticalTo(source, target) {
            var sourceInfos = getIndexInfosOfType(source);
            var targetInfos = getIndexInfosOfType(target);
            if (sourceInfos.length !== targetInfos.length) {
                return 0 /* Ternary.False */;
            }
            for (var _i = 0, targetInfos_1 = targetInfos; _i < targetInfos_1.length; _i++) {
                var targetInfo = targetInfos_1[_i];
                var sourceInfo = getIndexInfoOfType(source, targetInfo.keyType);
                if (!(sourceInfo && isRelatedTo(sourceInfo.type, targetInfo.type, 3 /* RecursionFlags.Both */) && sourceInfo.isReadonly === targetInfo.isReadonly)) {
                    return 0 /* Ternary.False */;
                }
            }
            return -1 /* Ternary.True */;
        }
        function constructorVisibilitiesAreCompatible(sourceSignature, targetSignature, reportErrors) {
            if (!sourceSignature.declaration || !targetSignature.declaration) {
                return true;
            }
            var sourceAccessibility = (0, ts_1.getSelectedEffectiveModifierFlags)(sourceSignature.declaration, 24 /* ModifierFlags.NonPublicAccessibilityModifier */);
            var targetAccessibility = (0, ts_1.getSelectedEffectiveModifierFlags)(targetSignature.declaration, 24 /* ModifierFlags.NonPublicAccessibilityModifier */);
            // A public, protected and private signature is assignable to a private signature.
            if (targetAccessibility === 8 /* ModifierFlags.Private */) {
                return true;
            }
            // A public and protected signature is assignable to a protected signature.
            if (targetAccessibility === 16 /* ModifierFlags.Protected */ && sourceAccessibility !== 8 /* ModifierFlags.Private */) {
                return true;
            }
            // Only a public signature is assignable to public signature.
            if (targetAccessibility !== 16 /* ModifierFlags.Protected */ && !sourceAccessibility) {
                return true;
            }
            if (reportErrors) {
                reportError(ts_1.Diagnostics.Cannot_assign_a_0_constructor_type_to_a_1_constructor_type, visibilityToString(sourceAccessibility), visibilityToString(targetAccessibility));
            }
            return false;
        }
    }
    function typeCouldHaveTopLevelSingletonTypes(type) {
        // Okay, yes, 'boolean' is a union of 'true | false', but that's not useful
        // in error reporting scenarios. If you need to use this function but that detail matters,
        // feel free to add a flag.
        if (type.flags & 16 /* TypeFlags.Boolean */) {
            return false;
        }
        if (type.flags & 3145728 /* TypeFlags.UnionOrIntersection */) {
            return !!(0, ts_1.forEach)(type.types, typeCouldHaveTopLevelSingletonTypes);
        }
        if (type.flags & 465829888 /* TypeFlags.Instantiable */) {
            var constraint = getConstraintOfType(type);
            if (constraint && constraint !== type) {
                return typeCouldHaveTopLevelSingletonTypes(constraint);
            }
        }
        return isUnitType(type) || !!(type.flags & 134217728 /* TypeFlags.TemplateLiteral */) || !!(type.flags & 268435456 /* TypeFlags.StringMapping */);
    }
    function getExactOptionalUnassignableProperties(source, target) {
        if (isTupleType(source) && isTupleType(target))
            return ts_1.emptyArray;
        return getPropertiesOfType(target)
            .filter(function (targetProp) { return isExactOptionalPropertyMismatch(getTypeOfPropertyOfType(source, targetProp.escapedName), getTypeOfSymbol(targetProp)); });
    }
    function isExactOptionalPropertyMismatch(source, target) {
        return !!source && !!target && maybeTypeOfKind(source, 32768 /* TypeFlags.Undefined */) && !!containsMissingType(target);
    }
    function getExactOptionalProperties(type) {
        return getPropertiesOfType(type).filter(function (targetProp) { return containsMissingType(getTypeOfSymbol(targetProp)); });
    }
    function getBestMatchingType(source, target, isRelatedTo) {
        if (isRelatedTo === void 0) { isRelatedTo = compareTypesAssignable; }
        return findMatchingDiscriminantType(source, target, isRelatedTo) ||
            findMatchingTypeReferenceOrTypeAliasReference(source, target) ||
            findBestTypeForObjectLiteral(source, target) ||
            findBestTypeForInvokable(source, target) ||
            findMostOverlappyType(source, target);
    }
    function discriminateTypeByDiscriminableItems(target, discriminators, related) {
        var types = target.types;
        var include = types.map(function (t) { return t.flags & 402784252 /* TypeFlags.Primitive */ ? 0 /* Ternary.False */ : -1 /* Ternary.True */; });
        for (var _i = 0, discriminators_1 = discriminators; _i < discriminators_1.length; _i++) {
            var _a = discriminators_1[_i], getDiscriminatingType = _a[0], propertyName = _a[1];
            // If the remaining target types include at least one with a matching discriminant, eliminate those that
            // have non-matching discriminants. This ensures that we ignore erroneous discriminators and gradually
            // refine the target set without eliminating every constituent (which would lead to `never`).
            var matched = false;
            for (var i = 0; i < types.length; i++) {
                if (include[i]) {
                    var targetType = getTypeOfPropertyOrIndexSignature(types[i], propertyName, /*addOptionalityToIndex*/ true);
                    if (targetType && related(getDiscriminatingType(), targetType)) {
                        matched = true;
                    }
                    else {
                        include[i] = 3 /* Ternary.Maybe */;
                    }
                }
            }
            // Turn each Ternary.Maybe into Ternary.False if there was a match. Otherwise, revert to Ternary.True.
            for (var i = 0; i < types.length; i++) {
                if (include[i] === 3 /* Ternary.Maybe */) {
                    include[i] = matched ? 0 /* Ternary.False */ : -1 /* Ternary.True */;
                }
            }
        }
        var filtered = (0, ts_1.contains)(include, 0 /* Ternary.False */) ? getUnionType(types.filter(function (_, i) { return include[i]; })) : target;
        return filtered.flags & 131072 /* TypeFlags.Never */ ? target : filtered;
    }
    /**
     * A type is 'weak' if it is an object type with at least one optional property
     * and no required properties, call/construct signatures or index signatures
     */
    function isWeakType(type) {
        if (type.flags & 524288 /* TypeFlags.Object */) {
            var resolved = resolveStructuredTypeMembers(type);
            return resolved.callSignatures.length === 0 && resolved.constructSignatures.length === 0 && resolved.indexInfos.length === 0 &&
                resolved.properties.length > 0 && (0, ts_1.every)(resolved.properties, function (p) { return !!(p.flags & 16777216 /* SymbolFlags.Optional */); });
        }
        if (type.flags & 2097152 /* TypeFlags.Intersection */) {
            return (0, ts_1.every)(type.types, isWeakType);
        }
        return false;
    }
    function hasCommonProperties(source, target, isComparingJsxAttributes) {
        for (var _i = 0, _a = getPropertiesOfType(source); _i < _a.length; _i++) {
            var prop = _a[_i];
            if (isKnownProperty(target, prop.escapedName, isComparingJsxAttributes)) {
                return true;
            }
        }
        return false;
    }
    function getVariances(type) {
        // Arrays and tuples are known to be covariant, no need to spend time computing this.
        return type === globalArrayType || type === globalReadonlyArrayType || type.objectFlags & 8 /* ObjectFlags.Tuple */ ?
            arrayVariances :
            getVariancesWorker(type.symbol, type.typeParameters);
    }
    function getAliasVariances(symbol) {
        return getVariancesWorker(symbol, getSymbolLinks(symbol).typeParameters);
    }
    // Return an array containing the variance of each type parameter. The variance is effectively
    // a digest of the type comparisons that occur for each type argument when instantiations of the
    // generic type are structurally compared. We infer the variance information by comparing
    // instantiations of the generic type for type arguments with known relations. The function
    // returns the emptyArray singleton when invoked recursively for the given generic type.
    function getVariancesWorker(symbol, typeParameters) {
        if (typeParameters === void 0) { typeParameters = ts_1.emptyArray; }
        var links = getSymbolLinks(symbol);
        if (!links.variances) {
            ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.push("checkTypes" /* tracing.Phase.CheckTypes */, "getVariancesWorker", { arity: typeParameters.length, id: getTypeId(getDeclaredTypeOfSymbol(symbol)) });
            var oldVarianceComputation = inVarianceComputation;
            if (!inVarianceComputation) {
                inVarianceComputation = true;
                resolutionStart = resolutionTargets.length;
            }
            links.variances = ts_1.emptyArray;
            var variances = [];
            var _loop_18 = function (tp) {
                var modifiers = getTypeParameterModifiers(tp);
                var variance = modifiers & 65536 /* ModifierFlags.Out */ ?
                    modifiers & 32768 /* ModifierFlags.In */ ? 0 /* VarianceFlags.Invariant */ : 1 /* VarianceFlags.Covariant */ :
                    modifiers & 32768 /* ModifierFlags.In */ ? 2 /* VarianceFlags.Contravariant */ : undefined;
                if (variance === undefined) {
                    var unmeasurable_1 = false;
                    var unreliable_1 = false;
                    var oldHandler = outofbandVarianceMarkerHandler;
                    outofbandVarianceMarkerHandler = function (onlyUnreliable) { return onlyUnreliable ? unreliable_1 = true : unmeasurable_1 = true; };
                    // We first compare instantiations where the type parameter is replaced with
                    // marker types that have a known subtype relationship. From this we can infer
                    // invariance, covariance, contravariance or bivariance.
                    var typeWithSuper = createMarkerType(symbol, tp, markerSuperType);
                    var typeWithSub = createMarkerType(symbol, tp, markerSubType);
                    variance = (isTypeAssignableTo(typeWithSub, typeWithSuper) ? 1 /* VarianceFlags.Covariant */ : 0) |
                        (isTypeAssignableTo(typeWithSuper, typeWithSub) ? 2 /* VarianceFlags.Contravariant */ : 0);
                    // If the instantiations appear to be related bivariantly it may be because the
                    // type parameter is independent (i.e. it isn't witnessed anywhere in the generic
                    // type). To determine this we compare instantiations where the type parameter is
                    // replaced with marker types that are known to be unrelated.
                    if (variance === 3 /* VarianceFlags.Bivariant */ && isTypeAssignableTo(createMarkerType(symbol, tp, markerOtherType), typeWithSuper)) {
                        variance = 4 /* VarianceFlags.Independent */;
                    }
                    outofbandVarianceMarkerHandler = oldHandler;
                    if (unmeasurable_1 || unreliable_1) {
                        if (unmeasurable_1) {
                            variance |= 8 /* VarianceFlags.Unmeasurable */;
                        }
                        if (unreliable_1) {
                            variance |= 16 /* VarianceFlags.Unreliable */;
                        }
                    }
                }
                variances.push(variance);
            };
            for (var _i = 0, typeParameters_2 = typeParameters; _i < typeParameters_2.length; _i++) {
                var tp = typeParameters_2[_i];
                _loop_18(tp);
            }
            if (!oldVarianceComputation) {
                inVarianceComputation = false;
                resolutionStart = 0;
            }
            links.variances = variances;
            ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.pop({ variances: variances.map(ts_1.Debug.formatVariance) });
        }
        return links.variances;
    }
    function createMarkerType(symbol, source, target) {
        var mapper = makeUnaryTypeMapper(source, target);
        var type = getDeclaredTypeOfSymbol(symbol);
        if (isErrorType(type)) {
            return type;
        }
        var result = symbol.flags & 524288 /* SymbolFlags.TypeAlias */ ?
            getTypeAliasInstantiation(symbol, instantiateTypes(getSymbolLinks(symbol).typeParameters, mapper)) :
            createTypeReference(type, instantiateTypes(type.typeParameters, mapper));
        markerTypes.add(getTypeId(result));
        return result;
    }
    function isMarkerType(type) {
        return markerTypes.has(getTypeId(type));
    }
    function getTypeParameterModifiers(tp) {
        var _a;
        return (0, ts_1.reduceLeft)((_a = tp.symbol) === null || _a === void 0 ? void 0 : _a.declarations, function (modifiers, d) { return modifiers | (0, ts_1.getEffectiveModifierFlags)(d); }, 0 /* ModifierFlags.None */) & (32768 /* ModifierFlags.In */ | 65536 /* ModifierFlags.Out */ | 2048 /* ModifierFlags.Const */);
    }
    // Return true if the given type reference has a 'void' type argument for a covariant type parameter.
    // See comment at call in recursiveTypeRelatedTo for when this case matters.
    function hasCovariantVoidArgument(typeArguments, variances) {
        for (var i = 0; i < variances.length; i++) {
            if ((variances[i] & 7 /* VarianceFlags.VarianceMask */) === 1 /* VarianceFlags.Covariant */ && typeArguments[i].flags & 16384 /* TypeFlags.Void */) {
                return true;
            }
        }
        return false;
    }
    function isUnconstrainedTypeParameter(type) {
        return type.flags & 262144 /* TypeFlags.TypeParameter */ && !getConstraintOfTypeParameter(type);
    }
    function isNonDeferredTypeReference(type) {
        return !!((0, ts_1.getObjectFlags)(type) & 4 /* ObjectFlags.Reference */) && !type.node;
    }
    function isTypeReferenceWithGenericArguments(type) {
        return isNonDeferredTypeReference(type) && (0, ts_1.some)(getTypeArguments(type), function (t) { return !!(t.flags & 262144 /* TypeFlags.TypeParameter */) || isTypeReferenceWithGenericArguments(t); });
    }
    function getGenericTypeReferenceRelationKey(source, target, postFix, ignoreConstraints) {
        var typeParameters = [];
        var constraintMarker = "";
        var sourceId = getTypeReferenceId(source, 0);
        var targetId = getTypeReferenceId(target, 0);
        return "".concat(constraintMarker).concat(sourceId, ",").concat(targetId).concat(postFix);
        // getTypeReferenceId(A<T, number, U>) returns "111=0-12=1"
        // where A.id=111 and number.id=12
        function getTypeReferenceId(type, depth) {
            if (depth === void 0) { depth = 0; }
            var result = "" + type.target.id;
            for (var _i = 0, _a = getTypeArguments(type); _i < _a.length; _i++) {
                var t = _a[_i];
                if (t.flags & 262144 /* TypeFlags.TypeParameter */) {
                    if (ignoreConstraints || isUnconstrainedTypeParameter(t)) {
                        var index = typeParameters.indexOf(t);
                        if (index < 0) {
                            index = typeParameters.length;
                            typeParameters.push(t);
                        }
                        result += "=" + index;
                        continue;
                    }
                    // We mark type references that reference constrained type parameters such that we know to obtain
                    // and look for a "broadest equivalent key" in the cache.
                    constraintMarker = "*";
                }
                else if (depth < 4 && isTypeReferenceWithGenericArguments(t)) {
                    result += "<" + getTypeReferenceId(t, depth + 1) + ">";
                    continue;
                }
                result += "-" + t.id;
            }
            return result;
        }
    }
    /**
     * To improve caching, the relation key for two generic types uses the target's id plus ids of the type parameters.
     * For other cases, the types ids are used.
     */
    function getRelationKey(source, target, intersectionState, relation, ignoreConstraints) {
        if (relation === identityRelation && source.id > target.id) {
            var temp = source;
            source = target;
            target = temp;
        }
        var postFix = intersectionState ? ":" + intersectionState : "";
        return isTypeReferenceWithGenericArguments(source) && isTypeReferenceWithGenericArguments(target) ?
            getGenericTypeReferenceRelationKey(source, target, postFix, ignoreConstraints) :
            "".concat(source.id, ",").concat(target.id).concat(postFix);
    }
    // Invoke the callback for each underlying property symbol of the given symbol and return the first
    // value that isn't undefined.
    function forEachProperty(prop, callback) {
        if ((0, ts_1.getCheckFlags)(prop) & 6 /* CheckFlags.Synthetic */) {
            // NOTE: cast to TransientSymbol should be safe because only TransientSymbols can have CheckFlags.Synthetic
            for (var _i = 0, _a = prop.links.containingType.types; _i < _a.length; _i++) {
                var t = _a[_i];
                var p = getPropertyOfType(t, prop.escapedName);
                var result = p && forEachProperty(p, callback);
                if (result) {
                    return result;
                }
            }
            return undefined;
        }
        return callback(prop);
    }
    // Return the declaring class type of a property or undefined if property not declared in class
    function getDeclaringClass(prop) {
        return prop.parent && prop.parent.flags & 32 /* SymbolFlags.Class */ ? getDeclaredTypeOfSymbol(getParentOfSymbol(prop)) : undefined;
    }
    // Return the inherited type of the given property or undefined if property doesn't exist in a base class.
    function getTypeOfPropertyInBaseClass(property) {
        var classType = getDeclaringClass(property);
        var baseClassType = classType && getBaseTypes(classType)[0];
        return baseClassType && getTypeOfPropertyOfType(baseClassType, property.escapedName);
    }
    // Return true if some underlying source property is declared in a class that derives
    // from the given base class.
    function isPropertyInClassDerivedFrom(prop, baseClass) {
        return forEachProperty(prop, function (sp) {
            var sourceClass = getDeclaringClass(sp);
            return sourceClass ? hasBaseType(sourceClass, baseClass) : false;
        });
    }
    // Return true if source property is a valid override of protected parts of target property.
    function isValidOverrideOf(sourceProp, targetProp) {
        return !forEachProperty(targetProp, function (tp) { return (0, ts_1.getDeclarationModifierFlagsFromSymbol)(tp) & 16 /* ModifierFlags.Protected */ ?
            !isPropertyInClassDerivedFrom(sourceProp, getDeclaringClass(tp)) : false; });
    }
    // Return true if the given class derives from each of the declaring classes of the protected
    // constituents of the given property.
    function isClassDerivedFromDeclaringClasses(checkClass, prop, writing) {
        return forEachProperty(prop, function (p) { return (0, ts_1.getDeclarationModifierFlagsFromSymbol)(p, writing) & 16 /* ModifierFlags.Protected */ ?
            !hasBaseType(checkClass, getDeclaringClass(p)) : false; }) ? undefined : checkClass;
    }
    // Return true if the given type is deeply nested. We consider this to be the case when structural type comparisons
    // for maxDepth or more occurrences or instantiations of the same type have been recorded on the given stack. The
    // "sameness" of instantiations is determined by the getRecursionIdentity function. An intersection is considered
    // deeply nested if any constituent of the intersection is deeply nested. It is possible, though highly unlikely, for
    // the deeply nested check to be true in a situation where a chain of instantiations is not infinitely expanding.
    // Effectively, we will generate a false positive when two types are structurally equal to at least maxDepth levels,
    // but unequal at some level beyond that.
    // In addition, this will also detect when an indexed access has been chained off of maxDepth more times (which is
    // essentially the dual of the structural comparison), and likewise mark the type as deeply nested, potentially adding
    // false positives for finite but deeply expanding indexed accesses (eg, for `Q[P1][P2][P3][P4][P5]`).
    // It also detects when a recursive type reference has expanded maxDepth or more times, e.g. if the true branch of
    // `type A<T> = null extends T ? [A<NonNullable<T>>] : [T]`
    // has expanded into `[A<NonNullable<NonNullable<NonNullable<NonNullable<NonNullable<T>>>>>>]`. In such cases we need
    // to terminate the expansion, and we do so here.
    function isDeeplyNestedType(type, stack, depth, maxDepth) {
        if (maxDepth === void 0) { maxDepth = 3; }
        if (depth >= maxDepth) {
            if (type.flags & 2097152 /* TypeFlags.Intersection */) {
                return (0, ts_1.some)(type.types, function (t) { return isDeeplyNestedType(t, stack, depth, maxDepth); });
            }
            var identity_1 = getRecursionIdentity(type);
            var count = 0;
            var lastTypeId = 0;
            for (var i = 0; i < depth; i++) {
                var t = stack[i];
                if (t.flags & 2097152 /* TypeFlags.Intersection */ ? (0, ts_1.some)(t.types, function (u) { return getRecursionIdentity(u) === identity_1; }) : getRecursionIdentity(t) === identity_1) {
                    // We only count occurrences with a higher type id than the previous occurrence, since higher
                    // type ids are an indicator of newer instantiations caused by recursion.
                    if (t.id >= lastTypeId) {
                        count++;
                        if (count >= maxDepth) {
                            return true;
                        }
                    }
                    lastTypeId = t.id;
                }
            }
        }
        return false;
    }
    // The recursion identity of a type is an object identity that is shared among multiple instantiations of the type.
    // We track recursion identities in order to identify deeply nested and possibly infinite type instantiations with
    // the same origin. For example, when type parameters are in scope in an object type such as { x: T }, all
    // instantiations of that type have the same recursion identity. The default recursion identity is the object
    // identity of the type, meaning that every type is unique. Generally, types with constituents that could circularly
    // reference the type have a recursion identity that differs from the object identity.
    function getRecursionIdentity(type) {
        // Object and array literals are known not to contain recursive references and don't need a recursion identity.
        if (type.flags & 524288 /* TypeFlags.Object */ && !isObjectOrArrayLiteralType(type)) {
            if ((0, ts_1.getObjectFlags)(type) & 4 /* ObjectFlags.Reference */ && type.node) {
                // Deferred type references are tracked through their associated AST node. This gives us finer
                // granularity than using their associated target because each manifest type reference has a
                // unique AST node.
                return type.node;
            }
            if (type.symbol && !((0, ts_1.getObjectFlags)(type) & 16 /* ObjectFlags.Anonymous */ && type.symbol.flags & 32 /* SymbolFlags.Class */)) {
                // We track all object types that have an associated symbol (representing the origin of the type), but
                // exclude the static side of classes from this check since it shares its symbol with the instance side.
                return type.symbol;
            }
            if (isTupleType(type)) {
                return type.target;
            }
        }
        if (type.flags & 262144 /* TypeFlags.TypeParameter */) {
            return type.symbol;
        }
        if (type.flags & 8388608 /* TypeFlags.IndexedAccess */) {
            // Identity is the leftmost object type in a chain of indexed accesses, eg, in A[P][Q] it is A
            do {
                type = type.objectType;
            } while (type.flags & 8388608 /* TypeFlags.IndexedAccess */);
            return type;
        }
        if (type.flags & 16777216 /* TypeFlags.Conditional */) {
            // The root object represents the origin of the conditional type
            return type.root;
        }
        return type;
    }
    function isPropertyIdenticalTo(sourceProp, targetProp) {
        return compareProperties(sourceProp, targetProp, compareTypesIdentical) !== 0 /* Ternary.False */;
    }
    function compareProperties(sourceProp, targetProp, compareTypes) {
        // Two members are considered identical when
        // - they are public properties with identical names, optionality, and types,
        // - they are private or protected properties originating in the same declaration and having identical types
        if (sourceProp === targetProp) {
            return -1 /* Ternary.True */;
        }
        var sourcePropAccessibility = (0, ts_1.getDeclarationModifierFlagsFromSymbol)(sourceProp) & 24 /* ModifierFlags.NonPublicAccessibilityModifier */;
        var targetPropAccessibility = (0, ts_1.getDeclarationModifierFlagsFromSymbol)(targetProp) & 24 /* ModifierFlags.NonPublicAccessibilityModifier */;
        if (sourcePropAccessibility !== targetPropAccessibility) {
            return 0 /* Ternary.False */;
        }
        if (sourcePropAccessibility) {
            if (getTargetSymbol(sourceProp) !== getTargetSymbol(targetProp)) {
                return 0 /* Ternary.False */;
            }
        }
        else {
            if ((sourceProp.flags & 16777216 /* SymbolFlags.Optional */) !== (targetProp.flags & 16777216 /* SymbolFlags.Optional */)) {
                return 0 /* Ternary.False */;
            }
        }
        if (isReadonlySymbol(sourceProp) !== isReadonlySymbol(targetProp)) {
            return 0 /* Ternary.False */;
        }
        return compareTypes(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp));
    }
    function isMatchingSignature(source, target, partialMatch) {
        var sourceParameterCount = getParameterCount(source);
        var targetParameterCount = getParameterCount(target);
        var sourceMinArgumentCount = getMinArgumentCount(source);
        var targetMinArgumentCount = getMinArgumentCount(target);
        var sourceHasRestParameter = hasEffectiveRestParameter(source);
        var targetHasRestParameter = hasEffectiveRestParameter(target);
        // A source signature matches a target signature if the two signatures have the same number of required,
        // optional, and rest parameters.
        if (sourceParameterCount === targetParameterCount &&
            sourceMinArgumentCount === targetMinArgumentCount &&
            sourceHasRestParameter === targetHasRestParameter) {
            return true;
        }
        // A source signature partially matches a target signature if the target signature has no fewer required
        // parameters
        if (partialMatch && sourceMinArgumentCount <= targetMinArgumentCount) {
            return true;
        }
        return false;
    }
    /**
     * See signatureRelatedTo, compareSignaturesIdentical
     */
    function compareSignaturesIdentical(source, target, partialMatch, ignoreThisTypes, ignoreReturnTypes, compareTypes) {
        // TODO (drosen): De-duplicate code between related functions.
        if (source === target) {
            return -1 /* Ternary.True */;
        }
        if (!(isMatchingSignature(source, target, partialMatch))) {
            return 0 /* Ternary.False */;
        }
        // Check that the two signatures have the same number of type parameters.
        if ((0, ts_1.length)(source.typeParameters) !== (0, ts_1.length)(target.typeParameters)) {
            return 0 /* Ternary.False */;
        }
        // Check that type parameter constraints and defaults match. If they do, instantiate the source
        // signature with the type parameters of the target signature and continue the comparison.
        if (target.typeParameters) {
            var mapper = createTypeMapper(source.typeParameters, target.typeParameters);
            for (var i = 0; i < target.typeParameters.length; i++) {
                var s = source.typeParameters[i];
                var t = target.typeParameters[i];
                if (!(s === t || compareTypes(instantiateType(getConstraintFromTypeParameter(s), mapper) || unknownType, getConstraintFromTypeParameter(t) || unknownType) &&
                    compareTypes(instantiateType(getDefaultFromTypeParameter(s), mapper) || unknownType, getDefaultFromTypeParameter(t) || unknownType))) {
                    return 0 /* Ternary.False */;
                }
            }
            source = instantiateSignature(source, mapper, /*eraseTypeParameters*/ true);
        }
        var result = -1 /* Ternary.True */;
        if (!ignoreThisTypes) {
            var sourceThisType = getThisTypeOfSignature(source);
            if (sourceThisType) {
                var targetThisType = getThisTypeOfSignature(target);
                if (targetThisType) {
                    var related = compareTypes(sourceThisType, targetThisType);
                    if (!related) {
                        return 0 /* Ternary.False */;
                    }
                    result &= related;
                }
            }
        }
        var targetLen = getParameterCount(target);
        for (var i = 0; i < targetLen; i++) {
            var s = getTypeAtPosition(source, i);
            var t = getTypeAtPosition(target, i);
            var related = compareTypes(t, s);
            if (!related) {
                return 0 /* Ternary.False */;
            }
            result &= related;
        }
        if (!ignoreReturnTypes) {
            var sourceTypePredicate = getTypePredicateOfSignature(source);
            var targetTypePredicate = getTypePredicateOfSignature(target);
            result &= sourceTypePredicate || targetTypePredicate ?
                compareTypePredicatesIdentical(sourceTypePredicate, targetTypePredicate, compareTypes) :
                compareTypes(getReturnTypeOfSignature(source), getReturnTypeOfSignature(target));
        }
        return result;
    }
    function compareTypePredicatesIdentical(source, target, compareTypes) {
        return !(source && target && typePredicateKindsMatch(source, target)) ? 0 /* Ternary.False */ :
            source.type === target.type ? -1 /* Ternary.True */ :
                source.type && target.type ? compareTypes(source.type, target.type) :
                    0 /* Ternary.False */;
    }
    function literalTypesWithSameBaseType(types) {
        var commonBaseType;
        for (var _i = 0, types_13 = types; _i < types_13.length; _i++) {
            var t = types_13[_i];
            if (!(t.flags & 131072 /* TypeFlags.Never */)) {
                var baseType = getBaseTypeOfLiteralType(t);
                commonBaseType !== null && commonBaseType !== void 0 ? commonBaseType : (commonBaseType = baseType);
                if (baseType === t || baseType !== commonBaseType) {
                    return false;
                }
            }
        }
        return true;
    }
    function getCombinedTypeFlags(types) {
        return (0, ts_1.reduceLeft)(types, function (flags, t) { return flags | (t.flags & 1048576 /* TypeFlags.Union */ ? getCombinedTypeFlags(t.types) : t.flags); }, 0);
    }
    function getCommonSupertype(types) {
        if (types.length === 1) {
            return types[0];
        }
        // Remove nullable types from each of the candidates.
        var primaryTypes = strictNullChecks ? (0, ts_1.sameMap)(types, function (t) { return filterType(t, function (u) { return !(u.flags & 98304 /* TypeFlags.Nullable */); }); }) : types;
        // When the candidate types are all literal types with the same base type, return a union
        // of those literal types. Otherwise, return the leftmost type for which no type to the
        // right is a supertype.
        var superTypeOrUnion = literalTypesWithSameBaseType(primaryTypes) ?
            getUnionType(primaryTypes) :
            (0, ts_1.reduceLeft)(primaryTypes, function (s, t) { return isTypeSubtypeOf(s, t) ? t : s; });
        // Add any nullable types that occurred in the candidates back to the result.
        return primaryTypes === types ? superTypeOrUnion : getNullableType(superTypeOrUnion, getCombinedTypeFlags(types) & 98304 /* TypeFlags.Nullable */);
    }
    // Return the leftmost type for which no type to the right is a subtype.
    function getCommonSubtype(types) {
        return (0, ts_1.reduceLeft)(types, function (s, t) { return isTypeSubtypeOf(t, s) ? t : s; });
    }
    function isArrayType(type) {
        return !!((0, ts_1.getObjectFlags)(type) & 4 /* ObjectFlags.Reference */) && (type.target === globalArrayType || type.target === globalReadonlyArrayType);
    }
    function isReadonlyArrayType(type) {
        return !!((0, ts_1.getObjectFlags)(type) & 4 /* ObjectFlags.Reference */) && type.target === globalReadonlyArrayType;
    }
    function isArrayOrTupleType(type) {
        return isArrayType(type) || isTupleType(type);
    }
    function isMutableArrayOrTuple(type) {
        return isArrayType(type) && !isReadonlyArrayType(type) || isTupleType(type) && !type.target.readonly;
    }
    function getElementTypeOfArrayType(type) {
        return isArrayType(type) ? getTypeArguments(type)[0] : undefined;
    }
    function isArrayLikeType(type) {
        // A type is array-like if it is a reference to the global Array or global ReadonlyArray type,
        // or if it is not the undefined or null type and if it is assignable to ReadonlyArray<any>
        return isArrayType(type) || !(type.flags & 98304 /* TypeFlags.Nullable */) && isTypeAssignableTo(type, anyReadonlyArrayType);
    }
    function getSingleBaseForNonAugmentingSubtype(type) {
        if (!((0, ts_1.getObjectFlags)(type) & 4 /* ObjectFlags.Reference */) || !((0, ts_1.getObjectFlags)(type.target) & 3 /* ObjectFlags.ClassOrInterface */)) {
            return undefined;
        }
        if ((0, ts_1.getObjectFlags)(type) & 33554432 /* ObjectFlags.IdenticalBaseTypeCalculated */) {
            return (0, ts_1.getObjectFlags)(type) & 67108864 /* ObjectFlags.IdenticalBaseTypeExists */ ? type.cachedEquivalentBaseType : undefined;
        }
        type.objectFlags |= 33554432 /* ObjectFlags.IdenticalBaseTypeCalculated */;
        var target = type.target;
        if ((0, ts_1.getObjectFlags)(target) & 1 /* ObjectFlags.Class */) {
            var baseTypeNode = getBaseTypeNodeOfClass(target);
            // A base type expression may circularly reference the class itself (e.g. as an argument to function call), so we only
            // check for base types specified as simple qualified names.
            if (baseTypeNode && baseTypeNode.expression.kind !== 80 /* SyntaxKind.Identifier */ && baseTypeNode.expression.kind !== 210 /* SyntaxKind.PropertyAccessExpression */) {
                return undefined;
            }
        }
        var bases = getBaseTypes(target);
        if (bases.length !== 1) {
            return undefined;
        }
        if (getMembersOfSymbol(type.symbol).size) {
            return undefined; // If the interface has any members, they may subtype members in the base, so we should do a full structural comparison
        }
        var instantiatedBase = !(0, ts_1.length)(target.typeParameters) ? bases[0] : instantiateType(bases[0], createTypeMapper(target.typeParameters, getTypeArguments(type).slice(0, target.typeParameters.length)));
        if ((0, ts_1.length)(getTypeArguments(type)) > (0, ts_1.length)(target.typeParameters)) {
            instantiatedBase = getTypeWithThisArgument(instantiatedBase, (0, ts_1.last)(getTypeArguments(type)));
        }
        type.objectFlags |= 67108864 /* ObjectFlags.IdenticalBaseTypeExists */;
        return type.cachedEquivalentBaseType = instantiatedBase;
    }
    function isEmptyLiteralType(type) {
        return strictNullChecks ? type === implicitNeverType : type === undefinedWideningType;
    }
    function isEmptyArrayLiteralType(type) {
        var elementType = getElementTypeOfArrayType(type);
        return !!elementType && isEmptyLiteralType(elementType);
    }
    function isTupleLikeType(type) {
        return isTupleType(type) || !!getPropertyOfType(type, "0");
    }
    function isArrayOrTupleLikeType(type) {
        return isArrayLikeType(type) || isTupleLikeType(type);
    }
    function getTupleElementType(type, index) {
        var propType = getTypeOfPropertyOfType(type, "" + index);
        if (propType) {
            return propType;
        }
        if (everyType(type, isTupleType)) {
            return mapType(type, function (t) {
                var tupleType = t;
                var restType = getRestTypeOfTupleType(tupleType);
                if (!restType) {
                    return undefinedType;
                }
                if (compilerOptions.noUncheckedIndexedAccess &&
                    index >= tupleType.target.fixedLength + getEndElementCount(tupleType.target, 3 /* ElementFlags.Fixed */)) {
                    return getUnionType([restType, undefinedType]);
                }
                return restType;
            });
        }
        return undefined;
    }
    function isNeitherUnitTypeNorNever(type) {
        return !(type.flags & (109472 /* TypeFlags.Unit */ | 131072 /* TypeFlags.Never */));
    }
    function isUnitType(type) {
        return !!(type.flags & 109472 /* TypeFlags.Unit */);
    }
    function isUnitLikeType(type) {
        // Intersections that reduce to 'never' (e.g. 'T & null' where 'T extends {}') are not unit types.
        var t = getBaseConstraintOrType(type);
        // Scan intersections such that tagged literal types are considered unit types.
        return t.flags & 2097152 /* TypeFlags.Intersection */ ? (0, ts_1.some)(t.types, isUnitType) : isUnitType(t);
    }
    function extractUnitType(type) {
        return type.flags & 2097152 /* TypeFlags.Intersection */ ? (0, ts_1.find)(type.types, isUnitType) || type : type;
    }
    function isLiteralType(type) {
        return type.flags & 16 /* TypeFlags.Boolean */ ? true :
            type.flags & 1048576 /* TypeFlags.Union */ ? type.flags & 1024 /* TypeFlags.EnumLiteral */ ? true : (0, ts_1.every)(type.types, isUnitType) :
                isUnitType(type);
    }
    function getBaseTypeOfLiteralType(type) {
        return type.flags & 1056 /* TypeFlags.EnumLike */ ? getBaseTypeOfEnumLikeType(type) :
            type.flags & (128 /* TypeFlags.StringLiteral */ | 134217728 /* TypeFlags.TemplateLiteral */ | 268435456 /* TypeFlags.StringMapping */) ? stringType :
                type.flags & 256 /* TypeFlags.NumberLiteral */ ? numberType :
                    type.flags & 2048 /* TypeFlags.BigIntLiteral */ ? bigintType :
                        type.flags & 512 /* TypeFlags.BooleanLiteral */ ? booleanType :
                            type.flags & 1048576 /* TypeFlags.Union */ ? getBaseTypeOfLiteralTypeUnion(type) :
                                type;
    }
    function getBaseTypeOfLiteralTypeUnion(type) {
        var _a;
        var key = "B".concat(getTypeId(type));
        return (_a = getCachedType(key)) !== null && _a !== void 0 ? _a : setCachedType(key, mapType(type, getBaseTypeOfLiteralType));
    }
    // This like getBaseTypeOfLiteralType, but instead treats enum literals as strings/numbers instead
    // of returning their enum base type (which depends on the types of other literals in the enum).
    function getBaseTypeOfLiteralTypeForComparison(type) {
        return type.flags & (128 /* TypeFlags.StringLiteral */ | 134217728 /* TypeFlags.TemplateLiteral */ | 268435456 /* TypeFlags.StringMapping */) ? stringType :
            type.flags & (256 /* TypeFlags.NumberLiteral */ | 32 /* TypeFlags.Enum */) ? numberType :
                type.flags & 2048 /* TypeFlags.BigIntLiteral */ ? bigintType :
                    type.flags & 512 /* TypeFlags.BooleanLiteral */ ? booleanType :
                        type.flags & 1048576 /* TypeFlags.Union */ ? mapType(type, getBaseTypeOfLiteralTypeForComparison) :
                            type;
    }
    function getWidenedLiteralType(type) {
        return type.flags & 1056 /* TypeFlags.EnumLike */ && isFreshLiteralType(type) ? getBaseTypeOfEnumLikeType(type) :
            type.flags & 128 /* TypeFlags.StringLiteral */ && isFreshLiteralType(type) ? stringType :
                type.flags & 256 /* TypeFlags.NumberLiteral */ && isFreshLiteralType(type) ? numberType :
                    type.flags & 2048 /* TypeFlags.BigIntLiteral */ && isFreshLiteralType(type) ? bigintType :
                        type.flags & 512 /* TypeFlags.BooleanLiteral */ && isFreshLiteralType(type) ? booleanType :
                            type.flags & 1048576 /* TypeFlags.Union */ ? mapType(type, getWidenedLiteralType) :
                                type;
    }
    function getWidenedUniqueESSymbolType(type) {
        return type.flags & 8192 /* TypeFlags.UniqueESSymbol */ ? esSymbolType :
            type.flags & 1048576 /* TypeFlags.Union */ ? mapType(type, getWidenedUniqueESSymbolType) :
                type;
    }
    function getWidenedLiteralLikeTypeForContextualType(type, contextualType) {
        if (!isLiteralOfContextualType(type, contextualType)) {
            type = getWidenedUniqueESSymbolType(getWidenedLiteralType(type));
        }
        return getRegularTypeOfLiteralType(type);
    }
    function getWidenedLiteralLikeTypeForContextualReturnTypeIfNeeded(type, contextualSignatureReturnType, isAsync) {
        if (type && isUnitType(type)) {
            var contextualType = !contextualSignatureReturnType ? undefined :
                isAsync ? getPromisedTypeOfPromise(contextualSignatureReturnType) :
                    contextualSignatureReturnType;
            type = getWidenedLiteralLikeTypeForContextualType(type, contextualType);
        }
        return type;
    }
    function getWidenedLiteralLikeTypeForContextualIterationTypeIfNeeded(type, contextualSignatureReturnType, kind, isAsyncGenerator) {
        if (type && isUnitType(type)) {
            var contextualType = !contextualSignatureReturnType ? undefined :
                getIterationTypeOfGeneratorFunctionReturnType(kind, contextualSignatureReturnType, isAsyncGenerator);
            type = getWidenedLiteralLikeTypeForContextualType(type, contextualType);
        }
        return type;
    }
    /**
     * Check if a Type was written as a tuple type literal.
     * Prefer using isTupleLikeType() unless the use of `elementTypes`/`getTypeArguments` is required.
     */
    function isTupleType(type) {
        return !!((0, ts_1.getObjectFlags)(type) & 4 /* ObjectFlags.Reference */ && type.target.objectFlags & 8 /* ObjectFlags.Tuple */);
    }
    function isGenericTupleType(type) {
        return isTupleType(type) && !!(type.target.combinedFlags & 8 /* ElementFlags.Variadic */);
    }
    function isSingleElementGenericTupleType(type) {
        return isGenericTupleType(type) && type.target.elementFlags.length === 1;
    }
    function getRestTypeOfTupleType(type) {
        return getElementTypeOfSliceOfTupleType(type, type.target.fixedLength);
    }
    function getRestArrayTypeOfTupleType(type) {
        var restType = getRestTypeOfTupleType(type);
        return restType && createArrayType(restType);
    }
    function getElementTypeOfSliceOfTupleType(type, index, endSkipCount, writing, noReductions) {
        if (endSkipCount === void 0) { endSkipCount = 0; }
        if (writing === void 0) { writing = false; }
        if (noReductions === void 0) { noReductions = false; }
        var length = getTypeReferenceArity(type) - endSkipCount;
        if (index < length) {
            var typeArguments = getTypeArguments(type);
            var elementTypes = [];
            for (var i = index; i < length; i++) {
                var t = typeArguments[i];
                elementTypes.push(type.target.elementFlags[i] & 8 /* ElementFlags.Variadic */ ? getIndexedAccessType(t, numberType) : t);
            }
            return writing ? getIntersectionType(elementTypes) : getUnionType(elementTypes, noReductions ? 0 /* UnionReduction.None */ : 1 /* UnionReduction.Literal */);
        }
        return undefined;
    }
    function isTupleTypeStructureMatching(t1, t2) {
        return getTypeReferenceArity(t1) === getTypeReferenceArity(t2) &&
            (0, ts_1.every)(t1.target.elementFlags, function (f, i) { return (f & 12 /* ElementFlags.Variable */) === (t2.target.elementFlags[i] & 12 /* ElementFlags.Variable */); });
    }
    function isZeroBigInt(_a) {
        var value = _a.value;
        return value.base10Value === "0";
    }
    function removeDefinitelyFalsyTypes(type) {
        return filterType(type, function (t) { return !!(getTypeFacts(t) & 4194304 /* TypeFacts.Truthy */); });
    }
    function extractDefinitelyFalsyTypes(type) {
        return mapType(type, getDefinitelyFalsyPartOfType);
    }
    function getDefinitelyFalsyPartOfType(type) {
        return type.flags & 4 /* TypeFlags.String */ ? emptyStringType :
            type.flags & 8 /* TypeFlags.Number */ ? zeroType :
                type.flags & 64 /* TypeFlags.BigInt */ ? zeroBigIntType :
                    type === regularFalseType ||
                        type === falseType ||
                        type.flags & (16384 /* TypeFlags.Void */ | 32768 /* TypeFlags.Undefined */ | 65536 /* TypeFlags.Null */ | 3 /* TypeFlags.AnyOrUnknown */) ||
                        type.flags & 128 /* TypeFlags.StringLiteral */ && type.value === "" ||
                        type.flags & 256 /* TypeFlags.NumberLiteral */ && type.value === 0 ||
                        type.flags & 2048 /* TypeFlags.BigIntLiteral */ && isZeroBigInt(type) ? type :
                        neverType;
    }
    /**
     * Add undefined or null or both to a type if they are missing.
     * @param type - type to add undefined and/or null to if not present
     * @param flags - Either TypeFlags.Undefined or TypeFlags.Null, or both
     */
    function getNullableType(type, flags) {
        var missing = (flags & ~type.flags) & (32768 /* TypeFlags.Undefined */ | 65536 /* TypeFlags.Null */);
        return missing === 0 ? type :
            missing === 32768 /* TypeFlags.Undefined */ ? getUnionType([type, undefinedType]) :
                missing === 65536 /* TypeFlags.Null */ ? getUnionType([type, nullType]) :
                    getUnionType([type, undefinedType, nullType]);
    }
    function getOptionalType(type, isProperty) {
        if (isProperty === void 0) { isProperty = false; }
        ts_1.Debug.assert(strictNullChecks);
        var missingOrUndefined = isProperty ? undefinedOrMissingType : undefinedType;
        return type === missingOrUndefined || type.flags & 1048576 /* TypeFlags.Union */ && type.types[0] === missingOrUndefined ? type : getUnionType([type, missingOrUndefined]);
    }
    function getGlobalNonNullableTypeInstantiation(type) {
        if (!deferredGlobalNonNullableTypeAlias) {
            deferredGlobalNonNullableTypeAlias = getGlobalSymbol("NonNullable", 524288 /* SymbolFlags.TypeAlias */, /*diagnostic*/ undefined) || unknownSymbol;
        }
        return deferredGlobalNonNullableTypeAlias !== unknownSymbol ?
            getTypeAliasInstantiation(deferredGlobalNonNullableTypeAlias, [type]) :
            getIntersectionType([type, emptyObjectType]);
    }
    function getNonNullableType(type) {
        return strictNullChecks ? getAdjustedTypeWithFacts(type, 2097152 /* TypeFacts.NEUndefinedOrNull */) : type;
    }
    function addOptionalTypeMarker(type) {
        return strictNullChecks ? getUnionType([type, optionalType]) : type;
    }
    function removeOptionalTypeMarker(type) {
        return strictNullChecks ? removeType(type, optionalType) : type;
    }
    function propagateOptionalTypeMarker(type, node, wasOptional) {
        return wasOptional ? (0, ts_1.isOutermostOptionalChain)(node) ? getOptionalType(type) : addOptionalTypeMarker(type) : type;
    }
    function getOptionalExpressionType(exprType, expression) {
        return (0, ts_1.isExpressionOfOptionalChainRoot)(expression) ? getNonNullableType(exprType) :
            (0, ts_1.isOptionalChain)(expression) ? removeOptionalTypeMarker(exprType) :
                exprType;
    }
    function removeMissingType(type, isOptional) {
        return exactOptionalPropertyTypes && isOptional ? removeType(type, missingType) : type;
    }
    function containsMissingType(type) {
        return type === missingType || !!(type.flags & 1048576 /* TypeFlags.Union */) && type.types[0] === missingType;
    }
    function removeMissingOrUndefinedType(type) {
        return exactOptionalPropertyTypes ? removeType(type, missingType) : getTypeWithFacts(type, 524288 /* TypeFacts.NEUndefined */);
    }
    /**
     * Is source potentially coercible to target type under `==`.
     * Assumes that `source` is a constituent of a union, hence
     * the boolean literal flag on the LHS, but not on the RHS.
     *
     * This does not fully replicate the semantics of `==`. The
     * intention is to catch cases that are clearly not right.
     *
     * Comparing (string | number) to number should not remove the
     * string element.
     *
     * Comparing (string | number) to 1 will remove the string
     * element, though this is not sound. This is a pragmatic
     * choice.
     *
     * @see narrowTypeByEquality
     *
     * @param source
     * @param target
     */
    function isCoercibleUnderDoubleEquals(source, target) {
        return ((source.flags & (8 /* TypeFlags.Number */ | 4 /* TypeFlags.String */ | 512 /* TypeFlags.BooleanLiteral */)) !== 0)
            && ((target.flags & (8 /* TypeFlags.Number */ | 4 /* TypeFlags.String */ | 16 /* TypeFlags.Boolean */)) !== 0);
    }
    /**
     * Return true if type was inferred from an object literal, written as an object type literal, or is the shape of a module
     * with no call or construct signatures.
     */
    function isObjectTypeWithInferableIndex(type) {
        var objectFlags = (0, ts_1.getObjectFlags)(type);
        return type.flags & 2097152 /* TypeFlags.Intersection */
            ? (0, ts_1.every)(type.types, isObjectTypeWithInferableIndex)
            : !!(type.symbol
                && (type.symbol.flags & (4096 /* SymbolFlags.ObjectLiteral */ | 2048 /* SymbolFlags.TypeLiteral */ | 384 /* SymbolFlags.Enum */ | 512 /* SymbolFlags.ValueModule */)) !== 0
                && !(type.symbol.flags & 32 /* SymbolFlags.Class */)
                && !typeHasCallOrConstructSignatures(type)) || !!(objectFlags & 4194304 /* ObjectFlags.ObjectRestType */) || !!(objectFlags & 1024 /* ObjectFlags.ReverseMapped */ && isObjectTypeWithInferableIndex(type.source));
    }
    function createSymbolWithType(source, type) {
        var symbol = createSymbol(source.flags, source.escapedName, (0, ts_1.getCheckFlags)(source) & 8 /* CheckFlags.Readonly */);
        symbol.declarations = source.declarations;
        symbol.parent = source.parent;
        symbol.links.type = type;
        symbol.links.target = source;
        if (source.valueDeclaration) {
            symbol.valueDeclaration = source.valueDeclaration;
        }
        var nameType = getSymbolLinks(source).nameType;
        if (nameType) {
            symbol.links.nameType = nameType;
        }
        return symbol;
    }
    function transformTypeOfMembers(type, f) {
        var members = (0, ts_1.createSymbolTable)();
        for (var _i = 0, _a = getPropertiesOfObjectType(type); _i < _a.length; _i++) {
            var property = _a[_i];
            var original = getTypeOfSymbol(property);
            var updated = f(original);
            members.set(property.escapedName, updated === original ? property : createSymbolWithType(property, updated));
        }
        return members;
    }
    /**
     * If the the provided object literal is subject to the excess properties check,
     * create a new that is exempt. Recursively mark object literal members as exempt.
     * Leave signatures alone since they are not subject to the check.
     */
    function getRegularTypeOfObjectLiteral(type) {
        if (!(isObjectLiteralType(type) && (0, ts_1.getObjectFlags)(type) & 8192 /* ObjectFlags.FreshLiteral */)) {
            return type;
        }
        var regularType = type.regularType;
        if (regularType) {
            return regularType;
        }
        var resolved = type;
        var members = transformTypeOfMembers(type, getRegularTypeOfObjectLiteral);
        var regularNew = createAnonymousType(resolved.symbol, members, resolved.callSignatures, resolved.constructSignatures, resolved.indexInfos);
        regularNew.flags = resolved.flags;
        regularNew.objectFlags |= resolved.objectFlags & ~8192 /* ObjectFlags.FreshLiteral */;
        type.regularType = regularNew;
        return regularNew;
    }
    function createWideningContext(parent, propertyName, siblings) {
        return { parent: parent, propertyName: propertyName, siblings: siblings, resolvedProperties: undefined };
    }
    function getSiblingsOfContext(context) {
        if (!context.siblings) {
            var siblings_1 = [];
            for (var _i = 0, _a = getSiblingsOfContext(context.parent); _i < _a.length; _i++) {
                var type = _a[_i];
                if (isObjectLiteralType(type)) {
                    var prop = getPropertyOfObjectType(type, context.propertyName);
                    if (prop) {
                        forEachType(getTypeOfSymbol(prop), function (t) {
                            siblings_1.push(t);
                        });
                    }
                }
            }
            context.siblings = siblings_1;
        }
        return context.siblings;
    }
    function getPropertiesOfContext(context) {
        if (!context.resolvedProperties) {
            var names = new Map();
            for (var _i = 0, _a = getSiblingsOfContext(context); _i < _a.length; _i++) {
                var t = _a[_i];
                if (isObjectLiteralType(t) && !((0, ts_1.getObjectFlags)(t) & 2097152 /* ObjectFlags.ContainsSpread */)) {
                    for (var _b = 0, _c = getPropertiesOfType(t); _b < _c.length; _b++) {
                        var prop = _c[_b];
                        names.set(prop.escapedName, prop);
                    }
                }
            }
            context.resolvedProperties = (0, ts_1.arrayFrom)(names.values());
        }
        return context.resolvedProperties;
    }
    function getWidenedProperty(prop, context) {
        if (!(prop.flags & 4 /* SymbolFlags.Property */)) {
            // Since get accessors already widen their return value there is no need to
            // widen accessor based properties here.
            return prop;
        }
        var original = getTypeOfSymbol(prop);
        var propContext = context && createWideningContext(context, prop.escapedName, /*siblings*/ undefined);
        var widened = getWidenedTypeWithContext(original, propContext);
        return widened === original ? prop : createSymbolWithType(prop, widened);
    }
    function getUndefinedProperty(prop) {
        var cached = undefinedProperties.get(prop.escapedName);
        if (cached) {
            return cached;
        }
        var result = createSymbolWithType(prop, undefinedOrMissingType);
        result.flags |= 16777216 /* SymbolFlags.Optional */;
        undefinedProperties.set(prop.escapedName, result);
        return result;
    }
    function getWidenedTypeOfObjectLiteral(type, context) {
        var members = (0, ts_1.createSymbolTable)();
        for (var _i = 0, _a = getPropertiesOfObjectType(type); _i < _a.length; _i++) {
            var prop = _a[_i];
            members.set(prop.escapedName, getWidenedProperty(prop, context));
        }
        if (context) {
            for (var _b = 0, _c = getPropertiesOfContext(context); _b < _c.length; _b++) {
                var prop = _c[_b];
                if (!members.has(prop.escapedName)) {
                    members.set(prop.escapedName, getUndefinedProperty(prop));
                }
            }
        }
        var result = createAnonymousType(type.symbol, members, ts_1.emptyArray, ts_1.emptyArray, (0, ts_1.sameMap)(getIndexInfosOfType(type), function (info) { return createIndexInfo(info.keyType, getWidenedType(info.type), info.isReadonly); }));
        result.objectFlags |= ((0, ts_1.getObjectFlags)(type) & (4096 /* ObjectFlags.JSLiteral */ | 262144 /* ObjectFlags.NonInferrableType */)); // Retain js literal flag through widening
        return result;
    }
    function getWidenedType(type) {
        return getWidenedTypeWithContext(type, /*context*/ undefined);
    }
    function getWidenedTypeWithContext(type, context) {
        if ((0, ts_1.getObjectFlags)(type) & 196608 /* ObjectFlags.RequiresWidening */) {
            if (context === undefined && type.widened) {
                return type.widened;
            }
            var result = void 0;
            if (type.flags & (1 /* TypeFlags.Any */ | 98304 /* TypeFlags.Nullable */)) {
                result = anyType;
            }
            else if (isObjectLiteralType(type)) {
                result = getWidenedTypeOfObjectLiteral(type, context);
            }
            else if (type.flags & 1048576 /* TypeFlags.Union */) {
                var unionContext_1 = context || createWideningContext(/*parent*/ undefined, /*propertyName*/ undefined, type.types);
                var widenedTypes = (0, ts_1.sameMap)(type.types, function (t) { return t.flags & 98304 /* TypeFlags.Nullable */ ? t : getWidenedTypeWithContext(t, unionContext_1); });
                // Widening an empty object literal transitions from a highly restrictive type to
                // a highly inclusive one. For that reason we perform subtype reduction here if the
                // union includes empty object types (e.g. reducing {} | string to just {}).
                result = getUnionType(widenedTypes, (0, ts_1.some)(widenedTypes, isEmptyObjectType) ? 2 /* UnionReduction.Subtype */ : 1 /* UnionReduction.Literal */);
            }
            else if (type.flags & 2097152 /* TypeFlags.Intersection */) {
                result = getIntersectionType((0, ts_1.sameMap)(type.types, getWidenedType));
            }
            else if (isArrayOrTupleType(type)) {
                result = createTypeReference(type.target, (0, ts_1.sameMap)(getTypeArguments(type), getWidenedType));
            }
            if (result && context === undefined) {
                type.widened = result;
            }
            return result || type;
        }
        return type;
    }
    /**
     * Reports implicit any errors that occur as a result of widening 'null' and 'undefined'
     * to 'any'. A call to reportWideningErrorsInType is normally accompanied by a call to
     * getWidenedType. But in some cases getWidenedType is called without reporting errors
     * (type argument inference is an example).
     *
     * The return value indicates whether an error was in fact reported. The particular circumstances
     * are on a best effort basis. Currently, if the null or undefined that causes widening is inside
     * an object literal property (arbitrarily deeply), this function reports an error. If no error is
     * reported, reportImplicitAnyError is a suitable fallback to report a general error.
     */
    function reportWideningErrorsInType(type) {
        var errorReported = false;
        if ((0, ts_1.getObjectFlags)(type) & 65536 /* ObjectFlags.ContainsWideningType */) {
            if (type.flags & 1048576 /* TypeFlags.Union */) {
                if ((0, ts_1.some)(type.types, isEmptyObjectType)) {
                    errorReported = true;
                }
                else {
                    for (var _i = 0, _a = type.types; _i < _a.length; _i++) {
                        var t = _a[_i];
                        if (reportWideningErrorsInType(t)) {
                            errorReported = true;
                        }
                    }
                }
            }
            if (isArrayOrTupleType(type)) {
                for (var _b = 0, _c = getTypeArguments(type); _b < _c.length; _b++) {
                    var t = _c[_b];
                    if (reportWideningErrorsInType(t)) {
                        errorReported = true;
                    }
                }
            }
            if (isObjectLiteralType(type)) {
                for (var _d = 0, _e = getPropertiesOfObjectType(type); _d < _e.length; _d++) {
                    var p = _e[_d];
                    var t = getTypeOfSymbol(p);
                    if ((0, ts_1.getObjectFlags)(t) & 65536 /* ObjectFlags.ContainsWideningType */) {
                        if (!reportWideningErrorsInType(t)) {
                            error(p.valueDeclaration, ts_1.Diagnostics.Object_literal_s_property_0_implicitly_has_an_1_type, symbolToString(p), typeToString(getWidenedType(t)));
                        }
                        errorReported = true;
                    }
                }
            }
        }
        return errorReported;
    }
    function reportImplicitAny(declaration, type, wideningKind) {
        var typeAsString = typeToString(getWidenedType(type));
        if ((0, ts_1.isInJSFile)(declaration) && !(0, ts_1.isCheckJsEnabledForFile)((0, ts_1.getSourceFileOfNode)(declaration), compilerOptions)) {
            // Only report implicit any errors/suggestions in TS and ts-check JS files
            return;
        }
        var diagnostic;
        switch (declaration.kind) {
            case 225 /* SyntaxKind.BinaryExpression */:
            case 171 /* SyntaxKind.PropertyDeclaration */:
            case 170 /* SyntaxKind.PropertySignature */:
                diagnostic = noImplicitAny ? ts_1.Diagnostics.Member_0_implicitly_has_an_1_type : ts_1.Diagnostics.Member_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage;
                break;
            case 168 /* SyntaxKind.Parameter */:
                var param = declaration;
                if ((0, ts_1.isIdentifier)(param.name)) {
                    var originalKeywordKind = (0, ts_1.identifierToKeywordKind)(param.name);
                    if (((0, ts_1.isCallSignatureDeclaration)(param.parent) || (0, ts_1.isMethodSignature)(param.parent) || (0, ts_1.isFunctionTypeNode)(param.parent)) &&
                        param.parent.parameters.indexOf(param) > -1 &&
                        (resolveName(param, param.name.escapedText, 788968 /* SymbolFlags.Type */, /*nameNotFoundMessage*/ undefined, param.name.escapedText, /*isUse*/ true) ||
                            originalKeywordKind && (0, ts_1.isTypeNodeKind)(originalKeywordKind))) {
                        var newName = "arg" + param.parent.parameters.indexOf(param);
                        var typeName = (0, ts_1.declarationNameToString)(param.name) + (param.dotDotDotToken ? "[]" : "");
                        errorOrSuggestion(noImplicitAny, declaration, ts_1.Diagnostics.Parameter_has_a_name_but_no_type_Did_you_mean_0_Colon_1, newName, typeName);
                        return;
                    }
                }
                diagnostic = declaration.dotDotDotToken ?
                    noImplicitAny ? ts_1.Diagnostics.Rest_parameter_0_implicitly_has_an_any_type : ts_1.Diagnostics.Rest_parameter_0_implicitly_has_an_any_type_but_a_better_type_may_be_inferred_from_usage :
                    noImplicitAny ? ts_1.Diagnostics.Parameter_0_implicitly_has_an_1_type : ts_1.Diagnostics.Parameter_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage;
                break;
            case 207 /* SyntaxKind.BindingElement */:
                diagnostic = ts_1.Diagnostics.Binding_element_0_implicitly_has_an_1_type;
                if (!noImplicitAny) {
                    // Don't issue a suggestion for binding elements since the codefix doesn't yet support them.
                    return;
                }
                break;
            case 323 /* SyntaxKind.JSDocFunctionType */:
                error(declaration, ts_1.Diagnostics.Function_type_which_lacks_return_type_annotation_implicitly_has_an_0_return_type, typeAsString);
                return;
            case 329 /* SyntaxKind.JSDocSignature */:
                if (noImplicitAny && (0, ts_1.isJSDocOverloadTag)(declaration.parent)) {
                    error(declaration.parent.tagName, ts_1.Diagnostics.This_overload_implicitly_returns_the_type_0_because_it_lacks_a_return_type_annotation, typeAsString);
                }
                return;
            case 261 /* SyntaxKind.FunctionDeclaration */:
            case 173 /* SyntaxKind.MethodDeclaration */:
            case 172 /* SyntaxKind.MethodSignature */:
            case 176 /* SyntaxKind.GetAccessor */:
            case 177 /* SyntaxKind.SetAccessor */:
            case 217 /* SyntaxKind.FunctionExpression */:
            case 218 /* SyntaxKind.ArrowFunction */:
                if (noImplicitAny && !declaration.name) {
                    if (wideningKind === 3 /* WideningKind.GeneratorYield */) {
                        error(declaration, ts_1.Diagnostics.Generator_implicitly_has_yield_type_0_because_it_does_not_yield_any_values_Consider_supplying_a_return_type_annotation, typeAsString);
                    }
                    else {
                        error(declaration, ts_1.Diagnostics.Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type, typeAsString);
                    }
                    return;
                }
                diagnostic = !noImplicitAny ? ts_1.Diagnostics._0_implicitly_has_an_1_return_type_but_a_better_type_may_be_inferred_from_usage :
                    wideningKind === 3 /* WideningKind.GeneratorYield */ ? ts_1.Diagnostics._0_which_lacks_return_type_annotation_implicitly_has_an_1_yield_type :
                        ts_1.Diagnostics._0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type;
                break;
            case 199 /* SyntaxKind.MappedType */:
                if (noImplicitAny) {
                    error(declaration, ts_1.Diagnostics.Mapped_object_type_implicitly_has_an_any_template_type);
                }
                return;
            default:
                diagnostic = noImplicitAny ? ts_1.Diagnostics.Variable_0_implicitly_has_an_1_type : ts_1.Diagnostics.Variable_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage;
        }
        errorOrSuggestion(noImplicitAny, declaration, diagnostic, (0, ts_1.declarationNameToString)((0, ts_1.getNameOfDeclaration)(declaration)), typeAsString);
    }
    function reportErrorsFromWidening(declaration, type, wideningKind) {
        addLazyDiagnostic(function () {
            if (noImplicitAny && (0, ts_1.getObjectFlags)(type) & 65536 /* ObjectFlags.ContainsWideningType */ && (!wideningKind || !getContextualSignatureForFunctionLikeDeclaration(declaration))) {
                // Report implicit any error within type if possible, otherwise report error on declaration
                if (!reportWideningErrorsInType(type)) {
                    reportImplicitAny(declaration, type, wideningKind);
                }
            }
        });
    }
    function applyToParameterTypes(source, target, callback) {
        var sourceCount = getParameterCount(source);
        var targetCount = getParameterCount(target);
        var sourceRestType = getEffectiveRestType(source);
        var targetRestType = getEffectiveRestType(target);
        var targetNonRestCount = targetRestType ? targetCount - 1 : targetCount;
        var paramCount = sourceRestType ? targetNonRestCount : Math.min(sourceCount, targetNonRestCount);
        var sourceThisType = getThisTypeOfSignature(source);
        if (sourceThisType) {
            var targetThisType = getThisTypeOfSignature(target);
            if (targetThisType) {
                callback(sourceThisType, targetThisType);
            }
        }
        for (var i = 0; i < paramCount; i++) {
            callback(getTypeAtPosition(source, i), getTypeAtPosition(target, i));
        }
        if (targetRestType) {
            callback(getRestTypeAtPosition(source, paramCount), targetRestType);
        }
    }
    function applyToReturnTypes(source, target, callback) {
        var sourceTypePredicate = getTypePredicateOfSignature(source);
        var targetTypePredicate = getTypePredicateOfSignature(target);
        if (sourceTypePredicate && targetTypePredicate && typePredicateKindsMatch(sourceTypePredicate, targetTypePredicate) && sourceTypePredicate.type && targetTypePredicate.type) {
            callback(sourceTypePredicate.type, targetTypePredicate.type);
        }
        else {
            callback(getReturnTypeOfSignature(source), getReturnTypeOfSignature(target));
        }
    }
    function createInferenceContext(typeParameters, signature, flags, compareTypes) {
        return createInferenceContextWorker(typeParameters.map(createInferenceInfo), signature, flags, compareTypes || compareTypesAssignable);
    }
    function cloneInferenceContext(context, extraFlags) {
        if (extraFlags === void 0) { extraFlags = 0; }
        return context && createInferenceContextWorker((0, ts_1.map)(context.inferences, cloneInferenceInfo), context.signature, context.flags | extraFlags, context.compareTypes);
    }
    function createInferenceContextWorker(inferences, signature, flags, compareTypes) {
        var context = {
            inferences: inferences,
            signature: signature,
            flags: flags,
            compareTypes: compareTypes,
            mapper: reportUnmeasurableMapper,
            nonFixingMapper: reportUnmeasurableMapper,
        };
        context.mapper = makeFixingMapperForContext(context);
        context.nonFixingMapper = makeNonFixingMapperForContext(context);
        return context;
    }
    function makeFixingMapperForContext(context) {
        return makeDeferredTypeMapper((0, ts_1.map)(context.inferences, function (i) { return i.typeParameter; }), (0, ts_1.map)(context.inferences, function (inference, i) { return function () {
            if (!inference.isFixed) {
                // Before we commit to a particular inference (and thus lock out any further inferences),
                // we infer from any intra-expression inference sites we have collected.
                inferFromIntraExpressionSites(context);
                clearCachedInferences(context.inferences);
                inference.isFixed = true;
            }
            return getInferredType(context, i);
        }; }));
    }
    function makeNonFixingMapperForContext(context) {
        return makeDeferredTypeMapper((0, ts_1.map)(context.inferences, function (i) { return i.typeParameter; }), (0, ts_1.map)(context.inferences, function (_, i) { return function () {
            return getInferredType(context, i);
        }; }));
    }
    function clearCachedInferences(inferences) {
        for (var _i = 0, inferences_1 = inferences; _i < inferences_1.length; _i++) {
            var inference = inferences_1[_i];
            if (!inference.isFixed) {
                inference.inferredType = undefined;
            }
        }
    }
    function addIntraExpressionInferenceSite(context, node, type) {
        var _a;
        ((_a = context.intraExpressionInferenceSites) !== null && _a !== void 0 ? _a : (context.intraExpressionInferenceSites = [])).push({ node: node, type: type });
    }
    // We collect intra-expression inference sites within object and array literals to handle cases where
    // inferred types flow between context sensitive element expressions. For example:
    //
    //   declare function foo<T>(arg: [(n: number) => T, (x: T) => void]): void;
    //   foo([_a => 0, n => n.toFixed()]);
    //
    // Above, both arrow functions in the tuple argument are context sensitive, thus both are omitted from the
    // pass that collects inferences from the non-context sensitive parts of the arguments. In the subsequent
    // pass where nothing is omitted, we need to commit to an inference for T in order to contextually type the
    // parameter in the second arrow function, but we want to first infer from the return type of the first
    // arrow function. This happens automatically when the arrow functions are discrete arguments (because we
    // infer from each argument before processing the next), but when the arrow functions are elements of an
    // object or array literal, we need to perform intra-expression inferences early.
    function inferFromIntraExpressionSites(context) {
        if (context.intraExpressionInferenceSites) {
            for (var _i = 0, _a = context.intraExpressionInferenceSites; _i < _a.length; _i++) {
                var _b = _a[_i], node = _b.node, type = _b.type;
                var contextualType = node.kind === 173 /* SyntaxKind.MethodDeclaration */ ?
                    getContextualTypeForObjectLiteralMethod(node, 2 /* ContextFlags.NoConstraints */) :
                    getContextualType(node, 2 /* ContextFlags.NoConstraints */);
                if (contextualType) {
                    inferTypes(context.inferences, type, contextualType);
                }
            }
            context.intraExpressionInferenceSites = undefined;
        }
    }
    function createInferenceInfo(typeParameter) {
        return {
            typeParameter: typeParameter,
            candidates: undefined,
            contraCandidates: undefined,
            inferredType: undefined,
            priority: undefined,
            topLevel: true,
            isFixed: false,
            impliedArity: undefined
        };
    }
    function cloneInferenceInfo(inference) {
        return {
            typeParameter: inference.typeParameter,
            candidates: inference.candidates && inference.candidates.slice(),
            contraCandidates: inference.contraCandidates && inference.contraCandidates.slice(),
            inferredType: inference.inferredType,
            priority: inference.priority,
            topLevel: inference.topLevel,
            isFixed: inference.isFixed,
            impliedArity: inference.impliedArity
        };
    }
    function cloneInferredPartOfContext(context) {
        var inferences = (0, ts_1.filter)(context.inferences, hasInferenceCandidates);
        return inferences.length ?
            createInferenceContextWorker((0, ts_1.map)(inferences, cloneInferenceInfo), context.signature, context.flags, context.compareTypes) :
            undefined;
    }
    function getMapperFromContext(context) {
        return context && context.mapper;
    }
    // Return true if the given type could possibly reference a type parameter for which
    // we perform type inference (i.e. a type parameter of a generic function). We cache
    // results for union and intersection types for performance reasons.
    function couldContainTypeVariables(type) {
        var objectFlags = (0, ts_1.getObjectFlags)(type);
        if (objectFlags & 524288 /* ObjectFlags.CouldContainTypeVariablesComputed */) {
            return !!(objectFlags & 1048576 /* ObjectFlags.CouldContainTypeVariables */);
        }
        var result = !!(type.flags & 465829888 /* TypeFlags.Instantiable */ ||
            type.flags & 524288 /* TypeFlags.Object */ && !isNonGenericTopLevelType(type) && (objectFlags & 4 /* ObjectFlags.Reference */ && (type.node || (0, ts_1.some)(getTypeArguments(type), couldContainTypeVariables)) ||
                objectFlags & 16 /* ObjectFlags.Anonymous */ && type.symbol && type.symbol.flags & (16 /* SymbolFlags.Function */ | 8192 /* SymbolFlags.Method */ | 32 /* SymbolFlags.Class */ | 2048 /* SymbolFlags.TypeLiteral */ | 4096 /* SymbolFlags.ObjectLiteral */) && type.symbol.declarations ||
                objectFlags & (32 /* ObjectFlags.Mapped */ | 1024 /* ObjectFlags.ReverseMapped */ | 4194304 /* ObjectFlags.ObjectRestType */ | 8388608 /* ObjectFlags.InstantiationExpressionType */)) ||
            type.flags & (3145728 /* TypeFlags.UnionOrIntersection */ | 134217728 /* TypeFlags.TemplateLiteral */) && !(type.flags & 1024 /* TypeFlags.EnumLiteral */) && !isNonGenericTopLevelType(type) && (0, ts_1.some)(type.types, couldContainTypeVariables));
        if (type.flags & 138117121 /* TypeFlags.ObjectFlagsType */) {
            type.objectFlags |= 524288 /* ObjectFlags.CouldContainTypeVariablesComputed */ | (result ? 1048576 /* ObjectFlags.CouldContainTypeVariables */ : 0);
        }
        return result;
    }
    function isNonGenericTopLevelType(type) {
        if (type.aliasSymbol && !type.aliasTypeArguments) {
            var declaration = (0, ts_1.getDeclarationOfKind)(type.aliasSymbol, 264 /* SyntaxKind.TypeAliasDeclaration */);
            return !!(declaration && (0, ts_1.findAncestor)(declaration.parent, function (n) { return n.kind === 311 /* SyntaxKind.SourceFile */ ? true : n.kind === 266 /* SyntaxKind.ModuleDeclaration */ ? false : "quit"; }));
        }
        return false;
    }
    function isTypeParameterAtTopLevel(type, tp, depth) {
        if (depth === void 0) { depth = 0; }
        return !!(type === tp ||
            type.flags & 3145728 /* TypeFlags.UnionOrIntersection */ && (0, ts_1.some)(type.types, function (t) { return isTypeParameterAtTopLevel(t, tp, depth); }) ||
            depth < 3 && type.flags & 16777216 /* TypeFlags.Conditional */ && (isTypeParameterAtTopLevel(getTrueTypeFromConditionalType(type), tp, depth + 1) ||
                isTypeParameterAtTopLevel(getFalseTypeFromConditionalType(type), tp, depth + 1)));
    }
    function isTypeParameterAtTopLevelInReturnType(signature, typeParameter) {
        var typePredicate = getTypePredicateOfSignature(signature);
        return typePredicate ? !!typePredicate.type && isTypeParameterAtTopLevel(typePredicate.type, typeParameter) :
            isTypeParameterAtTopLevel(getReturnTypeOfSignature(signature), typeParameter);
    }
    /** Create an object with properties named in the string literal type. Every property has type `any` */
    function createEmptyObjectTypeFromStringLiteral(type) {
        var members = (0, ts_1.createSymbolTable)();
        forEachType(type, function (t) {
            if (!(t.flags & 128 /* TypeFlags.StringLiteral */)) {
                return;
            }
            var name = (0, ts_1.escapeLeadingUnderscores)(t.value);
            var literalProp = createSymbol(4 /* SymbolFlags.Property */, name);
            literalProp.links.type = anyType;
            if (t.symbol) {
                literalProp.declarations = t.symbol.declarations;
                literalProp.valueDeclaration = t.symbol.valueDeclaration;
            }
            members.set(name, literalProp);
        });
        var indexInfos = type.flags & 4 /* TypeFlags.String */ ? [createIndexInfo(stringType, emptyObjectType, /*isReadonly*/ false)] : ts_1.emptyArray;
        return createAnonymousType(/*symbol*/ undefined, members, ts_1.emptyArray, ts_1.emptyArray, indexInfos);
    }
    /**
     * Infer a suitable input type for a homomorphic mapped type { [P in keyof T]: X }. We construct
     * an object type with the same set of properties as the source type, where the type of each
     * property is computed by inferring from the source property type to X for the type
     * variable T[P] (i.e. we treat the type T[P] as the type variable we're inferring for).
     */
    function inferTypeForHomomorphicMappedType(source, target, constraint) {
        if (inInferTypeForHomomorphicMappedType) {
            return undefined;
        }
        var key = source.id + "," + target.id + "," + constraint.id;
        if (reverseMappedCache.has(key)) {
            return reverseMappedCache.get(key);
        }
        inInferTypeForHomomorphicMappedType = true;
        var type = createReverseMappedType(source, target, constraint);
        inInferTypeForHomomorphicMappedType = false;
        reverseMappedCache.set(key, type);
        return type;
    }
    // We consider a type to be partially inferable if it isn't marked non-inferable or if it is
    // an object literal type with at least one property of an inferable type. For example, an object
    // literal { a: 123, b: x => true } is marked non-inferable because it contains a context sensitive
    // arrow function, but is considered partially inferable because property 'a' has an inferable type.
    function isPartiallyInferableType(type) {
        return !((0, ts_1.getObjectFlags)(type) & 262144 /* ObjectFlags.NonInferrableType */) ||
            isObjectLiteralType(type) && (0, ts_1.some)(getPropertiesOfType(type), function (prop) { return isPartiallyInferableType(getTypeOfSymbol(prop)); }) ||
            isTupleType(type) && (0, ts_1.some)(getElementTypes(type), isPartiallyInferableType);
    }
    function createReverseMappedType(source, target, constraint) {
        // We consider a source type reverse mappable if it has a string index signature or if
        // it has one or more properties and is of a partially inferable type.
        if (!(getIndexInfoOfType(source, stringType) || getPropertiesOfType(source).length !== 0 && isPartiallyInferableType(source))) {
            return undefined;
        }
        // For arrays and tuples we infer new arrays and tuples where the reverse mapping has been
        // applied to the element type(s).
        if (isArrayType(source)) {
            return createArrayType(inferReverseMappedType(getTypeArguments(source)[0], target, constraint), isReadonlyArrayType(source));
        }
        if (isTupleType(source)) {
            var elementTypes = (0, ts_1.map)(getElementTypes(source), function (t) { return inferReverseMappedType(t, target, constraint); });
            var elementFlags = getMappedTypeModifiers(target) & 4 /* MappedTypeModifiers.IncludeOptional */ ?
                (0, ts_1.sameMap)(source.target.elementFlags, function (f) { return f & 2 /* ElementFlags.Optional */ ? 1 /* ElementFlags.Required */ : f; }) :
                source.target.elementFlags;
            return createTupleType(elementTypes, elementFlags, source.target.readonly, source.target.labeledElementDeclarations);
        }
        // For all other object types we infer a new object type where the reverse mapping has been
        // applied to the type of each property.
        var reversed = createObjectType(1024 /* ObjectFlags.ReverseMapped */ | 16 /* ObjectFlags.Anonymous */, /*symbol*/ undefined);
        reversed.source = source;
        reversed.mappedType = target;
        reversed.constraintType = constraint;
        return reversed;
    }
    function getTypeOfReverseMappedSymbol(symbol) {
        var links = getSymbolLinks(symbol);
        if (!links.type) {
            links.type = inferReverseMappedType(symbol.links.propertyType, symbol.links.mappedType, symbol.links.constraintType);
        }
        return links.type;
    }
    function inferReverseMappedType(sourceType, target, constraint) {
        var typeParameter = getIndexedAccessType(constraint.type, getTypeParameterFromMappedType(target));
        var templateType = getTemplateTypeFromMappedType(target);
        var inference = createInferenceInfo(typeParameter);
        inferTypes([inference], sourceType, templateType);
        return getTypeFromInference(inference) || unknownType;
    }
    function getUnmatchedProperties(source, target, requireOptionalProperties, matchDiscriminantProperties) {
        var properties, _i, properties_2, targetProp, sourceProp, targetType, sourceType;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    properties = getPropertiesOfType(target);
                    _i = 0, properties_2 = properties;
                    _a.label = 1;
                case 1:
                    if (!(_i < properties_2.length)) return [3 /*break*/, 6];
                    targetProp = properties_2[_i];
                    // TODO: remove this when we support static private identifier fields and find other solutions to get privateNamesAndStaticFields test to pass
                    if (isStaticPrivateIdentifierProperty(targetProp)) {
                        return [3 /*break*/, 5];
                    }
                    if (!(requireOptionalProperties || !(targetProp.flags & 16777216 /* SymbolFlags.Optional */ || (0, ts_1.getCheckFlags)(targetProp) & 48 /* CheckFlags.Partial */))) return [3 /*break*/, 5];
                    sourceProp = getPropertyOfType(source, targetProp.escapedName);
                    if (!!sourceProp) return [3 /*break*/, 3];
                    return [4 /*yield*/, targetProp];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 3:
                    if (!matchDiscriminantProperties) return [3 /*break*/, 5];
                    targetType = getTypeOfSymbol(targetProp);
                    if (!(targetType.flags & 109472 /* TypeFlags.Unit */)) return [3 /*break*/, 5];
                    sourceType = getTypeOfSymbol(sourceProp);
                    if (!!(sourceType.flags & 1 /* TypeFlags.Any */ || getRegularTypeOfLiteralType(sourceType) === getRegularTypeOfLiteralType(targetType))) return [3 /*break*/, 5];
                    return [4 /*yield*/, targetProp];
                case 4:
                    _a.sent();
                    _a.label = 5;
                case 5:
                    _i++;
                    return [3 /*break*/, 1];
                case 6: return [2 /*return*/];
            }
        });
    }
    function getUnmatchedProperty(source, target, requireOptionalProperties, matchDiscriminantProperties) {
        return (0, ts_1.firstOrUndefinedIterator)(getUnmatchedProperties(source, target, requireOptionalProperties, matchDiscriminantProperties));
    }
    function tupleTypesDefinitelyUnrelated(source, target) {
        return !(target.target.combinedFlags & 8 /* ElementFlags.Variadic */) && target.target.minLength > source.target.minLength ||
            !target.target.hasRestElement && (source.target.hasRestElement || target.target.fixedLength < source.target.fixedLength);
    }
    function typesDefinitelyUnrelated(source, target) {
        // Two tuple types with incompatible arities are definitely unrelated.
        // Two object types that each have a property that is unmatched in the other are definitely unrelated.
        return isTupleType(source) && isTupleType(target) ? tupleTypesDefinitelyUnrelated(source, target) :
            !!getUnmatchedProperty(source, target, /*requireOptionalProperties*/ false, /*matchDiscriminantProperties*/ true) &&
                !!getUnmatchedProperty(target, source, /*requireOptionalProperties*/ false, /*matchDiscriminantProperties*/ false);
    }
    function getTypeFromInference(inference) {
        return inference.candidates ? getUnionType(inference.candidates, 2 /* UnionReduction.Subtype */) :
            inference.contraCandidates ? getIntersectionType(inference.contraCandidates) :
                undefined;
    }
    function hasSkipDirectInferenceFlag(node) {
        return !!getNodeLinks(node).skipDirectInference;
    }
    function isFromInferenceBlockedSource(type) {
        return !!(type.symbol && (0, ts_1.some)(type.symbol.declarations, hasSkipDirectInferenceFlag));
    }
    function templateLiteralTypesDefinitelyUnrelated(source, target) {
        // Two template literal types with diffences in their starting or ending text spans are definitely unrelated.
        var sourceStart = source.texts[0];
        var targetStart = target.texts[0];
        var sourceEnd = source.texts[source.texts.length - 1];
        var targetEnd = target.texts[target.texts.length - 1];
        var startLen = Math.min(sourceStart.length, targetStart.length);
        var endLen = Math.min(sourceEnd.length, targetEnd.length);
        return sourceStart.slice(0, startLen) !== targetStart.slice(0, startLen) ||
            sourceEnd.slice(sourceEnd.length - endLen) !== targetEnd.slice(targetEnd.length - endLen);
    }
    /**
     * Tests whether the provided string can be parsed as a number.
     * @param s The string to test.
     * @param roundTripOnly Indicates the resulting number matches the input when converted back to a string.
     */
    function isValidNumberString(s, roundTripOnly) {
        if (s === "")
            return false;
        var n = +s;
        return isFinite(n) && (!roundTripOnly || "" + n === s);
    }
    /**
     * @param text a valid bigint string excluding a trailing `n`, but including a possible prefix `-`. Use `isValidBigIntString(text, roundTripOnly)` before calling this function.
     */
    function parseBigIntLiteralType(text) {
        return getBigIntLiteralType((0, ts_1.parseValidBigInt)(text));
    }
    function isMemberOfStringMapping(source, target) {
        if (target.flags & 1 /* TypeFlags.Any */) {
            return true;
        }
        if (target.flags & (4 /* TypeFlags.String */ | 134217728 /* TypeFlags.TemplateLiteral */)) {
            return isTypeAssignableTo(source, target);
        }
        if (target.flags & 268435456 /* TypeFlags.StringMapping */) {
            // We need to see whether applying the same mappings of the target
            // onto the source would produce an identical type *and* that
            // it's compatible with the inner-most non-string-mapped type.
            //
            // The intuition here is that if same mappings don't affect the source at all,
            // and the source is compatible with the unmapped target, then they must
            // still reside in the same domain.
            var mappingStack = [];
            while (target.flags & 268435456 /* TypeFlags.StringMapping */) {
                mappingStack.unshift(target.symbol);
                target = target.type;
            }
            var mappedSource = (0, ts_1.reduceLeft)(mappingStack, function (memo, value) { return getStringMappingType(value, memo); }, source);
            return mappedSource === source && isMemberOfStringMapping(source, target);
        }
        return false;
    }
    function isValidTypeForTemplateLiteralPlaceholder(source, target) {
        if (source === target || target.flags & (1 /* TypeFlags.Any */ | 4 /* TypeFlags.String */)) {
            return true;
        }
        if (source.flags & 128 /* TypeFlags.StringLiteral */) {
            var value = source.value;
            return !!(target.flags & 8 /* TypeFlags.Number */ && isValidNumberString(value, /*roundTripOnly*/ false) ||
                target.flags & 64 /* TypeFlags.BigInt */ && (0, ts_1.isValidBigIntString)(value, /*roundTripOnly*/ false) ||
                target.flags & (512 /* TypeFlags.BooleanLiteral */ | 98304 /* TypeFlags.Nullable */) && value === target.intrinsicName ||
                target.flags & 268435456 /* TypeFlags.StringMapping */ && isMemberOfStringMapping(getStringLiteralType(value), target));
        }
        if (source.flags & 134217728 /* TypeFlags.TemplateLiteral */) {
            var texts = source.texts;
            return texts.length === 2 && texts[0] === "" && texts[1] === "" && isTypeAssignableTo(source.types[0], target);
        }
        return isTypeAssignableTo(source, target);
    }
    function inferTypesFromTemplateLiteralType(source, target) {
        return source.flags & 128 /* TypeFlags.StringLiteral */ ? inferFromLiteralPartsToTemplateLiteral([source.value], ts_1.emptyArray, target) :
            source.flags & 134217728 /* TypeFlags.TemplateLiteral */ ?
                (0, ts_1.arraysEqual)(source.texts, target.texts) ? (0, ts_1.map)(source.types, getStringLikeTypeForType) :
                    inferFromLiteralPartsToTemplateLiteral(source.texts, source.types, target) :
                undefined;
    }
    function isTypeMatchedByTemplateLiteralType(source, target) {
        var inferences = inferTypesFromTemplateLiteralType(source, target);
        return !!inferences && (0, ts_1.every)(inferences, function (r, i) { return isValidTypeForTemplateLiteralPlaceholder(r, target.types[i]); });
    }
    function getStringLikeTypeForType(type) {
        return type.flags & (1 /* TypeFlags.Any */ | 402653316 /* TypeFlags.StringLike */) ? type : getTemplateLiteralType(["", ""], [type]);
    }
    // This function infers from the text parts and type parts of a source literal to a target template literal. The number
    // of text parts is always one more than the number of type parts, and a source string literal is treated as a source
    // with one text part and zero type parts. The function returns an array of inferred string or template literal types
    // corresponding to the placeholders in the target template literal, or undefined if the source doesn't match the target.
    //
    // We first check that the starting source text part matches the starting target text part, and that the ending source
    // text part ends matches the ending target text part. We then iterate through the remaining target text parts, finding
    // a match for each in the source and inferring string or template literal types created from the segments of the source
    // that occur between the matches. During this iteration, seg holds the index of the current text part in the sourceTexts
    // array and pos holds the current character position in the current text part.
    //
    // Consider inference from type `<<${string}>.<${number}-${number}>>` to type `<${string}.${string}>`, i.e.
    //   sourceTexts = ['<<', '>.<', '-', '>>']
    //   sourceTypes = [string, number, number]
    //   target.texts = ['<', '.', '>']
    // We first match '<' in the target to the start of '<<' in the source and '>' in the target to the end of '>>' in
    // the source. The first match for the '.' in target occurs at character 1 in the source text part at index 1, and thus
    // the first inference is the template literal type `<${string}>`. The remainder of the source makes up the second
    // inference, the template literal type `<${number}-${number}>`.
    function inferFromLiteralPartsToTemplateLiteral(sourceTexts, sourceTypes, target) {
        var lastSourceIndex = sourceTexts.length - 1;
        var sourceStartText = sourceTexts[0];
        var sourceEndText = sourceTexts[lastSourceIndex];
        var targetTexts = target.texts;
        var lastTargetIndex = targetTexts.length - 1;
        var targetStartText = targetTexts[0];
        var targetEndText = targetTexts[lastTargetIndex];
        if (lastSourceIndex === 0 && sourceStartText.length < targetStartText.length + targetEndText.length ||
            !sourceStartText.startsWith(targetStartText) || !sourceEndText.endsWith(targetEndText))
            return undefined;
        var remainingEndText = sourceEndText.slice(0, sourceEndText.length - targetEndText.length);
        var matches = [];
        var seg = 0;
        var pos = targetStartText.length;
        for (var i = 1; i < lastTargetIndex; i++) {
            var delim = targetTexts[i];
            if (delim.length > 0) {
                var s = seg;
                var p = pos;
                while (true) {
                    p = getSourceText(s).indexOf(delim, p);
                    if (p >= 0)
                        break;
                    s++;
                    if (s === sourceTexts.length)
                        return undefined;
                    p = 0;
                }
                addMatch(s, p);
                pos += delim.length;
            }
            else if (pos < getSourceText(seg).length) {
                addMatch(seg, pos + 1);
            }
            else if (seg < lastSourceIndex) {
                addMatch(seg + 1, 0);
            }
            else {
                return undefined;
            }
        }
        addMatch(lastSourceIndex, getSourceText(lastSourceIndex).length);
        return matches;
        function getSourceText(index) {
            return index < lastSourceIndex ? sourceTexts[index] : remainingEndText;
        }
        function addMatch(s, p) {
            var matchType = s === seg ?
                getStringLiteralType(getSourceText(s).slice(pos, p)) :
                getTemplateLiteralType(__spreadArray(__spreadArray([sourceTexts[seg].slice(pos)], sourceTexts.slice(seg + 1, s), true), [getSourceText(s).slice(0, p)], false), sourceTypes.slice(seg, s));
            matches.push(matchType);
            seg = s;
            pos = p;
        }
    }
    function inferTypes(inferences, originalSource, originalTarget, priority, contravariant) {
        if (priority === void 0) { priority = 0 /* InferencePriority.None */; }
        if (contravariant === void 0) { contravariant = false; }
        var bivariant = false;
        var propagationType;
        var inferencePriority = 2048 /* InferencePriority.MaxValue */;
        var allowComplexConstraintInference = true;
        var visited;
        var sourceStack;
        var targetStack;
        var expandingFlags = 0 /* ExpandingFlags.None */;
        inferFromTypes(originalSource, originalTarget);
        function inferFromTypes(source, target) {
            if (!couldContainTypeVariables(target)) {
                return;
            }
            if (source === wildcardType) {
                // We are inferring from an 'any' type. We want to infer this type for every type parameter
                // referenced in the target type, so we record it as the propagation type and infer from the
                // target to itself. Then, as we find candidates we substitute the propagation type.
                var savePropagationType = propagationType;
                propagationType = source;
                inferFromTypes(target, target);
                propagationType = savePropagationType;
                return;
            }
            if (source.aliasSymbol && source.aliasSymbol === target.aliasSymbol) {
                if (source.aliasTypeArguments) {
                    // Source and target are types originating in the same generic type alias declaration.
                    // Simply infer from source type arguments to target type arguments, with defaults applied.
                    var params = getSymbolLinks(source.aliasSymbol).typeParameters;
                    var minParams = getMinTypeArgumentCount(params);
                    var sourceTypes = fillMissingTypeArguments(source.aliasTypeArguments, params, minParams, (0, ts_1.isInJSFile)(source.aliasSymbol.valueDeclaration));
                    var targetTypes = fillMissingTypeArguments(target.aliasTypeArguments, params, minParams, (0, ts_1.isInJSFile)(source.aliasSymbol.valueDeclaration));
                    inferFromTypeArguments(sourceTypes, targetTypes, getAliasVariances(source.aliasSymbol));
                }
                // And if there weren't any type arguments, there's no reason to run inference as the types must be the same.
                return;
            }
            if (source === target && source.flags & 3145728 /* TypeFlags.UnionOrIntersection */) {
                // When source and target are the same union or intersection type, just relate each constituent
                // type to itself.
                for (var _i = 0, _a = source.types; _i < _a.length; _i++) {
                    var t = _a[_i];
                    inferFromTypes(t, t);
                }
                return;
            }
            if (target.flags & 1048576 /* TypeFlags.Union */) {
                // First, infer between identically matching source and target constituents and remove the
                // matching types.
                var _b = inferFromMatchingTypes(source.flags & 1048576 /* TypeFlags.Union */ ? source.types : [source], target.types, isTypeOrBaseIdenticalTo), tempSources = _b[0], tempTargets = _b[1];
                // Next, infer between closely matching source and target constituents and remove
                // the matching types. Types closely match when they are instantiations of the same
                // object type or instantiations of the same type alias.
                var _c = inferFromMatchingTypes(tempSources, tempTargets, isTypeCloselyMatchedBy), sources = _c[0], targets = _c[1];
                if (targets.length === 0) {
                    return;
                }
                target = getUnionType(targets);
                if (sources.length === 0) {
                    // All source constituents have been matched and there is nothing further to infer from.
                    // However, simply making no inferences is undesirable because it could ultimately mean
                    // inferring a type parameter constraint. Instead, make a lower priority inference from
                    // the full source to whatever remains in the target. For example, when inferring from
                    // string to 'string | T', make a lower priority inference of string for T.
                    inferWithPriority(source, target, 1 /* InferencePriority.NakedTypeVariable */);
                    return;
                }
                source = getUnionType(sources);
            }
            else if (target.flags & 2097152 /* TypeFlags.Intersection */ && !(0, ts_1.every)(target.types, isNonGenericObjectType)) {
                // We reduce intersection types unless they're simple combinations of object types. For example,
                // when inferring from 'string[] & { extra: any }' to 'string[] & T' we want to remove string[] and
                // infer { extra: any } for T. But when inferring to 'string[] & Iterable<T>' we want to keep the
                // string[] on the source side and infer string for T.
                if (!(source.flags & 1048576 /* TypeFlags.Union */)) {
                    // Infer between identically matching source and target constituents and remove the matching types.
                    var _d = inferFromMatchingTypes(source.flags & 2097152 /* TypeFlags.Intersection */ ? source.types : [source], target.types, isTypeIdenticalTo), sources = _d[0], targets = _d[1];
                    if (sources.length === 0 || targets.length === 0) {
                        return;
                    }
                    source = getIntersectionType(sources);
                    target = getIntersectionType(targets);
                }
            }
            else if (target.flags & (8388608 /* TypeFlags.IndexedAccess */ | 33554432 /* TypeFlags.Substitution */)) {
                target = getActualTypeVariable(target);
            }
            if (target.flags & 8650752 /* TypeFlags.TypeVariable */) {
                // Skip inference if the source is "blocked", which is used by the language service to
                // prevent inference on nodes currently being edited.
                if (isFromInferenceBlockedSource(source)) {
                    return;
                }
                var inference = getInferenceInfoForType(target);
                if (inference) {
                    // If target is a type parameter, make an inference, unless the source type contains
                    // a "non-inferrable" type. Types with this flag set are markers used to prevent inference.
                    //
                    // For example:
                    //     - anyFunctionType is a wildcard type that's used to avoid contextually typing functions;
                    //       it's internal, so should not be exposed to the user by adding it as a candidate.
                    //     - autoType (and autoArrayType) is a special "any" used in control flow; like anyFunctionType,
                    //       it's internal and should not be observable.
                    //     - silentNeverType is returned by getInferredType when instantiating a generic function for
                    //       inference (and a type variable has no mapping).
                    //
                    // This flag is infectious; if we produce Box<never> (where never is silentNeverType), Box<never> is
                    // also non-inferrable.
                    //
                    // As a special case, also ignore nonInferrableAnyType, which is a special form of the any type
                    // used as a stand-in for binding elements when they are being inferred.
                    if ((0, ts_1.getObjectFlags)(source) & 262144 /* ObjectFlags.NonInferrableType */ || source === nonInferrableAnyType) {
                        return;
                    }
                    if (!inference.isFixed) {
                        if (inference.priority === undefined || priority < inference.priority) {
                            inference.candidates = undefined;
                            inference.contraCandidates = undefined;
                            inference.topLevel = true;
                            inference.priority = priority;
                        }
                        if (priority === inference.priority) {
                            var candidate = propagationType || source;
                            // We make contravariant inferences only if we are in a pure contravariant position,
                            // i.e. only if we have not descended into a bivariant position.
                            if (contravariant && !bivariant) {
                                if (!(0, ts_1.contains)(inference.contraCandidates, candidate)) {
                                    inference.contraCandidates = (0, ts_1.append)(inference.contraCandidates, candidate);
                                    clearCachedInferences(inferences);
                                }
                            }
                            else if (!(0, ts_1.contains)(inference.candidates, candidate)) {
                                inference.candidates = (0, ts_1.append)(inference.candidates, candidate);
                                clearCachedInferences(inferences);
                            }
                        }
                        if (!(priority & 128 /* InferencePriority.ReturnType */) && target.flags & 262144 /* TypeFlags.TypeParameter */ && inference.topLevel && !isTypeParameterAtTopLevel(originalTarget, target)) {
                            inference.topLevel = false;
                            clearCachedInferences(inferences);
                        }
                    }
                    inferencePriority = Math.min(inferencePriority, priority);
                    return;
                }
                // Infer to the simplified version of an indexed access, if possible, to (hopefully) expose more bare type parameters to the inference engine
                var simplified = getSimplifiedType(target, /*writing*/ false);
                if (simplified !== target) {
                    inferFromTypes(source, simplified);
                }
                else if (target.flags & 8388608 /* TypeFlags.IndexedAccess */) {
                    var indexType = getSimplifiedType(target.indexType, /*writing*/ false);
                    // Generally simplifications of instantiable indexes are avoided to keep relationship checking correct, however if our target is an access, we can consider
                    // that key of that access to be "instantiated", since we're looking to find the infernce goal in any way we can.
                    if (indexType.flags & 465829888 /* TypeFlags.Instantiable */) {
                        var simplified_1 = distributeIndexOverObjectType(getSimplifiedType(target.objectType, /*writing*/ false), indexType, /*writing*/ false);
                        if (simplified_1 && simplified_1 !== target) {
                            inferFromTypes(source, simplified_1);
                        }
                    }
                }
            }
            if ((0, ts_1.getObjectFlags)(source) & 4 /* ObjectFlags.Reference */ && (0, ts_1.getObjectFlags)(target) & 4 /* ObjectFlags.Reference */ && (source.target === target.target || isArrayType(source) && isArrayType(target)) &&
                !(source.node && target.node)) {
                // If source and target are references to the same generic type, infer from type arguments
                inferFromTypeArguments(getTypeArguments(source), getTypeArguments(target), getVariances(source.target));
            }
            else if (source.flags & 4194304 /* TypeFlags.Index */ && target.flags & 4194304 /* TypeFlags.Index */) {
                inferFromContravariantTypes(source.type, target.type);
            }
            else if ((isLiteralType(source) || source.flags & 4 /* TypeFlags.String */) && target.flags & 4194304 /* TypeFlags.Index */) {
                var empty = createEmptyObjectTypeFromStringLiteral(source);
                inferFromContravariantTypesWithPriority(empty, target.type, 256 /* InferencePriority.LiteralKeyof */);
            }
            else if (source.flags & 8388608 /* TypeFlags.IndexedAccess */ && target.flags & 8388608 /* TypeFlags.IndexedAccess */) {
                inferFromTypes(source.objectType, target.objectType);
                inferFromTypes(source.indexType, target.indexType);
            }
            else if (source.flags & 268435456 /* TypeFlags.StringMapping */ && target.flags & 268435456 /* TypeFlags.StringMapping */) {
                if (source.symbol === target.symbol) {
                    inferFromTypes(source.type, target.type);
                }
            }
            else if (source.flags & 33554432 /* TypeFlags.Substitution */) {
                inferFromTypes(source.baseType, target);
                inferWithPriority(getSubstitutionIntersection(source), target, 4 /* InferencePriority.SubstituteSource */); // Make substitute inference at a lower priority
            }
            else if (target.flags & 16777216 /* TypeFlags.Conditional */) {
                invokeOnce(source, target, inferToConditionalType);
            }
            else if (target.flags & 3145728 /* TypeFlags.UnionOrIntersection */) {
                inferToMultipleTypes(source, target.types, target.flags);
            }
            else if (source.flags & 1048576 /* TypeFlags.Union */) {
                // Source is a union or intersection type, infer from each constituent type
                var sourceTypes = source.types;
                for (var _e = 0, sourceTypes_2 = sourceTypes; _e < sourceTypes_2.length; _e++) {
                    var sourceType = sourceTypes_2[_e];
                    inferFromTypes(sourceType, target);
                }
            }
            else if (target.flags & 134217728 /* TypeFlags.TemplateLiteral */) {
                inferToTemplateLiteralType(source, target);
            }
            else {
                source = getReducedType(source);
                if (!(priority & 512 /* InferencePriority.NoConstraints */ && source.flags & (2097152 /* TypeFlags.Intersection */ | 465829888 /* TypeFlags.Instantiable */))) {
                    var apparentSource = getApparentType(source);
                    // getApparentType can return _any_ type, since an indexed access or conditional may simplify to any other type.
                    // If that occurs and it doesn't simplify to an object or intersection, we'll need to restart `inferFromTypes`
                    // with the simplified source.
                    if (apparentSource !== source && allowComplexConstraintInference && !(apparentSource.flags & (524288 /* TypeFlags.Object */ | 2097152 /* TypeFlags.Intersection */))) {
                        // TODO: The `allowComplexConstraintInference` flag is a hack! This forbids inference from complex constraints within constraints!
                        // This isn't required algorithmically, but rather is used to lower the memory burden caused by performing inference
                        // that is _too good_ in projects with complicated constraints (eg, fp-ts). In such cases, if we did not limit ourselves
                        // here, we might produce more valid inferences for types, causing us to do more checks and perform more instantiations
                        // (in addition to the extra stack depth here) which, in turn, can push the already close process over its limit.
                        // TL;DR: If we ever become generally more memory efficient (or our resource budget ever increases), we should just
                        // remove this `allowComplexConstraintInference` flag.
                        allowComplexConstraintInference = false;
                        return inferFromTypes(apparentSource, target);
                    }
                    source = apparentSource;
                }
                if (source.flags & (524288 /* TypeFlags.Object */ | 2097152 /* TypeFlags.Intersection */)) {
                    invokeOnce(source, target, inferFromObjectTypes);
                }
            }
        }
        function inferWithPriority(source, target, newPriority) {
            var savePriority = priority;
            priority |= newPriority;
            inferFromTypes(source, target);
            priority = savePriority;
        }
        function inferFromContravariantTypesWithPriority(source, target, newPriority) {
            var savePriority = priority;
            priority |= newPriority;
            inferFromContravariantTypes(source, target);
            priority = savePriority;
        }
        function inferToMultipleTypesWithPriority(source, targets, targetFlags, newPriority) {
            var savePriority = priority;
            priority |= newPriority;
            inferToMultipleTypes(source, targets, targetFlags);
            priority = savePriority;
        }
        function invokeOnce(source, target, action) {
            var key = source.id + "," + target.id;
            var status = visited && visited.get(key);
            if (status !== undefined) {
                inferencePriority = Math.min(inferencePriority, status);
                return;
            }
            (visited || (visited = new Map())).set(key, -1 /* InferencePriority.Circularity */);
            var saveInferencePriority = inferencePriority;
            inferencePriority = 2048 /* InferencePriority.MaxValue */;
            // We stop inferring and report a circularity if we encounter duplicate recursion identities on both
            // the source side and the target side.
            var saveExpandingFlags = expandingFlags;
            (sourceStack !== null && sourceStack !== void 0 ? sourceStack : (sourceStack = [])).push(source);
            (targetStack !== null && targetStack !== void 0 ? targetStack : (targetStack = [])).push(target);
            if (isDeeplyNestedType(source, sourceStack, sourceStack.length, 2))
                expandingFlags |= 1 /* ExpandingFlags.Source */;
            if (isDeeplyNestedType(target, targetStack, targetStack.length, 2))
                expandingFlags |= 2 /* ExpandingFlags.Target */;
            if (expandingFlags !== 3 /* ExpandingFlags.Both */) {
                action(source, target);
            }
            else {
                inferencePriority = -1 /* InferencePriority.Circularity */;
            }
            targetStack.pop();
            sourceStack.pop();
            expandingFlags = saveExpandingFlags;
            visited.set(key, inferencePriority);
            inferencePriority = Math.min(inferencePriority, saveInferencePriority);
        }
        function inferFromMatchingTypes(sources, targets, matches) {
            var matchedSources;
            var matchedTargets;
            for (var _i = 0, targets_1 = targets; _i < targets_1.length; _i++) {
                var t = targets_1[_i];
                for (var _a = 0, sources_1 = sources; _a < sources_1.length; _a++) {
                    var s = sources_1[_a];
                    if (matches(s, t)) {
                        inferFromTypes(s, t);
                        matchedSources = (0, ts_1.appendIfUnique)(matchedSources, s);
                        matchedTargets = (0, ts_1.appendIfUnique)(matchedTargets, t);
                    }
                }
            }
            return [
                matchedSources ? (0, ts_1.filter)(sources, function (t) { return !(0, ts_1.contains)(matchedSources, t); }) : sources,
                matchedTargets ? (0, ts_1.filter)(targets, function (t) { return !(0, ts_1.contains)(matchedTargets, t); }) : targets,
            ];
        }
        function inferFromTypeArguments(sourceTypes, targetTypes, variances) {
            var count = sourceTypes.length < targetTypes.length ? sourceTypes.length : targetTypes.length;
            for (var i = 0; i < count; i++) {
                if (i < variances.length && (variances[i] & 7 /* VarianceFlags.VarianceMask */) === 2 /* VarianceFlags.Contravariant */) {
                    inferFromContravariantTypes(sourceTypes[i], targetTypes[i]);
                }
                else {
                    inferFromTypes(sourceTypes[i], targetTypes[i]);
                }
            }
        }
        function inferFromContravariantTypes(source, target) {
            contravariant = !contravariant;
            inferFromTypes(source, target);
            contravariant = !contravariant;
        }
        function inferFromContravariantTypesIfStrictFunctionTypes(source, target) {
            if (strictFunctionTypes || priority & 1024 /* InferencePriority.AlwaysStrict */) {
                inferFromContravariantTypes(source, target);
            }
            else {
                inferFromTypes(source, target);
            }
        }
        function getInferenceInfoForType(type) {
            if (type.flags & 8650752 /* TypeFlags.TypeVariable */) {
                for (var _i = 0, inferences_2 = inferences; _i < inferences_2.length; _i++) {
                    var inference = inferences_2[_i];
                    if (type === inference.typeParameter) {
                        return inference;
                    }
                }
            }
            return undefined;
        }
        function getSingleTypeVariableFromIntersectionTypes(types) {
            var typeVariable;
            for (var _i = 0, types_14 = types; _i < types_14.length; _i++) {
                var type = types_14[_i];
                var t = type.flags & 2097152 /* TypeFlags.Intersection */ && (0, ts_1.find)(type.types, function (t) { return !!getInferenceInfoForType(t); });
                if (!t || typeVariable && t !== typeVariable) {
                    return undefined;
                }
                typeVariable = t;
            }
            return typeVariable;
        }
        function inferToMultipleTypes(source, targets, targetFlags) {
            var typeVariableCount = 0;
            if (targetFlags & 1048576 /* TypeFlags.Union */) {
                var nakedTypeVariable = void 0;
                var sources = source.flags & 1048576 /* TypeFlags.Union */ ? source.types : [source];
                var matched_1 = new Array(sources.length);
                var inferenceCircularity = false;
                // First infer to types that are not naked type variables. For each source type we
                // track whether inferences were made from that particular type to some target with
                // equal priority (i.e. of equal quality) to what we would infer for a naked type
                // parameter.
                for (var _i = 0, targets_2 = targets; _i < targets_2.length; _i++) {
                    var t = targets_2[_i];
                    if (getInferenceInfoForType(t)) {
                        nakedTypeVariable = t;
                        typeVariableCount++;
                    }
                    else {
                        for (var i = 0; i < sources.length; i++) {
                            var saveInferencePriority = inferencePriority;
                            inferencePriority = 2048 /* InferencePriority.MaxValue */;
                            inferFromTypes(sources[i], t);
                            if (inferencePriority === priority)
                                matched_1[i] = true;
                            inferenceCircularity = inferenceCircularity || inferencePriority === -1 /* InferencePriority.Circularity */;
                            inferencePriority = Math.min(inferencePriority, saveInferencePriority);
                        }
                    }
                }
                if (typeVariableCount === 0) {
                    // If every target is an intersection of types containing a single naked type variable,
                    // make a lower priority inference to that type variable. This handles inferring from
                    // 'A | B' to 'T & (X | Y)' where we want to infer 'A | B' for T.
                    var intersectionTypeVariable = getSingleTypeVariableFromIntersectionTypes(targets);
                    if (intersectionTypeVariable) {
                        inferWithPriority(source, intersectionTypeVariable, 1 /* InferencePriority.NakedTypeVariable */);
                    }
                    return;
                }
                // If the target has a single naked type variable and no inference circularities were
                // encountered above (meaning we explored the types fully), create a union of the source
                // types from which no inferences have been made so far and infer from that union to the
                // naked type variable.
                if (typeVariableCount === 1 && !inferenceCircularity) {
                    var unmatched = (0, ts_1.flatMap)(sources, function (s, i) { return matched_1[i] ? undefined : s; });
                    if (unmatched.length) {
                        inferFromTypes(getUnionType(unmatched), nakedTypeVariable);
                        return;
                    }
                }
            }
            else {
                // We infer from types that are not naked type variables first so that inferences we
                // make from nested naked type variables and given slightly higher priority by virtue
                // of being first in the candidates array.
                for (var _a = 0, targets_3 = targets; _a < targets_3.length; _a++) {
                    var t = targets_3[_a];
                    if (getInferenceInfoForType(t)) {
                        typeVariableCount++;
                    }
                    else {
                        inferFromTypes(source, t);
                    }
                }
            }
            // Inferences directly to naked type variables are given lower priority as they are
            // less specific. For example, when inferring from Promise<string> to T | Promise<T>,
            // we want to infer string for T, not Promise<string> | string. For intersection types
            // we only infer to single naked type variables.
            if (targetFlags & 2097152 /* TypeFlags.Intersection */ ? typeVariableCount === 1 : typeVariableCount > 0) {
                for (var _b = 0, targets_4 = targets; _b < targets_4.length; _b++) {
                    var t = targets_4[_b];
                    if (getInferenceInfoForType(t)) {
                        inferWithPriority(source, t, 1 /* InferencePriority.NakedTypeVariable */);
                    }
                }
            }
        }
        function inferToMappedType(source, target, constraintType) {
            if (constraintType.flags & 1048576 /* TypeFlags.Union */) {
                var result = false;
                for (var _i = 0, _a = constraintType.types; _i < _a.length; _i++) {
                    var type = _a[_i];
                    result = inferToMappedType(source, target, type) || result;
                }
                return result;
            }
            if (constraintType.flags & 4194304 /* TypeFlags.Index */) {
                // We're inferring from some source type S to a homomorphic mapped type { [P in keyof T]: X },
                // where T is a type variable. Use inferTypeForHomomorphicMappedType to infer a suitable source
                // type and then make a secondary inference from that type to T. We make a secondary inference
                // such that direct inferences to T get priority over inferences to Partial<T>, for example.
                var inference = getInferenceInfoForType(constraintType.type);
                if (inference && !inference.isFixed && !isFromInferenceBlockedSource(source)) {
                    var inferredType = inferTypeForHomomorphicMappedType(source, target, constraintType);
                    if (inferredType) {
                        // We assign a lower priority to inferences made from types containing non-inferrable
                        // types because we may only have a partial result (i.e. we may have failed to make
                        // reverse inferences for some properties).
                        inferWithPriority(inferredType, inference.typeParameter, (0, ts_1.getObjectFlags)(source) & 262144 /* ObjectFlags.NonInferrableType */ ?
                            16 /* InferencePriority.PartialHomomorphicMappedType */ :
                            8 /* InferencePriority.HomomorphicMappedType */);
                    }
                }
                return true;
            }
            if (constraintType.flags & 262144 /* TypeFlags.TypeParameter */) {
                // We're inferring from some source type S to a mapped type { [P in K]: X }, where K is a type
                // parameter. First infer from 'keyof S' to K.
                inferWithPriority(getIndexType(source, /*indexFlags*/ !!source.pattern ? 2 /* IndexFlags.NoIndexSignatures */ : 0 /* IndexFlags.None */), constraintType, 32 /* InferencePriority.MappedTypeConstraint */);
                // If K is constrained to a type C, also infer to C. Thus, for a mapped type { [P in K]: X },
                // where K extends keyof T, we make the same inferences as for a homomorphic mapped type
                // { [P in keyof T]: X }. This enables us to make meaningful inferences when the target is a
                // Pick<T, K>.
                var extendedConstraint = getConstraintOfType(constraintType);
                if (extendedConstraint && inferToMappedType(source, target, extendedConstraint)) {
                    return true;
                }
                // If no inferences can be made to K's constraint, infer from a union of the property types
                // in the source to the template type X.
                var propTypes = (0, ts_1.map)(getPropertiesOfType(source), getTypeOfSymbol);
                var indexTypes = (0, ts_1.map)(getIndexInfosOfType(source), function (info) { return info !== enumNumberIndexInfo ? info.type : neverType; });
                inferFromTypes(getUnionType((0, ts_1.concatenate)(propTypes, indexTypes)), getTemplateTypeFromMappedType(target));
                return true;
            }
            return false;
        }
        function inferToConditionalType(source, target) {
            if (source.flags & 16777216 /* TypeFlags.Conditional */) {
                inferFromTypes(source.checkType, target.checkType);
                inferFromTypes(source.extendsType, target.extendsType);
                inferFromTypes(getTrueTypeFromConditionalType(source), getTrueTypeFromConditionalType(target));
                inferFromTypes(getFalseTypeFromConditionalType(source), getFalseTypeFromConditionalType(target));
            }
            else {
                var targetTypes = [getTrueTypeFromConditionalType(target), getFalseTypeFromConditionalType(target)];
                inferToMultipleTypesWithPriority(source, targetTypes, target.flags, contravariant ? 64 /* InferencePriority.ContravariantConditional */ : 0);
            }
        }
        function inferToTemplateLiteralType(source, target) {
            var matches = inferTypesFromTemplateLiteralType(source, target);
            var types = target.types;
            // When the target template literal contains only placeholders (meaning that inference is intended to extract
            // single characters and remainder strings) and inference fails to produce matches, we want to infer 'never' for
            // each placeholder such that instantiation with the inferred value(s) produces 'never', a type for which an
            // assignment check will fail. If we make no inferences, we'll likely end up with the constraint 'string' which,
            // upon instantiation, would collapse all the placeholders to just 'string', and an assignment check might
            // succeed. That would be a pointless and confusing outcome.
            if (matches || (0, ts_1.every)(target.texts, function (s) { return s.length === 0; })) {
                var _loop_19 = function (i) {
                    var source_1 = matches ? matches[i] : neverType;
                    var target_1 = types[i];
                    // If we are inferring from a string literal type to a type variable whose constraint includes one of the
                    // allowed template literal placeholder types, infer from a literal type corresponding to the constraint.
                    if (source_1.flags & 128 /* TypeFlags.StringLiteral */ && target_1.flags & 8650752 /* TypeFlags.TypeVariable */) {
                        var inferenceContext = getInferenceInfoForType(target_1);
                        var constraint = inferenceContext ? getBaseConstraintOfType(inferenceContext.typeParameter) : undefined;
                        if (constraint && !isTypeAny(constraint)) {
                            var constraintTypes = constraint.flags & 1048576 /* TypeFlags.Union */ ? constraint.types : [constraint];
                            var allTypeFlags_1 = (0, ts_1.reduceLeft)(constraintTypes, function (flags, t) { return flags | t.flags; }, 0);
                            // If the constraint contains `string`, we don't need to look for a more preferred type
                            if (!(allTypeFlags_1 & 4 /* TypeFlags.String */)) {
                                var str_1 = source_1.value;
                                // If the type contains `number` or a number literal and the string isn't a valid number, exclude numbers
                                if (allTypeFlags_1 & 296 /* TypeFlags.NumberLike */ && !isValidNumberString(str_1, /*roundTripOnly*/ true)) {
                                    allTypeFlags_1 &= ~296 /* TypeFlags.NumberLike */;
                                }
                                // If the type contains `bigint` or a bigint literal and the string isn't a valid bigint, exclude bigints
                                if (allTypeFlags_1 & 2112 /* TypeFlags.BigIntLike */ && !(0, ts_1.isValidBigIntString)(str_1, /*roundTripOnly*/ true)) {
                                    allTypeFlags_1 &= ~2112 /* TypeFlags.BigIntLike */;
                                }
                                // for each type in the constraint, find the highest priority matching type
                                var matchingType = (0, ts_1.reduceLeft)(constraintTypes, function (left, right) {
                                    return !(right.flags & allTypeFlags_1) ? left :
                                        left.flags & 4 /* TypeFlags.String */ ? left : right.flags & 4 /* TypeFlags.String */ ? source_1 :
                                            left.flags & 134217728 /* TypeFlags.TemplateLiteral */ ? left : right.flags & 134217728 /* TypeFlags.TemplateLiteral */ && isTypeMatchedByTemplateLiteralType(source_1, right) ? source_1 :
                                                left.flags & 268435456 /* TypeFlags.StringMapping */ ? left : right.flags & 268435456 /* TypeFlags.StringMapping */ && str_1 === applyStringMapping(right.symbol, str_1) ? source_1 :
                                                    left.flags & 128 /* TypeFlags.StringLiteral */ ? left : right.flags & 128 /* TypeFlags.StringLiteral */ && right.value === str_1 ? right :
                                                        left.flags & 8 /* TypeFlags.Number */ ? left : right.flags & 8 /* TypeFlags.Number */ ? getNumberLiteralType(+str_1) :
                                                            left.flags & 32 /* TypeFlags.Enum */ ? left : right.flags & 32 /* TypeFlags.Enum */ ? getNumberLiteralType(+str_1) :
                                                                left.flags & 256 /* TypeFlags.NumberLiteral */ ? left : right.flags & 256 /* TypeFlags.NumberLiteral */ && right.value === +str_1 ? right :
                                                                    left.flags & 64 /* TypeFlags.BigInt */ ? left : right.flags & 64 /* TypeFlags.BigInt */ ? parseBigIntLiteralType(str_1) :
                                                                        left.flags & 2048 /* TypeFlags.BigIntLiteral */ ? left : right.flags & 2048 /* TypeFlags.BigIntLiteral */ && (0, ts_1.pseudoBigIntToString)(right.value) === str_1 ? right :
                                                                            left.flags & 16 /* TypeFlags.Boolean */ ? left : right.flags & 16 /* TypeFlags.Boolean */ ? str_1 === "true" ? trueType : str_1 === "false" ? falseType : booleanType :
                                                                                left.flags & 512 /* TypeFlags.BooleanLiteral */ ? left : right.flags & 512 /* TypeFlags.BooleanLiteral */ && right.intrinsicName === str_1 ? right :
                                                                                    left.flags & 32768 /* TypeFlags.Undefined */ ? left : right.flags & 32768 /* TypeFlags.Undefined */ && right.intrinsicName === str_1 ? right :
                                                                                        left.flags & 65536 /* TypeFlags.Null */ ? left : right.flags & 65536 /* TypeFlags.Null */ && right.intrinsicName === str_1 ? right :
                                                                                            left;
                                }, neverType);
                                if (!(matchingType.flags & 131072 /* TypeFlags.Never */)) {
                                    inferFromTypes(matchingType, target_1);
                                    return "continue";
                                }
                            }
                        }
                    }
                    inferFromTypes(source_1, target_1);
                };
                for (var i = 0; i < types.length; i++) {
                    _loop_19(i);
                }
            }
        }
        function inferFromObjectTypes(source, target) {
            var _a, _b;
            if ((0, ts_1.getObjectFlags)(source) & 4 /* ObjectFlags.Reference */ && (0, ts_1.getObjectFlags)(target) & 4 /* ObjectFlags.Reference */ && (source.target === target.target || isArrayType(source) && isArrayType(target))) {
                // If source and target are references to the same generic type, infer from type arguments
                inferFromTypeArguments(getTypeArguments(source), getTypeArguments(target), getVariances(source.target));
                return;
            }
            if (isGenericMappedType(source) && isGenericMappedType(target)) {
                // The source and target types are generic types { [P in S]: X } and { [P in T]: Y }, so we infer
                // from S to T and from X to Y.
                inferFromTypes(getConstraintTypeFromMappedType(source), getConstraintTypeFromMappedType(target));
                inferFromTypes(getTemplateTypeFromMappedType(source), getTemplateTypeFromMappedType(target));
                var sourceNameType = getNameTypeFromMappedType(source);
                var targetNameType = getNameTypeFromMappedType(target);
                if (sourceNameType && targetNameType)
                    inferFromTypes(sourceNameType, targetNameType);
            }
            if ((0, ts_1.getObjectFlags)(target) & 32 /* ObjectFlags.Mapped */ && !target.declaration.nameType) {
                var constraintType = getConstraintTypeFromMappedType(target);
                if (inferToMappedType(source, target, constraintType)) {
                    return;
                }
            }
            // Infer from the members of source and target only if the two types are possibly related
            if (!typesDefinitelyUnrelated(source, target)) {
                if (isArrayOrTupleType(source)) {
                    if (isTupleType(target)) {
                        var sourceArity = getTypeReferenceArity(source);
                        var targetArity = getTypeReferenceArity(target);
                        var elementTypes = getTypeArguments(target);
                        var elementFlags = target.target.elementFlags;
                        // When source and target are tuple types with the same structure (fixed, variadic, and rest are matched
                        // to the same kind in each position), simply infer between the element types.
                        if (isTupleType(source) && isTupleTypeStructureMatching(source, target)) {
                            for (var i = 0; i < targetArity; i++) {
                                inferFromTypes(getTypeArguments(source)[i], elementTypes[i]);
                            }
                            return;
                        }
                        var startLength = isTupleType(source) ? Math.min(source.target.fixedLength, target.target.fixedLength) : 0;
                        var endLength = Math.min(isTupleType(source) ? getEndElementCount(source.target, 3 /* ElementFlags.Fixed */) : 0, target.target.hasRestElement ? getEndElementCount(target.target, 3 /* ElementFlags.Fixed */) : 0);
                        // Infer between starting fixed elements.
                        for (var i = 0; i < startLength; i++) {
                            inferFromTypes(getTypeArguments(source)[i], elementTypes[i]);
                        }
                        if (!isTupleType(source) || sourceArity - startLength - endLength === 1 && source.target.elementFlags[startLength] & 4 /* ElementFlags.Rest */) {
                            // Single rest element remains in source, infer from that to every element in target
                            var restType = getTypeArguments(source)[startLength];
                            for (var i = startLength; i < targetArity - endLength; i++) {
                                inferFromTypes(elementFlags[i] & 8 /* ElementFlags.Variadic */ ? createArrayType(restType) : restType, elementTypes[i]);
                            }
                        }
                        else {
                            var middleLength = targetArity - startLength - endLength;
                            if (middleLength === 2) {
                                if (elementFlags[startLength] & elementFlags[startLength + 1] & 8 /* ElementFlags.Variadic */) {
                                    // Middle of target is [...T, ...U] and source is tuple type
                                    var targetInfo = getInferenceInfoForType(elementTypes[startLength]);
                                    if (targetInfo && targetInfo.impliedArity !== undefined) {
                                        // Infer slices from source based on implied arity of T.
                                        inferFromTypes(sliceTupleType(source, startLength, endLength + sourceArity - targetInfo.impliedArity), elementTypes[startLength]);
                                        inferFromTypes(sliceTupleType(source, startLength + targetInfo.impliedArity, endLength), elementTypes[startLength + 1]);
                                    }
                                }
                                else if (elementFlags[startLength] & 8 /* ElementFlags.Variadic */ && elementFlags[startLength + 1] & 4 /* ElementFlags.Rest */) {
                                    // Middle of target is [...T, ...rest] and source is tuple type
                                    // if T is constrained by a fixed-size tuple we might be able to use its arity to infer T
                                    var param = (_a = getInferenceInfoForType(elementTypes[startLength])) === null || _a === void 0 ? void 0 : _a.typeParameter;
                                    var constraint = param && getBaseConstraintOfType(param);
                                    if (constraint && isTupleType(constraint) && !constraint.target.hasRestElement) {
                                        var impliedArity = constraint.target.fixedLength;
                                        inferFromTypes(sliceTupleType(source, startLength, sourceArity - (startLength + impliedArity)), elementTypes[startLength]);
                                        inferFromTypes(getElementTypeOfSliceOfTupleType(source, startLength + impliedArity, endLength), elementTypes[startLength + 1]);
                                    }
                                }
                                else if (elementFlags[startLength] & 4 /* ElementFlags.Rest */ && elementFlags[startLength + 1] & 8 /* ElementFlags.Variadic */) {
                                    // Middle of target is [...rest, ...T] and source is tuple type
                                    // if T is constrained by a fixed-size tuple we might be able to use its arity to infer T
                                    var param = (_b = getInferenceInfoForType(elementTypes[startLength + 1])) === null || _b === void 0 ? void 0 : _b.typeParameter;
                                    var constraint = param && getBaseConstraintOfType(param);
                                    if (constraint && isTupleType(constraint) && !constraint.target.hasRestElement) {
                                        var impliedArity = constraint.target.fixedLength;
                                        var endIndex = sourceArity - getEndElementCount(target.target, 3 /* ElementFlags.Fixed */);
                                        var startIndex = endIndex - impliedArity;
                                        var trailingSlice = createTupleType(getTypeArguments(source).slice(startIndex, endIndex), source.target.elementFlags.slice(startIndex, endIndex), 
                                        /*readonly*/ false, source.target.labeledElementDeclarations && source.target.labeledElementDeclarations.slice(startIndex, endIndex));
                                        inferFromTypes(getElementTypeOfSliceOfTupleType(source, startLength, endLength + impliedArity), elementTypes[startLength]);
                                        inferFromTypes(trailingSlice, elementTypes[startLength + 1]);
                                    }
                                }
                            }
                            else if (middleLength === 1 && elementFlags[startLength] & 8 /* ElementFlags.Variadic */) {
                                // Middle of target is exactly one variadic element. Infer the slice between the fixed parts in the source.
                                // If target ends in optional element(s), make a lower priority a speculative inference.
                                var endsInOptional = target.target.elementFlags[targetArity - 1] & 2 /* ElementFlags.Optional */;
                                var sourceSlice = sliceTupleType(source, startLength, endLength);
                                inferWithPriority(sourceSlice, elementTypes[startLength], endsInOptional ? 2 /* InferencePriority.SpeculativeTuple */ : 0);
                            }
                            else if (middleLength === 1 && elementFlags[startLength] & 4 /* ElementFlags.Rest */) {
                                // Middle of target is exactly one rest element. If middle of source is not empty, infer union of middle element types.
                                var restType = getElementTypeOfSliceOfTupleType(source, startLength, endLength);
                                if (restType) {
                                    inferFromTypes(restType, elementTypes[startLength]);
                                }
                            }
                        }
                        // Infer between ending fixed elements
                        for (var i = 0; i < endLength; i++) {
                            inferFromTypes(getTypeArguments(source)[sourceArity - i - 1], elementTypes[targetArity - i - 1]);
                        }
                        return;
                    }
                    if (isArrayType(target)) {
                        inferFromIndexTypes(source, target);
                        return;
                    }
                }
                inferFromProperties(source, target);
                inferFromSignatures(source, target, 0 /* SignatureKind.Call */);
                inferFromSignatures(source, target, 1 /* SignatureKind.Construct */);
                inferFromIndexTypes(source, target);
            }
        }
        function inferFromProperties(source, target) {
            var properties = getPropertiesOfObjectType(target);
            for (var _i = 0, properties_3 = properties; _i < properties_3.length; _i++) {
                var targetProp = properties_3[_i];
                var sourceProp = getPropertyOfType(source, targetProp.escapedName);
                if (sourceProp && !(0, ts_1.some)(sourceProp.declarations, hasSkipDirectInferenceFlag)) {
                    inferFromTypes(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp));
                }
            }
        }
        function inferFromSignatures(source, target, kind) {
            var sourceSignatures = getSignaturesOfType(source, kind);
            var targetSignatures = getSignaturesOfType(target, kind);
            var sourceLen = sourceSignatures.length;
            var targetLen = targetSignatures.length;
            var len = sourceLen < targetLen ? sourceLen : targetLen;
            for (var i = 0; i < len; i++) {
                inferFromSignature(getBaseSignature(sourceSignatures[sourceLen - len + i]), getErasedSignature(targetSignatures[targetLen - len + i]));
            }
        }
        function inferFromSignature(source, target) {
            if (!(source.flags & 64 /* SignatureFlags.IsNonInferrable */)) {
                var saveBivariant = bivariant;
                var kind = target.declaration ? target.declaration.kind : 0 /* SyntaxKind.Unknown */;
                // Once we descend into a bivariant signature we remain bivariant for all nested inferences
                bivariant = bivariant || kind === 173 /* SyntaxKind.MethodDeclaration */ || kind === 172 /* SyntaxKind.MethodSignature */ || kind === 175 /* SyntaxKind.Constructor */;
                applyToParameterTypes(source, target, inferFromContravariantTypesIfStrictFunctionTypes);
                bivariant = saveBivariant;
            }
            applyToReturnTypes(source, target, inferFromTypes);
        }
        function inferFromIndexTypes(source, target) {
            // Inferences across mapped type index signatures are pretty much the same a inferences to homomorphic variables
            var priority = ((0, ts_1.getObjectFlags)(source) & (0, ts_1.getObjectFlags)(target) & 32 /* ObjectFlags.Mapped */) ? 8 /* InferencePriority.HomomorphicMappedType */ : 0;
            var indexInfos = getIndexInfosOfType(target);
            if (isObjectTypeWithInferableIndex(source)) {
                for (var _i = 0, indexInfos_6 = indexInfos; _i < indexInfos_6.length; _i++) {
                    var targetInfo = indexInfos_6[_i];
                    var propTypes = [];
                    for (var _a = 0, _b = getPropertiesOfType(source); _a < _b.length; _a++) {
                        var prop = _b[_a];
                        if (isApplicableIndexType(getLiteralTypeFromProperty(prop, 8576 /* TypeFlags.StringOrNumberLiteralOrUnique */), targetInfo.keyType)) {
                            var propType = getTypeOfSymbol(prop);
                            propTypes.push(prop.flags & 16777216 /* SymbolFlags.Optional */ ? removeMissingOrUndefinedType(propType) : propType);
                        }
                    }
                    for (var _c = 0, _d = getIndexInfosOfType(source); _c < _d.length; _c++) {
                        var info = _d[_c];
                        if (isApplicableIndexType(info.keyType, targetInfo.keyType)) {
                            propTypes.push(info.type);
                        }
                    }
                    if (propTypes.length) {
                        inferWithPriority(getUnionType(propTypes), targetInfo.type, priority);
                    }
                }
            }
            for (var _e = 0, indexInfos_7 = indexInfos; _e < indexInfos_7.length; _e++) {
                var targetInfo = indexInfos_7[_e];
                var sourceInfo = getApplicableIndexInfo(source, targetInfo.keyType);
                if (sourceInfo) {
                    inferWithPriority(sourceInfo.type, targetInfo.type, priority);
                }
            }
        }
    }
    function isTypeOrBaseIdenticalTo(s, t) {
        return t === missingType ? s === t :
            (isTypeIdenticalTo(s, t) || !!(t.flags & 4 /* TypeFlags.String */ && s.flags & 128 /* TypeFlags.StringLiteral */ || t.flags & 8 /* TypeFlags.Number */ && s.flags & 256 /* TypeFlags.NumberLiteral */));
    }
    function isTypeCloselyMatchedBy(s, t) {
        return !!(s.flags & 524288 /* TypeFlags.Object */ && t.flags & 524288 /* TypeFlags.Object */ && s.symbol && s.symbol === t.symbol ||
            s.aliasSymbol && s.aliasTypeArguments && s.aliasSymbol === t.aliasSymbol);
    }
    function hasPrimitiveConstraint(type) {
        var constraint = getConstraintOfTypeParameter(type);
        return !!constraint && maybeTypeOfKind(constraint.flags & 16777216 /* TypeFlags.Conditional */ ? getDefaultConstraintOfConditionalType(constraint) : constraint, 402784252 /* TypeFlags.Primitive */ | 4194304 /* TypeFlags.Index */ | 134217728 /* TypeFlags.TemplateLiteral */ | 268435456 /* TypeFlags.StringMapping */);
    }
    function isObjectLiteralType(type) {
        return !!((0, ts_1.getObjectFlags)(type) & 128 /* ObjectFlags.ObjectLiteral */);
    }
    function isObjectOrArrayLiteralType(type) {
        return !!((0, ts_1.getObjectFlags)(type) & (128 /* ObjectFlags.ObjectLiteral */ | 16384 /* ObjectFlags.ArrayLiteral */));
    }
    function unionObjectAndArrayLiteralCandidates(candidates) {
        if (candidates.length > 1) {
            var objectLiterals = (0, ts_1.filter)(candidates, isObjectOrArrayLiteralType);
            if (objectLiterals.length) {
                var literalsType = getUnionType(objectLiterals, 2 /* UnionReduction.Subtype */);
                return (0, ts_1.concatenate)((0, ts_1.filter)(candidates, function (t) { return !isObjectOrArrayLiteralType(t); }), [literalsType]);
            }
        }
        return candidates;
    }
    function getContravariantInference(inference) {
        return inference.priority & 416 /* InferencePriority.PriorityImpliesCombination */ ? getIntersectionType(inference.contraCandidates) : getCommonSubtype(inference.contraCandidates);
    }
    function getCovariantInference(inference, signature) {
        // Extract all object and array literal types and replace them with a single widened and normalized type.
        var candidates = unionObjectAndArrayLiteralCandidates(inference.candidates);
        // We widen inferred literal types if
        // all inferences were made to top-level occurrences of the type parameter, and
        // the type parameter has no constraint or its constraint includes no primitive or literal types, and
        // the type parameter was fixed during inference or does not occur at top-level in the return type.
        var primitiveConstraint = hasPrimitiveConstraint(inference.typeParameter) || isConstTypeVariable(inference.typeParameter);
        var widenLiteralTypes = !primitiveConstraint && inference.topLevel &&
            (inference.isFixed || !isTypeParameterAtTopLevelInReturnType(signature, inference.typeParameter));
        var baseCandidates = primitiveConstraint ? (0, ts_1.sameMap)(candidates, getRegularTypeOfLiteralType) :
            widenLiteralTypes ? (0, ts_1.sameMap)(candidates, getWidenedLiteralType) :
                candidates;
        // If all inferences were made from a position that implies a combined result, infer a union type.
        // Otherwise, infer a common supertype.
        var unwidenedType = inference.priority & 416 /* InferencePriority.PriorityImpliesCombination */ ?
            getUnionType(baseCandidates, 2 /* UnionReduction.Subtype */) :
            getCommonSupertype(baseCandidates);
        return getWidenedType(unwidenedType);
    }
    function getInferredType(context, index) {
        var inference = context.inferences[index];
        if (!inference.inferredType) {
            var inferredType = void 0;
            var fallbackType = void 0;
            if (context.signature) {
                var inferredCovariantType_1 = inference.candidates ? getCovariantInference(inference, context.signature) : undefined;
                var inferredContravariantType = inference.contraCandidates ? getContravariantInference(inference) : undefined;
                if (inferredCovariantType_1 || inferredContravariantType) {
                    // If we have both co- and contra-variant inferences, we prefer the co-variant inference if it is not 'never',
                    // all co-variant inferences are subtypes of it (i.e. it isn't one of a conflicting set of candidates), it is
                    // a subtype of some contra-variant inference, and no other type parameter is constrained to this type parameter
                    // and has inferences that would conflict. Otherwise, we prefer the contra-variant inference.
                    var preferCovariantType = inferredCovariantType_1 && (!inferredContravariantType ||
                        !(inferredCovariantType_1.flags & 131072 /* TypeFlags.Never */) &&
                            (0, ts_1.some)(inference.contraCandidates, function (t) { return isTypeSubtypeOf(inferredCovariantType_1, t); }) &&
                            (0, ts_1.every)(context.inferences, function (other) {
                                return other !== inference && getConstraintOfTypeParameter(other.typeParameter) !== inference.typeParameter ||
                                    (0, ts_1.every)(other.candidates, function (t) { return isTypeSubtypeOf(t, inferredCovariantType_1); });
                            }));
                    inferredType = preferCovariantType ? inferredCovariantType_1 : inferredContravariantType;
                    fallbackType = preferCovariantType ? inferredContravariantType : inferredCovariantType_1;
                }
                else if (context.flags & 1 /* InferenceFlags.NoDefault */) {
                    // We use silentNeverType as the wildcard that signals no inferences.
                    inferredType = silentNeverType;
                }
                else {
                    // Infer either the default or the empty object type when no inferences were
                    // made. It is important to remember that in this case, inference still
                    // succeeds, meaning there is no error for not having inference candidates. An
                    // inference error only occurs when there are *conflicting* candidates, i.e.
                    // candidates with no common supertype.
                    var defaultType = getDefaultFromTypeParameter(inference.typeParameter);
                    if (defaultType) {
                        // Instantiate the default type. Any forward reference to a type
                        // parameter should be instantiated to the empty object type.
                        inferredType = instantiateType(defaultType, mergeTypeMappers(createBackreferenceMapper(context, index), context.nonFixingMapper));
                    }
                }
            }
            else {
                inferredType = getTypeFromInference(inference);
            }
            inference.inferredType = inferredType || getDefaultTypeArgumentType(!!(context.flags & 2 /* InferenceFlags.AnyDefault */));
            var constraint = getConstraintOfTypeParameter(inference.typeParameter);
            if (constraint) {
                var instantiatedConstraint = instantiateType(constraint, context.nonFixingMapper);
                if (!inferredType || inferredType === wildcardType || !context.compareTypes(inferredType, getTypeWithThisArgument(instantiatedConstraint, inferredType))) {
                    // If the fallback type satisfies the constraint, we pick it. Otherwise, we pick the constraint.
                    inference.inferredType = fallbackType && context.compareTypes(fallbackType, getTypeWithThisArgument(instantiatedConstraint, fallbackType)) ? fallbackType : instantiatedConstraint;
                }
            }
        }
        return inference.inferredType;
    }
    function getDefaultTypeArgumentType(isInJavaScriptFile) {
        return isInJavaScriptFile ? anyType : unknownType;
    }
    function getInferredTypes(context) {
        var result = [];
        for (var i = 0; i < context.inferences.length; i++) {
            result.push(getInferredType(context, i));
        }
        return result;
    }
    // EXPRESSION TYPE CHECKING
    function getCannotFindNameDiagnosticForName(node) {
        switch (node.escapedText) {
            case "document":
            case "console":
                return ts_1.Diagnostics.Cannot_find_name_0_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_include_dom;
            case "$":
                return compilerOptions.types
                    ? ts_1.Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_jQuery_Try_npm_i_save_dev_types_Slashjquery_and_then_add_jquery_to_the_types_field_in_your_tsconfig
                    : ts_1.Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_jQuery_Try_npm_i_save_dev_types_Slashjquery;
            case "describe":
            case "suite":
            case "it":
            case "test":
                return compilerOptions.types
                    ? ts_1.Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_a_test_runner_Try_npm_i_save_dev_types_Slashjest_or_npm_i_save_dev_types_Slashmocha_and_then_add_jest_or_mocha_to_the_types_field_in_your_tsconfig
                    : ts_1.Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_a_test_runner_Try_npm_i_save_dev_types_Slashjest_or_npm_i_save_dev_types_Slashmocha;
            case "process":
            case "require":
            case "Buffer":
            case "module":
                return compilerOptions.types
                    ? ts_1.Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_node_Try_npm_i_save_dev_types_Slashnode_and_then_add_node_to_the_types_field_in_your_tsconfig
                    : ts_1.Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_node_Try_npm_i_save_dev_types_Slashnode;
            case "Map":
            case "Set":
            case "Promise":
            case "Symbol":
            case "WeakMap":
            case "WeakSet":
            case "Iterator":
            case "AsyncIterator":
            case "SharedArrayBuffer":
            case "Atomics":
            case "AsyncIterable":
            case "AsyncIterableIterator":
            case "AsyncGenerator":
            case "AsyncGeneratorFunction":
            case "BigInt":
            case "Reflect":
            case "BigInt64Array":
            case "BigUint64Array":
                return ts_1.Diagnostics.Cannot_find_name_0_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_1_or_later;
            case "await":
                if ((0, ts_1.isCallExpression)(node.parent)) {
                    return ts_1.Diagnostics.Cannot_find_name_0_Did_you_mean_to_write_this_in_an_async_function;
                }
            // falls through
            default:
                if (node.parent.kind === 303 /* SyntaxKind.ShorthandPropertyAssignment */) {
                    return ts_1.Diagnostics.No_value_exists_in_scope_for_the_shorthand_property_0_Either_declare_one_or_provide_an_initializer;
                }
                else {
                    return ts_1.Diagnostics.Cannot_find_name_0;
                }
        }
    }
    function getResolvedSymbol(node) {
        var links = getNodeLinks(node);
        if (!links.resolvedSymbol) {
            links.resolvedSymbol = !(0, ts_1.nodeIsMissing)(node) &&
                resolveName(node, node.escapedText, 111551 /* SymbolFlags.Value */ | 1048576 /* SymbolFlags.ExportValue */, getCannotFindNameDiagnosticForName(node), node, !(0, ts_1.isWriteOnlyAccess)(node), 
                /*excludeGlobals*/ false) || unknownSymbol;
        }
        return links.resolvedSymbol;
    }
    function isInTypeQuery(node) {
        // TypeScript 1.0 spec (April 2014): 3.6.3
        // A type query consists of the keyword typeof followed by an expression.
        // The expression is restricted to a single identifier or a sequence of identifiers separated by periods
        return !!(0, ts_1.findAncestor)(node, function (n) { return n.kind === 185 /* SyntaxKind.TypeQuery */ ? true : n.kind === 80 /* SyntaxKind.Identifier */ || n.kind === 165 /* SyntaxKind.QualifiedName */ ? false : "quit"; });
    }
    function isInAmbientOrTypeNode(node) {
        return !!(node.flags & 16777216 /* NodeFlags.Ambient */ || (0, ts_1.findAncestor)(node, function (n) { return (0, ts_1.isInterfaceDeclaration)(n) || (0, ts_1.isTypeAliasDeclaration)(n) || (0, ts_1.isTypeLiteralNode)(n); }));
    }
    // Return the flow cache key for a "dotted name" (i.e. a sequence of identifiers
    // separated by dots). The key consists of the id of the symbol referenced by the
    // leftmost identifier followed by zero or more property names separated by dots.
    // The result is undefined if the reference isn't a dotted name.
    function getFlowCacheKey(node, declaredType, initialType, flowContainer) {
        switch (node.kind) {
            case 80 /* SyntaxKind.Identifier */:
                if (!(0, ts_1.isThisInTypeQuery)(node)) {
                    var symbol = getResolvedSymbol(node);
                    return symbol !== unknownSymbol ? "".concat(flowContainer ? getNodeId(flowContainer) : "-1", "|").concat(getTypeId(declaredType), "|").concat(getTypeId(initialType), "|").concat(getSymbolId(symbol)) : undefined;
                }
            // falls through
            case 110 /* SyntaxKind.ThisKeyword */:
                return "0|".concat(flowContainer ? getNodeId(flowContainer) : "-1", "|").concat(getTypeId(declaredType), "|").concat(getTypeId(initialType));
            case 234 /* SyntaxKind.NonNullExpression */:
            case 216 /* SyntaxKind.ParenthesizedExpression */:
                return getFlowCacheKey(node.expression, declaredType, initialType, flowContainer);
            case 165 /* SyntaxKind.QualifiedName */:
                var left = getFlowCacheKey(node.left, declaredType, initialType, flowContainer);
                return left && left + "." + node.right.escapedText;
            case 210 /* SyntaxKind.PropertyAccessExpression */:
            case 211 /* SyntaxKind.ElementAccessExpression */:
                var propName = getAccessedPropertyName(node);
                if (propName !== undefined) {
                    var key = getFlowCacheKey(node.expression, declaredType, initialType, flowContainer);
                    return key && key + "." + propName;
                }
                break;
            case 205 /* SyntaxKind.ObjectBindingPattern */:
            case 206 /* SyntaxKind.ArrayBindingPattern */:
            case 261 /* SyntaxKind.FunctionDeclaration */:
            case 217 /* SyntaxKind.FunctionExpression */:
            case 218 /* SyntaxKind.ArrowFunction */:
            case 173 /* SyntaxKind.MethodDeclaration */:
                // Handle pseudo-references originating in getNarrowedTypeOfSymbol.
                return "".concat(getNodeId(node), "#").concat(getTypeId(declaredType));
        }
        return undefined;
    }
    function isMatchingReference(source, target) {
        switch (target.kind) {
            case 216 /* SyntaxKind.ParenthesizedExpression */:
            case 234 /* SyntaxKind.NonNullExpression */:
                return isMatchingReference(source, target.expression);
            case 225 /* SyntaxKind.BinaryExpression */:
                return ((0, ts_1.isAssignmentExpression)(target) && isMatchingReference(source, target.left)) ||
                    ((0, ts_1.isBinaryExpression)(target) && target.operatorToken.kind === 28 /* SyntaxKind.CommaToken */ && isMatchingReference(source, target.right));
        }
        switch (source.kind) {
            case 235 /* SyntaxKind.MetaProperty */:
                return target.kind === 235 /* SyntaxKind.MetaProperty */
                    && source.keywordToken === target.keywordToken
                    && source.name.escapedText === target.name.escapedText;
            case 80 /* SyntaxKind.Identifier */:
            case 81 /* SyntaxKind.PrivateIdentifier */:
                return (0, ts_1.isThisInTypeQuery)(source) ?
                    target.kind === 110 /* SyntaxKind.ThisKeyword */ :
                    target.kind === 80 /* SyntaxKind.Identifier */ && getResolvedSymbol(source) === getResolvedSymbol(target) ||
                        ((0, ts_1.isVariableDeclaration)(target) || (0, ts_1.isBindingElement)(target)) &&
                            getExportSymbolOfValueSymbolIfExported(getResolvedSymbol(source)) === getSymbolOfDeclaration(target);
            case 110 /* SyntaxKind.ThisKeyword */:
                return target.kind === 110 /* SyntaxKind.ThisKeyword */;
            case 108 /* SyntaxKind.SuperKeyword */:
                return target.kind === 108 /* SyntaxKind.SuperKeyword */;
            case 234 /* SyntaxKind.NonNullExpression */:
            case 216 /* SyntaxKind.ParenthesizedExpression */:
                return isMatchingReference(source.expression, target);
            case 210 /* SyntaxKind.PropertyAccessExpression */:
            case 211 /* SyntaxKind.ElementAccessExpression */:
                var sourcePropertyName = getAccessedPropertyName(source);
                var targetPropertyName = (0, ts_1.isAccessExpression)(target) ? getAccessedPropertyName(target) : undefined;
                return sourcePropertyName !== undefined && targetPropertyName !== undefined && targetPropertyName === sourcePropertyName &&
                    isMatchingReference(source.expression, target.expression);
            case 165 /* SyntaxKind.QualifiedName */:
                return (0, ts_1.isAccessExpression)(target) &&
                    source.right.escapedText === getAccessedPropertyName(target) &&
                    isMatchingReference(source.left, target.expression);
            case 225 /* SyntaxKind.BinaryExpression */:
                return ((0, ts_1.isBinaryExpression)(source) && source.operatorToken.kind === 28 /* SyntaxKind.CommaToken */ && isMatchingReference(source.right, target));
        }
        return false;
    }
    function getAccessedPropertyName(access) {
        if ((0, ts_1.isPropertyAccessExpression)(access)) {
            return access.name.escapedText;
        }
        if ((0, ts_1.isElementAccessExpression)(access)) {
            return tryGetElementAccessExpressionName(access);
        }
        if ((0, ts_1.isBindingElement)(access)) {
            var name_23 = getDestructuringPropertyName(access);
            return name_23 ? (0, ts_1.escapeLeadingUnderscores)(name_23) : undefined;
        }
        if ((0, ts_1.isParameter)(access)) {
            return ("" + access.parent.parameters.indexOf(access));
        }
        return undefined;
    }
    function tryGetNameFromType(type) {
        return type.flags & 8192 /* TypeFlags.UniqueESSymbol */ ? type.escapedName :
            type.flags & 384 /* TypeFlags.StringOrNumberLiteral */ ? (0, ts_1.escapeLeadingUnderscores)("" + type.value) : undefined;
    }
    function tryGetElementAccessExpressionName(node) {
        return (0, ts_1.isStringOrNumericLiteralLike)(node.argumentExpression) ? (0, ts_1.escapeLeadingUnderscores)(node.argumentExpression.text) :
            (0, ts_1.isEntityNameExpression)(node.argumentExpression) ? tryGetNameFromEntityNameExpression(node.argumentExpression) : undefined;
    }
    function tryGetNameFromEntityNameExpression(node) {
        var symbol = resolveEntityName(node, 111551 /* SymbolFlags.Value */, /*ignoreErrors*/ true);
        if (!symbol || !(isConstVariable(symbol) || (symbol.flags & 8 /* SymbolFlags.EnumMember */)))
            return undefined;
        var declaration = symbol.valueDeclaration;
        if (declaration === undefined)
            return undefined;
        var type = tryGetTypeFromEffectiveTypeNode(declaration);
        if (type) {
            var name_24 = tryGetNameFromType(type);
            if (name_24 !== undefined) {
                return name_24;
            }
        }
        if ((0, ts_1.hasOnlyExpressionInitializer)(declaration) && isBlockScopedNameDeclaredBeforeUse(declaration, node)) {
            var initializer = (0, ts_1.getEffectiveInitializer)(declaration);
            if (initializer) {
                return tryGetNameFromType(getTypeOfExpression(initializer));
            }
            if ((0, ts_1.isEnumMember)(declaration)) {
                return (0, ts_1.getTextOfPropertyName)(declaration.name);
            }
        }
        return undefined;
    }
    function containsMatchingReference(source, target) {
        while ((0, ts_1.isAccessExpression)(source)) {
            source = source.expression;
            if (isMatchingReference(source, target)) {
                return true;
            }
        }
        return false;
    }
    function optionalChainContainsReference(source, target) {
        while ((0, ts_1.isOptionalChain)(source)) {
            source = source.expression;
            if (isMatchingReference(source, target)) {
                return true;
            }
        }
        return false;
    }
    function isDiscriminantProperty(type, name) {
        if (type && type.flags & 1048576 /* TypeFlags.Union */) {
            var prop = getUnionOrIntersectionProperty(type, name);
            if (prop && (0, ts_1.getCheckFlags)(prop) & 2 /* CheckFlags.SyntheticProperty */) {
                // NOTE: cast to TransientSymbol should be safe because only TransientSymbols can have CheckFlags.SyntheticProperty
                if (prop.links.isDiscriminantProperty === undefined) {
                    prop.links.isDiscriminantProperty =
                        (prop.links.checkFlags & 192 /* CheckFlags.Discriminant */) === 192 /* CheckFlags.Discriminant */ &&
                            !isGenericType(getTypeOfSymbol(prop));
                }
                return !!prop.links.isDiscriminantProperty;
            }
        }
        return false;
    }
    function findDiscriminantProperties(sourceProperties, target) {
        var result;
        for (var _i = 0, sourceProperties_2 = sourceProperties; _i < sourceProperties_2.length; _i++) {
            var sourceProperty = sourceProperties_2[_i];
            if (isDiscriminantProperty(target, sourceProperty.escapedName)) {
                if (result) {
                    result.push(sourceProperty);
                    continue;
                }
                result = [sourceProperty];
            }
        }
        return result;
    }
    // Given a set of constituent types and a property name, create and return a map keyed by the literal
    // types of the property by that name in each constituent type. No map is returned if some key property
    // has a non-literal type or if less than 10 or less than 50% of the constituents have a unique key.
    // Entries with duplicate keys have unknownType as the value.
    function mapTypesByKeyProperty(types, name) {
        var map = new Map();
        var count = 0;
        var _loop_20 = function (type) {
            if (type.flags & (524288 /* TypeFlags.Object */ | 2097152 /* TypeFlags.Intersection */ | 58982400 /* TypeFlags.InstantiableNonPrimitive */)) {
                var discriminant = getTypeOfPropertyOfType(type, name);
                if (discriminant) {
                    if (!isLiteralType(discriminant)) {
                        return { value: undefined };
                    }
                    var duplicate_1 = false;
                    forEachType(discriminant, function (t) {
                        var id = getTypeId(getRegularTypeOfLiteralType(t));
                        var existing = map.get(id);
                        if (!existing) {
                            map.set(id, type);
                        }
                        else if (existing !== unknownType) {
                            map.set(id, unknownType);
                            duplicate_1 = true;
                        }
                    });
                    if (!duplicate_1)
                        count++;
                }
            }
        };
        for (var _i = 0, types_15 = types; _i < types_15.length; _i++) {
            var type = types_15[_i];
            var state_9 = _loop_20(type);
            if (typeof state_9 === "object")
                return state_9.value;
        }
        return count >= 10 && count * 2 >= types.length ? map : undefined;
    }
    // Return the name of a discriminant property for which it was possible and feasible to construct a map of
    // constituent types keyed by the literal types of the property by that name in each constituent type.
    function getKeyPropertyName(unionType) {
        var types = unionType.types;
        // We only construct maps for unions with many non-primitive constituents.
        if (types.length < 10 || (0, ts_1.getObjectFlags)(unionType) & 32768 /* ObjectFlags.PrimitiveUnion */ ||
            (0, ts_1.countWhere)(types, function (t) { return !!(t.flags & (524288 /* TypeFlags.Object */ | 58982400 /* TypeFlags.InstantiableNonPrimitive */)); }) < 10) {
            return undefined;
        }
        if (unionType.keyPropertyName === undefined) {
            // The candidate key property name is the name of the first property with a unit type in one of the
            // constituent types.
            var keyPropertyName = (0, ts_1.forEach)(types, function (t) {
                return t.flags & (524288 /* TypeFlags.Object */ | 58982400 /* TypeFlags.InstantiableNonPrimitive */) ?
                    (0, ts_1.forEach)(getPropertiesOfType(t), function (p) { return isUnitType(getTypeOfSymbol(p)) ? p.escapedName : undefined; }) :
                    undefined;
            });
            var mapByKeyProperty = keyPropertyName && mapTypesByKeyProperty(types, keyPropertyName);
            unionType.keyPropertyName = mapByKeyProperty ? keyPropertyName : "";
            unionType.constituentMap = mapByKeyProperty;
        }
        return unionType.keyPropertyName.length ? unionType.keyPropertyName : undefined;
    }
    // Given a union type for which getKeyPropertyName returned a non-undefined result, return the constituent
    // that corresponds to the given key type for that property name.
    function getConstituentTypeForKeyType(unionType, keyType) {
        var _a;
        var result = (_a = unionType.constituentMap) === null || _a === void 0 ? void 0 : _a.get(getTypeId(getRegularTypeOfLiteralType(keyType)));
        return result !== unknownType ? result : undefined;
    }
    function getMatchingUnionConstituentForType(unionType, type) {
        var keyPropertyName = getKeyPropertyName(unionType);
        var propType = keyPropertyName && getTypeOfPropertyOfType(type, keyPropertyName);
        return propType && getConstituentTypeForKeyType(unionType, propType);
    }
    function getMatchingUnionConstituentForObjectLiteral(unionType, node) {
        var keyPropertyName = getKeyPropertyName(unionType);
        var propNode = keyPropertyName && (0, ts_1.find)(node.properties, function (p) { return p.symbol && p.kind === 302 /* SyntaxKind.PropertyAssignment */ &&
            p.symbol.escapedName === keyPropertyName && isPossiblyDiscriminantValue(p.initializer); });
        var propType = propNode && getContextFreeTypeOfExpression(propNode.initializer);
        return propType && getConstituentTypeForKeyType(unionType, propType);
    }
    function isOrContainsMatchingReference(source, target) {
        return isMatchingReference(source, target) || containsMatchingReference(source, target);
    }
    function hasMatchingArgument(expression, reference) {
        if (expression.arguments) {
            for (var _i = 0, _a = expression.arguments; _i < _a.length; _i++) {
                var argument = _a[_i];
                if (isOrContainsMatchingReference(reference, argument)) {
                    return true;
                }
            }
        }
        if (expression.expression.kind === 210 /* SyntaxKind.PropertyAccessExpression */ &&
            isOrContainsMatchingReference(reference, expression.expression.expression)) {
            return true;
        }
        return false;
    }
    function getFlowNodeId(flow) {
        if (!flow.id || flow.id < 0) {
            flow.id = nextFlowId;
            nextFlowId++;
        }
        return flow.id;
    }
    function typeMaybeAssignableTo(source, target) {
        if (!(source.flags & 1048576 /* TypeFlags.Union */)) {
            return isTypeAssignableTo(source, target);
        }
        for (var _i = 0, _a = source.types; _i < _a.length; _i++) {
            var t = _a[_i];
            if (isTypeAssignableTo(t, target)) {
                return true;
            }
        }
        return false;
    }
    // Remove those constituent types of declaredType to which no constituent type of assignedType is assignable.
    // For example, when a variable of type number | string | boolean is assigned a value of type number | boolean,
    // we remove type string.
    function getAssignmentReducedType(declaredType, assignedType) {
        var _a;
        if (declaredType === assignedType) {
            return declaredType;
        }
        if (assignedType.flags & 131072 /* TypeFlags.Never */) {
            return assignedType;
        }
        var key = "A".concat(getTypeId(declaredType), ",").concat(getTypeId(assignedType));
        return (_a = getCachedType(key)) !== null && _a !== void 0 ? _a : setCachedType(key, getAssignmentReducedTypeWorker(declaredType, assignedType));
    }
    function getAssignmentReducedTypeWorker(declaredType, assignedType) {
        var filteredType = filterType(declaredType, function (t) { return typeMaybeAssignableTo(assignedType, t); });
        // Ensure that we narrow to fresh types if the assignment is a fresh boolean literal type.
        var reducedType = assignedType.flags & 512 /* TypeFlags.BooleanLiteral */ && isFreshLiteralType(assignedType) ? mapType(filteredType, getFreshTypeOfLiteralType) : filteredType;
        // Our crude heuristic produces an invalid result in some cases: see GH#26130.
        // For now, when that happens, we give up and don't narrow at all.  (This also
        // means we'll never narrow for erroneous assignments where the assigned type
        // is not assignable to the declared type.)
        return isTypeAssignableTo(assignedType, reducedType) ? reducedType : declaredType;
    }
    function isFunctionObjectType(type) {
        // We do a quick check for a "bind" property before performing the more expensive subtype
        // check. This gives us a quicker out in the common case where an object type is not a function.
        var resolved = resolveStructuredTypeMembers(type);
        return !!(resolved.callSignatures.length || resolved.constructSignatures.length ||
            resolved.members.get("bind") && isTypeSubtypeOf(type, globalFunctionType));
    }
    function getTypeFacts(type) {
        if (type.flags & (2097152 /* TypeFlags.Intersection */ | 465829888 /* TypeFlags.Instantiable */)) {
            type = getBaseConstraintOfType(type) || unknownType;
        }
        var flags = type.flags;
        if (flags & (4 /* TypeFlags.String */ | 268435456 /* TypeFlags.StringMapping */)) {
            return strictNullChecks ? 16317953 /* TypeFacts.StringStrictFacts */ : 16776705 /* TypeFacts.StringFacts */;
        }
        if (flags & (128 /* TypeFlags.StringLiteral */ | 134217728 /* TypeFlags.TemplateLiteral */)) {
            var isEmpty = flags & 128 /* TypeFlags.StringLiteral */ && type.value === "";
            return strictNullChecks ?
                isEmpty ? 12123649 /* TypeFacts.EmptyStringStrictFacts */ : 7929345 /* TypeFacts.NonEmptyStringStrictFacts */ :
                isEmpty ? 12582401 /* TypeFacts.EmptyStringFacts */ : 16776705 /* TypeFacts.NonEmptyStringFacts */;
        }
        if (flags & (8 /* TypeFlags.Number */ | 32 /* TypeFlags.Enum */)) {
            return strictNullChecks ? 16317698 /* TypeFacts.NumberStrictFacts */ : 16776450 /* TypeFacts.NumberFacts */;
        }
        if (flags & 256 /* TypeFlags.NumberLiteral */) {
            var isZero = type.value === 0;
            return strictNullChecks ?
                isZero ? 12123394 /* TypeFacts.ZeroNumberStrictFacts */ : 7929090 /* TypeFacts.NonZeroNumberStrictFacts */ :
                isZero ? 12582146 /* TypeFacts.ZeroNumberFacts */ : 16776450 /* TypeFacts.NonZeroNumberFacts */;
        }
        if (flags & 64 /* TypeFlags.BigInt */) {
            return strictNullChecks ? 16317188 /* TypeFacts.BigIntStrictFacts */ : 16775940 /* TypeFacts.BigIntFacts */;
        }
        if (flags & 2048 /* TypeFlags.BigIntLiteral */) {
            var isZero = isZeroBigInt(type);
            return strictNullChecks ?
                isZero ? 12122884 /* TypeFacts.ZeroBigIntStrictFacts */ : 7928580 /* TypeFacts.NonZeroBigIntStrictFacts */ :
                isZero ? 12581636 /* TypeFacts.ZeroBigIntFacts */ : 16775940 /* TypeFacts.NonZeroBigIntFacts */;
        }
        if (flags & 16 /* TypeFlags.Boolean */) {
            return strictNullChecks ? 16316168 /* TypeFacts.BooleanStrictFacts */ : 16774920 /* TypeFacts.BooleanFacts */;
        }
        if (flags & 528 /* TypeFlags.BooleanLike */) {
            return strictNullChecks ?
                (type === falseType || type === regularFalseType) ? 12121864 /* TypeFacts.FalseStrictFacts */ : 7927560 /* TypeFacts.TrueStrictFacts */ :
                (type === falseType || type === regularFalseType) ? 12580616 /* TypeFacts.FalseFacts */ : 16774920 /* TypeFacts.TrueFacts */;
        }
        if (flags & 524288 /* TypeFlags.Object */) {
            return (0, ts_1.getObjectFlags)(type) & 16 /* ObjectFlags.Anonymous */ && isEmptyObjectType(type) ?
                strictNullChecks ? 83427327 /* TypeFacts.EmptyObjectStrictFacts */ : 83886079 /* TypeFacts.EmptyObjectFacts */ :
                isFunctionObjectType(type) ?
                    strictNullChecks ? 7880640 /* TypeFacts.FunctionStrictFacts */ : 16728000 /* TypeFacts.FunctionFacts */ :
                    strictNullChecks ? 7888800 /* TypeFacts.ObjectStrictFacts */ : 16736160 /* TypeFacts.ObjectFacts */;
        }
        if (flags & 16384 /* TypeFlags.Void */) {
            return 9830144 /* TypeFacts.VoidFacts */;
        }
        if (flags & 32768 /* TypeFlags.Undefined */) {
            return 26607360 /* TypeFacts.UndefinedFacts */;
        }
        if (flags & 65536 /* TypeFlags.Null */) {
            return 42917664 /* TypeFacts.NullFacts */;
        }
        if (flags & 12288 /* TypeFlags.ESSymbolLike */) {
            return strictNullChecks ? 7925520 /* TypeFacts.SymbolStrictFacts */ : 16772880 /* TypeFacts.SymbolFacts */;
        }
        if (flags & 67108864 /* TypeFlags.NonPrimitive */) {
            return strictNullChecks ? 7888800 /* TypeFacts.ObjectStrictFacts */ : 16736160 /* TypeFacts.ObjectFacts */;
        }
        if (flags & 131072 /* TypeFlags.Never */) {
            return 0 /* TypeFacts.None */;
        }
        if (flags & 1048576 /* TypeFlags.Union */) {
            return (0, ts_1.reduceLeft)(type.types, function (facts, t) { return facts | getTypeFacts(t); }, 0 /* TypeFacts.None */);
        }
        if (flags & 2097152 /* TypeFlags.Intersection */) {
            return getIntersectionTypeFacts(type);
        }
        return 83886079 /* TypeFacts.UnknownFacts */;
    }
    function getIntersectionTypeFacts(type) {
        // When an intersection contains a primitive type we ignore object type constituents as they are
        // presumably type tags. For example, in string & { __kind__: "name" } we ignore the object type.
        var ignoreObjects = maybeTypeOfKind(type, 402784252 /* TypeFlags.Primitive */);
        // When computing the type facts of an intersection type, certain type facts are computed as `and`
        // and others are computed as `or`.
        var oredFacts = 0 /* TypeFacts.None */;
        var andedFacts = 134217727 /* TypeFacts.All */;
        for (var _i = 0, _a = type.types; _i < _a.length; _i++) {
            var t = _a[_i];
            if (!(ignoreObjects && t.flags & 524288 /* TypeFlags.Object */)) {
                var f = getTypeFacts(t);
                oredFacts |= f;
                andedFacts &= f;
            }
        }
        return oredFacts & 8256 /* TypeFacts.OrFactsMask */ | andedFacts & 134209471 /* TypeFacts.AndFactsMask */;
    }
    function getTypeWithFacts(type, include) {
        return filterType(type, function (t) { return (getTypeFacts(t) & include) !== 0; });
    }
    // This function is similar to getTypeWithFacts, except that in strictNullChecks mode it replaces type
    // unknown with the union {} | null | undefined (and reduces that accordingly), and it intersects remaining
    // instantiable types with {}, {} | null, or {} | undefined in order to remove null and/or undefined.
    function getAdjustedTypeWithFacts(type, facts) {
        var reduced = recombineUnknownType(getTypeWithFacts(strictNullChecks && type.flags & 2 /* TypeFlags.Unknown */ ? unknownUnionType : type, facts));
        if (strictNullChecks) {
            switch (facts) {
                case 524288 /* TypeFacts.NEUndefined */:
                    return mapType(reduced, function (t) { return getTypeFacts(t) & 65536 /* TypeFacts.EQUndefined */ ? getIntersectionType([t, getTypeFacts(t) & 131072 /* TypeFacts.EQNull */ && !maybeTypeOfKind(reduced, 65536 /* TypeFlags.Null */) ? getUnionType([emptyObjectType, nullType]) : emptyObjectType]) : t; });
                case 1048576 /* TypeFacts.NENull */:
                    return mapType(reduced, function (t) { return getTypeFacts(t) & 131072 /* TypeFacts.EQNull */ ? getIntersectionType([t, getTypeFacts(t) & 65536 /* TypeFacts.EQUndefined */ && !maybeTypeOfKind(reduced, 32768 /* TypeFlags.Undefined */) ? getUnionType([emptyObjectType, undefinedType]) : emptyObjectType]) : t; });
                case 2097152 /* TypeFacts.NEUndefinedOrNull */:
                case 4194304 /* TypeFacts.Truthy */:
                    return mapType(reduced, function (t) { return getTypeFacts(t) & 262144 /* TypeFacts.EQUndefinedOrNull */ ? getGlobalNonNullableTypeInstantiation(t) : t; });
            }
        }
        return reduced;
    }
    function recombineUnknownType(type) {
        return type === unknownUnionType ? unknownType : type;
    }
    function getTypeWithDefault(type, defaultExpression) {
        return defaultExpression ?
            getUnionType([getNonUndefinedType(type), getTypeOfExpression(defaultExpression)]) :
            type;
    }
    function getTypeOfDestructuredProperty(type, name) {
        var _a;
        var nameType = getLiteralTypeFromPropertyName(name);
        if (!isTypeUsableAsPropertyName(nameType))
            return errorType;
        var text = getPropertyNameFromType(nameType);
        return getTypeOfPropertyOfType(type, text) || includeUndefinedInIndexSignature((_a = getApplicableIndexInfoForName(type, text)) === null || _a === void 0 ? void 0 : _a.type) || errorType;
    }
    function getTypeOfDestructuredArrayElement(type, index) {
        return everyType(type, isTupleLikeType) && getTupleElementType(type, index) ||
            includeUndefinedInIndexSignature(checkIteratedTypeOrElementType(65 /* IterationUse.Destructuring */, type, undefinedType, /*errorNode*/ undefined)) ||
            errorType;
    }
    function includeUndefinedInIndexSignature(type) {
        if (!type)
            return type;
        return compilerOptions.noUncheckedIndexedAccess ?
            getUnionType([type, missingType]) :
            type;
    }
    function getTypeOfDestructuredSpreadExpression(type) {
        return createArrayType(checkIteratedTypeOrElementType(65 /* IterationUse.Destructuring */, type, undefinedType, /*errorNode*/ undefined) || errorType);
    }
    function getAssignedTypeOfBinaryExpression(node) {
        var isDestructuringDefaultAssignment = node.parent.kind === 208 /* SyntaxKind.ArrayLiteralExpression */ && isDestructuringAssignmentTarget(node.parent) ||
            node.parent.kind === 302 /* SyntaxKind.PropertyAssignment */ && isDestructuringAssignmentTarget(node.parent.parent);
        return isDestructuringDefaultAssignment ?
            getTypeWithDefault(getAssignedType(node), node.right) :
            getTypeOfExpression(node.right);
    }
    function isDestructuringAssignmentTarget(parent) {
        return parent.parent.kind === 225 /* SyntaxKind.BinaryExpression */ && parent.parent.left === parent ||
            parent.parent.kind === 249 /* SyntaxKind.ForOfStatement */ && parent.parent.initializer === parent;
    }
    function getAssignedTypeOfArrayLiteralElement(node, element) {
        return getTypeOfDestructuredArrayElement(getAssignedType(node), node.elements.indexOf(element));
    }
    function getAssignedTypeOfSpreadExpression(node) {
        return getTypeOfDestructuredSpreadExpression(getAssignedType(node.parent));
    }
    function getAssignedTypeOfPropertyAssignment(node) {
        return getTypeOfDestructuredProperty(getAssignedType(node.parent), node.name);
    }
    function getAssignedTypeOfShorthandPropertyAssignment(node) {
        return getTypeWithDefault(getAssignedTypeOfPropertyAssignment(node), node.objectAssignmentInitializer);
    }
    function getAssignedType(node) {
        var parent = node.parent;
        switch (parent.kind) {
            case 248 /* SyntaxKind.ForInStatement */:
                return stringType;
            case 249 /* SyntaxKind.ForOfStatement */:
                return checkRightHandSideOfForOf(parent) || errorType;
            case 225 /* SyntaxKind.BinaryExpression */:
                return getAssignedTypeOfBinaryExpression(parent);
            case 219 /* SyntaxKind.DeleteExpression */:
                return undefinedType;
            case 208 /* SyntaxKind.ArrayLiteralExpression */:
                return getAssignedTypeOfArrayLiteralElement(parent, node);
            case 229 /* SyntaxKind.SpreadElement */:
                return getAssignedTypeOfSpreadExpression(parent);
            case 302 /* SyntaxKind.PropertyAssignment */:
                return getAssignedTypeOfPropertyAssignment(parent);
            case 303 /* SyntaxKind.ShorthandPropertyAssignment */:
                return getAssignedTypeOfShorthandPropertyAssignment(parent);
        }
        return errorType;
    }
    function getInitialTypeOfBindingElement(node) {
        var pattern = node.parent;
        var parentType = getInitialType(pattern.parent);
        var type = pattern.kind === 205 /* SyntaxKind.ObjectBindingPattern */ ?
            getTypeOfDestructuredProperty(parentType, node.propertyName || node.name) :
            !node.dotDotDotToken ?
                getTypeOfDestructuredArrayElement(parentType, pattern.elements.indexOf(node)) :
                getTypeOfDestructuredSpreadExpression(parentType);
        return getTypeWithDefault(type, node.initializer);
    }
    function getTypeOfInitializer(node) {
        // Return the cached type if one is available. If the type of the variable was inferred
        // from its initializer, we'll already have cached the type. Otherwise we compute it now
        // without caching such that transient types are reflected.
        var links = getNodeLinks(node);
        return links.resolvedType || getTypeOfExpression(node);
    }
    function getInitialTypeOfVariableDeclaration(node) {
        if (node.initializer) {
            return getTypeOfInitializer(node.initializer);
        }
        if (node.parent.parent.kind === 248 /* SyntaxKind.ForInStatement */) {
            return stringType;
        }
        if (node.parent.parent.kind === 249 /* SyntaxKind.ForOfStatement */) {
            return checkRightHandSideOfForOf(node.parent.parent) || errorType;
        }
        return errorType;
    }
    function getInitialType(node) {
        return node.kind === 259 /* SyntaxKind.VariableDeclaration */ ?
            getInitialTypeOfVariableDeclaration(node) :
            getInitialTypeOfBindingElement(node);
    }
    function isEmptyArrayAssignment(node) {
        return node.kind === 259 /* SyntaxKind.VariableDeclaration */ && node.initializer &&
            isEmptyArrayLiteral(node.initializer) ||
            node.kind !== 207 /* SyntaxKind.BindingElement */ && node.parent.kind === 225 /* SyntaxKind.BinaryExpression */ &&
                isEmptyArrayLiteral(node.parent.right);
    }
    function getReferenceCandidate(node) {
        switch (node.kind) {
            case 216 /* SyntaxKind.ParenthesizedExpression */:
                return getReferenceCandidate(node.expression);
            case 225 /* SyntaxKind.BinaryExpression */:
                switch (node.operatorToken.kind) {
                    case 64 /* SyntaxKind.EqualsToken */:
                    case 76 /* SyntaxKind.BarBarEqualsToken */:
                    case 77 /* SyntaxKind.AmpersandAmpersandEqualsToken */:
                    case 78 /* SyntaxKind.QuestionQuestionEqualsToken */:
                        return getReferenceCandidate(node.left);
                    case 28 /* SyntaxKind.CommaToken */:
                        return getReferenceCandidate(node.right);
                }
        }
        return node;
    }
    function getReferenceRoot(node) {
        var parent = node.parent;
        return parent.kind === 216 /* SyntaxKind.ParenthesizedExpression */ ||
            parent.kind === 225 /* SyntaxKind.BinaryExpression */ && parent.operatorToken.kind === 64 /* SyntaxKind.EqualsToken */ && parent.left === node ||
            parent.kind === 225 /* SyntaxKind.BinaryExpression */ && parent.operatorToken.kind === 28 /* SyntaxKind.CommaToken */ && parent.right === node ?
            getReferenceRoot(parent) : node;
    }
    function getTypeOfSwitchClause(clause) {
        if (clause.kind === 295 /* SyntaxKind.CaseClause */) {
            return getRegularTypeOfLiteralType(getTypeOfExpression(clause.expression));
        }
        return neverType;
    }
    function getSwitchClauseTypes(switchStatement) {
        var links = getNodeLinks(switchStatement);
        if (!links.switchTypes) {
            links.switchTypes = [];
            for (var _i = 0, _a = switchStatement.caseBlock.clauses; _i < _a.length; _i++) {
                var clause = _a[_i];
                links.switchTypes.push(getTypeOfSwitchClause(clause));
            }
        }
        return links.switchTypes;
    }
    // Get the type names from all cases in a switch on `typeof`. The default clause and/or duplicate type names are
    // represented as undefined. Return undefined if one or more case clause expressions are not string literals.
    function getSwitchClauseTypeOfWitnesses(switchStatement) {
        if ((0, ts_1.some)(switchStatement.caseBlock.clauses, function (clause) { return clause.kind === 295 /* SyntaxKind.CaseClause */ && !(0, ts_1.isStringLiteralLike)(clause.expression); })) {
            return undefined;
        }
        var witnesses = [];
        for (var _i = 0, _a = switchStatement.caseBlock.clauses; _i < _a.length; _i++) {
            var clause = _a[_i];
            var text = clause.kind === 295 /* SyntaxKind.CaseClause */ ? clause.expression.text : undefined;
            witnesses.push(text && !(0, ts_1.contains)(witnesses, text) ? text : undefined);
        }
        return witnesses;
    }
    function eachTypeContainedIn(source, types) {
        return source.flags & 1048576 /* TypeFlags.Union */ ? !(0, ts_1.forEach)(source.types, function (t) { return !(0, ts_1.contains)(types, t); }) : (0, ts_1.contains)(types, source);
    }
    function isTypeSubsetOf(source, target) {
        return !!(source === target || source.flags & 131072 /* TypeFlags.Never */ || target.flags & 1048576 /* TypeFlags.Union */ && isTypeSubsetOfUnion(source, target));
    }
    function isTypeSubsetOfUnion(source, target) {
        if (source.flags & 1048576 /* TypeFlags.Union */) {
            for (var _i = 0, _a = source.types; _i < _a.length; _i++) {
                var t = _a[_i];
                if (!containsType(target.types, t)) {
                    return false;
                }
            }
            return true;
        }
        if (source.flags & 1056 /* TypeFlags.EnumLike */ && getBaseTypeOfEnumLikeType(source) === target) {
            return true;
        }
        return containsType(target.types, source);
    }
    function forEachType(type, f) {
        return type.flags & 1048576 /* TypeFlags.Union */ ? (0, ts_1.forEach)(type.types, f) : f(type);
    }
    function someType(type, f) {
        return type.flags & 1048576 /* TypeFlags.Union */ ? (0, ts_1.some)(type.types, f) : f(type);
    }
    function everyType(type, f) {
        return type.flags & 1048576 /* TypeFlags.Union */ ? (0, ts_1.every)(type.types, f) : f(type);
    }
    function everyContainedType(type, f) {
        return type.flags & 3145728 /* TypeFlags.UnionOrIntersection */ ? (0, ts_1.every)(type.types, f) : f(type);
    }
    function filterType(type, f) {
        if (type.flags & 1048576 /* TypeFlags.Union */) {
            var types = type.types;
            var filtered = (0, ts_1.filter)(types, f);
            if (filtered === types) {
                return type;
            }
            var origin_4 = type.origin;
            var newOrigin = void 0;
            if (origin_4 && origin_4.flags & 1048576 /* TypeFlags.Union */) {
                // If the origin type is a (denormalized) union type, filter its non-union constituents. If that ends
                // up removing a smaller number of types than in the normalized constituent set (meaning some of the
                // filtered types are within nested unions in the origin), then we can't construct a new origin type.
                // Otherwise, if we have exactly one type left in the origin set, return that as the filtered type.
                // Otherwise, construct a new filtered origin type.
                var originTypes = origin_4.types;
                var originFiltered = (0, ts_1.filter)(originTypes, function (t) { return !!(t.flags & 1048576 /* TypeFlags.Union */) || f(t); });
                if (originTypes.length - originFiltered.length === types.length - filtered.length) {
                    if (originFiltered.length === 1) {
                        return originFiltered[0];
                    }
                    newOrigin = createOriginUnionOrIntersectionType(1048576 /* TypeFlags.Union */, originFiltered);
                }
            }
            // filtering could remove intersections so `ContainsIntersections` might be forwarded "incorrectly"
            // it is purely an optimization hint so there is no harm in accidentally forwarding it
            return getUnionTypeFromSortedList(filtered, type.objectFlags & (32768 /* ObjectFlags.PrimitiveUnion */ | 16777216 /* ObjectFlags.ContainsIntersections */), /*aliasSymbol*/ undefined, /*aliasTypeArguments*/ undefined, newOrigin);
        }
        return type.flags & 131072 /* TypeFlags.Never */ || f(type) ? type : neverType;
    }
    function removeType(type, targetType) {
        return filterType(type, function (t) { return t !== targetType; });
    }
    function countTypes(type) {
        return type.flags & 1048576 /* TypeFlags.Union */ ? type.types.length : 1;
    }
    function mapType(type, mapper, noReductions) {
        if (type.flags & 131072 /* TypeFlags.Never */) {
            return type;
        }
        if (!(type.flags & 1048576 /* TypeFlags.Union */)) {
            return mapper(type);
        }
        var origin = type.origin;
        var types = origin && origin.flags & 1048576 /* TypeFlags.Union */ ? origin.types : type.types;
        var mappedTypes;
        var changed = false;
        for (var _i = 0, types_16 = types; _i < types_16.length; _i++) {
            var t = types_16[_i];
            var mapped = t.flags & 1048576 /* TypeFlags.Union */ ? mapType(t, mapper, noReductions) : mapper(t);
            changed || (changed = t !== mapped);
            if (mapped) {
                if (!mappedTypes) {
                    mappedTypes = [mapped];
                }
                else {
                    mappedTypes.push(mapped);
                }
            }
        }
        return changed ? mappedTypes && getUnionType(mappedTypes, noReductions ? 0 /* UnionReduction.None */ : 1 /* UnionReduction.Literal */) : type;
    }
    function mapTypeWithAlias(type, mapper, aliasSymbol, aliasTypeArguments) {
        return type.flags & 1048576 /* TypeFlags.Union */ && aliasSymbol ?
            getUnionType((0, ts_1.map)(type.types, mapper), 1 /* UnionReduction.Literal */, aliasSymbol, aliasTypeArguments) :
            mapType(type, mapper);
    }
    function extractTypesOfKind(type, kind) {
        return filterType(type, function (t) { return (t.flags & kind) !== 0; });
    }
    // Return a new type in which occurrences of the string, number and bigint primitives and placeholder template
    // literal types in typeWithPrimitives have been replaced with occurrences of compatible and more specific types
    // from typeWithLiterals. This is essentially a limited form of intersection between the two types. We avoid a
    // true intersection because it is more costly and, when applied to union types, generates a large number of
    // types we don't actually care about.
    function replacePrimitivesWithLiterals(typeWithPrimitives, typeWithLiterals) {
        if (maybeTypeOfKind(typeWithPrimitives, 4 /* TypeFlags.String */ | 134217728 /* TypeFlags.TemplateLiteral */ | 8 /* TypeFlags.Number */ | 64 /* TypeFlags.BigInt */) &&
            maybeTypeOfKind(typeWithLiterals, 128 /* TypeFlags.StringLiteral */ | 134217728 /* TypeFlags.TemplateLiteral */ | 268435456 /* TypeFlags.StringMapping */ | 256 /* TypeFlags.NumberLiteral */ | 2048 /* TypeFlags.BigIntLiteral */)) {
            return mapType(typeWithPrimitives, function (t) {
                return t.flags & 4 /* TypeFlags.String */ ? extractTypesOfKind(typeWithLiterals, 4 /* TypeFlags.String */ | 128 /* TypeFlags.StringLiteral */ | 134217728 /* TypeFlags.TemplateLiteral */ | 268435456 /* TypeFlags.StringMapping */) :
                    isPatternLiteralType(t) && !maybeTypeOfKind(typeWithLiterals, 4 /* TypeFlags.String */ | 134217728 /* TypeFlags.TemplateLiteral */ | 268435456 /* TypeFlags.StringMapping */) ? extractTypesOfKind(typeWithLiterals, 128 /* TypeFlags.StringLiteral */) :
                        t.flags & 8 /* TypeFlags.Number */ ? extractTypesOfKind(typeWithLiterals, 8 /* TypeFlags.Number */ | 256 /* TypeFlags.NumberLiteral */) :
                            t.flags & 64 /* TypeFlags.BigInt */ ? extractTypesOfKind(typeWithLiterals, 64 /* TypeFlags.BigInt */ | 2048 /* TypeFlags.BigIntLiteral */) : t;
            });
        }
        return typeWithPrimitives;
    }
    function isIncomplete(flowType) {
        return flowType.flags === 0;
    }
    function getTypeFromFlowType(flowType) {
        return flowType.flags === 0 ? flowType.type : flowType;
    }
    function createFlowType(type, incomplete) {
        return incomplete ? { flags: 0, type: type.flags & 131072 /* TypeFlags.Never */ ? silentNeverType : type } : type;
    }
    // An evolving array type tracks the element types that have so far been seen in an
    // 'x.push(value)' or 'x[n] = value' operation along the control flow graph. Evolving
    // array types are ultimately converted into manifest array types (using getFinalArrayType)
    // and never escape the getFlowTypeOfReference function.
    function createEvolvingArrayType(elementType) {
        var result = createObjectType(256 /* ObjectFlags.EvolvingArray */);
        result.elementType = elementType;
        return result;
    }
    function getEvolvingArrayType(elementType) {
        return evolvingArrayTypes[elementType.id] || (evolvingArrayTypes[elementType.id] = createEvolvingArrayType(elementType));
    }
    // When adding evolving array element types we do not perform subtype reduction. Instead,
    // we defer subtype reduction until the evolving array type is finalized into a manifest
    // array type.
    function addEvolvingArrayElementType(evolvingArrayType, node) {
        var elementType = getRegularTypeOfObjectLiteral(getBaseTypeOfLiteralType(getContextFreeTypeOfExpression(node)));
        return isTypeSubsetOf(elementType, evolvingArrayType.elementType) ? evolvingArrayType : getEvolvingArrayType(getUnionType([evolvingArrayType.elementType, elementType]));
    }
    function createFinalArrayType(elementType) {
        return elementType.flags & 131072 /* TypeFlags.Never */ ?
            autoArrayType :
            createArrayType(elementType.flags & 1048576 /* TypeFlags.Union */ ?
                getUnionType(elementType.types, 2 /* UnionReduction.Subtype */) :
                elementType);
    }
    // We perform subtype reduction upon obtaining the final array type from an evolving array type.
    function getFinalArrayType(evolvingArrayType) {
        return evolvingArrayType.finalArrayType || (evolvingArrayType.finalArrayType = createFinalArrayType(evolvingArrayType.elementType));
    }
    function finalizeEvolvingArrayType(type) {
        return (0, ts_1.getObjectFlags)(type) & 256 /* ObjectFlags.EvolvingArray */ ? getFinalArrayType(type) : type;
    }
    function getElementTypeOfEvolvingArrayType(type) {
        return (0, ts_1.getObjectFlags)(type) & 256 /* ObjectFlags.EvolvingArray */ ? type.elementType : neverType;
    }
    function isEvolvingArrayTypeList(types) {
        var hasEvolvingArrayType = false;
        for (var _i = 0, types_17 = types; _i < types_17.length; _i++) {
            var t = types_17[_i];
            if (!(t.flags & 131072 /* TypeFlags.Never */)) {
                if (!((0, ts_1.getObjectFlags)(t) & 256 /* ObjectFlags.EvolvingArray */)) {
                    return false;
                }
                hasEvolvingArrayType = true;
            }
        }
        return hasEvolvingArrayType;
    }
    // Return true if the given node is 'x' in an 'x.length', x.push(value)', 'x.unshift(value)' or
    // 'x[n] = value' operation, where 'n' is an expression of type any, undefined, or a number-like type.
    function isEvolvingArrayOperationTarget(node) {
        var root = getReferenceRoot(node);
        var parent = root.parent;
        var isLengthPushOrUnshift = (0, ts_1.isPropertyAccessExpression)(parent) && (parent.name.escapedText === "length" ||
            parent.parent.kind === 212 /* SyntaxKind.CallExpression */
                && (0, ts_1.isIdentifier)(parent.name)
                && (0, ts_1.isPushOrUnshiftIdentifier)(parent.name));
        var isElementAssignment = parent.kind === 211 /* SyntaxKind.ElementAccessExpression */ &&
            parent.expression === root &&
            parent.parent.kind === 225 /* SyntaxKind.BinaryExpression */ &&
            parent.parent.operatorToken.kind === 64 /* SyntaxKind.EqualsToken */ &&
            parent.parent.left === parent &&
            !(0, ts_1.isAssignmentTarget)(parent.parent) &&
            isTypeAssignableToKind(getTypeOfExpression(parent.argumentExpression), 296 /* TypeFlags.NumberLike */);
        return isLengthPushOrUnshift || isElementAssignment;
    }
    function isDeclarationWithExplicitTypeAnnotation(node) {
        return ((0, ts_1.isVariableDeclaration)(node) || (0, ts_1.isPropertyDeclaration)(node) || (0, ts_1.isPropertySignature)(node) || (0, ts_1.isParameter)(node)) &&
            !!((0, ts_1.getEffectiveTypeAnnotationNode)(node) ||
                (0, ts_1.isInJSFile)(node) && (0, ts_1.hasInitializer)(node) && node.initializer && (0, ts_1.isFunctionExpressionOrArrowFunction)(node.initializer) && (0, ts_1.getEffectiveReturnTypeNode)(node.initializer));
    }
    function getExplicitTypeOfSymbol(symbol, diagnostic) {
        symbol = resolveSymbol(symbol);
        if (symbol.flags & (16 /* SymbolFlags.Function */ | 8192 /* SymbolFlags.Method */ | 32 /* SymbolFlags.Class */ | 512 /* SymbolFlags.ValueModule */)) {
            return getTypeOfSymbol(symbol);
        }
        if (symbol.flags & (3 /* SymbolFlags.Variable */ | 4 /* SymbolFlags.Property */)) {
            if ((0, ts_1.getCheckFlags)(symbol) & 262144 /* CheckFlags.Mapped */) {
                var origin_5 = symbol.links.syntheticOrigin;
                if (origin_5 && getExplicitTypeOfSymbol(origin_5)) {
                    return getTypeOfSymbol(symbol);
                }
            }
            var declaration = symbol.valueDeclaration;
            if (declaration) {
                if (isDeclarationWithExplicitTypeAnnotation(declaration)) {
                    return getTypeOfSymbol(symbol);
                }
                if ((0, ts_1.isVariableDeclaration)(declaration) && declaration.parent.parent.kind === 249 /* SyntaxKind.ForOfStatement */) {
                    var statement = declaration.parent.parent;
                    var expressionType = getTypeOfDottedName(statement.expression, /*diagnostic*/ undefined);
                    if (expressionType) {
                        var use = statement.awaitModifier ? 15 /* IterationUse.ForAwaitOf */ : 13 /* IterationUse.ForOf */;
                        return checkIteratedTypeOrElementType(use, expressionType, undefinedType, /*errorNode*/ undefined);
                    }
                }
                if (diagnostic) {
                    (0, ts_1.addRelatedInfo)(diagnostic, (0, ts_1.createDiagnosticForNode)(declaration, ts_1.Diagnostics._0_needs_an_explicit_type_annotation, symbolToString(symbol)));
                }
            }
        }
    }
    // We require the dotted function name in an assertion expression to be comprised of identifiers
    // that reference function, method, class or value module symbols; or variable, property or
    // parameter symbols with declarations that have explicit type annotations. Such references are
    // resolvable with no possibility of triggering circularities in control flow analysis.
    function getTypeOfDottedName(node, diagnostic) {
        if (!(node.flags & 33554432 /* NodeFlags.InWithStatement */)) {
            switch (node.kind) {
                case 80 /* SyntaxKind.Identifier */:
                    var symbol = getExportSymbolOfValueSymbolIfExported(getResolvedSymbol(node));
                    return getExplicitTypeOfSymbol(symbol, diagnostic);
                case 110 /* SyntaxKind.ThisKeyword */:
                    return getExplicitThisType(node);
                case 108 /* SyntaxKind.SuperKeyword */:
                    return checkSuperExpression(node);
                case 210 /* SyntaxKind.PropertyAccessExpression */: {
                    var type = getTypeOfDottedName(node.expression, diagnostic);
                    if (type) {
                        var name_25 = node.name;
                        var prop = void 0;
                        if ((0, ts_1.isPrivateIdentifier)(name_25)) {
                            if (!type.symbol) {
                                return undefined;
                            }
                            prop = getPropertyOfType(type, (0, ts_1.getSymbolNameForPrivateIdentifier)(type.symbol, name_25.escapedText));
                        }
                        else {
                            prop = getPropertyOfType(type, name_25.escapedText);
                        }
                        return prop && getExplicitTypeOfSymbol(prop, diagnostic);
                    }
                    return undefined;
                }
                case 216 /* SyntaxKind.ParenthesizedExpression */:
                    return getTypeOfDottedName(node.expression, diagnostic);
            }
        }
    }
    function getEffectsSignature(node) {
        var links = getNodeLinks(node);
        var signature = links.effectsSignature;
        if (signature === undefined) {
            // A call expression parented by an expression statement is a potential assertion. Other call
            // expressions are potential type predicate function calls. In order to avoid triggering
            // circularities in control flow analysis, we use getTypeOfDottedName when resolving the call
            // target expression of an assertion.
            var funcType = void 0;
            if (node.parent.kind === 243 /* SyntaxKind.ExpressionStatement */) {
                funcType = getTypeOfDottedName(node.expression, /*diagnostic*/ undefined);
            }
            else if (node.expression.kind !== 108 /* SyntaxKind.SuperKeyword */) {
                if ((0, ts_1.isOptionalChain)(node)) {
                    funcType = checkNonNullType(getOptionalExpressionType(checkExpression(node.expression), node.expression), node.expression);
                }
                else {
                    funcType = checkNonNullExpression(node.expression);
                }
            }
            var signatures = getSignaturesOfType(funcType && getApparentType(funcType) || unknownType, 0 /* SignatureKind.Call */);
            var candidate = signatures.length === 1 && !signatures[0].typeParameters ? signatures[0] :
                (0, ts_1.some)(signatures, hasTypePredicateOrNeverReturnType) ? getResolvedSignature(node) :
                    undefined;
            signature = links.effectsSignature = candidate && hasTypePredicateOrNeverReturnType(candidate) ? candidate : unknownSignature;
        }
        return signature === unknownSignature ? undefined : signature;
    }
    function hasTypePredicateOrNeverReturnType(signature) {
        return !!(getTypePredicateOfSignature(signature) ||
            signature.declaration && (getReturnTypeFromAnnotation(signature.declaration) || unknownType).flags & 131072 /* TypeFlags.Never */);
    }
    function getTypePredicateArgument(predicate, callExpression) {
        if (predicate.kind === 1 /* TypePredicateKind.Identifier */ || predicate.kind === 3 /* TypePredicateKind.AssertsIdentifier */) {
            return callExpression.arguments[predicate.parameterIndex];
        }
        var invokedExpression = (0, ts_1.skipParentheses)(callExpression.expression);
        return (0, ts_1.isAccessExpression)(invokedExpression) ? (0, ts_1.skipParentheses)(invokedExpression.expression) : undefined;
    }
    function reportFlowControlError(node) {
        var block = (0, ts_1.findAncestor)(node, ts_1.isFunctionOrModuleBlock);
        var sourceFile = (0, ts_1.getSourceFileOfNode)(node);
        var span = (0, ts_1.getSpanOfTokenAtPosition)(sourceFile, block.statements.pos);
        diagnostics.add((0, ts_1.createFileDiagnostic)(sourceFile, span.start, span.length, ts_1.Diagnostics.The_containing_function_or_module_body_is_too_large_for_control_flow_analysis));
    }
    function isReachableFlowNode(flow) {
        var result = isReachableFlowNodeWorker(flow, /*noCacheCheck*/ false);
        lastFlowNode = flow;
        lastFlowNodeReachable = result;
        return result;
    }
    function isFalseExpression(expr) {
        var node = (0, ts_1.skipParentheses)(expr, /*excludeJSDocTypeAssertions*/ true);
        return node.kind === 97 /* SyntaxKind.FalseKeyword */ || node.kind === 225 /* SyntaxKind.BinaryExpression */ && (node.operatorToken.kind === 56 /* SyntaxKind.AmpersandAmpersandToken */ && (isFalseExpression(node.left) || isFalseExpression(node.right)) ||
            node.operatorToken.kind === 57 /* SyntaxKind.BarBarToken */ && isFalseExpression(node.left) && isFalseExpression(node.right));
    }
    function isReachableFlowNodeWorker(flow, noCacheCheck) {
        while (true) {
            if (flow === lastFlowNode) {
                return lastFlowNodeReachable;
            }
            var flags = flow.flags;
            if (flags & 4096 /* FlowFlags.Shared */) {
                if (!noCacheCheck) {
                    var id = getFlowNodeId(flow);
                    var reachable = flowNodeReachable[id];
                    return reachable !== undefined ? reachable : (flowNodeReachable[id] = isReachableFlowNodeWorker(flow, /*noCacheCheck*/ true));
                }
                noCacheCheck = false;
            }
            if (flags & (16 /* FlowFlags.Assignment */ | 96 /* FlowFlags.Condition */ | 256 /* FlowFlags.ArrayMutation */)) {
                flow = flow.antecedent;
            }
            else if (flags & 512 /* FlowFlags.Call */) {
                var signature = getEffectsSignature(flow.node);
                if (signature) {
                    var predicate = getTypePredicateOfSignature(signature);
                    if (predicate && predicate.kind === 3 /* TypePredicateKind.AssertsIdentifier */ && !predicate.type) {
                        var predicateArgument = flow.node.arguments[predicate.parameterIndex];
                        if (predicateArgument && isFalseExpression(predicateArgument)) {
                            return false;
                        }
                    }
                    if (getReturnTypeOfSignature(signature).flags & 131072 /* TypeFlags.Never */) {
                        return false;
                    }
                }
                flow = flow.antecedent;
            }
            else if (flags & 4 /* FlowFlags.BranchLabel */) {
                // A branching point is reachable if any branch is reachable.
                return (0, ts_1.some)(flow.antecedents, function (f) { return isReachableFlowNodeWorker(f, /*noCacheCheck*/ false); });
            }
            else if (flags & 8 /* FlowFlags.LoopLabel */) {
                var antecedents = flow.antecedents;
                if (antecedents === undefined || antecedents.length === 0) {
                    return false;
                }
                // A loop is reachable if the control flow path that leads to the top is reachable.
                flow = antecedents[0];
            }
            else if (flags & 128 /* FlowFlags.SwitchClause */) {
                // The control flow path representing an unmatched value in a switch statement with
                // no default clause is unreachable if the switch statement is exhaustive.
                if (flow.clauseStart === flow.clauseEnd && isExhaustiveSwitchStatement(flow.switchStatement)) {
                    return false;
                }
                flow = flow.antecedent;
            }
            else if (flags & 1024 /* FlowFlags.ReduceLabel */) {
                // Cache is unreliable once we start adjusting labels
                lastFlowNode = undefined;
                var target = flow.target;
                var saveAntecedents = target.antecedents;
                target.antecedents = flow.antecedents;
                var result = isReachableFlowNodeWorker(flow.antecedent, /*noCacheCheck*/ false);
                target.antecedents = saveAntecedents;
                return result;
            }
            else {
                return !(flags & 1 /* FlowFlags.Unreachable */);
            }
        }
    }
    // Return true if the given flow node is preceded by a 'super(...)' call in every possible code path
    // leading to the node.
    function isPostSuperFlowNode(flow, noCacheCheck) {
        while (true) {
            var flags = flow.flags;
            if (flags & 4096 /* FlowFlags.Shared */) {
                if (!noCacheCheck) {
                    var id = getFlowNodeId(flow);
                    var postSuper = flowNodePostSuper[id];
                    return postSuper !== undefined ? postSuper : (flowNodePostSuper[id] = isPostSuperFlowNode(flow, /*noCacheCheck*/ true));
                }
                noCacheCheck = false;
            }
            if (flags & (16 /* FlowFlags.Assignment */ | 96 /* FlowFlags.Condition */ | 256 /* FlowFlags.ArrayMutation */ | 128 /* FlowFlags.SwitchClause */)) {
                flow = flow.antecedent;
            }
            else if (flags & 512 /* FlowFlags.Call */) {
                if (flow.node.expression.kind === 108 /* SyntaxKind.SuperKeyword */) {
                    return true;
                }
                flow = flow.antecedent;
            }
            else if (flags & 4 /* FlowFlags.BranchLabel */) {
                // A branching point is post-super if every branch is post-super.
                return (0, ts_1.every)(flow.antecedents, function (f) { return isPostSuperFlowNode(f, /*noCacheCheck*/ false); });
            }
            else if (flags & 8 /* FlowFlags.LoopLabel */) {
                // A loop is post-super if the control flow path that leads to the top is post-super.
                flow = flow.antecedents[0];
            }
            else if (flags & 1024 /* FlowFlags.ReduceLabel */) {
                var target = flow.target;
                var saveAntecedents = target.antecedents;
                target.antecedents = flow.antecedents;
                var result = isPostSuperFlowNode(flow.antecedent, /*noCacheCheck*/ false);
                target.antecedents = saveAntecedents;
                return result;
            }
            else {
                // Unreachable nodes are considered post-super to silence errors
                return !!(flags & 1 /* FlowFlags.Unreachable */);
            }
        }
    }
    function isConstantReference(node) {
        switch (node.kind) {
            case 110 /* SyntaxKind.ThisKeyword */:
                return true;
            case 80 /* SyntaxKind.Identifier */:
                if (!(0, ts_1.isThisInTypeQuery)(node)) {
                    var symbol = getResolvedSymbol(node);
                    return isConstVariable(symbol) || (0, ts_1.isParameterOrCatchClauseVariable)(symbol) && !isSymbolAssigned(symbol);
                }
                break;
            case 210 /* SyntaxKind.PropertyAccessExpression */:
            case 211 /* SyntaxKind.ElementAccessExpression */:
                // The resolvedSymbol property is initialized by checkPropertyAccess or checkElementAccess before we get here.
                return isConstantReference(node.expression) && isReadonlySymbol(getNodeLinks(node).resolvedSymbol || unknownSymbol);
        }
        return false;
    }
    function getFlowTypeOfReference(reference, declaredType, initialType, flowContainer, flowNode) {
        var _a;
        if (initialType === void 0) { initialType = declaredType; }
        if (flowNode === void 0) { flowNode = (_a = (0, ts_1.tryCast)(reference, ts_1.canHaveFlowNode)) === null || _a === void 0 ? void 0 : _a.flowNode; }
        var key;
        var isKeySet = false;
        var flowDepth = 0;
        if (flowAnalysisDisabled) {
            return errorType;
        }
        if (!flowNode) {
            return declaredType;
        }
        flowInvocationCount++;
        var sharedFlowStart = sharedFlowCount;
        var evolvedType = getTypeFromFlowType(getTypeAtFlowNode(flowNode));
        sharedFlowCount = sharedFlowStart;
        // When the reference is 'x' in an 'x.length', 'x.push(value)', 'x.unshift(value)' or x[n] = value' operation,
        // we give type 'any[]' to 'x' instead of using the type determined by control flow analysis such that operations
        // on empty arrays are possible without implicit any errors and new element types can be inferred without
        // type mismatch errors.
        var resultType = (0, ts_1.getObjectFlags)(evolvedType) & 256 /* ObjectFlags.EvolvingArray */ && isEvolvingArrayOperationTarget(reference) ? autoArrayType : finalizeEvolvingArrayType(evolvedType);
        if (resultType === unreachableNeverType || reference.parent && reference.parent.kind === 234 /* SyntaxKind.NonNullExpression */ && !(resultType.flags & 131072 /* TypeFlags.Never */) && getTypeWithFacts(resultType, 2097152 /* TypeFacts.NEUndefinedOrNull */).flags & 131072 /* TypeFlags.Never */) {
            return declaredType;
        }
        // The non-null unknown type should never escape control flow analysis.
        return resultType === nonNullUnknownType ? unknownType : resultType;
        function getOrSetCacheKey() {
            if (isKeySet) {
                return key;
            }
            isKeySet = true;
            return key = getFlowCacheKey(reference, declaredType, initialType, flowContainer);
        }
        function getTypeAtFlowNode(flow) {
            if (flowDepth === 2000) {
                // We have made 2000 recursive invocations. To avoid overflowing the call stack we report an error
                // and disable further control flow analysis in the containing function or module body.
                ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.instant("checkTypes" /* tracing.Phase.CheckTypes */, "getTypeAtFlowNode_DepthLimit", { flowId: flow.id });
                flowAnalysisDisabled = true;
                reportFlowControlError(reference);
                return errorType;
            }
            flowDepth++;
            var sharedFlow;
            while (true) {
                var flags = flow.flags;
                if (flags & 4096 /* FlowFlags.Shared */) {
                    // We cache results of flow type resolution for shared nodes that were previously visited in
                    // the same getFlowTypeOfReference invocation. A node is considered shared when it is the
                    // antecedent of more than one node.
                    for (var i = sharedFlowStart; i < sharedFlowCount; i++) {
                        if (sharedFlowNodes[i] === flow) {
                            flowDepth--;
                            return sharedFlowTypes[i];
                        }
                    }
                    sharedFlow = flow;
                }
                var type = void 0;
                if (flags & 16 /* FlowFlags.Assignment */) {
                    type = getTypeAtFlowAssignment(flow);
                    if (!type) {
                        flow = flow.antecedent;
                        continue;
                    }
                }
                else if (flags & 512 /* FlowFlags.Call */) {
                    type = getTypeAtFlowCall(flow);
                    if (!type) {
                        flow = flow.antecedent;
                        continue;
                    }
                }
                else if (flags & 96 /* FlowFlags.Condition */) {
                    type = getTypeAtFlowCondition(flow);
                }
                else if (flags & 128 /* FlowFlags.SwitchClause */) {
                    type = getTypeAtSwitchClause(flow);
                }
                else if (flags & 12 /* FlowFlags.Label */) {
                    if (flow.antecedents.length === 1) {
                        flow = flow.antecedents[0];
                        continue;
                    }
                    type = flags & 4 /* FlowFlags.BranchLabel */ ?
                        getTypeAtFlowBranchLabel(flow) :
                        getTypeAtFlowLoopLabel(flow);
                }
                else if (flags & 256 /* FlowFlags.ArrayMutation */) {
                    type = getTypeAtFlowArrayMutation(flow);
                    if (!type) {
                        flow = flow.antecedent;
                        continue;
                    }
                }
                else if (flags & 1024 /* FlowFlags.ReduceLabel */) {
                    var target = flow.target;
                    var saveAntecedents = target.antecedents;
                    target.antecedents = flow.antecedents;
                    type = getTypeAtFlowNode(flow.antecedent);
                    target.antecedents = saveAntecedents;
                }
                else if (flags & 2 /* FlowFlags.Start */) {
                    // Check if we should continue with the control flow of the containing function.
                    var container = flow.node;
                    if (container && container !== flowContainer &&
                        reference.kind !== 210 /* SyntaxKind.PropertyAccessExpression */ &&
                        reference.kind !== 211 /* SyntaxKind.ElementAccessExpression */ &&
                        !(reference.kind === 110 /* SyntaxKind.ThisKeyword */ && container.kind !== 218 /* SyntaxKind.ArrowFunction */)) {
                        flow = container.flowNode;
                        continue;
                    }
                    // At the top of the flow we have the initial type.
                    type = initialType;
                }
                else {
                    // Unreachable code errors are reported in the binding phase. Here we
                    // simply return the non-auto declared type to reduce follow-on errors.
                    type = convertAutoToAny(declaredType);
                }
                if (sharedFlow) {
                    // Record visited node and the associated type in the cache.
                    sharedFlowNodes[sharedFlowCount] = sharedFlow;
                    sharedFlowTypes[sharedFlowCount] = type;
                    sharedFlowCount++;
                }
                flowDepth--;
                return type;
            }
        }
        function getInitialOrAssignedType(flow) {
            var node = flow.node;
            return getNarrowableTypeForReference(node.kind === 259 /* SyntaxKind.VariableDeclaration */ || node.kind === 207 /* SyntaxKind.BindingElement */ ?
                getInitialType(node) :
                getAssignedType(node), reference);
        }
        function getTypeAtFlowAssignment(flow) {
            var node = flow.node;
            // Assignments only narrow the computed type if the declared type is a union type. Thus, we
            // only need to evaluate the assigned type if the declared type is a union type.
            if (isMatchingReference(reference, node)) {
                if (!isReachableFlowNode(flow)) {
                    return unreachableNeverType;
                }
                if ((0, ts_1.getAssignmentTargetKind)(node) === 2 /* AssignmentKind.Compound */) {
                    var flowType = getTypeAtFlowNode(flow.antecedent);
                    return createFlowType(getBaseTypeOfLiteralType(getTypeFromFlowType(flowType)), isIncomplete(flowType));
                }
                if (declaredType === autoType || declaredType === autoArrayType) {
                    if (isEmptyArrayAssignment(node)) {
                        return getEvolvingArrayType(neverType);
                    }
                    var assignedType = getWidenedLiteralType(getInitialOrAssignedType(flow));
                    return isTypeAssignableTo(assignedType, declaredType) ? assignedType : anyArrayType;
                }
                if (declaredType.flags & 1048576 /* TypeFlags.Union */) {
                    return getAssignmentReducedType(declaredType, getInitialOrAssignedType(flow));
                }
                return declaredType;
            }
            // We didn't have a direct match. However, if the reference is a dotted name, this
            // may be an assignment to a left hand part of the reference. For example, for a
            // reference 'x.y.z', we may be at an assignment to 'x.y' or 'x'. In that case,
            // return the declared type.
            if (containsMatchingReference(reference, node)) {
                if (!isReachableFlowNode(flow)) {
                    return unreachableNeverType;
                }
                // A matching dotted name might also be an expando property on a function *expression*,
                // in which case we continue control flow analysis back to the function's declaration
                if ((0, ts_1.isVariableDeclaration)(node) && ((0, ts_1.isInJSFile)(node) || (0, ts_1.isVarConst)(node))) {
                    var init = (0, ts_1.getDeclaredExpandoInitializer)(node);
                    if (init && (init.kind === 217 /* SyntaxKind.FunctionExpression */ || init.kind === 218 /* SyntaxKind.ArrowFunction */)) {
                        return getTypeAtFlowNode(flow.antecedent);
                    }
                }
                return declaredType;
            }
            // for (const _ in ref) acts as a nonnull on ref
            if ((0, ts_1.isVariableDeclaration)(node) &&
                node.parent.parent.kind === 248 /* SyntaxKind.ForInStatement */ &&
                (isMatchingReference(reference, node.parent.parent.expression) || optionalChainContainsReference(node.parent.parent.expression, reference))) {
                return getNonNullableTypeIfNeeded(finalizeEvolvingArrayType(getTypeFromFlowType(getTypeAtFlowNode(flow.antecedent))));
            }
            // Assignment doesn't affect reference
            return undefined;
        }
        function narrowTypeByAssertion(type, expr) {
            var node = (0, ts_1.skipParentheses)(expr, /*excludeJSDocTypeAssertions*/ true);
            if (node.kind === 97 /* SyntaxKind.FalseKeyword */) {
                return unreachableNeverType;
            }
            if (node.kind === 225 /* SyntaxKind.BinaryExpression */) {
                if (node.operatorToken.kind === 56 /* SyntaxKind.AmpersandAmpersandToken */) {
                    return narrowTypeByAssertion(narrowTypeByAssertion(type, node.left), node.right);
                }
                if (node.operatorToken.kind === 57 /* SyntaxKind.BarBarToken */) {
                    return getUnionType([narrowTypeByAssertion(type, node.left), narrowTypeByAssertion(type, node.right)]);
                }
            }
            return narrowType(type, node, /*assumeTrue*/ true);
        }
        function getTypeAtFlowCall(flow) {
            var signature = getEffectsSignature(flow.node);
            if (signature) {
                var predicate = getTypePredicateOfSignature(signature);
                if (predicate && (predicate.kind === 2 /* TypePredicateKind.AssertsThis */ || predicate.kind === 3 /* TypePredicateKind.AssertsIdentifier */)) {
                    var flowType = getTypeAtFlowNode(flow.antecedent);
                    var type = finalizeEvolvingArrayType(getTypeFromFlowType(flowType));
                    var narrowedType = predicate.type ? narrowTypeByTypePredicate(type, predicate, flow.node, /*assumeTrue*/ true) :
                        predicate.kind === 3 /* TypePredicateKind.AssertsIdentifier */ && predicate.parameterIndex >= 0 && predicate.parameterIndex < flow.node.arguments.length ? narrowTypeByAssertion(type, flow.node.arguments[predicate.parameterIndex]) :
                            type;
                    return narrowedType === type ? flowType : createFlowType(narrowedType, isIncomplete(flowType));
                }
                if (getReturnTypeOfSignature(signature).flags & 131072 /* TypeFlags.Never */) {
                    return unreachableNeverType;
                }
            }
            return undefined;
        }
        function getTypeAtFlowArrayMutation(flow) {
            if (declaredType === autoType || declaredType === autoArrayType) {
                var node = flow.node;
                var expr = node.kind === 212 /* SyntaxKind.CallExpression */ ?
                    node.expression.expression :
                    node.left.expression;
                if (isMatchingReference(reference, getReferenceCandidate(expr))) {
                    var flowType = getTypeAtFlowNode(flow.antecedent);
                    var type = getTypeFromFlowType(flowType);
                    if ((0, ts_1.getObjectFlags)(type) & 256 /* ObjectFlags.EvolvingArray */) {
                        var evolvedType_1 = type;
                        if (node.kind === 212 /* SyntaxKind.CallExpression */) {
                            for (var _i = 0, _a = node.arguments; _i < _a.length; _i++) {
                                var arg = _a[_i];
                                evolvedType_1 = addEvolvingArrayElementType(evolvedType_1, arg);
                            }
                        }
                        else {
                            // We must get the context free expression type so as to not recur in an uncached fashion on the LHS (which causes exponential blowup in compile time)
                            var indexType = getContextFreeTypeOfExpression(node.left.argumentExpression);
                            if (isTypeAssignableToKind(indexType, 296 /* TypeFlags.NumberLike */)) {
                                evolvedType_1 = addEvolvingArrayElementType(evolvedType_1, node.right);
                            }
                        }
                        return evolvedType_1 === type ? flowType : createFlowType(evolvedType_1, isIncomplete(flowType));
                    }
                    return flowType;
                }
            }
            return undefined;
        }
        function getTypeAtFlowCondition(flow) {
            var flowType = getTypeAtFlowNode(flow.antecedent);
            var type = getTypeFromFlowType(flowType);
            if (type.flags & 131072 /* TypeFlags.Never */) {
                return flowType;
            }
            // If we have an antecedent type (meaning we're reachable in some way), we first
            // attempt to narrow the antecedent type. If that produces the never type, and if
            // the antecedent type is incomplete (i.e. a transient type in a loop), then we
            // take the type guard as an indication that control *could* reach here once we
            // have the complete type. We proceed by switching to the silent never type which
            // doesn't report errors when operators are applied to it. Note that this is the
            // *only* place a silent never type is ever generated.
            var assumeTrue = (flow.flags & 32 /* FlowFlags.TrueCondition */) !== 0;
            var nonEvolvingType = finalizeEvolvingArrayType(type);
            var narrowedType = narrowType(nonEvolvingType, flow.node, assumeTrue);
            if (narrowedType === nonEvolvingType) {
                return flowType;
            }
            return createFlowType(narrowedType, isIncomplete(flowType));
        }
        function getTypeAtSwitchClause(flow) {
            var expr = flow.switchStatement.expression;
            var flowType = getTypeAtFlowNode(flow.antecedent);
            var type = getTypeFromFlowType(flowType);
            if (isMatchingReference(reference, expr)) {
                type = narrowTypeBySwitchOnDiscriminant(type, flow.switchStatement, flow.clauseStart, flow.clauseEnd);
            }
            else if (expr.kind === 220 /* SyntaxKind.TypeOfExpression */ && isMatchingReference(reference, expr.expression)) {
                type = narrowTypeBySwitchOnTypeOf(type, flow.switchStatement, flow.clauseStart, flow.clauseEnd);
            }
            else {
                if (strictNullChecks) {
                    if (optionalChainContainsReference(expr, reference)) {
                        type = narrowTypeBySwitchOptionalChainContainment(type, flow.switchStatement, flow.clauseStart, flow.clauseEnd, function (t) { return !(t.flags & (32768 /* TypeFlags.Undefined */ | 131072 /* TypeFlags.Never */)); });
                    }
                    else if (expr.kind === 220 /* SyntaxKind.TypeOfExpression */ && optionalChainContainsReference(expr.expression, reference)) {
                        type = narrowTypeBySwitchOptionalChainContainment(type, flow.switchStatement, flow.clauseStart, flow.clauseEnd, function (t) { return !(t.flags & 131072 /* TypeFlags.Never */ || t.flags & 128 /* TypeFlags.StringLiteral */ && t.value === "undefined"); });
                    }
                }
                var access = getDiscriminantPropertyAccess(expr, type);
                if (access) {
                    type = narrowTypeBySwitchOnDiscriminantProperty(type, access, flow.switchStatement, flow.clauseStart, flow.clauseEnd);
                }
            }
            return createFlowType(type, isIncomplete(flowType));
        }
        function getTypeAtFlowBranchLabel(flow) {
            var antecedentTypes = [];
            var subtypeReduction = false;
            var seenIncomplete = false;
            var bypassFlow;
            for (var _i = 0, _a = flow.antecedents; _i < _a.length; _i++) {
                var antecedent = _a[_i];
                if (!bypassFlow && antecedent.flags & 128 /* FlowFlags.SwitchClause */ && antecedent.clauseStart === antecedent.clauseEnd) {
                    // The antecedent is the bypass branch of a potentially exhaustive switch statement.
                    bypassFlow = antecedent;
                    continue;
                }
                var flowType = getTypeAtFlowNode(antecedent);
                var type = getTypeFromFlowType(flowType);
                // If the type at a particular antecedent path is the declared type and the
                // reference is known to always be assigned (i.e. when declared and initial types
                // are the same), there is no reason to process more antecedents since the only
                // possible outcome is subtypes that will be removed in the final union type anyway.
                if (type === declaredType && declaredType === initialType) {
                    return type;
                }
                (0, ts_1.pushIfUnique)(antecedentTypes, type);
                // If an antecedent type is not a subset of the declared type, we need to perform
                // subtype reduction. This happens when a "foreign" type is injected into the control
                // flow using the instanceof operator or a user defined type predicate.
                if (!isTypeSubsetOf(type, initialType)) {
                    subtypeReduction = true;
                }
                if (isIncomplete(flowType)) {
                    seenIncomplete = true;
                }
            }
            if (bypassFlow) {
                var flowType = getTypeAtFlowNode(bypassFlow);
                var type = getTypeFromFlowType(flowType);
                // If the bypass flow contributes a type we haven't seen yet and the switch statement
                // isn't exhaustive, process the bypass flow type. Since exhaustiveness checks increase
                // the risk of circularities, we only want to perform them when they make a difference.
                if (!(type.flags & 131072 /* TypeFlags.Never */) && !(0, ts_1.contains)(antecedentTypes, type) && !isExhaustiveSwitchStatement(bypassFlow.switchStatement)) {
                    if (type === declaredType && declaredType === initialType) {
                        return type;
                    }
                    antecedentTypes.push(type);
                    if (!isTypeSubsetOf(type, initialType)) {
                        subtypeReduction = true;
                    }
                    if (isIncomplete(flowType)) {
                        seenIncomplete = true;
                    }
                }
            }
            return createFlowType(getUnionOrEvolvingArrayType(antecedentTypes, subtypeReduction ? 2 /* UnionReduction.Subtype */ : 1 /* UnionReduction.Literal */), seenIncomplete);
        }
        function getTypeAtFlowLoopLabel(flow) {
            // If we have previously computed the control flow type for the reference at
            // this flow loop junction, return the cached type.
            var id = getFlowNodeId(flow);
            var cache = flowLoopCaches[id] || (flowLoopCaches[id] = new Map());
            var key = getOrSetCacheKey();
            if (!key) {
                // No cache key is generated when binding patterns are in unnarrowable situations
                return declaredType;
            }
            var cached = cache.get(key);
            if (cached) {
                return cached;
            }
            // If this flow loop junction and reference are already being processed, return
            // the union of the types computed for each branch so far, marked as incomplete.
            // It is possible to see an empty array in cases where loops are nested and the
            // back edge of the outer loop reaches an inner loop that is already being analyzed.
            // In such cases we restart the analysis of the inner loop, which will then see
            // a non-empty in-process array for the outer loop and eventually terminate because
            // the first antecedent of a loop junction is always the non-looping control flow
            // path that leads to the top.
            for (var i = flowLoopStart; i < flowLoopCount; i++) {
                if (flowLoopNodes[i] === flow && flowLoopKeys[i] === key && flowLoopTypes[i].length) {
                    return createFlowType(getUnionOrEvolvingArrayType(flowLoopTypes[i], 1 /* UnionReduction.Literal */), /*incomplete*/ true);
                }
            }
            // Add the flow loop junction and reference to the in-process stack and analyze
            // each antecedent code path.
            var antecedentTypes = [];
            var subtypeReduction = false;
            var firstAntecedentType;
            for (var _i = 0, _a = flow.antecedents; _i < _a.length; _i++) {
                var antecedent = _a[_i];
                var flowType = void 0;
                if (!firstAntecedentType) {
                    // The first antecedent of a loop junction is always the non-looping control
                    // flow path that leads to the top.
                    flowType = firstAntecedentType = getTypeAtFlowNode(antecedent);
                }
                else {
                    // All but the first antecedent are the looping control flow paths that lead
                    // back to the loop junction. We track these on the flow loop stack.
                    flowLoopNodes[flowLoopCount] = flow;
                    flowLoopKeys[flowLoopCount] = key;
                    flowLoopTypes[flowLoopCount] = antecedentTypes;
                    flowLoopCount++;
                    var saveFlowTypeCache = flowTypeCache;
                    flowTypeCache = undefined;
                    flowType = getTypeAtFlowNode(antecedent);
                    flowTypeCache = saveFlowTypeCache;
                    flowLoopCount--;
                    // If we see a value appear in the cache it is a sign that control flow analysis
                    // was restarted and completed by checkExpressionCached. We can simply pick up
                    // the resulting type and bail out.
                    var cached_1 = cache.get(key);
                    if (cached_1) {
                        return cached_1;
                    }
                }
                var type = getTypeFromFlowType(flowType);
                (0, ts_1.pushIfUnique)(antecedentTypes, type);
                // If an antecedent type is not a subset of the declared type, we need to perform
                // subtype reduction. This happens when a "foreign" type is injected into the control
                // flow using the instanceof operator or a user defined type predicate.
                if (!isTypeSubsetOf(type, initialType)) {
                    subtypeReduction = true;
                }
                // If the type at a particular antecedent path is the declared type there is no
                // reason to process more antecedents since the only possible outcome is subtypes
                // that will be removed in the final union type anyway.
                if (type === declaredType) {
                    break;
                }
            }
            // The result is incomplete if the first antecedent (the non-looping control flow path)
            // is incomplete.
            var result = getUnionOrEvolvingArrayType(antecedentTypes, subtypeReduction ? 2 /* UnionReduction.Subtype */ : 1 /* UnionReduction.Literal */);
            if (isIncomplete(firstAntecedentType)) {
                return createFlowType(result, /*incomplete*/ true);
            }
            cache.set(key, result);
            return result;
        }
        // At flow control branch or loop junctions, if the type along every antecedent code path
        // is an evolving array type, we construct a combined evolving array type. Otherwise we
        // finalize all evolving array types.
        function getUnionOrEvolvingArrayType(types, subtypeReduction) {
            if (isEvolvingArrayTypeList(types)) {
                return getEvolvingArrayType(getUnionType((0, ts_1.map)(types, getElementTypeOfEvolvingArrayType)));
            }
            var result = recombineUnknownType(getUnionType((0, ts_1.sameMap)(types, finalizeEvolvingArrayType), subtypeReduction));
            if (result !== declaredType && result.flags & declaredType.flags & 1048576 /* TypeFlags.Union */ && (0, ts_1.arraysEqual)(result.types, declaredType.types)) {
                return declaredType;
            }
            return result;
        }
        function getCandidateDiscriminantPropertyAccess(expr) {
            if ((0, ts_1.isBindingPattern)(reference) || (0, ts_1.isFunctionExpressionOrArrowFunction)(reference) || (0, ts_1.isObjectLiteralMethod)(reference)) {
                // When the reference is a binding pattern or function or arrow expression, we are narrowing a pesudo-reference in
                // getNarrowedTypeOfSymbol. An identifier for a destructuring variable declared in the same binding pattern or
                // parameter declared in the same parameter list is a candidate.
                if ((0, ts_1.isIdentifier)(expr)) {
                    var symbol = getResolvedSymbol(expr);
                    var declaration = symbol.valueDeclaration;
                    if (declaration && ((0, ts_1.isBindingElement)(declaration) || (0, ts_1.isParameter)(declaration)) && reference === declaration.parent && !declaration.initializer && !declaration.dotDotDotToken) {
                        return declaration;
                    }
                }
            }
            else if ((0, ts_1.isAccessExpression)(expr)) {
                // An access expression is a candidate if the reference matches the left hand expression.
                if (isMatchingReference(reference, expr.expression)) {
                    return expr;
                }
            }
            else if ((0, ts_1.isIdentifier)(expr)) {
                var symbol = getResolvedSymbol(expr);
                if (isConstVariable(symbol)) {
                    var declaration = symbol.valueDeclaration;
                    // Given 'const x = obj.kind', allow 'x' as an alias for 'obj.kind'
                    if ((0, ts_1.isVariableDeclaration)(declaration) && !declaration.type && declaration.initializer && (0, ts_1.isAccessExpression)(declaration.initializer) &&
                        isMatchingReference(reference, declaration.initializer.expression)) {
                        return declaration.initializer;
                    }
                    // Given 'const { kind: x } = obj', allow 'x' as an alias for 'obj.kind'
                    if ((0, ts_1.isBindingElement)(declaration) && !declaration.initializer) {
                        var parent_9 = declaration.parent.parent;
                        if ((0, ts_1.isVariableDeclaration)(parent_9) && !parent_9.type && parent_9.initializer && ((0, ts_1.isIdentifier)(parent_9.initializer) || (0, ts_1.isAccessExpression)(parent_9.initializer)) &&
                            isMatchingReference(reference, parent_9.initializer)) {
                            return declaration;
                        }
                    }
                }
            }
            return undefined;
        }
        function getDiscriminantPropertyAccess(expr, computedType) {
            var type = declaredType.flags & 1048576 /* TypeFlags.Union */ ? declaredType : computedType;
            if (type.flags & 1048576 /* TypeFlags.Union */) {
                var access = getCandidateDiscriminantPropertyAccess(expr);
                if (access) {
                    var name_26 = getAccessedPropertyName(access);
                    if (name_26 && isDiscriminantProperty(type, name_26)) {
                        return access;
                    }
                }
            }
            return undefined;
        }
        function narrowTypeByDiscriminant(type, access, narrowType) {
            var propName = getAccessedPropertyName(access);
            if (propName === undefined) {
                return type;
            }
            var optionalChain = (0, ts_1.isOptionalChain)(access);
            var removeNullable = strictNullChecks && (optionalChain || (0, ts_1.isNonNullAccess)(access)) && maybeTypeOfKind(type, 98304 /* TypeFlags.Nullable */);
            var propType = getTypeOfPropertyOfType(removeNullable ? getTypeWithFacts(type, 2097152 /* TypeFacts.NEUndefinedOrNull */) : type, propName);
            if (!propType) {
                return type;
            }
            propType = removeNullable && optionalChain ? getOptionalType(propType) : propType;
            var narrowedPropType = narrowType(propType);
            return filterType(type, function (t) {
                var discriminantType = getTypeOfPropertyOrIndexSignature(t, propName, /*addOptionalityToIndex*/ false);
                return !(discriminantType.flags & 131072 /* TypeFlags.Never */) && !(narrowedPropType.flags & 131072 /* TypeFlags.Never */) && areTypesComparable(narrowedPropType, discriminantType);
            });
        }
        function narrowTypeByDiscriminantProperty(type, access, operator, value, assumeTrue) {
            if ((operator === 37 /* SyntaxKind.EqualsEqualsEqualsToken */ || operator === 38 /* SyntaxKind.ExclamationEqualsEqualsToken */) && type.flags & 1048576 /* TypeFlags.Union */) {
                var keyPropertyName = getKeyPropertyName(type);
                if (keyPropertyName && keyPropertyName === getAccessedPropertyName(access)) {
                    var candidate = getConstituentTypeForKeyType(type, getTypeOfExpression(value));
                    if (candidate) {
                        return operator === (assumeTrue ? 37 /* SyntaxKind.EqualsEqualsEqualsToken */ : 38 /* SyntaxKind.ExclamationEqualsEqualsToken */) ? candidate :
                            isUnitType(getTypeOfPropertyOfType(candidate, keyPropertyName) || unknownType) ? removeType(type, candidate) :
                                type;
                    }
                }
            }
            return narrowTypeByDiscriminant(type, access, function (t) { return narrowTypeByEquality(t, operator, value, assumeTrue); });
        }
        function narrowTypeBySwitchOnDiscriminantProperty(type, access, switchStatement, clauseStart, clauseEnd) {
            if (clauseStart < clauseEnd && type.flags & 1048576 /* TypeFlags.Union */ && getKeyPropertyName(type) === getAccessedPropertyName(access)) {
                var clauseTypes = getSwitchClauseTypes(switchStatement).slice(clauseStart, clauseEnd);
                var candidate = getUnionType((0, ts_1.map)(clauseTypes, function (t) { return getConstituentTypeForKeyType(type, t) || unknownType; }));
                if (candidate !== unknownType) {
                    return candidate;
                }
            }
            return narrowTypeByDiscriminant(type, access, function (t) { return narrowTypeBySwitchOnDiscriminant(t, switchStatement, clauseStart, clauseEnd); });
        }
        function narrowTypeByTruthiness(type, expr, assumeTrue) {
            if (isMatchingReference(reference, expr)) {
                return getAdjustedTypeWithFacts(type, assumeTrue ? 4194304 /* TypeFacts.Truthy */ : 8388608 /* TypeFacts.Falsy */);
            }
            if (strictNullChecks && assumeTrue && optionalChainContainsReference(expr, reference)) {
                type = getAdjustedTypeWithFacts(type, 2097152 /* TypeFacts.NEUndefinedOrNull */);
            }
            var access = getDiscriminantPropertyAccess(expr, type);
            if (access) {
                return narrowTypeByDiscriminant(type, access, function (t) { return getTypeWithFacts(t, assumeTrue ? 4194304 /* TypeFacts.Truthy */ : 8388608 /* TypeFacts.Falsy */); });
            }
            return type;
        }
        function isTypePresencePossible(type, propName, assumeTrue) {
            var prop = getPropertyOfType(type, propName);
            return prop ?
                !!(prop.flags & 16777216 /* SymbolFlags.Optional */ || (0, ts_1.getCheckFlags)(prop) & 48 /* CheckFlags.Partial */) || assumeTrue :
                !!getApplicableIndexInfoForName(type, propName) || !assumeTrue;
        }
        function narrowTypeByInKeyword(type, nameType, assumeTrue) {
            var name = getPropertyNameFromType(nameType);
            var isKnownProperty = someType(type, function (t) { return isTypePresencePossible(t, name, /*assumeTrue*/ true); });
            if (isKnownProperty) {
                // If the check is for a known property (i.e. a property declared in some constituent of
                // the target type), we filter the target type by presence of absence of the property.
                return filterType(type, function (t) { return isTypePresencePossible(t, name, assumeTrue); });
            }
            if (assumeTrue) {
                // If the check is for an unknown property, we intersect the target type with `Record<X, unknown>`,
                // where X is the name of the property.
                var recordSymbol = getGlobalRecordSymbol();
                if (recordSymbol) {
                    return getIntersectionType([type, getTypeAliasInstantiation(recordSymbol, [nameType, unknownType])]);
                }
            }
            return type;
        }
        function narrowTypeByBinaryExpression(type, expr, assumeTrue) {
            switch (expr.operatorToken.kind) {
                case 64 /* SyntaxKind.EqualsToken */:
                case 76 /* SyntaxKind.BarBarEqualsToken */:
                case 77 /* SyntaxKind.AmpersandAmpersandEqualsToken */:
                case 78 /* SyntaxKind.QuestionQuestionEqualsToken */:
                    return narrowTypeByTruthiness(narrowType(type, expr.right, assumeTrue), expr.left, assumeTrue);
                case 35 /* SyntaxKind.EqualsEqualsToken */:
                case 36 /* SyntaxKind.ExclamationEqualsToken */:
                case 37 /* SyntaxKind.EqualsEqualsEqualsToken */:
                case 38 /* SyntaxKind.ExclamationEqualsEqualsToken */:
                    var operator = expr.operatorToken.kind;
                    var left = getReferenceCandidate(expr.left);
                    var right = getReferenceCandidate(expr.right);
                    if (left.kind === 220 /* SyntaxKind.TypeOfExpression */ && (0, ts_1.isStringLiteralLike)(right)) {
                        return narrowTypeByTypeof(type, left, operator, right, assumeTrue);
                    }
                    if (right.kind === 220 /* SyntaxKind.TypeOfExpression */ && (0, ts_1.isStringLiteralLike)(left)) {
                        return narrowTypeByTypeof(type, right, operator, left, assumeTrue);
                    }
                    if (isMatchingReference(reference, left)) {
                        return narrowTypeByEquality(type, operator, right, assumeTrue);
                    }
                    if (isMatchingReference(reference, right)) {
                        return narrowTypeByEquality(type, operator, left, assumeTrue);
                    }
                    if (strictNullChecks) {
                        if (optionalChainContainsReference(left, reference)) {
                            type = narrowTypeByOptionalChainContainment(type, operator, right, assumeTrue);
                        }
                        else if (optionalChainContainsReference(right, reference)) {
                            type = narrowTypeByOptionalChainContainment(type, operator, left, assumeTrue);
                        }
                    }
                    var leftAccess = getDiscriminantPropertyAccess(left, type);
                    if (leftAccess) {
                        return narrowTypeByDiscriminantProperty(type, leftAccess, operator, right, assumeTrue);
                    }
                    var rightAccess = getDiscriminantPropertyAccess(right, type);
                    if (rightAccess) {
                        return narrowTypeByDiscriminantProperty(type, rightAccess, operator, left, assumeTrue);
                    }
                    if (isMatchingConstructorReference(left)) {
                        return narrowTypeByConstructor(type, operator, right, assumeTrue);
                    }
                    if (isMatchingConstructorReference(right)) {
                        return narrowTypeByConstructor(type, operator, left, assumeTrue);
                    }
                    break;
                case 104 /* SyntaxKind.InstanceOfKeyword */:
                    return narrowTypeByInstanceof(type, expr, assumeTrue);
                case 103 /* SyntaxKind.InKeyword */:
                    if ((0, ts_1.isPrivateIdentifier)(expr.left)) {
                        return narrowTypeByPrivateIdentifierInInExpression(type, expr, assumeTrue);
                    }
                    var target = getReferenceCandidate(expr.right);
                    var leftType = getTypeOfExpression(expr.left);
                    if (leftType.flags & 8576 /* TypeFlags.StringOrNumberLiteralOrUnique */) {
                        if (containsMissingType(type) && (0, ts_1.isAccessExpression)(reference) && isMatchingReference(reference.expression, target) &&
                            getAccessedPropertyName(reference) === getPropertyNameFromType(leftType)) {
                            return getTypeWithFacts(type, assumeTrue ? 524288 /* TypeFacts.NEUndefined */ : 65536 /* TypeFacts.EQUndefined */);
                        }
                        if (isMatchingReference(reference, target)) {
                            return narrowTypeByInKeyword(type, leftType, assumeTrue);
                        }
                    }
                    break;
                case 28 /* SyntaxKind.CommaToken */:
                    return narrowType(type, expr.right, assumeTrue);
                // Ordinarily we won't see && and || expressions in control flow analysis because the Binder breaks those
                // expressions down to individual conditional control flows. However, we may encounter them when analyzing
                // aliased conditional expressions.
                case 56 /* SyntaxKind.AmpersandAmpersandToken */:
                    return assumeTrue ?
                        narrowType(narrowType(type, expr.left, /*assumeTrue*/ true), expr.right, /*assumeTrue*/ true) :
                        getUnionType([narrowType(type, expr.left, /*assumeTrue*/ false), narrowType(type, expr.right, /*assumeTrue*/ false)]);
                case 57 /* SyntaxKind.BarBarToken */:
                    return assumeTrue ?
                        getUnionType([narrowType(type, expr.left, /*assumeTrue*/ true), narrowType(type, expr.right, /*assumeTrue*/ true)]) :
                        narrowType(narrowType(type, expr.left, /*assumeTrue*/ false), expr.right, /*assumeTrue*/ false);
            }
            return type;
        }
        function narrowTypeByPrivateIdentifierInInExpression(type, expr, assumeTrue) {
            var target = getReferenceCandidate(expr.right);
            if (!isMatchingReference(reference, target)) {
                return type;
            }
            ts_1.Debug.assertNode(expr.left, ts_1.isPrivateIdentifier);
            var symbol = getSymbolForPrivateIdentifierExpression(expr.left);
            if (symbol === undefined) {
                return type;
            }
            var classSymbol = symbol.parent;
            var targetType = (0, ts_1.hasStaticModifier)(ts_1.Debug.checkDefined(symbol.valueDeclaration, "should always have a declaration"))
                ? getTypeOfSymbol(classSymbol)
                : getDeclaredTypeOfSymbol(classSymbol);
            return getNarrowedType(type, targetType, assumeTrue, /*checkDerived*/ true);
        }
        function narrowTypeByOptionalChainContainment(type, operator, value, assumeTrue) {
            // We are in a branch of obj?.foo === value (or any one of the other equality operators). We narrow obj as follows:
            // When operator is === and type of value excludes undefined, null and undefined is removed from type of obj in true branch.
            // When operator is !== and type of value excludes undefined, null and undefined is removed from type of obj in false branch.
            // When operator is == and type of value excludes null and undefined, null and undefined is removed from type of obj in true branch.
            // When operator is != and type of value excludes null and undefined, null and undefined is removed from type of obj in false branch.
            // When operator is === and type of value is undefined, null and undefined is removed from type of obj in false branch.
            // When operator is !== and type of value is undefined, null and undefined is removed from type of obj in true branch.
            // When operator is == and type of value is null or undefined, null and undefined is removed from type of obj in false branch.
            // When operator is != and type of value is null or undefined, null and undefined is removed from type of obj in true branch.
            var equalsOperator = operator === 35 /* SyntaxKind.EqualsEqualsToken */ || operator === 37 /* SyntaxKind.EqualsEqualsEqualsToken */;
            var nullableFlags = operator === 35 /* SyntaxKind.EqualsEqualsToken */ || operator === 36 /* SyntaxKind.ExclamationEqualsToken */ ? 98304 /* TypeFlags.Nullable */ : 32768 /* TypeFlags.Undefined */;
            var valueType = getTypeOfExpression(value);
            // Note that we include any and unknown in the exclusion test because their domain includes null and undefined.
            var removeNullable = equalsOperator !== assumeTrue && everyType(valueType, function (t) { return !!(t.flags & nullableFlags); }) ||
                equalsOperator === assumeTrue && everyType(valueType, function (t) { return !(t.flags & (3 /* TypeFlags.AnyOrUnknown */ | nullableFlags)); });
            return removeNullable ? getAdjustedTypeWithFacts(type, 2097152 /* TypeFacts.NEUndefinedOrNull */) : type;
        }
        function narrowTypeByEquality(type, operator, value, assumeTrue) {
            if (type.flags & 1 /* TypeFlags.Any */) {
                return type;
            }
            if (operator === 36 /* SyntaxKind.ExclamationEqualsToken */ || operator === 38 /* SyntaxKind.ExclamationEqualsEqualsToken */) {
                assumeTrue = !assumeTrue;
            }
            var valueType = getTypeOfExpression(value);
            var doubleEquals = operator === 35 /* SyntaxKind.EqualsEqualsToken */ || operator === 36 /* SyntaxKind.ExclamationEqualsToken */;
            if (valueType.flags & 98304 /* TypeFlags.Nullable */) {
                if (!strictNullChecks) {
                    return type;
                }
                var facts = doubleEquals ?
                    assumeTrue ? 262144 /* TypeFacts.EQUndefinedOrNull */ : 2097152 /* TypeFacts.NEUndefinedOrNull */ :
                    valueType.flags & 65536 /* TypeFlags.Null */ ?
                        assumeTrue ? 131072 /* TypeFacts.EQNull */ : 1048576 /* TypeFacts.NENull */ :
                        assumeTrue ? 65536 /* TypeFacts.EQUndefined */ : 524288 /* TypeFacts.NEUndefined */;
                return getAdjustedTypeWithFacts(type, facts);
            }
            if (assumeTrue) {
                if (!doubleEquals && (type.flags & 2 /* TypeFlags.Unknown */ || someType(type, isEmptyAnonymousObjectType))) {
                    if (valueType.flags & (402784252 /* TypeFlags.Primitive */ | 67108864 /* TypeFlags.NonPrimitive */) || isEmptyAnonymousObjectType(valueType)) {
                        return valueType;
                    }
                    if (valueType.flags & 524288 /* TypeFlags.Object */) {
                        return nonPrimitiveType;
                    }
                }
                var filteredType = filterType(type, function (t) { return areTypesComparable(t, valueType) || doubleEquals && isCoercibleUnderDoubleEquals(t, valueType); });
                return replacePrimitivesWithLiterals(filteredType, valueType);
            }
            if (isUnitType(valueType)) {
                return filterType(type, function (t) { return !(isUnitLikeType(t) && areTypesComparable(t, valueType)); });
            }
            return type;
        }
        function narrowTypeByTypeof(type, typeOfExpr, operator, literal, assumeTrue) {
            // We have '==', '!=', '===', or !==' operator with 'typeof xxx' and string literal operands
            if (operator === 36 /* SyntaxKind.ExclamationEqualsToken */ || operator === 38 /* SyntaxKind.ExclamationEqualsEqualsToken */) {
                assumeTrue = !assumeTrue;
            }
            var target = getReferenceCandidate(typeOfExpr.expression);
            if (!isMatchingReference(reference, target)) {
                if (strictNullChecks && optionalChainContainsReference(target, reference) && assumeTrue === (literal.text !== "undefined")) {
                    type = getAdjustedTypeWithFacts(type, 2097152 /* TypeFacts.NEUndefinedOrNull */);
                }
                var propertyAccess = getDiscriminantPropertyAccess(target, type);
                if (propertyAccess) {
                    return narrowTypeByDiscriminant(type, propertyAccess, function (t) { return narrowTypeByLiteralExpression(t, literal, assumeTrue); });
                }
                return type;
            }
            return narrowTypeByLiteralExpression(type, literal, assumeTrue);
        }
        function narrowTypeByLiteralExpression(type, literal, assumeTrue) {
            return assumeTrue ?
                narrowTypeByTypeName(type, literal.text) :
                getAdjustedTypeWithFacts(type, typeofNEFacts.get(literal.text) || 32768 /* TypeFacts.TypeofNEHostObject */);
        }
        function narrowTypeBySwitchOptionalChainContainment(type, switchStatement, clauseStart, clauseEnd, clauseCheck) {
            var everyClauseChecks = clauseStart !== clauseEnd && (0, ts_1.every)(getSwitchClauseTypes(switchStatement).slice(clauseStart, clauseEnd), clauseCheck);
            return everyClauseChecks ? getTypeWithFacts(type, 2097152 /* TypeFacts.NEUndefinedOrNull */) : type;
        }
        function narrowTypeBySwitchOnDiscriminant(type, switchStatement, clauseStart, clauseEnd) {
            // We only narrow if all case expressions specify
            // values with unit types, except for the case where
            // `type` is unknown. In this instance we map object
            // types to the nonPrimitive type and narrow with that.
            var switchTypes = getSwitchClauseTypes(switchStatement);
            if (!switchTypes.length) {
                return type;
            }
            var clauseTypes = switchTypes.slice(clauseStart, clauseEnd);
            var hasDefaultClause = clauseStart === clauseEnd || (0, ts_1.contains)(clauseTypes, neverType);
            if ((type.flags & 2 /* TypeFlags.Unknown */) && !hasDefaultClause) {
                var groundClauseTypes = void 0;
                for (var i = 0; i < clauseTypes.length; i += 1) {
                    var t = clauseTypes[i];
                    if (t.flags & (402784252 /* TypeFlags.Primitive */ | 67108864 /* TypeFlags.NonPrimitive */)) {
                        if (groundClauseTypes !== undefined) {
                            groundClauseTypes.push(t);
                        }
                    }
                    else if (t.flags & 524288 /* TypeFlags.Object */) {
                        if (groundClauseTypes === undefined) {
                            groundClauseTypes = clauseTypes.slice(0, i);
                        }
                        groundClauseTypes.push(nonPrimitiveType);
                    }
                    else {
                        return type;
                    }
                }
                return getUnionType(groundClauseTypes === undefined ? clauseTypes : groundClauseTypes);
            }
            var discriminantType = getUnionType(clauseTypes);
            var caseType = discriminantType.flags & 131072 /* TypeFlags.Never */ ? neverType :
                replacePrimitivesWithLiterals(filterType(type, function (t) { return areTypesComparable(discriminantType, t); }), discriminantType);
            if (!hasDefaultClause) {
                return caseType;
            }
            var defaultType = filterType(type, function (t) { return !(isUnitLikeType(t) && (0, ts_1.contains)(switchTypes, getRegularTypeOfLiteralType(extractUnitType(t)))); });
            return caseType.flags & 131072 /* TypeFlags.Never */ ? defaultType : getUnionType([caseType, defaultType]);
        }
        function narrowTypeByTypeName(type, typeName) {
            switch (typeName) {
                case "string": return narrowTypeByTypeFacts(type, stringType, 1 /* TypeFacts.TypeofEQString */);
                case "number": return narrowTypeByTypeFacts(type, numberType, 2 /* TypeFacts.TypeofEQNumber */);
                case "bigint": return narrowTypeByTypeFacts(type, bigintType, 4 /* TypeFacts.TypeofEQBigInt */);
                case "boolean": return narrowTypeByTypeFacts(type, booleanType, 8 /* TypeFacts.TypeofEQBoolean */);
                case "symbol": return narrowTypeByTypeFacts(type, esSymbolType, 16 /* TypeFacts.TypeofEQSymbol */);
                case "object": return type.flags & 1 /* TypeFlags.Any */ ? type : getUnionType([narrowTypeByTypeFacts(type, nonPrimitiveType, 32 /* TypeFacts.TypeofEQObject */), narrowTypeByTypeFacts(type, nullType, 131072 /* TypeFacts.EQNull */)]);
                case "function": return type.flags & 1 /* TypeFlags.Any */ ? type : narrowTypeByTypeFacts(type, globalFunctionType, 64 /* TypeFacts.TypeofEQFunction */);
                case "undefined": return narrowTypeByTypeFacts(type, undefinedType, 65536 /* TypeFacts.EQUndefined */);
            }
            return narrowTypeByTypeFacts(type, nonPrimitiveType, 128 /* TypeFacts.TypeofEQHostObject */);
        }
        function narrowTypeByTypeFacts(type, impliedType, facts) {
            return mapType(type, function (t) {
                // We first check if a constituent is a subtype of the implied type. If so, we either keep or eliminate
                // the constituent based on its type facts. We use the strict subtype relation because it treats `object`
                // as a subtype of `{}`, and we need the type facts check because function types are subtypes of `object`,
                // but are classified as "function" according to `typeof`.
                return isTypeRelatedTo(t, impliedType, strictSubtypeRelation) ? getTypeFacts(t) & facts ? t : neverType :
                    // We next check if the consituent is a supertype of the implied type. If so, we substitute the implied
                    // type. This handles top types like `unknown` and `{}`, and supertypes like `{ toString(): string }`.
                    isTypeSubtypeOf(impliedType, t) ? impliedType :
                        // Neither the constituent nor the implied type is a subtype of the other, however their domains may still
                        // overlap. For example, an unconstrained type parameter and type `string`. If the type facts indicate
                        // possible overlap, we form an intersection. Otherwise, we eliminate the constituent.
                        getTypeFacts(t) & facts ? getIntersectionType([t, impliedType]) :
                            neverType;
            });
        }
        function narrowTypeBySwitchOnTypeOf(type, switchStatement, clauseStart, clauseEnd) {
            var witnesses = getSwitchClauseTypeOfWitnesses(switchStatement);
            if (!witnesses) {
                return type;
            }
            // Equal start and end denotes implicit fallthrough; undefined marks explicit default clause.
            var defaultIndex = (0, ts_1.findIndex)(switchStatement.caseBlock.clauses, function (clause) { return clause.kind === 296 /* SyntaxKind.DefaultClause */; });
            var hasDefaultClause = clauseStart === clauseEnd || (defaultIndex >= clauseStart && defaultIndex < clauseEnd);
            if (hasDefaultClause) {
                // In the default clause we filter constituents down to those that are not-equal to all handled cases.
                var notEqualFacts_1 = getNotEqualFactsFromTypeofSwitch(clauseStart, clauseEnd, witnesses);
                return filterType(type, function (t) { return (getTypeFacts(t) & notEqualFacts_1) === notEqualFacts_1; });
            }
            // In the non-default cause we create a union of the type narrowed by each of the listed cases.
            var clauseWitnesses = witnesses.slice(clauseStart, clauseEnd);
            return getUnionType((0, ts_1.map)(clauseWitnesses, function (text) { return text ? narrowTypeByTypeName(type, text) : neverType; }));
        }
        function isMatchingConstructorReference(expr) {
            return ((0, ts_1.isPropertyAccessExpression)(expr) && (0, ts_1.idText)(expr.name) === "constructor" ||
                (0, ts_1.isElementAccessExpression)(expr) && (0, ts_1.isStringLiteralLike)(expr.argumentExpression) && expr.argumentExpression.text === "constructor") &&
                isMatchingReference(reference, expr.expression);
        }
        function narrowTypeByConstructor(type, operator, identifier, assumeTrue) {
            // Do not narrow when checking inequality.
            if (assumeTrue ? (operator !== 35 /* SyntaxKind.EqualsEqualsToken */ && operator !== 37 /* SyntaxKind.EqualsEqualsEqualsToken */) : (operator !== 36 /* SyntaxKind.ExclamationEqualsToken */ && operator !== 38 /* SyntaxKind.ExclamationEqualsEqualsToken */)) {
                return type;
            }
            // Get the type of the constructor identifier expression, if it is not a function then do not narrow.
            var identifierType = getTypeOfExpression(identifier);
            if (!isFunctionType(identifierType) && !isConstructorType(identifierType)) {
                return type;
            }
            // Get the prototype property of the type identifier so we can find out its type.
            var prototypeProperty = getPropertyOfType(identifierType, "prototype");
            if (!prototypeProperty) {
                return type;
            }
            // Get the type of the prototype, if it is undefined, or the global `Object` or `Function` types then do not narrow.
            var prototypeType = getTypeOfSymbol(prototypeProperty);
            var candidate = !isTypeAny(prototypeType) ? prototypeType : undefined;
            if (!candidate || candidate === globalObjectType || candidate === globalFunctionType) {
                return type;
            }
            // If the type that is being narrowed is `any` then just return the `candidate` type since every type is a subtype of `any`.
            if (isTypeAny(type)) {
                return candidate;
            }
            // Filter out types that are not considered to be "constructed by" the `candidate` type.
            return filterType(type, function (t) { return isConstructedBy(t, candidate); });
            function isConstructedBy(source, target) {
                // If either the source or target type are a class type then we need to check that they are the same exact type.
                // This is because you may have a class `A` that defines some set of properties, and another class `B`
                // that defines the same set of properties as class `A`, in that case they are structurally the same
                // type, but when you do something like `instanceOfA.constructor === B` it will return false.
                if (source.flags & 524288 /* TypeFlags.Object */ && (0, ts_1.getObjectFlags)(source) & 1 /* ObjectFlags.Class */ ||
                    target.flags & 524288 /* TypeFlags.Object */ && (0, ts_1.getObjectFlags)(target) & 1 /* ObjectFlags.Class */) {
                    return source.symbol === target.symbol;
                }
                // For all other types just check that the `source` type is a subtype of the `target` type.
                return isTypeSubtypeOf(source, target);
            }
        }
        function narrowTypeByInstanceof(type, expr, assumeTrue) {
            var left = getReferenceCandidate(expr.left);
            if (!isMatchingReference(reference, left)) {
                if (assumeTrue && strictNullChecks && optionalChainContainsReference(left, reference)) {
                    return getAdjustedTypeWithFacts(type, 2097152 /* TypeFacts.NEUndefinedOrNull */);
                }
                return type;
            }
            var rightType = getTypeOfExpression(expr.right);
            if (!isTypeDerivedFrom(rightType, globalFunctionType)) {
                return type;
            }
            var instanceType = mapType(rightType, getInstanceType);
            // Don't narrow from `any` if the target type is exactly `Object` or `Function`, and narrow
            // in the false branch only if the target is a non-empty object type.
            if (isTypeAny(type) && (instanceType === globalObjectType || instanceType === globalFunctionType) ||
                !assumeTrue && !(instanceType.flags & 524288 /* TypeFlags.Object */ && !isEmptyAnonymousObjectType(instanceType))) {
                return type;
            }
            return getNarrowedType(type, instanceType, assumeTrue, /*checkDerived*/ true);
        }
        function getInstanceType(constructorType) {
            var prototypePropertyType = getTypeOfPropertyOfType(constructorType, "prototype");
            if (prototypePropertyType && !isTypeAny(prototypePropertyType)) {
                return prototypePropertyType;
            }
            var constructSignatures = getSignaturesOfType(constructorType, 1 /* SignatureKind.Construct */);
            if (constructSignatures.length) {
                return getUnionType((0, ts_1.map)(constructSignatures, function (signature) { return getReturnTypeOfSignature(getErasedSignature(signature)); }));
            }
            // We use the empty object type to indicate we don't know the type of objects created by
            // this constructor function.
            return emptyObjectType;
        }
        function getNarrowedType(type, candidate, assumeTrue, checkDerived) {
            var _a;
            var key = type.flags & 1048576 /* TypeFlags.Union */ ? "N".concat(getTypeId(type), ",").concat(getTypeId(candidate), ",").concat((assumeTrue ? 1 : 0) | (checkDerived ? 2 : 0)) : undefined;
            return (_a = getCachedType(key)) !== null && _a !== void 0 ? _a : setCachedType(key, getNarrowedTypeWorker(type, candidate, assumeTrue, checkDerived));
        }
        function getNarrowedTypeWorker(type, candidate, assumeTrue, checkDerived) {
            if (!assumeTrue) {
                if (checkDerived) {
                    return filterType(type, function (t) { return !isTypeDerivedFrom(t, candidate); });
                }
                var trueType_2 = getNarrowedType(type, candidate, /*assumeTrue*/ true, /*checkDerived*/ false);
                return filterType(type, function (t) { return !isTypeSubsetOf(t, trueType_2); });
            }
            if (type.flags & 3 /* TypeFlags.AnyOrUnknown */) {
                return candidate;
            }
            // We first attempt to filter the current type, narrowing constituents as appropriate and removing
            // constituents that are unrelated to the candidate.
            var isRelated = checkDerived ? isTypeDerivedFrom : isTypeSubtypeOf;
            var keyPropertyName = type.flags & 1048576 /* TypeFlags.Union */ ? getKeyPropertyName(type) : undefined;
            var narrowedType = mapType(candidate, function (c) {
                // If a discriminant property is available, use that to reduce the type.
                var discriminant = keyPropertyName && getTypeOfPropertyOfType(c, keyPropertyName);
                var matching = discriminant && getConstituentTypeForKeyType(type, discriminant);
                // For each constituent t in the current type, if t and and c are directly related, pick the most
                // specific of the two. When t and c are related in both directions, we prefer c for type predicates
                // because that is the asserted type, but t for `instanceof` because generics aren't reflected in
                // prototype object types.
                var directlyRelated = mapType(matching || type, checkDerived ?
                    function (t) { return isTypeDerivedFrom(t, c) ? t : isTypeDerivedFrom(c, t) ? c : neverType; } :
                    function (t) { return isTypeStrictSubtypeOf(t, c) ? t : isTypeStrictSubtypeOf(c, t) ? c : isTypeSubtypeOf(t, c) ? t : isTypeSubtypeOf(c, t) ? c : neverType; });
                // If no constituents are directly related, create intersections for any generic constituents that
                // are related by constraint.
                return directlyRelated.flags & 131072 /* TypeFlags.Never */ ?
                    mapType(type, function (t) { return maybeTypeOfKind(t, 465829888 /* TypeFlags.Instantiable */) && isRelated(c, getBaseConstraintOfType(t) || unknownType) ? getIntersectionType([t, c]) : neverType; }) :
                    directlyRelated;
            });
            // If filtering produced a non-empty type, return that. Otherwise, pick the most specific of the two
            // based on assignability, or as a last resort produce an intersection.
            return !(narrowedType.flags & 131072 /* TypeFlags.Never */) ? narrowedType :
                isTypeSubtypeOf(candidate, type) ? candidate :
                    isTypeAssignableTo(type, candidate) ? type :
                        isTypeAssignableTo(candidate, type) ? candidate :
                            getIntersectionType([type, candidate]);
        }
        function narrowTypeByCallExpression(type, callExpression, assumeTrue) {
            if (hasMatchingArgument(callExpression, reference)) {
                var signature = assumeTrue || !(0, ts_1.isCallChain)(callExpression) ? getEffectsSignature(callExpression) : undefined;
                var predicate = signature && getTypePredicateOfSignature(signature);
                if (predicate && (predicate.kind === 0 /* TypePredicateKind.This */ || predicate.kind === 1 /* TypePredicateKind.Identifier */)) {
                    return narrowTypeByTypePredicate(type, predicate, callExpression, assumeTrue);
                }
            }
            if (containsMissingType(type) && (0, ts_1.isAccessExpression)(reference) && (0, ts_1.isPropertyAccessExpression)(callExpression.expression)) {
                var callAccess = callExpression.expression;
                if (isMatchingReference(reference.expression, getReferenceCandidate(callAccess.expression)) &&
                    (0, ts_1.isIdentifier)(callAccess.name) && callAccess.name.escapedText === "hasOwnProperty" && callExpression.arguments.length === 1) {
                    var argument = callExpression.arguments[0];
                    if ((0, ts_1.isStringLiteralLike)(argument) && getAccessedPropertyName(reference) === (0, ts_1.escapeLeadingUnderscores)(argument.text)) {
                        return getTypeWithFacts(type, assumeTrue ? 524288 /* TypeFacts.NEUndefined */ : 65536 /* TypeFacts.EQUndefined */);
                    }
                }
            }
            return type;
        }
        function narrowTypeByTypePredicate(type, predicate, callExpression, assumeTrue) {
            // Don't narrow from 'any' if the predicate type is exactly 'Object' or 'Function'
            if (predicate.type && !(isTypeAny(type) && (predicate.type === globalObjectType || predicate.type === globalFunctionType))) {
                var predicateArgument = getTypePredicateArgument(predicate, callExpression);
                if (predicateArgument) {
                    if (isMatchingReference(reference, predicateArgument)) {
                        return getNarrowedType(type, predicate.type, assumeTrue, /*checkDerived*/ false);
                    }
                    if (strictNullChecks && assumeTrue && optionalChainContainsReference(predicateArgument, reference) &&
                        !(getTypeFacts(predicate.type) & 65536 /* TypeFacts.EQUndefined */)) {
                        type = getAdjustedTypeWithFacts(type, 2097152 /* TypeFacts.NEUndefinedOrNull */);
                    }
                    var access = getDiscriminantPropertyAccess(predicateArgument, type);
                    if (access) {
                        return narrowTypeByDiscriminant(type, access, function (t) { return getNarrowedType(t, predicate.type, assumeTrue, /*checkDerived*/ false); });
                    }
                }
            }
            return type;
        }
        // Narrow the given type based on the given expression having the assumed boolean value. The returned type
        // will be a subtype or the same type as the argument.
        function narrowType(type, expr, assumeTrue) {
            // for `a?.b`, we emulate a synthetic `a !== null && a !== undefined` condition for `a`
            if ((0, ts_1.isExpressionOfOptionalChainRoot)(expr) ||
                (0, ts_1.isBinaryExpression)(expr.parent) && (expr.parent.operatorToken.kind === 61 /* SyntaxKind.QuestionQuestionToken */ || expr.parent.operatorToken.kind === 78 /* SyntaxKind.QuestionQuestionEqualsToken */) && expr.parent.left === expr) {
                return narrowTypeByOptionality(type, expr, assumeTrue);
            }
            switch (expr.kind) {
                case 80 /* SyntaxKind.Identifier */:
                    // When narrowing a reference to a const variable, non-assigned parameter, or readonly property, we inline
                    // up to five levels of aliased conditional expressions that are themselves declared as const variables.
                    if (!isMatchingReference(reference, expr) && inlineLevel < 5) {
                        var symbol = getResolvedSymbol(expr);
                        if (isConstVariable(symbol)) {
                            var declaration = symbol.valueDeclaration;
                            if (declaration && (0, ts_1.isVariableDeclaration)(declaration) && !declaration.type && declaration.initializer && isConstantReference(reference)) {
                                inlineLevel++;
                                var result = narrowType(type, declaration.initializer, assumeTrue);
                                inlineLevel--;
                                return result;
                            }
                        }
                    }
                // falls through
                case 110 /* SyntaxKind.ThisKeyword */:
                case 108 /* SyntaxKind.SuperKeyword */:
                case 210 /* SyntaxKind.PropertyAccessExpression */:
                case 211 /* SyntaxKind.ElementAccessExpression */:
                    return narrowTypeByTruthiness(type, expr, assumeTrue);
                case 212 /* SyntaxKind.CallExpression */:
                    return narrowTypeByCallExpression(type, expr, assumeTrue);
                case 216 /* SyntaxKind.ParenthesizedExpression */:
                case 234 /* SyntaxKind.NonNullExpression */:
                    return narrowType(type, expr.expression, assumeTrue);
                case 225 /* SyntaxKind.BinaryExpression */:
                    return narrowTypeByBinaryExpression(type, expr, assumeTrue);
                case 223 /* SyntaxKind.PrefixUnaryExpression */:
                    if (expr.operator === 54 /* SyntaxKind.ExclamationToken */) {
                        return narrowType(type, expr.operand, !assumeTrue);
                    }
                    break;
            }
            return type;
        }
        function narrowTypeByOptionality(type, expr, assumePresent) {
            if (isMatchingReference(reference, expr)) {
                return getAdjustedTypeWithFacts(type, assumePresent ? 2097152 /* TypeFacts.NEUndefinedOrNull */ : 262144 /* TypeFacts.EQUndefinedOrNull */);
            }
            var access = getDiscriminantPropertyAccess(expr, type);
            if (access) {
                return narrowTypeByDiscriminant(type, access, function (t) { return getTypeWithFacts(t, assumePresent ? 2097152 /* TypeFacts.NEUndefinedOrNull */ : 262144 /* TypeFacts.EQUndefinedOrNull */); });
            }
            return type;
        }
    }
    function getTypeOfSymbolAtLocation(symbol, location) {
        symbol = getExportSymbolOfValueSymbolIfExported(symbol);
        // If we have an identifier or a property access at the given location, if the location is
        // an dotted name expression, and if the location is not an assignment target, obtain the type
        // of the expression (which will reflect control flow analysis). If the expression indeed
        // resolved to the given symbol, return the narrowed type.
        if (location.kind === 80 /* SyntaxKind.Identifier */ || location.kind === 81 /* SyntaxKind.PrivateIdentifier */) {
            if ((0, ts_1.isRightSideOfQualifiedNameOrPropertyAccess)(location)) {
                location = location.parent;
            }
            if ((0, ts_1.isExpressionNode)(location) && (!(0, ts_1.isAssignmentTarget)(location) || (0, ts_1.isWriteAccess)(location))) {
                var type = getTypeOfExpression(location);
                if (getExportSymbolOfValueSymbolIfExported(getNodeLinks(location).resolvedSymbol) === symbol) {
                    return type;
                }
            }
        }
        if ((0, ts_1.isDeclarationName)(location) && (0, ts_1.isSetAccessor)(location.parent) && getAnnotatedAccessorTypeNode(location.parent)) {
            return getWriteTypeOfAccessors(location.parent.symbol);
        }
        // The location isn't a reference to the given symbol, meaning we're being asked
        // a hypothetical question of what type the symbol would have if there was a reference
        // to it at the given location. Since we have no control flow information for the
        // hypothetical reference (control flow information is created and attached by the
        // binder), we simply return the declared type of the symbol.
        return getNonMissingTypeOfSymbol(symbol);
    }
    function getControlFlowContainer(node) {
        return (0, ts_1.findAncestor)(node.parent, function (node) {
            return (0, ts_1.isFunctionLike)(node) && !(0, ts_1.getImmediatelyInvokedFunctionExpression)(node) ||
                node.kind === 267 /* SyntaxKind.ModuleBlock */ ||
                node.kind === 311 /* SyntaxKind.SourceFile */ ||
                node.kind === 171 /* SyntaxKind.PropertyDeclaration */;
        });
    }
    // Check if a parameter or catch variable is assigned anywhere
    function isSymbolAssigned(symbol) {
        if (!symbol.valueDeclaration) {
            return false;
        }
        var parent = (0, ts_1.getRootDeclaration)(symbol.valueDeclaration).parent;
        var links = getNodeLinks(parent);
        if (!(links.flags & 524288 /* NodeCheckFlags.AssignmentsMarked */)) {
            links.flags |= 524288 /* NodeCheckFlags.AssignmentsMarked */;
            if (!hasParentWithAssignmentsMarked(parent)) {
                markNodeAssignments(parent);
            }
        }
        return symbol.isAssigned || false;
    }
    function hasParentWithAssignmentsMarked(node) {
        return !!(0, ts_1.findAncestor)(node.parent, function (node) {
            return ((0, ts_1.isFunctionLike)(node) || (0, ts_1.isCatchClause)(node)) && !!(getNodeLinks(node).flags & 524288 /* NodeCheckFlags.AssignmentsMarked */);
        });
    }
    function markNodeAssignments(node) {
        if (node.kind === 80 /* SyntaxKind.Identifier */) {
            if ((0, ts_1.isAssignmentTarget)(node)) {
                var symbol = getResolvedSymbol(node);
                if ((0, ts_1.isParameterOrCatchClauseVariable)(symbol)) {
                    symbol.isAssigned = true;
                }
            }
        }
        else {
            (0, ts_1.forEachChild)(node, markNodeAssignments);
        }
    }
    function isConstVariable(symbol) {
        return symbol.flags & 3 /* SymbolFlags.Variable */ && (getDeclarationNodeFlagsFromSymbol(symbol) & 2 /* NodeFlags.Const */) !== 0;
    }
    function parameterInitializerContainsUndefined(declaration) {
        var links = getNodeLinks(declaration);
        if (links.parameterInitializerContainsUndefined === undefined) {
            if (!pushTypeResolution(declaration, 9 /* TypeSystemPropertyName.ParameterInitializerContainsUndefined */)) {
                reportCircularityError(declaration.symbol);
                return true;
            }
            var containsUndefined = !!(getTypeFacts(checkDeclarationInitializer(declaration, 0 /* CheckMode.Normal */)) & 16777216 /* TypeFacts.IsUndefined */);
            if (!popTypeResolution()) {
                reportCircularityError(declaration.symbol);
                return true;
            }
            links.parameterInitializerContainsUndefined = containsUndefined;
        }
        return links.parameterInitializerContainsUndefined;
    }
    /** remove undefined from the annotated type of a parameter when there is an initializer (that doesn't include undefined) */
    function removeOptionalityFromDeclaredType(declaredType, declaration) {
        var removeUndefined = strictNullChecks &&
            declaration.kind === 168 /* SyntaxKind.Parameter */ &&
            declaration.initializer &&
            getTypeFacts(declaredType) & 16777216 /* TypeFacts.IsUndefined */ &&
            !parameterInitializerContainsUndefined(declaration);
        return removeUndefined ? getTypeWithFacts(declaredType, 524288 /* TypeFacts.NEUndefined */) : declaredType;
    }
    function isConstraintPosition(type, node) {
        var parent = node.parent;
        // In an element access obj[x], we consider obj to be in a constraint position, except when obj is of
        // a generic type without a nullable constraint and x is a generic type. This is because when both obj
        // and x are of generic types T and K, we want the resulting type to be T[K].
        return parent.kind === 210 /* SyntaxKind.PropertyAccessExpression */ ||
            parent.kind === 165 /* SyntaxKind.QualifiedName */ ||
            parent.kind === 212 /* SyntaxKind.CallExpression */ && parent.expression === node ||
            parent.kind === 211 /* SyntaxKind.ElementAccessExpression */ && parent.expression === node &&
                !(someType(type, isGenericTypeWithoutNullableConstraint) && isGenericIndexType(getTypeOfExpression(parent.argumentExpression)));
    }
    function isGenericTypeWithUnionConstraint(type) {
        return type.flags & 2097152 /* TypeFlags.Intersection */ ?
            (0, ts_1.some)(type.types, isGenericTypeWithUnionConstraint) :
            !!(type.flags & 465829888 /* TypeFlags.Instantiable */ && getBaseConstraintOrType(type).flags & (98304 /* TypeFlags.Nullable */ | 1048576 /* TypeFlags.Union */));
    }
    function isGenericTypeWithoutNullableConstraint(type) {
        return type.flags & 2097152 /* TypeFlags.Intersection */ ?
            (0, ts_1.some)(type.types, isGenericTypeWithoutNullableConstraint) :
            !!(type.flags & 465829888 /* TypeFlags.Instantiable */ && !maybeTypeOfKind(getBaseConstraintOrType(type), 98304 /* TypeFlags.Nullable */));
    }
    function hasContextualTypeWithNoGenericTypes(node, checkMode) {
        // Computing the contextual type for a child of a JSX element involves resolving the type of the
        // element's tag name, so we exclude that here to avoid circularities.
        // If check mode has `CheckMode.RestBindingElement`, we skip binding pattern contextual types,
        // as we want the type of a rest element to be generic when possible.
        var contextualType = ((0, ts_1.isIdentifier)(node) || (0, ts_1.isPropertyAccessExpression)(node) || (0, ts_1.isElementAccessExpression)(node)) &&
            !(((0, ts_1.isJsxOpeningElement)(node.parent) || (0, ts_1.isJsxSelfClosingElement)(node.parent)) && node.parent.tagName === node) &&
            (checkMode && checkMode & 64 /* CheckMode.RestBindingElement */ ?
                getContextualType(node, 8 /* ContextFlags.SkipBindingPatterns */)
                : getContextualType(node, /*contextFlags*/ undefined));
        return contextualType && !isGenericType(contextualType);
    }
    function getNarrowableTypeForReference(type, reference, checkMode) {
        // When the type of a reference is or contains an instantiable type with a union type constraint, and
        // when the reference is in a constraint position (where it is known we'll obtain the apparent type) or
        // has a contextual type containing no top-level instantiables (meaning constraints will determine
        // assignability), we substitute constraints for all instantiables in the type of the reference to give
        // control flow analysis an opportunity to narrow it further. For example, for a reference of a type
        // parameter type 'T extends string | undefined' with a contextual type 'string', we substitute
        // 'string | undefined' to give control flow analysis the opportunity to narrow to type 'string'.
        var substituteConstraints = !(checkMode && checkMode & 2 /* CheckMode.Inferential */) &&
            someType(type, isGenericTypeWithUnionConstraint) &&
            (isConstraintPosition(type, reference) || hasContextualTypeWithNoGenericTypes(reference, checkMode));
        return substituteConstraints ? mapType(type, getBaseConstraintOrType) : type;
    }
    function isExportOrExportExpression(location) {
        return !!(0, ts_1.findAncestor)(location, function (n) {
            var parent = n.parent;
            if (parent === undefined) {
                return "quit";
            }
            if ((0, ts_1.isExportAssignment)(parent)) {
                return parent.expression === n && (0, ts_1.isEntityNameExpression)(n);
            }
            if ((0, ts_1.isExportSpecifier)(parent)) {
                return parent.name === n || parent.propertyName === n;
            }
            return false;
        });
    }
    function markAliasReferenced(symbol, location) {
        if (!canCollectSymbolAliasAccessabilityData) {
            return;
        }
        if (isNonLocalAlias(symbol, /*excludes*/ 111551 /* SymbolFlags.Value */) && !isInTypeQuery(location) && !getTypeOnlyAliasDeclaration(symbol, 111551 /* SymbolFlags.Value */)) {
            var target = resolveAlias(symbol);
            if (getAllSymbolFlags(target) & (111551 /* SymbolFlags.Value */ | 1048576 /* SymbolFlags.ExportValue */)) {
                // An alias resolving to a const enum cannot be elided if (1) 'isolatedModules' is enabled
                // (because the const enum value will not be inlined), or if (2) the alias is an export
                // of a const enum declaration that will be preserved.
                if ((0, ts_1.getIsolatedModules)(compilerOptions) ||
                    (0, ts_1.shouldPreserveConstEnums)(compilerOptions) && isExportOrExportExpression(location) ||
                    !isConstEnumOrConstEnumOnlyModule(getExportSymbolOfValueSymbolIfExported(target))) {
                    markAliasSymbolAsReferenced(symbol);
                }
                else {
                    markConstEnumAliasAsReferenced(symbol);
                }
            }
        }
    }
    function getNarrowedTypeOfSymbol(symbol, location) {
        var _a;
        var type = getTypeOfSymbol(symbol);
        var declaration = symbol.valueDeclaration;
        if (declaration) {
            // If we have a non-rest binding element with no initializer declared as a const variable or a const-like
            // parameter (a parameter for which there are no assignments in the function body), and if the parent type
            // for the destructuring is a union type, one or more of the binding elements may represent discriminant
            // properties, and we want the effects of conditional checks on such discriminants to affect the types of
            // other binding elements from the same destructuring. Consider:
            //
            //   type Action =
            //       | { kind: 'A', payload: number }
            //       | { kind: 'B', payload: string };
            //
            //   function f({ kind, payload }: Action) {
            //       if (kind === 'A') {
            //           payload.toFixed();
            //       }
            //       if (kind === 'B') {
            //           payload.toUpperCase();
            //       }
            //   }
            //
            // Above, we want the conditional checks on 'kind' to affect the type of 'payload'. To facilitate this, we use
            // the binding pattern AST instance for '{ kind, payload }' as a pseudo-reference and narrow this reference
            // as if it occurred in the specified location. We then recompute the narrowed binding element type by
            // destructuring from the narrowed parent type.
            if ((0, ts_1.isBindingElement)(declaration) && !declaration.initializer && !declaration.dotDotDotToken && declaration.parent.elements.length >= 2) {
                var parent_10 = declaration.parent.parent;
                if (parent_10.kind === 259 /* SyntaxKind.VariableDeclaration */ && (0, ts_1.getCombinedNodeFlags)(declaration) & 2 /* NodeFlags.Const */ || parent_10.kind === 168 /* SyntaxKind.Parameter */) {
                    var links = getNodeLinks(parent_10);
                    if (!(links.flags & 16777216 /* NodeCheckFlags.InCheckIdentifier */)) {
                        links.flags |= 16777216 /* NodeCheckFlags.InCheckIdentifier */;
                        var parentType = getTypeForBindingElementParent(parent_10, 0 /* CheckMode.Normal */);
                        var parentTypeConstraint = parentType && mapType(parentType, getBaseConstraintOrType);
                        links.flags &= ~16777216 /* NodeCheckFlags.InCheckIdentifier */;
                        if (parentTypeConstraint && parentTypeConstraint.flags & 1048576 /* TypeFlags.Union */ && !(parent_10.kind === 168 /* SyntaxKind.Parameter */ && isSymbolAssigned(symbol))) {
                            var pattern = declaration.parent;
                            var narrowedType = getFlowTypeOfReference(pattern, parentTypeConstraint, parentTypeConstraint, /*flowContainer*/ undefined, location.flowNode);
                            if (narrowedType.flags & 131072 /* TypeFlags.Never */) {
                                return neverType;
                            }
                            return getBindingElementTypeFromParentType(declaration, narrowedType);
                        }
                    }
                }
            }
            // If we have a const-like parameter with no type annotation or initializer, and if the parameter is contextually
            // typed by a signature with a single rest parameter of a union of tuple types, one or more of the parameters may
            // represent discriminant tuple elements, and we want the effects of conditional checks on such discriminants to
            // affect the types of other parameters in the same parameter list. Consider:
            //
            //   type Action = [kind: 'A', payload: number] | [kind: 'B', payload: string];
            //
            //   const f: (...args: Action) => void = (kind, payload) => {
            //       if (kind === 'A') {
            //           payload.toFixed();
            //       }
            //       if (kind === 'B') {
            //           payload.toUpperCase();
            //       }
            //   }
            //
            // Above, we want the conditional checks on 'kind' to affect the type of 'payload'. To facilitate this, we use
            // the arrow function AST node for '(kind, payload) => ...' as a pseudo-reference and narrow this reference as
            // if it occurred in the specified location. We then recompute the narrowed parameter type by indexing into the
            // narrowed tuple type.
            if ((0, ts_1.isParameter)(declaration) && !declaration.type && !declaration.initializer && !declaration.dotDotDotToken) {
                var func = declaration.parent;
                if (func.parameters.length >= 2 && isContextSensitiveFunctionOrObjectLiteralMethod(func)) {
                    var contextualSignature = getContextualSignature(func);
                    if (contextualSignature && contextualSignature.parameters.length === 1 && signatureHasRestParameter(contextualSignature)) {
                        var restType = getReducedApparentType(instantiateType(getTypeOfSymbol(contextualSignature.parameters[0]), (_a = getInferenceContext(func)) === null || _a === void 0 ? void 0 : _a.nonFixingMapper));
                        if (restType.flags & 1048576 /* TypeFlags.Union */ && everyType(restType, isTupleType) && !isSymbolAssigned(symbol)) {
                            var narrowedType = getFlowTypeOfReference(func, restType, restType, /*flowContainer*/ undefined, location.flowNode);
                            var index = func.parameters.indexOf(declaration) - ((0, ts_1.getThisParameter)(func) ? 1 : 0);
                            return getIndexedAccessType(narrowedType, getNumberLiteralType(index));
                        }
                    }
                }
            }
        }
        return type;
    }
    function checkIdentifier(node, checkMode) {
        if ((0, ts_1.isThisInTypeQuery)(node)) {
            return checkThisExpression(node);
        }
        var symbol = getResolvedSymbol(node);
        if (symbol === unknownSymbol) {
            return errorType;
        }
        // As noted in ECMAScript 6 language spec, arrow functions never have an arguments objects.
        // Although in down-level emit of arrow function, we emit it using function expression which means that
        // arguments objects will be bound to the inner object; emitting arrow function natively in ES6, arguments objects
        // will be bound to non-arrow function that contain this arrow function. This results in inconsistent behavior.
        // To avoid that we will give an error to users if they use arguments objects in arrow function so that they
        // can explicitly bound arguments objects
        if (symbol === argumentsSymbol) {
            if (isInPropertyInitializerOrClassStaticBlock(node)) {
                error(node, ts_1.Diagnostics.arguments_cannot_be_referenced_in_property_initializers);
                return errorType;
            }
            var container = (0, ts_1.getContainingFunction)(node);
            if (languageVersion < 2 /* ScriptTarget.ES2015 */) {
                if (container.kind === 218 /* SyntaxKind.ArrowFunction */) {
                    error(node, ts_1.Diagnostics.The_arguments_object_cannot_be_referenced_in_an_arrow_function_in_ES3_and_ES5_Consider_using_a_standard_function_expression);
                }
                else if ((0, ts_1.hasSyntacticModifier)(container, 512 /* ModifierFlags.Async */)) {
                    error(node, ts_1.Diagnostics.The_arguments_object_cannot_be_referenced_in_an_async_function_or_method_in_ES3_and_ES5_Consider_using_a_standard_function_or_method);
                }
            }
            getNodeLinks(container).flags |= 512 /* NodeCheckFlags.CaptureArguments */;
            return getTypeOfSymbol(symbol);
        }
        if (shouldMarkIdentifierAliasReferenced(node)) {
            markAliasReferenced(symbol, node);
        }
        var localOrExportSymbol = getExportSymbolOfValueSymbolIfExported(symbol);
        var targetSymbol = resolveAliasWithDeprecationCheck(localOrExportSymbol, node);
        if (isDeprecatedSymbol(targetSymbol) && isUncalledFunctionReference(node, targetSymbol) && targetSymbol.declarations) {
            addDeprecatedSuggestion(node, targetSymbol.declarations, node.escapedText);
        }
        var declaration = localOrExportSymbol.valueDeclaration;
        if (declaration && localOrExportSymbol.flags & 32 /* SymbolFlags.Class */) {
            // Due to the emit for class decorators, any reference to the class from inside of the class body
            // must instead be rewritten to point to a temporary variable to avoid issues with the double-bind
            // behavior of class names in ES6.
            if (declaration.kind === 262 /* SyntaxKind.ClassDeclaration */
                && (0, ts_1.nodeIsDecorated)(legacyDecorators, declaration)) {
                var container = (0, ts_1.getContainingClass)(node);
                while (container !== undefined) {
                    if (container === declaration && container.name !== node) {
                        getNodeLinks(declaration).flags |= 1048576 /* NodeCheckFlags.ClassWithConstructorReference */;
                        getNodeLinks(node).flags |= 2097152 /* NodeCheckFlags.ConstructorReferenceInClass */;
                        break;
                    }
                    container = (0, ts_1.getContainingClass)(container);
                }
            }
            else if (declaration.kind === 230 /* SyntaxKind.ClassExpression */) {
                // When we emit a class expression with static members that contain a reference
                // to the constructor in the initializer, we will need to substitute that
                // binding with an alias as the class name is not in scope.
                var container = (0, ts_1.getThisContainer)(node, /*includeArrowFunctions*/ false, /*includeClassComputedPropertyName*/ false);
                while (container.kind !== 311 /* SyntaxKind.SourceFile */) {
                    if (container.parent === declaration) {
                        if ((0, ts_1.isPropertyDeclaration)(container) && (0, ts_1.isStatic)(container) || (0, ts_1.isClassStaticBlockDeclaration)(container)) {
                            getNodeLinks(declaration).flags |= 1048576 /* NodeCheckFlags.ClassWithConstructorReference */;
                            getNodeLinks(node).flags |= 2097152 /* NodeCheckFlags.ConstructorReferenceInClass */;
                        }
                        break;
                    }
                    container = (0, ts_1.getThisContainer)(container, /*includeArrowFunctions*/ false, /*includeClassComputedPropertyName*/ false);
                }
            }
        }
        checkNestedBlockScopedBinding(node, symbol);
        var type = getNarrowedTypeOfSymbol(localOrExportSymbol, node);
        var assignmentKind = (0, ts_1.getAssignmentTargetKind)(node);
        if (assignmentKind) {
            if (!(localOrExportSymbol.flags & 3 /* SymbolFlags.Variable */) &&
                !((0, ts_1.isInJSFile)(node) && localOrExportSymbol.flags & 512 /* SymbolFlags.ValueModule */)) {
                var assignmentError = localOrExportSymbol.flags & 384 /* SymbolFlags.Enum */ ? ts_1.Diagnostics.Cannot_assign_to_0_because_it_is_an_enum
                    : localOrExportSymbol.flags & 32 /* SymbolFlags.Class */ ? ts_1.Diagnostics.Cannot_assign_to_0_because_it_is_a_class
                        : localOrExportSymbol.flags & 1536 /* SymbolFlags.Module */ ? ts_1.Diagnostics.Cannot_assign_to_0_because_it_is_a_namespace
                            : localOrExportSymbol.flags & 16 /* SymbolFlags.Function */ ? ts_1.Diagnostics.Cannot_assign_to_0_because_it_is_a_function
                                : localOrExportSymbol.flags & 2097152 /* SymbolFlags.Alias */ ? ts_1.Diagnostics.Cannot_assign_to_0_because_it_is_an_import
                                    : ts_1.Diagnostics.Cannot_assign_to_0_because_it_is_not_a_variable;
                error(node, assignmentError, symbolToString(symbol));
                return errorType;
            }
            if (isReadonlySymbol(localOrExportSymbol)) {
                if (localOrExportSymbol.flags & 3 /* SymbolFlags.Variable */) {
                    error(node, ts_1.Diagnostics.Cannot_assign_to_0_because_it_is_a_constant, symbolToString(symbol));
                }
                else {
                    error(node, ts_1.Diagnostics.Cannot_assign_to_0_because_it_is_a_read_only_property, symbolToString(symbol));
                }
                return errorType;
            }
        }
        var isAlias = localOrExportSymbol.flags & 2097152 /* SymbolFlags.Alias */;
        // We only narrow variables and parameters occurring in a non-assignment position. For all other
        // entities we simply return the declared type.
        if (localOrExportSymbol.flags & 3 /* SymbolFlags.Variable */) {
            if (assignmentKind === 1 /* AssignmentKind.Definite */) {
                return type;
            }
        }
        else if (isAlias) {
            declaration = getDeclarationOfAliasSymbol(symbol);
        }
        else {
            return type;
        }
        if (!declaration) {
            return type;
        }
        type = getNarrowableTypeForReference(type, node, checkMode);
        // The declaration container is the innermost function that encloses the declaration of the variable
        // or parameter. The flow container is the innermost function starting with which we analyze the control
        // flow graph to determine the control flow based type.
        var isParameter = (0, ts_1.getRootDeclaration)(declaration).kind === 168 /* SyntaxKind.Parameter */;
        var declarationContainer = getControlFlowContainer(declaration);
        var flowContainer = getControlFlowContainer(node);
        var isOuterVariable = flowContainer !== declarationContainer;
        var isSpreadDestructuringAssignmentTarget = node.parent && node.parent.parent && (0, ts_1.isSpreadAssignment)(node.parent) && isDestructuringAssignmentTarget(node.parent.parent);
        var isModuleExports = symbol.flags & 134217728 /* SymbolFlags.ModuleExports */;
        var typeIsAutomatic = type === autoType || type === autoArrayType;
        var isAutomaticTypeInNonNull = typeIsAutomatic && node.parent.kind === 234 /* SyntaxKind.NonNullExpression */;
        // When the control flow originates in a function expression or arrow function and we are referencing
        // a const variable or parameter from an outer function, we extend the origin of the control flow
        // analysis to include the immediately enclosing function.
        while (flowContainer !== declarationContainer && (flowContainer.kind === 217 /* SyntaxKind.FunctionExpression */ ||
            flowContainer.kind === 218 /* SyntaxKind.ArrowFunction */ || (0, ts_1.isObjectLiteralOrClassExpressionMethodOrAccessor)(flowContainer)) &&
            (isConstVariable(localOrExportSymbol) && type !== autoArrayType || isParameter && !isSymbolAssigned(localOrExportSymbol))) {
            flowContainer = getControlFlowContainer(flowContainer);
        }
        // We only look for uninitialized variables in strict null checking mode, and only when we can analyze
        // the entire control flow graph from the variable's declaration (i.e. when the flow container and
        // declaration container are the same).
        var assumeInitialized = isParameter || isAlias || isOuterVariable || isSpreadDestructuringAssignmentTarget || isModuleExports || isSameScopedBindingElement(node, declaration) ||
            type !== autoType && type !== autoArrayType && (!strictNullChecks || (type.flags & (3 /* TypeFlags.AnyOrUnknown */ | 16384 /* TypeFlags.Void */)) !== 0 ||
                isInTypeQuery(node) || isInAmbientOrTypeNode(node) || node.parent.kind === 280 /* SyntaxKind.ExportSpecifier */) ||
            node.parent.kind === 234 /* SyntaxKind.NonNullExpression */ ||
            declaration.kind === 259 /* SyntaxKind.VariableDeclaration */ && declaration.exclamationToken ||
            declaration.flags & 16777216 /* NodeFlags.Ambient */;
        var initialType = isAutomaticTypeInNonNull ? undefinedType :
            assumeInitialized ? (isParameter ? removeOptionalityFromDeclaredType(type, declaration) : type) :
                typeIsAutomatic ? undefinedType : getOptionalType(type);
        var flowType = isAutomaticTypeInNonNull ? getNonNullableType(getFlowTypeOfReference(node, type, initialType, flowContainer)) :
            getFlowTypeOfReference(node, type, initialType, flowContainer);
        // A variable is considered uninitialized when it is possible to analyze the entire control flow graph
        // from declaration to use, and when the variable's declared type doesn't include undefined but the
        // control flow based type does include undefined.
        if (!isEvolvingArrayOperationTarget(node) && (type === autoType || type === autoArrayType)) {
            if (flowType === autoType || flowType === autoArrayType) {
                if (noImplicitAny) {
                    error((0, ts_1.getNameOfDeclaration)(declaration), ts_1.Diagnostics.Variable_0_implicitly_has_type_1_in_some_locations_where_its_type_cannot_be_determined, symbolToString(symbol), typeToString(flowType));
                    error(node, ts_1.Diagnostics.Variable_0_implicitly_has_an_1_type, symbolToString(symbol), typeToString(flowType));
                }
                return convertAutoToAny(flowType);
            }
        }
        else if (!assumeInitialized && !containsUndefinedType(type) && containsUndefinedType(flowType)) {
            error(node, ts_1.Diagnostics.Variable_0_is_used_before_being_assigned, symbolToString(symbol));
            // Return the declared type to reduce follow-on errors
            return type;
        }
        return assignmentKind ? getBaseTypeOfLiteralType(flowType) : flowType;
    }
    function isSameScopedBindingElement(node, declaration) {
        if ((0, ts_1.isBindingElement)(declaration)) {
            var bindingElement = (0, ts_1.findAncestor)(node, ts_1.isBindingElement);
            return bindingElement && (0, ts_1.getRootDeclaration)(bindingElement) === (0, ts_1.getRootDeclaration)(declaration);
        }
    }
    function shouldMarkIdentifierAliasReferenced(node) {
        var _a;
        var parent = node.parent;
        if (parent) {
            // A property access expression LHS? checkPropertyAccessExpression will handle that.
            if ((0, ts_1.isPropertyAccessExpression)(parent) && parent.expression === node) {
                return false;
            }
            // Next two check for an identifier inside a type only export.
            if ((0, ts_1.isExportSpecifier)(parent) && parent.isTypeOnly) {
                return false;
            }
            var greatGrandparent = (_a = parent.parent) === null || _a === void 0 ? void 0 : _a.parent;
            if (greatGrandparent && (0, ts_1.isExportDeclaration)(greatGrandparent) && greatGrandparent.isTypeOnly) {
                return false;
            }
        }
        return true;
    }
    function isInsideFunctionOrInstancePropertyInitializer(node, threshold) {
        return !!(0, ts_1.findAncestor)(node, function (n) { return n === threshold ? "quit" : (0, ts_1.isFunctionLike)(n) || (n.parent && (0, ts_1.isPropertyDeclaration)(n.parent) && !(0, ts_1.hasStaticModifier)(n.parent) && n.parent.initializer === n); });
    }
    function getPartOfForStatementContainingNode(node, container) {
        return (0, ts_1.findAncestor)(node, function (n) { return n === container ? "quit" : n === container.initializer || n === container.condition || n === container.incrementor || n === container.statement; });
    }
    function getEnclosingIterationStatement(node) {
        return (0, ts_1.findAncestor)(node, function (n) { return (!n || (0, ts_1.nodeStartsNewLexicalEnvironment)(n)) ? "quit" : (0, ts_1.isIterationStatement)(n, /*lookInLabeledStatements*/ false); });
    }
    function checkNestedBlockScopedBinding(node, symbol) {
        if (languageVersion >= 2 /* ScriptTarget.ES2015 */ ||
            (symbol.flags & (2 /* SymbolFlags.BlockScopedVariable */ | 32 /* SymbolFlags.Class */)) === 0 ||
            !symbol.valueDeclaration ||
            (0, ts_1.isSourceFile)(symbol.valueDeclaration) ||
            symbol.valueDeclaration.parent.kind === 298 /* SyntaxKind.CatchClause */) {
            return;
        }
        // 1. walk from the use site up to the declaration and check
        // if there is anything function like between declaration and use-site (is binding/class is captured in function).
        // 2. walk from the declaration up to the boundary of lexical environment and check
        // if there is an iteration statement in between declaration and boundary (is binding/class declared inside iteration statement)
        var container = (0, ts_1.getEnclosingBlockScopeContainer)(symbol.valueDeclaration);
        var isCaptured = isInsideFunctionOrInstancePropertyInitializer(node, container);
        var enclosingIterationStatement = getEnclosingIterationStatement(container);
        if (enclosingIterationStatement) {
            if (isCaptured) {
                // mark iteration statement as containing block-scoped binding captured in some function
                var capturesBlockScopeBindingInLoopBody = true;
                if ((0, ts_1.isForStatement)(container)) {
                    var varDeclList = (0, ts_1.getAncestor)(symbol.valueDeclaration, 260 /* SyntaxKind.VariableDeclarationList */);
                    if (varDeclList && varDeclList.parent === container) {
                        var part = getPartOfForStatementContainingNode(node.parent, container);
                        if (part) {
                            var links = getNodeLinks(part);
                            links.flags |= 8192 /* NodeCheckFlags.ContainsCapturedBlockScopeBinding */;
                            var capturedBindings = links.capturedBlockScopeBindings || (links.capturedBlockScopeBindings = []);
                            (0, ts_1.pushIfUnique)(capturedBindings, symbol);
                            if (part === container.initializer) {
                                capturesBlockScopeBindingInLoopBody = false; // Initializer is outside of loop body
                            }
                        }
                    }
                }
                if (capturesBlockScopeBindingInLoopBody) {
                    getNodeLinks(enclosingIterationStatement).flags |= 4096 /* NodeCheckFlags.LoopWithCapturedBlockScopedBinding */;
                }
            }
            // mark variables that are declared in loop initializer and reassigned inside the body of ForStatement.
            // if body of ForStatement will be converted to function then we'll need a extra machinery to propagate reassigned values back.
            if ((0, ts_1.isForStatement)(container)) {
                var varDeclList = (0, ts_1.getAncestor)(symbol.valueDeclaration, 260 /* SyntaxKind.VariableDeclarationList */);
                if (varDeclList && varDeclList.parent === container && isAssignedInBodyOfForStatement(node, container)) {
                    getNodeLinks(symbol.valueDeclaration).flags |= 262144 /* NodeCheckFlags.NeedsLoopOutParameter */;
                }
            }
            // set 'declared inside loop' bit on the block-scoped binding
            getNodeLinks(symbol.valueDeclaration).flags |= 32768 /* NodeCheckFlags.BlockScopedBindingInLoop */;
        }
        if (isCaptured) {
            getNodeLinks(symbol.valueDeclaration).flags |= 16384 /* NodeCheckFlags.CapturedBlockScopedBinding */;
        }
    }
    function isBindingCapturedByNode(node, decl) {
        var links = getNodeLinks(node);
        return !!links && (0, ts_1.contains)(links.capturedBlockScopeBindings, getSymbolOfDeclaration(decl));
    }
    function isAssignedInBodyOfForStatement(node, container) {
        // skip parenthesized nodes
        var current = node;
        while (current.parent.kind === 216 /* SyntaxKind.ParenthesizedExpression */) {
            current = current.parent;
        }
        // check if node is used as LHS in some assignment expression
        var isAssigned = false;
        if ((0, ts_1.isAssignmentTarget)(current)) {
            isAssigned = true;
        }
        else if ((current.parent.kind === 223 /* SyntaxKind.PrefixUnaryExpression */ || current.parent.kind === 224 /* SyntaxKind.PostfixUnaryExpression */)) {
            var expr = current.parent;
            isAssigned = expr.operator === 46 /* SyntaxKind.PlusPlusToken */ || expr.operator === 47 /* SyntaxKind.MinusMinusToken */;
        }
        if (!isAssigned) {
            return false;
        }
        // at this point we know that node is the target of assignment
        // now check that modification happens inside the statement part of the ForStatement
        return !!(0, ts_1.findAncestor)(current, function (n) { return n === container ? "quit" : n === container.statement; });
    }
    function captureLexicalThis(node, container) {
        getNodeLinks(node).flags |= 2 /* NodeCheckFlags.LexicalThis */;
        if (container.kind === 171 /* SyntaxKind.PropertyDeclaration */ || container.kind === 175 /* SyntaxKind.Constructor */) {
            var classNode = container.parent;
            getNodeLinks(classNode).flags |= 4 /* NodeCheckFlags.CaptureThis */;
        }
        else {
            getNodeLinks(container).flags |= 4 /* NodeCheckFlags.CaptureThis */;
        }
    }
    function findFirstSuperCall(node) {
        return (0, ts_1.isSuperCall)(node) ? node :
            (0, ts_1.isFunctionLike)(node) ? undefined :
                (0, ts_1.forEachChild)(node, findFirstSuperCall);
    }
    /**
     * Check if the given class-declaration extends null then return true.
     * Otherwise, return false
     * @param classDecl a class declaration to check if it extends null
     */
    function classDeclarationExtendsNull(classDecl) {
        var classSymbol = getSymbolOfDeclaration(classDecl);
        var classInstanceType = getDeclaredTypeOfSymbol(classSymbol);
        var baseConstructorType = getBaseConstructorTypeOfClass(classInstanceType);
        return baseConstructorType === nullWideningType;
    }
    function checkThisBeforeSuper(node, container, diagnosticMessage) {
        var containingClassDecl = container.parent;
        var baseTypeNode = (0, ts_1.getClassExtendsHeritageElement)(containingClassDecl);
        // If a containing class does not have extends clause or the class extends null
        // skip checking whether super statement is called before "this" accessing.
        if (baseTypeNode && !classDeclarationExtendsNull(containingClassDecl)) {
            if ((0, ts_1.canHaveFlowNode)(node) && node.flowNode && !isPostSuperFlowNode(node.flowNode, /*noCacheCheck*/ false)) {
                error(node, diagnosticMessage);
            }
        }
    }
    function checkThisInStaticClassFieldInitializerInDecoratedClass(thisExpression, container) {
        if ((0, ts_1.isPropertyDeclaration)(container) && (0, ts_1.hasStaticModifier)(container) && legacyDecorators &&
            container.initializer && (0, ts_1.textRangeContainsPositionInclusive)(container.initializer, thisExpression.pos) && (0, ts_1.hasDecorators)(container.parent)) {
            error(thisExpression, ts_1.Diagnostics.Cannot_use_this_in_a_static_property_initializer_of_a_decorated_class);
        }
    }
    function checkThisExpression(node) {
        var isNodeInTypeQuery = isInTypeQuery(node);
        // Stop at the first arrow function so that we can
        // tell whether 'this' needs to be captured.
        var container = (0, ts_1.getThisContainer)(node, /*includeArrowFunctions*/ true, /*includeClassComputedPropertyName*/ true);
        var capturedByArrowFunction = false;
        var thisInComputedPropertyName = false;
        if (container.kind === 175 /* SyntaxKind.Constructor */) {
            checkThisBeforeSuper(node, container, ts_1.Diagnostics.super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class);
        }
        while (true) {
            // Now skip arrow functions to get the "real" owner of 'this'.
            if (container.kind === 218 /* SyntaxKind.ArrowFunction */) {
                container = (0, ts_1.getThisContainer)(container, /*includeArrowFunctions*/ false, !thisInComputedPropertyName);
                capturedByArrowFunction = true;
            }
            if (container.kind === 166 /* SyntaxKind.ComputedPropertyName */) {
                container = (0, ts_1.getThisContainer)(container, !capturedByArrowFunction, /*includeClassComputedPropertyName*/ false);
                thisInComputedPropertyName = true;
                continue;
            }
            break;
        }
        checkThisInStaticClassFieldInitializerInDecoratedClass(node, container);
        if (thisInComputedPropertyName) {
            error(node, ts_1.Diagnostics.this_cannot_be_referenced_in_a_computed_property_name);
        }
        else {
            switch (container.kind) {
                case 266 /* SyntaxKind.ModuleDeclaration */:
                    error(node, ts_1.Diagnostics.this_cannot_be_referenced_in_a_module_or_namespace_body);
                    // do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks
                    break;
                case 265 /* SyntaxKind.EnumDeclaration */:
                    error(node, ts_1.Diagnostics.this_cannot_be_referenced_in_current_location);
                    // do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks
                    break;
                case 175 /* SyntaxKind.Constructor */:
                    if (isInConstructorArgumentInitializer(node, container)) {
                        error(node, ts_1.Diagnostics.this_cannot_be_referenced_in_constructor_arguments);
                        // do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks
                    }
                    break;
            }
        }
        // When targeting es6, mark that we'll need to capture `this` in its lexically bound scope.
        if (!isNodeInTypeQuery && capturedByArrowFunction && languageVersion < 2 /* ScriptTarget.ES2015 */) {
            captureLexicalThis(node, container);
        }
        var type = tryGetThisTypeAt(node, /*includeGlobalThis*/ true, container);
        if (noImplicitThis) {
            var globalThisType_1 = getTypeOfSymbol(globalThisSymbol);
            if (type === globalThisType_1 && capturedByArrowFunction) {
                error(node, ts_1.Diagnostics.The_containing_arrow_function_captures_the_global_value_of_this);
            }
            else if (!type) {
                // With noImplicitThis, functions may not reference 'this' if it has type 'any'
                var diag = error(node, ts_1.Diagnostics.this_implicitly_has_type_any_because_it_does_not_have_a_type_annotation);
                if (!(0, ts_1.isSourceFile)(container)) {
                    var outsideThis = tryGetThisTypeAt(container);
                    if (outsideThis && outsideThis !== globalThisType_1) {
                        (0, ts_1.addRelatedInfo)(diag, (0, ts_1.createDiagnosticForNode)(container, ts_1.Diagnostics.An_outer_value_of_this_is_shadowed_by_this_container));
                    }
                }
            }
        }
        return type || anyType;
    }
    function tryGetThisTypeAt(node, includeGlobalThis, container) {
        if (includeGlobalThis === void 0) { includeGlobalThis = true; }
        if (container === void 0) { container = (0, ts_1.getThisContainer)(node, /*includeArrowFunctions*/ false, /*includeClassComputedPropertyName*/ false); }
        var isInJS = (0, ts_1.isInJSFile)(node);
        if ((0, ts_1.isFunctionLike)(container) &&
            (!isInParameterInitializerBeforeContainingFunction(node) || (0, ts_1.getThisParameter)(container))) {
            var thisType = getThisTypeOfDeclaration(container) || isInJS && getTypeForThisExpressionFromJSDoc(container);
            // Note: a parameter initializer should refer to class-this unless function-this is explicitly annotated.
            // If this is a function in a JS file, it might be a class method.
            if (!thisType) {
                var className = getClassNameFromPrototypeMethod(container);
                if (isInJS && className) {
                    var classSymbol = checkExpression(className).symbol;
                    if (classSymbol && classSymbol.members && (classSymbol.flags & 16 /* SymbolFlags.Function */)) {
                        thisType = getDeclaredTypeOfSymbol(classSymbol).thisType;
                    }
                }
                else if (isJSConstructor(container)) {
                    thisType = getDeclaredTypeOfSymbol(getMergedSymbol(container.symbol)).thisType;
                }
                thisType || (thisType = getContextualThisParameterType(container));
            }
            if (thisType) {
                return getFlowTypeOfReference(node, thisType);
            }
        }
        if ((0, ts_1.isClassLike)(container.parent)) {
            var symbol = getSymbolOfDeclaration(container.parent);
            var type = (0, ts_1.isStatic)(container) ? getTypeOfSymbol(symbol) : getDeclaredTypeOfSymbol(symbol).thisType;
            return getFlowTypeOfReference(node, type);
        }
        if ((0, ts_1.isSourceFile)(container)) {
            // look up in the source file's locals or exports
            if (container.commonJsModuleIndicator) {
                var fileSymbol = getSymbolOfDeclaration(container);
                return fileSymbol && getTypeOfSymbol(fileSymbol);
            }
            else if (container.externalModuleIndicator) {
                // TODO: Maybe issue a better error than 'object is possibly undefined'
                return undefinedType;
            }
            else if (includeGlobalThis) {
                return getTypeOfSymbol(globalThisSymbol);
            }
        }
    }
    function getExplicitThisType(node) {
        var container = (0, ts_1.getThisContainer)(node, /*includeArrowFunctions*/ false, /*includeClassComputedPropertyName*/ false);
        if ((0, ts_1.isFunctionLike)(container)) {
            var signature = getSignatureFromDeclaration(container);
            if (signature.thisParameter) {
                return getExplicitTypeOfSymbol(signature.thisParameter);
            }
        }
        if ((0, ts_1.isClassLike)(container.parent)) {
            var symbol = getSymbolOfDeclaration(container.parent);
            return (0, ts_1.isStatic)(container) ? getTypeOfSymbol(symbol) : getDeclaredTypeOfSymbol(symbol).thisType;
        }
    }
    function getClassNameFromPrototypeMethod(container) {
        // Check if it's the RHS of a x.prototype.y = function [name]() { .... }
        if (container.kind === 217 /* SyntaxKind.FunctionExpression */ &&
            (0, ts_1.isBinaryExpression)(container.parent) &&
            (0, ts_1.getAssignmentDeclarationKind)(container.parent) === 3 /* AssignmentDeclarationKind.PrototypeProperty */) {
            // Get the 'x' of 'x.prototype.y = container'
            return container.parent // x.prototype.y = container
                .left // x.prototype.y
                .expression // x.prototype
                .expression; // x
        }
        // x.prototype = { method() { } }
        else if (container.kind === 173 /* SyntaxKind.MethodDeclaration */ &&
            container.parent.kind === 209 /* SyntaxKind.ObjectLiteralExpression */ &&
            (0, ts_1.isBinaryExpression)(container.parent.parent) &&
            (0, ts_1.getAssignmentDeclarationKind)(container.parent.parent) === 6 /* AssignmentDeclarationKind.Prototype */) {
            return container.parent.parent.left.expression;
        }
        // x.prototype = { method: function() { } }
        else if (container.kind === 217 /* SyntaxKind.FunctionExpression */ &&
            container.parent.kind === 302 /* SyntaxKind.PropertyAssignment */ &&
            container.parent.parent.kind === 209 /* SyntaxKind.ObjectLiteralExpression */ &&
            (0, ts_1.isBinaryExpression)(container.parent.parent.parent) &&
            (0, ts_1.getAssignmentDeclarationKind)(container.parent.parent.parent) === 6 /* AssignmentDeclarationKind.Prototype */) {
            return container.parent.parent.parent.left.expression;
        }
        // Object.defineProperty(x, "method", { value: function() { } });
        // Object.defineProperty(x, "method", { set: (x: () => void) => void });
        // Object.defineProperty(x, "method", { get: () => function() { }) });
        else if (container.kind === 217 /* SyntaxKind.FunctionExpression */ &&
            (0, ts_1.isPropertyAssignment)(container.parent) &&
            (0, ts_1.isIdentifier)(container.parent.name) &&
            (container.parent.name.escapedText === "value" || container.parent.name.escapedText === "get" || container.parent.name.escapedText === "set") &&
            (0, ts_1.isObjectLiteralExpression)(container.parent.parent) &&
            (0, ts_1.isCallExpression)(container.parent.parent.parent) &&
            container.parent.parent.parent.arguments[2] === container.parent.parent &&
            (0, ts_1.getAssignmentDeclarationKind)(container.parent.parent.parent) === 9 /* AssignmentDeclarationKind.ObjectDefinePrototypeProperty */) {
            return container.parent.parent.parent.arguments[0].expression;
        }
        // Object.defineProperty(x, "method", { value() { } });
        // Object.defineProperty(x, "method", { set(x: () => void) {} });
        // Object.defineProperty(x, "method", { get() { return () => {} } });
        else if ((0, ts_1.isMethodDeclaration)(container) &&
            (0, ts_1.isIdentifier)(container.name) &&
            (container.name.escapedText === "value" || container.name.escapedText === "get" || container.name.escapedText === "set") &&
            (0, ts_1.isObjectLiteralExpression)(container.parent) &&
            (0, ts_1.isCallExpression)(container.parent.parent) &&
            container.parent.parent.arguments[2] === container.parent &&
            (0, ts_1.getAssignmentDeclarationKind)(container.parent.parent) === 9 /* AssignmentDeclarationKind.ObjectDefinePrototypeProperty */) {
            return container.parent.parent.arguments[0].expression;
        }
    }
    function getTypeForThisExpressionFromJSDoc(node) {
        var jsdocType = (0, ts_1.getJSDocType)(node);
        if (jsdocType && jsdocType.kind === 323 /* SyntaxKind.JSDocFunctionType */) {
            var jsDocFunctionType = jsdocType;
            if (jsDocFunctionType.parameters.length > 0 &&
                jsDocFunctionType.parameters[0].name &&
                jsDocFunctionType.parameters[0].name.escapedText === "this" /* InternalSymbolName.This */) {
                return getTypeFromTypeNode(jsDocFunctionType.parameters[0].type);
            }
        }
        var thisTag = (0, ts_1.getJSDocThisTag)(node);
        if (thisTag && thisTag.typeExpression) {
            return getTypeFromTypeNode(thisTag.typeExpression);
        }
    }
    function isInConstructorArgumentInitializer(node, constructorDecl) {
        return !!(0, ts_1.findAncestor)(node, function (n) { return (0, ts_1.isFunctionLikeDeclaration)(n) ? "quit" : n.kind === 168 /* SyntaxKind.Parameter */ && n.parent === constructorDecl; });
    }
    function checkSuperExpression(node) {
        var isCallExpression = node.parent.kind === 212 /* SyntaxKind.CallExpression */ && node.parent.expression === node;
        var immediateContainer = (0, ts_1.getSuperContainer)(node, /*stopOnFunctions*/ true);
        var container = immediateContainer;
        var needToCaptureLexicalThis = false;
        var inAsyncFunction = false;
        // adjust the container reference in case if super is used inside arrow functions with arbitrarily deep nesting
        if (!isCallExpression) {
            while (container && container.kind === 218 /* SyntaxKind.ArrowFunction */) {
                if ((0, ts_1.hasSyntacticModifier)(container, 512 /* ModifierFlags.Async */))
                    inAsyncFunction = true;
                container = (0, ts_1.getSuperContainer)(container, /*stopOnFunctions*/ true);
                needToCaptureLexicalThis = languageVersion < 2 /* ScriptTarget.ES2015 */;
            }
            if (container && (0, ts_1.hasSyntacticModifier)(container, 512 /* ModifierFlags.Async */))
                inAsyncFunction = true;
        }
        var nodeCheckFlag = 0;
        if (!container || !isLegalUsageOfSuperExpression(container)) {
            // issue more specific error if super is used in computed property name
            // class A { foo() { return "1" }}
            // class B {
            //     [super.foo()]() {}
            // }
            var current = (0, ts_1.findAncestor)(node, function (n) { return n === container ? "quit" : n.kind === 166 /* SyntaxKind.ComputedPropertyName */; });
            if (current && current.kind === 166 /* SyntaxKind.ComputedPropertyName */) {
                error(node, ts_1.Diagnostics.super_cannot_be_referenced_in_a_computed_property_name);
            }
            else if (isCallExpression) {
                error(node, ts_1.Diagnostics.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors);
            }
            else if (!container || !container.parent || !((0, ts_1.isClassLike)(container.parent) || container.parent.kind === 209 /* SyntaxKind.ObjectLiteralExpression */)) {
                error(node, ts_1.Diagnostics.super_can_only_be_referenced_in_members_of_derived_classes_or_object_literal_expressions);
            }
            else {
                error(node, ts_1.Diagnostics.super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class);
            }
            return errorType;
        }
        if (!isCallExpression && immediateContainer.kind === 175 /* SyntaxKind.Constructor */) {
            checkThisBeforeSuper(node, container, ts_1.Diagnostics.super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class);
        }
        if ((0, ts_1.isStatic)(container) || isCallExpression) {
            nodeCheckFlag = 32 /* NodeCheckFlags.SuperStatic */;
            if (!isCallExpression &&
                languageVersion >= 2 /* ScriptTarget.ES2015 */ && languageVersion <= 8 /* ScriptTarget.ES2021 */ &&
                ((0, ts_1.isPropertyDeclaration)(container) || (0, ts_1.isClassStaticBlockDeclaration)(container))) {
                // for `super.x` or `super[x]` in a static initializer, mark all enclosing
                // block scope containers so that we can report potential collisions with
                // `Reflect`.
                (0, ts_1.forEachEnclosingBlockScopeContainer)(node.parent, function (current) {
                    if (!(0, ts_1.isSourceFile)(current) || (0, ts_1.isExternalOrCommonJsModule)(current)) {
                        getNodeLinks(current).flags |= 8388608 /* NodeCheckFlags.ContainsSuperPropertyInStaticInitializer */;
                    }
                });
            }
        }
        else {
            nodeCheckFlag = 16 /* NodeCheckFlags.SuperInstance */;
        }
        getNodeLinks(node).flags |= nodeCheckFlag;
        // Due to how we emit async functions, we need to specialize the emit for an async method that contains a `super` reference.
        // This is due to the fact that we emit the body of an async function inside of a generator function. As generator
        // functions cannot reference `super`, we emit a helper inside of the method body, but outside of the generator. This helper
        // uses an arrow function, which is permitted to reference `super`.
        //
        // There are two primary ways we can access `super` from within an async method. The first is getting the value of a property
        // or indexed access on super, either as part of a right-hand-side expression or call expression. The second is when setting the value
        // of a property or indexed access, either as part of an assignment expression or destructuring assignment.
        //
        // The simplest case is reading a value, in which case we will emit something like the following:
        //
        //  // ts
        //  ...
        //  async asyncMethod() {
        //    let x = await super.asyncMethod();
        //    return x;
        //  }
        //  ...
        //
        //  // js
        //  ...
        //  asyncMethod() {
        //      const _super = Object.create(null, {
        //        asyncMethod: { get: () => super.asyncMethod },
        //      });
        //      return __awaiter(this, arguments, Promise, function *() {
        //          let x = yield _super.asyncMethod.call(this);
        //          return x;
        //      });
        //  }
        //  ...
        //
        // The more complex case is when we wish to assign a value, especially as part of a destructuring assignment. As both cases
        // are legal in ES6, but also likely less frequent, we only emit setters if there is an assignment:
        //
        //  // ts
        //  ...
        //  async asyncMethod(ar: Promise<any[]>) {
        //      [super.a, super.b] = await ar;
        //  }
        //  ...
        //
        //  // js
        //  ...
        //  asyncMethod(ar) {
        //      const _super = Object.create(null, {
        //        a: { get: () => super.a, set: (v) => super.a = v },
        //        b: { get: () => super.b, set: (v) => super.b = v }
        //      };
        //      return __awaiter(this, arguments, Promise, function *() {
        //          [_super.a, _super.b] = yield ar;
        //      });
        //  }
        //  ...
        //
        // Creating an object that has getter and setters instead of just an accessor function is required for destructuring assignments
        // as a call expression cannot be used as the target of a destructuring assignment while a property access can.
        //
        // For element access expressions (`super[x]`), we emit a generic helper that forwards the element access in both situations.
        if (container.kind === 173 /* SyntaxKind.MethodDeclaration */ && inAsyncFunction) {
            if ((0, ts_1.isSuperProperty)(node.parent) && (0, ts_1.isAssignmentTarget)(node.parent)) {
                getNodeLinks(container).flags |= 256 /* NodeCheckFlags.MethodWithSuperPropertyAssignmentInAsync */;
            }
            else {
                getNodeLinks(container).flags |= 128 /* NodeCheckFlags.MethodWithSuperPropertyAccessInAsync */;
            }
        }
        if (needToCaptureLexicalThis) {
            // call expressions are allowed only in constructors so they should always capture correct 'this'
            // super property access expressions can also appear in arrow functions -
            // in this case they should also use correct lexical this
            captureLexicalThis(node.parent, container);
        }
        if (container.parent.kind === 209 /* SyntaxKind.ObjectLiteralExpression */) {
            if (languageVersion < 2 /* ScriptTarget.ES2015 */) {
                error(node, ts_1.Diagnostics.super_is_only_allowed_in_members_of_object_literal_expressions_when_option_target_is_ES2015_or_higher);
                return errorType;
            }
            else {
                // for object literal assume that type of 'super' is 'any'
                return anyType;
            }
        }
        // at this point the only legal case for parent is ClassLikeDeclaration
        var classLikeDeclaration = container.parent;
        if (!(0, ts_1.getClassExtendsHeritageElement)(classLikeDeclaration)) {
            error(node, ts_1.Diagnostics.super_can_only_be_referenced_in_a_derived_class);
            return errorType;
        }
        var classType = getDeclaredTypeOfSymbol(getSymbolOfDeclaration(classLikeDeclaration));
        var baseClassType = classType && getBaseTypes(classType)[0];
        if (!baseClassType) {
            return errorType;
        }
        if (container.kind === 175 /* SyntaxKind.Constructor */ && isInConstructorArgumentInitializer(node, container)) {
            // issue custom error message for super property access in constructor arguments (to be aligned with old compiler)
            error(node, ts_1.Diagnostics.super_cannot_be_referenced_in_constructor_arguments);
            return errorType;
        }
        return nodeCheckFlag === 32 /* NodeCheckFlags.SuperStatic */
            ? getBaseConstructorTypeOfClass(classType)
            : getTypeWithThisArgument(baseClassType, classType.thisType);
        function isLegalUsageOfSuperExpression(container) {
            if (isCallExpression) {
                // TS 1.0 SPEC (April 2014): 4.8.1
                // Super calls are only permitted in constructors of derived classes
                return container.kind === 175 /* SyntaxKind.Constructor */;
            }
            else {
                // TS 1.0 SPEC (April 2014)
                // 'super' property access is allowed
                // - In a constructor, instance member function, instance member accessor, or instance member variable initializer where this references a derived class instance
                // - In a static member function or static member accessor
                // topmost container must be something that is directly nested in the class declaration\object literal expression
                if ((0, ts_1.isClassLike)(container.parent) || container.parent.kind === 209 /* SyntaxKind.ObjectLiteralExpression */) {
                    if ((0, ts_1.isStatic)(container)) {
                        return container.kind === 173 /* SyntaxKind.MethodDeclaration */ ||
                            container.kind === 172 /* SyntaxKind.MethodSignature */ ||
                            container.kind === 176 /* SyntaxKind.GetAccessor */ ||
                            container.kind === 177 /* SyntaxKind.SetAccessor */ ||
                            container.kind === 171 /* SyntaxKind.PropertyDeclaration */ ||
                            container.kind === 174 /* SyntaxKind.ClassStaticBlockDeclaration */;
                    }
                    else {
                        return container.kind === 173 /* SyntaxKind.MethodDeclaration */ ||
                            container.kind === 172 /* SyntaxKind.MethodSignature */ ||
                            container.kind === 176 /* SyntaxKind.GetAccessor */ ||
                            container.kind === 177 /* SyntaxKind.SetAccessor */ ||
                            container.kind === 171 /* SyntaxKind.PropertyDeclaration */ ||
                            container.kind === 170 /* SyntaxKind.PropertySignature */ ||
                            container.kind === 175 /* SyntaxKind.Constructor */;
                    }
                }
            }
            return false;
        }
    }
    function getContainingObjectLiteral(func) {
        return (func.kind === 173 /* SyntaxKind.MethodDeclaration */ ||
            func.kind === 176 /* SyntaxKind.GetAccessor */ ||
            func.kind === 177 /* SyntaxKind.SetAccessor */) && func.parent.kind === 209 /* SyntaxKind.ObjectLiteralExpression */ ? func.parent :
            func.kind === 217 /* SyntaxKind.FunctionExpression */ && func.parent.kind === 302 /* SyntaxKind.PropertyAssignment */ ? func.parent.parent :
                undefined;
    }
    function getThisTypeArgument(type) {
        return (0, ts_1.getObjectFlags)(type) & 4 /* ObjectFlags.Reference */ && type.target === globalThisType ? getTypeArguments(type)[0] : undefined;
    }
    function getThisTypeFromContextualType(type) {
        return mapType(type, function (t) {
            return t.flags & 2097152 /* TypeFlags.Intersection */ ? (0, ts_1.forEach)(t.types, getThisTypeArgument) : getThisTypeArgument(t);
        });
    }
    function getThisTypeOfObjectLiteralFromContextualType(containingLiteral, contextualType) {
        var literal = containingLiteral;
        var type = contextualType;
        while (type) {
            var thisType = getThisTypeFromContextualType(type);
            if (thisType) {
                return thisType;
            }
            if (literal.parent.kind !== 302 /* SyntaxKind.PropertyAssignment */) {
                break;
            }
            literal = literal.parent.parent;
            type = getApparentTypeOfContextualType(literal, /*contextFlags*/ undefined);
        }
    }
    function getContextualThisParameterType(func) {
        if (func.kind === 218 /* SyntaxKind.ArrowFunction */) {
            return undefined;
        }
        if (isContextSensitiveFunctionOrObjectLiteralMethod(func)) {
            var contextualSignature = getContextualSignature(func);
            if (contextualSignature) {
                var thisParameter = contextualSignature.thisParameter;
                if (thisParameter) {
                    return getTypeOfSymbol(thisParameter);
                }
            }
        }
        var inJs = (0, ts_1.isInJSFile)(func);
        if (noImplicitThis || inJs) {
            var containingLiteral = getContainingObjectLiteral(func);
            if (containingLiteral) {
                // We have an object literal method. Check if the containing object literal has a contextual type
                // that includes a ThisType<T>. If so, T is the contextual type for 'this'. We continue looking in
                // any directly enclosing object literals.
                var contextualType = getApparentTypeOfContextualType(containingLiteral, /*contextFlags*/ undefined);
                var thisType = getThisTypeOfObjectLiteralFromContextualType(containingLiteral, contextualType);
                if (thisType) {
                    return instantiateType(thisType, getMapperFromContext(getInferenceContext(containingLiteral)));
                }
                // There was no contextual ThisType<T> for the containing object literal, so the contextual type
                // for 'this' is the non-null form of the contextual type for the containing object literal or
                // the type of the object literal itself.
                return getWidenedType(contextualType ? getNonNullableType(contextualType) : checkExpressionCached(containingLiteral));
            }
            // In an assignment of the form 'obj.xxx = function(...)' or 'obj[xxx] = function(...)', the
            // contextual type for 'this' is 'obj'.
            var parent_11 = (0, ts_1.walkUpParenthesizedExpressions)(func.parent);
            if (parent_11.kind === 225 /* SyntaxKind.BinaryExpression */ && parent_11.operatorToken.kind === 64 /* SyntaxKind.EqualsToken */) {
                var target = parent_11.left;
                if ((0, ts_1.isAccessExpression)(target)) {
                    var expression = target.expression;
                    // Don't contextually type `this` as `exports` in `exports.Point = function(x, y) { this.x = x; this.y = y; }`
                    if (inJs && (0, ts_1.isIdentifier)(expression)) {
                        var sourceFile = (0, ts_1.getSourceFileOfNode)(parent_11);
                        if (sourceFile.commonJsModuleIndicator && getResolvedSymbol(expression) === sourceFile.symbol) {
                            return undefined;
                        }
                    }
                    return getWidenedType(checkExpressionCached(expression));
                }
            }
        }
        return undefined;
    }
    // Return contextual type of parameter or undefined if no contextual type is available
    function getContextuallyTypedParameterType(parameter) {
        var func = parameter.parent;
        if (!isContextSensitiveFunctionOrObjectLiteralMethod(func)) {
            return undefined;
        }
        var iife = (0, ts_1.getImmediatelyInvokedFunctionExpression)(func);
        if (iife && iife.arguments) {
            var args = getEffectiveCallArguments(iife);
            var indexOfParameter = func.parameters.indexOf(parameter);
            if (parameter.dotDotDotToken) {
                return getSpreadArgumentType(args, indexOfParameter, args.length, anyType, /*context*/ undefined, 0 /* CheckMode.Normal */);
            }
            var links = getNodeLinks(iife);
            var cached = links.resolvedSignature;
            links.resolvedSignature = anySignature;
            var type = indexOfParameter < args.length ?
                getWidenedLiteralType(checkExpression(args[indexOfParameter])) :
                parameter.initializer ? undefined : undefinedWideningType;
            links.resolvedSignature = cached;
            return type;
        }
        var contextualSignature = getContextualSignature(func);
        if (contextualSignature) {
            var index = func.parameters.indexOf(parameter) - ((0, ts_1.getThisParameter)(func) ? 1 : 0);
            return parameter.dotDotDotToken && (0, ts_1.lastOrUndefined)(func.parameters) === parameter ?
                getRestTypeAtPosition(contextualSignature, index) :
                tryGetTypeAtPosition(contextualSignature, index);
        }
    }
    function getContextualTypeForVariableLikeDeclaration(declaration, contextFlags) {
        var typeNode = (0, ts_1.getEffectiveTypeAnnotationNode)(declaration) || ((0, ts_1.isInJSFile)(declaration) ? (0, ts_1.tryGetJSDocSatisfiesTypeNode)(declaration) : undefined);
        if (typeNode) {
            return getTypeFromTypeNode(typeNode);
        }
        switch (declaration.kind) {
            case 168 /* SyntaxKind.Parameter */:
                return getContextuallyTypedParameterType(declaration);
            case 207 /* SyntaxKind.BindingElement */:
                return getContextualTypeForBindingElement(declaration, contextFlags);
            case 171 /* SyntaxKind.PropertyDeclaration */:
                if ((0, ts_1.isStatic)(declaration)) {
                    return getContextualTypeForStaticPropertyDeclaration(declaration, contextFlags);
                }
            // By default, do nothing and return undefined - only the above cases have context implied by a parent
        }
    }
    function getContextualTypeForBindingElement(declaration, contextFlags) {
        var parent = declaration.parent.parent;
        var name = declaration.propertyName || declaration.name;
        var parentType = getContextualTypeForVariableLikeDeclaration(parent, contextFlags) ||
            parent.kind !== 207 /* SyntaxKind.BindingElement */ && parent.initializer && checkDeclarationInitializer(parent, declaration.dotDotDotToken ? 64 /* CheckMode.RestBindingElement */ : 0 /* CheckMode.Normal */);
        if (!parentType || (0, ts_1.isBindingPattern)(name) || (0, ts_1.isComputedNonLiteralName)(name))
            return undefined;
        if (parent.name.kind === 206 /* SyntaxKind.ArrayBindingPattern */) {
            var index = (0, ts_1.indexOfNode)(declaration.parent.elements, declaration);
            if (index < 0)
                return undefined;
            return getContextualTypeForElementExpression(parentType, index);
        }
        var nameType = getLiteralTypeFromPropertyName(name);
        if (isTypeUsableAsPropertyName(nameType)) {
            var text = getPropertyNameFromType(nameType);
            return getTypeOfPropertyOfType(parentType, text);
        }
    }
    function getContextualTypeForStaticPropertyDeclaration(declaration, contextFlags) {
        var parentType = (0, ts_1.isExpression)(declaration.parent) && getContextualType(declaration.parent, contextFlags);
        if (!parentType)
            return undefined;
        return getTypeOfPropertyOfContextualType(parentType, getSymbolOfDeclaration(declaration).escapedName);
    }
    // In a variable, parameter or property declaration with a type annotation,
    //   the contextual type of an initializer expression is the type of the variable, parameter or property.
    // Otherwise, in a parameter declaration of a contextually typed function expression,
    //   the contextual type of an initializer expression is the contextual type of the parameter.
    // Otherwise, in a variable or parameter declaration with a binding pattern name,
    //   the contextual type of an initializer expression is the type implied by the binding pattern.
    // Otherwise, in a binding pattern inside a variable or parameter declaration,
    //   the contextual type of an initializer expression is the type annotation of the containing declaration, if present.
    function getContextualTypeForInitializerExpression(node, contextFlags) {
        var declaration = node.parent;
        if ((0, ts_1.hasInitializer)(declaration) && node === declaration.initializer) {
            var result = getContextualTypeForVariableLikeDeclaration(declaration, contextFlags);
            if (result) {
                return result;
            }
            if (!(contextFlags & 8 /* ContextFlags.SkipBindingPatterns */) && (0, ts_1.isBindingPattern)(declaration.name) && declaration.name.elements.length > 0) {
                return getTypeFromBindingPattern(declaration.name, /*includePatternInType*/ true, /*reportErrors*/ false);
            }
        }
        return undefined;
    }
    function getContextualTypeForReturnExpression(node, contextFlags) {
        var func = (0, ts_1.getContainingFunction)(node);
        if (func) {
            var contextualReturnType = getContextualReturnType(func, contextFlags);
            if (contextualReturnType) {
                var functionFlags = (0, ts_1.getFunctionFlags)(func);
                if (functionFlags & 1 /* FunctionFlags.Generator */) { // Generator or AsyncGenerator function
                    var isAsyncGenerator_1 = (functionFlags & 2 /* FunctionFlags.Async */) !== 0;
                    if (contextualReturnType.flags & 1048576 /* TypeFlags.Union */) {
                        contextualReturnType = filterType(contextualReturnType, function (type) { return !!getIterationTypeOfGeneratorFunctionReturnType(1 /* IterationTypeKind.Return */, type, isAsyncGenerator_1); });
                    }
                    var iterationReturnType = getIterationTypeOfGeneratorFunctionReturnType(1 /* IterationTypeKind.Return */, contextualReturnType, (functionFlags & 2 /* FunctionFlags.Async */) !== 0);
                    if (!iterationReturnType) {
                        return undefined;
                    }
                    contextualReturnType = iterationReturnType;
                    // falls through to unwrap Promise for AsyncGenerators
                }
                if (functionFlags & 2 /* FunctionFlags.Async */) { // Async function or AsyncGenerator function
                    // Get the awaited type without the `Awaited<T>` alias
                    var contextualAwaitedType = mapType(contextualReturnType, getAwaitedTypeNoAlias);
                    return contextualAwaitedType && getUnionType([contextualAwaitedType, createPromiseLikeType(contextualAwaitedType)]);
                }
                return contextualReturnType; // Regular function or Generator function
            }
        }
        return undefined;
    }
    function getContextualTypeForAwaitOperand(node, contextFlags) {
        var contextualType = getContextualType(node, contextFlags);
        if (contextualType) {
            var contextualAwaitedType = getAwaitedTypeNoAlias(contextualType);
            return contextualAwaitedType && getUnionType([contextualAwaitedType, createPromiseLikeType(contextualAwaitedType)]);
        }
        return undefined;
    }
    function getContextualTypeForYieldOperand(node, contextFlags) {
        var func = (0, ts_1.getContainingFunction)(node);
        if (func) {
            var functionFlags = (0, ts_1.getFunctionFlags)(func);
            var contextualReturnType = getContextualReturnType(func, contextFlags);
            if (contextualReturnType) {
                var isAsyncGenerator_2 = (functionFlags & 2 /* FunctionFlags.Async */) !== 0;
                if (!node.asteriskToken && contextualReturnType.flags & 1048576 /* TypeFlags.Union */) {
                    contextualReturnType = filterType(contextualReturnType, function (type) { return !!getIterationTypeOfGeneratorFunctionReturnType(1 /* IterationTypeKind.Return */, type, isAsyncGenerator_2); });
                }
                return node.asteriskToken
                    ? contextualReturnType
                    : getIterationTypeOfGeneratorFunctionReturnType(0 /* IterationTypeKind.Yield */, contextualReturnType, isAsyncGenerator_2);
            }
        }
        return undefined;
    }
    function isInParameterInitializerBeforeContainingFunction(node) {
        var inBindingInitializer = false;
        while (node.parent && !(0, ts_1.isFunctionLike)(node.parent)) {
            if ((0, ts_1.isParameter)(node.parent) && (inBindingInitializer || node.parent.initializer === node)) {
                return true;
            }
            if ((0, ts_1.isBindingElement)(node.parent) && node.parent.initializer === node) {
                inBindingInitializer = true;
            }
            node = node.parent;
        }
        return false;
    }
    function getContextualIterationType(kind, functionDecl) {
        var isAsync = !!((0, ts_1.getFunctionFlags)(functionDecl) & 2 /* FunctionFlags.Async */);
        var contextualReturnType = getContextualReturnType(functionDecl, /*contextFlags*/ undefined);
        if (contextualReturnType) {
            return getIterationTypeOfGeneratorFunctionReturnType(kind, contextualReturnType, isAsync)
                || undefined;
        }
        return undefined;
    }
    function getContextualReturnType(functionDecl, contextFlags) {
        // If the containing function has a return type annotation, is a constructor, or is a get accessor whose
        // corresponding set accessor has a type annotation, return statements in the function are contextually typed
        var returnType = getReturnTypeFromAnnotation(functionDecl);
        if (returnType) {
            return returnType;
        }
        // Otherwise, if the containing function is contextually typed by a function type with exactly one call signature
        // and that call signature is non-generic, return statements are contextually typed by the return type of the signature
        var signature = getContextualSignatureForFunctionLikeDeclaration(functionDecl);
        if (signature && !isResolvingReturnTypeOfSignature(signature)) {
            return getReturnTypeOfSignature(signature);
        }
        var iife = (0, ts_1.getImmediatelyInvokedFunctionExpression)(functionDecl);
        if (iife) {
            return getContextualType(iife, contextFlags);
        }
        return undefined;
    }
    // In a typed function call, an argument or substitution expression is contextually typed by the type of the corresponding parameter.
    function getContextualTypeForArgument(callTarget, arg) {
        var args = getEffectiveCallArguments(callTarget);
        var argIndex = args.indexOf(arg); // -1 for e.g. the expression of a CallExpression, or the tag of a TaggedTemplateExpression
        return argIndex === -1 ? undefined : getContextualTypeForArgumentAtIndex(callTarget, argIndex);
    }
    function getContextualTypeForArgumentAtIndex(callTarget, argIndex) {
        if ((0, ts_1.isImportCall)(callTarget)) {
            return argIndex === 0 ? stringType :
                argIndex === 1 ? getGlobalImportCallOptionsType(/*reportErrors*/ false) :
                    anyType;
        }
        // If we're already in the process of resolving the given signature, don't resolve again as
        // that could cause infinite recursion. Instead, return anySignature.
        var signature = getNodeLinks(callTarget).resolvedSignature === resolvingSignature ? resolvingSignature : getResolvedSignature(callTarget);
        if ((0, ts_1.isJsxOpeningLikeElement)(callTarget) && argIndex === 0) {
            return getEffectiveFirstArgumentForJsxSignature(signature, callTarget);
        }
        var restIndex = signature.parameters.length - 1;
        return signatureHasRestParameter(signature) && argIndex >= restIndex ?
            getIndexedAccessType(getTypeOfSymbol(signature.parameters[restIndex]), getNumberLiteralType(argIndex - restIndex), 256 /* AccessFlags.Contextual */) :
            getTypeAtPosition(signature, argIndex);
    }
    function getContextualTypeForDecorator(decorator) {
        var signature = getDecoratorCallSignature(decorator);
        return signature ? getOrCreateTypeFromSignature(signature) : undefined;
    }
    function getContextualTypeForSubstitutionExpression(template, substitutionExpression) {
        if (template.parent.kind === 214 /* SyntaxKind.TaggedTemplateExpression */) {
            return getContextualTypeForArgument(template.parent, substitutionExpression);
        }
        return undefined;
    }
    function getContextualTypeForBinaryOperand(node, contextFlags) {
        var binaryExpression = node.parent;
        var left = binaryExpression.left, operatorToken = binaryExpression.operatorToken, right = binaryExpression.right;
        switch (operatorToken.kind) {
            case 64 /* SyntaxKind.EqualsToken */:
            case 77 /* SyntaxKind.AmpersandAmpersandEqualsToken */:
            case 76 /* SyntaxKind.BarBarEqualsToken */:
            case 78 /* SyntaxKind.QuestionQuestionEqualsToken */:
                return node === right ? getContextualTypeForAssignmentDeclaration(binaryExpression) : undefined;
            case 57 /* SyntaxKind.BarBarToken */:
            case 61 /* SyntaxKind.QuestionQuestionToken */:
                // When an || expression has a contextual type, the operands are contextually typed by that type, except
                // when that type originates in a binding pattern, the right operand is contextually typed by the type of
                // the left operand. When an || expression has no contextual type, the right operand is contextually typed
                // by the type of the left operand, except for the special case of Javascript declarations of the form
                // `namespace.prop = namespace.prop || {}`.
                var type = getContextualType(binaryExpression, contextFlags);
                return node === right && (type && type.pattern || !type && !(0, ts_1.isDefaultedExpandoInitializer)(binaryExpression)) ?
                    getTypeOfExpression(left) : type;
            case 56 /* SyntaxKind.AmpersandAmpersandToken */:
            case 28 /* SyntaxKind.CommaToken */:
                return node === right ? getContextualType(binaryExpression, contextFlags) : undefined;
            default:
                return undefined;
        }
    }
    /**
     * Try to find a resolved symbol for an expression without also resolving its type, as
     * getSymbolAtLocation would (as that could be reentrant into contextual typing)
     */
    function getSymbolForExpression(e) {
        if ((0, ts_1.canHaveSymbol)(e) && e.symbol) {
            return e.symbol;
        }
        if ((0, ts_1.isIdentifier)(e)) {
            return getResolvedSymbol(e);
        }
        if ((0, ts_1.isPropertyAccessExpression)(e)) {
            var lhsType = getTypeOfExpression(e.expression);
            return (0, ts_1.isPrivateIdentifier)(e.name) ? tryGetPrivateIdentifierPropertyOfType(lhsType, e.name) : getPropertyOfType(lhsType, e.name.escapedText);
        }
        if ((0, ts_1.isElementAccessExpression)(e)) {
            var propType = checkExpressionCached(e.argumentExpression);
            if (!isTypeUsableAsPropertyName(propType)) {
                return undefined;
            }
            var lhsType = getTypeOfExpression(e.expression);
            return getPropertyOfType(lhsType, getPropertyNameFromType(propType));
        }
        return undefined;
        function tryGetPrivateIdentifierPropertyOfType(type, id) {
            var lexicallyScopedSymbol = lookupSymbolForPrivateIdentifierDeclaration(id.escapedText, id);
            return lexicallyScopedSymbol && getPrivateIdentifierPropertyOfType(type, lexicallyScopedSymbol);
        }
    }
    // In an assignment expression, the right operand is contextually typed by the type of the left operand.
    // Don't do this for assignment declarations unless there is a type tag on the assignment, to avoid circularity from checking the right operand.
    function getContextualTypeForAssignmentDeclaration(binaryExpression) {
        var _a, _b;
        var kind = (0, ts_1.getAssignmentDeclarationKind)(binaryExpression);
        switch (kind) {
            case 0 /* AssignmentDeclarationKind.None */:
            case 4 /* AssignmentDeclarationKind.ThisProperty */:
                var lhsSymbol = getSymbolForExpression(binaryExpression.left);
                var decl = lhsSymbol && lhsSymbol.valueDeclaration;
                // Unannotated, uninitialized property declarations have a type implied by their usage in the constructor.
                // We avoid calling back into `getTypeOfExpression` and reentering contextual typing to avoid a bogus circularity error in that case.
                if (decl && ((0, ts_1.isPropertyDeclaration)(decl) || (0, ts_1.isPropertySignature)(decl))) {
                    var overallAnnotation = (0, ts_1.getEffectiveTypeAnnotationNode)(decl);
                    return (overallAnnotation && instantiateType(getTypeFromTypeNode(overallAnnotation), getSymbolLinks(lhsSymbol).mapper)) ||
                        ((0, ts_1.isPropertyDeclaration)(decl) ? decl.initializer && getTypeOfExpression(binaryExpression.left) : undefined);
                }
                if (kind === 0 /* AssignmentDeclarationKind.None */) {
                    return getTypeOfExpression(binaryExpression.left);
                }
                return getContextualTypeForThisPropertyAssignment(binaryExpression);
            case 5 /* AssignmentDeclarationKind.Property */:
                if (isPossiblyAliasedThisProperty(binaryExpression, kind)) {
                    return getContextualTypeForThisPropertyAssignment(binaryExpression);
                }
                // If `binaryExpression.left` was assigned a symbol, then this is a new declaration; otherwise it is an assignment to an existing declaration.
                // See `bindStaticPropertyAssignment` in `binder.ts`.
                else if (!(0, ts_1.canHaveSymbol)(binaryExpression.left) || !binaryExpression.left.symbol) {
                    return getTypeOfExpression(binaryExpression.left);
                }
                else {
                    var decl_1 = binaryExpression.left.symbol.valueDeclaration;
                    if (!decl_1) {
                        return undefined;
                    }
                    var lhs = (0, ts_1.cast)(binaryExpression.left, ts_1.isAccessExpression);
                    var overallAnnotation = (0, ts_1.getEffectiveTypeAnnotationNode)(decl_1);
                    if (overallAnnotation) {
                        return getTypeFromTypeNode(overallAnnotation);
                    }
                    else if ((0, ts_1.isIdentifier)(lhs.expression)) {
                        var id = lhs.expression;
                        var parentSymbol = resolveName(id, id.escapedText, 111551 /* SymbolFlags.Value */, /*nameNotFoundMessage*/ undefined, id.escapedText, /*isUse*/ true);
                        if (parentSymbol) {
                            var annotated_1 = parentSymbol.valueDeclaration && (0, ts_1.getEffectiveTypeAnnotationNode)(parentSymbol.valueDeclaration);
                            if (annotated_1) {
                                var nameStr = (0, ts_1.getElementOrPropertyAccessName)(lhs);
                                if (nameStr !== undefined) {
                                    return getTypeOfPropertyOfContextualType(getTypeFromTypeNode(annotated_1), nameStr);
                                }
                            }
                            return undefined;
                        }
                    }
                    return (0, ts_1.isInJSFile)(decl_1) || decl_1 === binaryExpression.left ? undefined : getTypeOfExpression(binaryExpression.left);
                }
            case 1 /* AssignmentDeclarationKind.ExportsProperty */:
            case 6 /* AssignmentDeclarationKind.Prototype */:
            case 3 /* AssignmentDeclarationKind.PrototypeProperty */:
            case 2 /* AssignmentDeclarationKind.ModuleExports */:
                var valueDeclaration = void 0;
                if (kind !== 2 /* AssignmentDeclarationKind.ModuleExports */) {
                    valueDeclaration = (0, ts_1.canHaveSymbol)(binaryExpression.left) ? (_a = binaryExpression.left.symbol) === null || _a === void 0 ? void 0 : _a.valueDeclaration : undefined;
                }
                valueDeclaration || (valueDeclaration = (_b = binaryExpression.symbol) === null || _b === void 0 ? void 0 : _b.valueDeclaration);
                var annotated = valueDeclaration && (0, ts_1.getEffectiveTypeAnnotationNode)(valueDeclaration);
                return annotated ? getTypeFromTypeNode(annotated) : undefined;
            case 7 /* AssignmentDeclarationKind.ObjectDefinePropertyValue */:
            case 8 /* AssignmentDeclarationKind.ObjectDefinePropertyExports */:
            case 9 /* AssignmentDeclarationKind.ObjectDefinePrototypeProperty */:
                return ts_1.Debug.fail("Does not apply");
            default:
                return ts_1.Debug.assertNever(kind);
        }
    }
    function isPossiblyAliasedThisProperty(declaration, kind) {
        if (kind === void 0) { kind = (0, ts_1.getAssignmentDeclarationKind)(declaration); }
        if (kind === 4 /* AssignmentDeclarationKind.ThisProperty */) {
            return true;
        }
        if (!(0, ts_1.isInJSFile)(declaration) || kind !== 5 /* AssignmentDeclarationKind.Property */ || !(0, ts_1.isIdentifier)(declaration.left.expression)) {
            return false;
        }
        var name = declaration.left.expression.escapedText;
        var symbol = resolveName(declaration.left, name, 111551 /* SymbolFlags.Value */, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ true, /*excludeGlobals*/ true);
        return (0, ts_1.isThisInitializedDeclaration)(symbol === null || symbol === void 0 ? void 0 : symbol.valueDeclaration);
    }
    function getContextualTypeForThisPropertyAssignment(binaryExpression) {
        if (!binaryExpression.symbol)
            return getTypeOfExpression(binaryExpression.left);
        if (binaryExpression.symbol.valueDeclaration) {
            var annotated = (0, ts_1.getEffectiveTypeAnnotationNode)(binaryExpression.symbol.valueDeclaration);
            if (annotated) {
                var type = getTypeFromTypeNode(annotated);
                if (type) {
                    return type;
                }
            }
        }
        var thisAccess = (0, ts_1.cast)(binaryExpression.left, ts_1.isAccessExpression);
        if (!(0, ts_1.isObjectLiteralMethod)((0, ts_1.getThisContainer)(thisAccess.expression, /*includeArrowFunctions*/ false, /*includeClassComputedPropertyName*/ false))) {
            return undefined;
        }
        var thisType = checkThisExpression(thisAccess.expression);
        var nameStr = (0, ts_1.getElementOrPropertyAccessName)(thisAccess);
        return nameStr !== undefined && getTypeOfPropertyOfContextualType(thisType, nameStr) || undefined;
    }
    function isCircularMappedProperty(symbol) {
        return !!((0, ts_1.getCheckFlags)(symbol) & 262144 /* CheckFlags.Mapped */ && !symbol.links.type && findResolutionCycleStartIndex(symbol, 0 /* TypeSystemPropertyName.Type */) >= 0);
    }
    function getTypeOfPropertyOfContextualType(type, name, nameType) {
        return mapType(type, function (t) {
            var _a;
            if (isGenericMappedType(t) && !t.declaration.nameType) {
                var constraint = getConstraintTypeFromMappedType(t);
                var constraintOfConstraint = getBaseConstraintOfType(constraint) || constraint;
                var propertyNameType = nameType || getStringLiteralType((0, ts_1.unescapeLeadingUnderscores)(name));
                if (isTypeAssignableTo(propertyNameType, constraintOfConstraint)) {
                    return substituteIndexedMappedType(t, propertyNameType);
                }
            }
            else if (t.flags & 3670016 /* TypeFlags.StructuredType */) {
                var prop = getPropertyOfType(t, name);
                if (prop) {
                    return isCircularMappedProperty(prop) ? undefined : getTypeOfSymbol(prop);
                }
                if (isTupleType(t) && (0, ts_1.isNumericLiteralName)(name) && +name >= 0) {
                    var restType = getElementTypeOfSliceOfTupleType(t, t.target.fixedLength, /*endSkipCount*/ 0, /*writing*/ false, /*noReductions*/ true);
                    if (restType) {
                        return restType;
                    }
                }
                return (_a = findApplicableIndexInfo(getIndexInfosOfStructuredType(t), nameType || getStringLiteralType((0, ts_1.unescapeLeadingUnderscores)(name)))) === null || _a === void 0 ? void 0 : _a.type;
            }
            return undefined;
        }, /*noReductions*/ true);
    }
    // In an object literal contextually typed by a type T, the contextual type of a property assignment is the type of
    // the matching property in T, if one exists. Otherwise, it is the type of the numeric index signature in T, if one
    // exists. Otherwise, it is the type of the string index signature in T, if one exists.
    function getContextualTypeForObjectLiteralMethod(node, contextFlags) {
        ts_1.Debug.assert((0, ts_1.isObjectLiteralMethod)(node));
        if (node.flags & 33554432 /* NodeFlags.InWithStatement */) {
            // We cannot answer semantic questions within a with block, do not proceed any further
            return undefined;
        }
        return getContextualTypeForObjectLiteralElement(node, contextFlags);
    }
    function getContextualTypeForObjectLiteralElement(element, contextFlags) {
        var objectLiteral = element.parent;
        var propertyAssignmentType = (0, ts_1.isPropertyAssignment)(element) && getContextualTypeForVariableLikeDeclaration(element, contextFlags);
        if (propertyAssignmentType) {
            return propertyAssignmentType;
        }
        var type = getApparentTypeOfContextualType(objectLiteral, contextFlags);
        if (type) {
            if (hasBindableName(element)) {
                // For a (non-symbol) computed property, there is no reason to look up the name
                // in the type. It will just be "__computed", which does not appear in any
                // SymbolTable.
                var symbol = getSymbolOfDeclaration(element);
                return getTypeOfPropertyOfContextualType(type, symbol.escapedName, getSymbolLinks(symbol).nameType);
            }
            if ((0, ts_1.hasDynamicName)(element)) {
                var name_27 = (0, ts_1.getNameOfDeclaration)(element);
                if (name_27 && (0, ts_1.isComputedPropertyName)(name_27)) {
                    var exprType = checkExpression(name_27.expression);
                    var propType = isTypeUsableAsPropertyName(exprType) && getTypeOfPropertyOfContextualType(type, getPropertyNameFromType(exprType));
                    if (propType) {
                        return propType;
                    }
                }
            }
            if (element.name) {
                var nameType_2 = getLiteralTypeFromPropertyName(element.name);
                // We avoid calling getApplicableIndexInfo here because it performs potentially expensive intersection reduction.
                return mapType(type, function (t) { var _a; return (_a = findApplicableIndexInfo(getIndexInfosOfStructuredType(t), nameType_2)) === null || _a === void 0 ? void 0 : _a.type; }, /*noReductions*/ true);
            }
        }
        return undefined;
    }
    function getSpreadIndices(elements) {
        var first, last;
        for (var i = 0; i < elements.length; i++) {
            if ((0, ts_1.isSpreadElement)(elements[i])) {
                first !== null && first !== void 0 ? first : (first = i);
                last = i;
            }
        }
        return { first: first, last: last };
    }
    function getContextualTypeForElementExpression(type, index, length, firstSpreadIndex, lastSpreadIndex) {
        return type && mapType(type, function (t) {
            if (isTupleType(t)) {
                // If index is before any spread element and within the fixed part of the contextual tuple type, return
                // the type of the contextual tuple element.
                if ((firstSpreadIndex === undefined || index < firstSpreadIndex) && index < t.target.fixedLength) {
                    return getTypeArguments(t)[index];
                }
                // When the length is known and the index is after all spread elements we compute the offset from the element
                // to the end and the number of ending fixed elements in the contextual tuple type.
                var offset = length !== undefined && (lastSpreadIndex === undefined || index > lastSpreadIndex) ? length - index : 0;
                var fixedEndLength = offset > 0 && t.target.hasRestElement ? getEndElementCount(t.target, 3 /* ElementFlags.Fixed */) : 0;
                // If the offset is within the ending fixed part of the contextual tuple type, return the type of the contextual
                // tuple element.
                if (offset > 0 && offset <= fixedEndLength) {
                    return getTypeArguments(t)[getTypeReferenceArity(t) - offset];
                }
                // Return a union of the possible contextual element types with no subtype reduction.
                return getElementTypeOfSliceOfTupleType(t, firstSpreadIndex === undefined ? t.target.fixedLength : Math.min(t.target.fixedLength, firstSpreadIndex), length === undefined || lastSpreadIndex === undefined ? fixedEndLength : Math.min(fixedEndLength, length - lastSpreadIndex), 
                /*writing*/ false, /*noReductions*/ true);
            }
            // If element index is known and a contextual property with that name exists, return it. Otherwise return the
            // iterated or element type of the contextual type.
            return (!firstSpreadIndex || index < firstSpreadIndex) && getTypeOfPropertyOfContextualType(t, "" + index) ||
                getIteratedTypeOrElementType(1 /* IterationUse.Element */, t, undefinedType, /*errorNode*/ undefined, /*checkAssignability*/ false);
        }, /*noReductions*/ true);
    }
    // In a contextually typed conditional expression, the true/false expressions are contextually typed by the same type.
    function getContextualTypeForConditionalOperand(node, contextFlags) {
        var conditional = node.parent;
        return node === conditional.whenTrue || node === conditional.whenFalse ? getContextualType(conditional, contextFlags) : undefined;
    }
    function getContextualTypeForChildJsxExpression(node, child, contextFlags) {
        var attributesType = getApparentTypeOfContextualType(node.openingElement.attributes, contextFlags);
        // JSX expression is in children of JSX Element, we will look for an "children" attribute (we get the name from JSX.ElementAttributesProperty)
        var jsxChildrenPropertyName = getJsxElementChildrenPropertyName(getJsxNamespaceAt(node));
        if (!(attributesType && !isTypeAny(attributesType) && jsxChildrenPropertyName && jsxChildrenPropertyName !== "")) {
            return undefined;
        }
        var realChildren = (0, ts_1.getSemanticJsxChildren)(node.children);
        var childIndex = realChildren.indexOf(child);
        var childFieldType = getTypeOfPropertyOfContextualType(attributesType, jsxChildrenPropertyName);
        return childFieldType && (realChildren.length === 1 ? childFieldType : mapType(childFieldType, function (t) {
            if (isArrayLikeType(t)) {
                return getIndexedAccessType(t, getNumberLiteralType(childIndex));
            }
            else {
                return t;
            }
        }, /*noReductions*/ true));
    }
    function getContextualTypeForJsxExpression(node, contextFlags) {
        var exprParent = node.parent;
        return (0, ts_1.isJsxAttributeLike)(exprParent)
            ? getContextualType(node, contextFlags)
            : (0, ts_1.isJsxElement)(exprParent)
                ? getContextualTypeForChildJsxExpression(exprParent, node, contextFlags)
                : undefined;
    }
    function getContextualTypeForJsxAttribute(attribute, contextFlags) {
        // When we trying to resolve JsxOpeningLikeElement as a stateless function element, we will already give its attributes a contextual type
        // which is a type of the parameter of the signature we are trying out.
        // If there is no contextual type (e.g. we are trying to resolve stateful component), get attributes type from resolving element's tagName
        if ((0, ts_1.isJsxAttribute)(attribute)) {
            var attributesType = getApparentTypeOfContextualType(attribute.parent, contextFlags);
            if (!attributesType || isTypeAny(attributesType)) {
                return undefined;
            }
            return getTypeOfPropertyOfContextualType(attributesType, (0, ts_1.getEscapedTextOfJsxAttributeName)(attribute.name));
        }
        else {
            return getContextualType(attribute.parent, contextFlags);
        }
    }
    // Return true if the given expression is possibly a discriminant value. We limit the kinds of
    // expressions we check to those that don't depend on their contextual type in order not to cause
    // recursive (and possibly infinite) invocations of getContextualType.
    function isPossiblyDiscriminantValue(node) {
        switch (node.kind) {
            case 11 /* SyntaxKind.StringLiteral */:
            case 9 /* SyntaxKind.NumericLiteral */:
            case 10 /* SyntaxKind.BigIntLiteral */:
            case 15 /* SyntaxKind.NoSubstitutionTemplateLiteral */:
            case 227 /* SyntaxKind.TemplateExpression */:
            case 112 /* SyntaxKind.TrueKeyword */:
            case 97 /* SyntaxKind.FalseKeyword */:
            case 106 /* SyntaxKind.NullKeyword */:
            case 80 /* SyntaxKind.Identifier */:
            case 157 /* SyntaxKind.UndefinedKeyword */:
                return true;
            case 210 /* SyntaxKind.PropertyAccessExpression */:
            case 216 /* SyntaxKind.ParenthesizedExpression */:
                return isPossiblyDiscriminantValue(node.expression);
            case 293 /* SyntaxKind.JsxExpression */:
                return !node.expression || isPossiblyDiscriminantValue(node.expression);
        }
        return false;
    }
    function discriminateContextualTypeByObjectMembers(node, contextualType) {
        return getMatchingUnionConstituentForObjectLiteral(contextualType, node) || discriminateTypeByDiscriminableItems(contextualType, (0, ts_1.concatenate)((0, ts_1.map)((0, ts_1.filter)(node.properties, function (p) { return !!p.symbol && p.kind === 302 /* SyntaxKind.PropertyAssignment */ && isPossiblyDiscriminantValue(p.initializer) && isDiscriminantProperty(contextualType, p.symbol.escapedName); }), function (prop) { return [function () { return getContextFreeTypeOfExpression(prop.initializer); }, prop.symbol.escapedName]; }), (0, ts_1.map)((0, ts_1.filter)(getPropertiesOfType(contextualType), function (s) { var _a; return !!(s.flags & 16777216 /* SymbolFlags.Optional */) && !!((_a = node === null || node === void 0 ? void 0 : node.symbol) === null || _a === void 0 ? void 0 : _a.members) && !node.symbol.members.has(s.escapedName) && isDiscriminantProperty(contextualType, s.escapedName); }), function (s) { return [function () { return undefinedType; }, s.escapedName]; })), isTypeAssignableTo);
    }
    function discriminateContextualTypeByJSXAttributes(node, contextualType) {
        var jsxChildrenPropertyName = getJsxElementChildrenPropertyName(getJsxNamespaceAt(node));
        return discriminateTypeByDiscriminableItems(contextualType, (0, ts_1.concatenate)((0, ts_1.map)((0, ts_1.filter)(node.properties, function (p) { return !!p.symbol && p.kind === 290 /* SyntaxKind.JsxAttribute */ && isDiscriminantProperty(contextualType, p.symbol.escapedName) && (!p.initializer || isPossiblyDiscriminantValue(p.initializer)); }), function (prop) { return [!prop.initializer ? (function () { return trueType; }) : (function () { return getContextFreeTypeOfExpression(prop.initializer); }), prop.symbol.escapedName]; }), (0, ts_1.map)((0, ts_1.filter)(getPropertiesOfType(contextualType), function (s) {
            var _a;
            if (!(s.flags & 16777216 /* SymbolFlags.Optional */) || !((_a = node === null || node === void 0 ? void 0 : node.symbol) === null || _a === void 0 ? void 0 : _a.members)) {
                return false;
            }
            var element = node.parent.parent;
            if (s.escapedName === jsxChildrenPropertyName && (0, ts_1.isJsxElement)(element) && (0, ts_1.getSemanticJsxChildren)(element.children).length) {
                return false;
            }
            return !node.symbol.members.has(s.escapedName) && isDiscriminantProperty(contextualType, s.escapedName);
        }), function (s) { return [function () { return undefinedType; }, s.escapedName]; })), isTypeAssignableTo);
    }
    // Return the contextual type for a given expression node. During overload resolution, a contextual type may temporarily
    // be "pushed" onto a node using the contextualType property.
    function getApparentTypeOfContextualType(node, contextFlags) {
        var contextualType = (0, ts_1.isObjectLiteralMethod)(node) ?
            getContextualTypeForObjectLiteralMethod(node, contextFlags) :
            getContextualType(node, contextFlags);
        var instantiatedType = instantiateContextualType(contextualType, node, contextFlags);
        if (instantiatedType && !(contextFlags && contextFlags & 2 /* ContextFlags.NoConstraints */ && instantiatedType.flags & 8650752 /* TypeFlags.TypeVariable */)) {
            var apparentType = mapType(instantiatedType, 
            // When obtaining apparent type of *contextual* type we don't want to get apparent type of mapped types.
            // That would evaluate mapped types with array or tuple type constraints too eagerly
            // and thus it would prevent `getTypeOfPropertyOfContextualType` from obtaining per-position contextual type for elements of array literal expressions.
            // Apparent type of other mapped types is already the mapped type itself so we can just avoid calling `getApparentType` here for all mapped types.
            function (t) { return (0, ts_1.getObjectFlags)(t) & 32 /* ObjectFlags.Mapped */ ? t : getApparentType(t); }, 
            /*noReductions*/ true);
            return apparentType.flags & 1048576 /* TypeFlags.Union */ && (0, ts_1.isObjectLiteralExpression)(node) ? discriminateContextualTypeByObjectMembers(node, apparentType) :
                apparentType.flags & 1048576 /* TypeFlags.Union */ && (0, ts_1.isJsxAttributes)(node) ? discriminateContextualTypeByJSXAttributes(node, apparentType) :
                    apparentType;
        }
    }
    // If the given contextual type contains instantiable types and if a mapper representing
    // return type inferences is available, instantiate those types using that mapper.
    function instantiateContextualType(contextualType, node, contextFlags) {
        if (contextualType && maybeTypeOfKind(contextualType, 465829888 /* TypeFlags.Instantiable */)) {
            var inferenceContext = getInferenceContext(node);
            // If no inferences have been made, and none of the type parameters for which we are inferring
            // specify default types, nothing is gained from instantiating as type parameters would just be
            // replaced with their constraints similar to the apparent type.
            if (inferenceContext && contextFlags & 1 /* ContextFlags.Signature */ && (0, ts_1.some)(inferenceContext.inferences, hasInferenceCandidatesOrDefault)) {
                // For contextual signatures we incorporate all inferences made so far, e.g. from return
                // types as well as arguments to the left in a function call.
                return instantiateInstantiableTypes(contextualType, inferenceContext.nonFixingMapper);
            }
            if (inferenceContext === null || inferenceContext === void 0 ? void 0 : inferenceContext.returnMapper) {
                // For other purposes (e.g. determining whether to produce literal types) we only
                // incorporate inferences made from the return type in a function call. We remove
                // the 'boolean' type from the contextual type such that contextually typed boolean
                // literals actually end up widening to 'boolean' (see #48363).
                var type = instantiateInstantiableTypes(contextualType, inferenceContext.returnMapper);
                return type.flags & 1048576 /* TypeFlags.Union */ && containsType(type.types, regularFalseType) && containsType(type.types, regularTrueType) ?
                    filterType(type, function (t) { return t !== regularFalseType && t !== regularTrueType; }) :
                    type;
            }
        }
        return contextualType;
    }
    // This function is similar to instantiateType, except that (a) it only instantiates types that
    // are classified as instantiable (i.e. it doesn't instantiate object types), and (b) it performs
    // no reductions on instantiated union types.
    function instantiateInstantiableTypes(type, mapper) {
        if (type.flags & 465829888 /* TypeFlags.Instantiable */) {
            return instantiateType(type, mapper);
        }
        if (type.flags & 1048576 /* TypeFlags.Union */) {
            return getUnionType((0, ts_1.map)(type.types, function (t) { return instantiateInstantiableTypes(t, mapper); }), 0 /* UnionReduction.None */);
        }
        if (type.flags & 2097152 /* TypeFlags.Intersection */) {
            return getIntersectionType((0, ts_1.map)(type.types, function (t) { return instantiateInstantiableTypes(t, mapper); }));
        }
        return type;
    }
    /**
     * Whoa! Do you really want to use this function?
     *
     * Unless you're trying to get the *non-apparent* type for a
     * value-literal type or you're authoring relevant portions of this algorithm,
     * you probably meant to use 'getApparentTypeOfContextualType'.
     * Otherwise this may not be very useful.
     *
     * In cases where you *are* working on this function, you should understand
     * when it is appropriate to use 'getContextualType' and 'getApparentTypeOfContextualType'.
     *
     *   - Use 'getContextualType' when you are simply going to propagate the result to the expression.
     *   - Use 'getApparentTypeOfContextualType' when you're going to need the members of the type.
     *
     * @param node the expression whose contextual type will be returned.
     * @returns the contextual type of an expression.
     */
    function getContextualType(node, contextFlags) {
        var _a;
        var _b;
        if (node.flags & 33554432 /* NodeFlags.InWithStatement */) {
            // We cannot answer semantic questions within a with block, do not proceed any further
            return undefined;
        }
        // Cached contextual types are obtained with no ContextFlags, so we can only consult them for
        // requests with no ContextFlags.
        var index = findContextualNode(node, /*includeCaches*/ !contextFlags);
        if (index >= 0) {
            return contextualTypes[index];
        }
        var parent = node.parent;
        switch (parent.kind) {
            case 259 /* SyntaxKind.VariableDeclaration */:
            case 168 /* SyntaxKind.Parameter */:
            case 171 /* SyntaxKind.PropertyDeclaration */:
            case 170 /* SyntaxKind.PropertySignature */:
            case 207 /* SyntaxKind.BindingElement */:
                return getContextualTypeForInitializerExpression(node, contextFlags);
            case 218 /* SyntaxKind.ArrowFunction */:
            case 252 /* SyntaxKind.ReturnStatement */:
                return getContextualTypeForReturnExpression(node, contextFlags);
            case 228 /* SyntaxKind.YieldExpression */:
                return getContextualTypeForYieldOperand(parent, contextFlags);
            case 222 /* SyntaxKind.AwaitExpression */:
                return getContextualTypeForAwaitOperand(parent, contextFlags);
            case 212 /* SyntaxKind.CallExpression */:
            case 213 /* SyntaxKind.NewExpression */:
                return getContextualTypeForArgument(parent, node);
            case 169 /* SyntaxKind.Decorator */:
                return getContextualTypeForDecorator(parent);
            case 215 /* SyntaxKind.TypeAssertionExpression */:
            case 233 /* SyntaxKind.AsExpression */:
                return (0, ts_1.isConstTypeReference)(parent.type) ? getContextualType(parent, contextFlags) : getTypeFromTypeNode(parent.type);
            case 225 /* SyntaxKind.BinaryExpression */:
                return getContextualTypeForBinaryOperand(node, contextFlags);
            case 302 /* SyntaxKind.PropertyAssignment */:
            case 303 /* SyntaxKind.ShorthandPropertyAssignment */:
                return getContextualTypeForObjectLiteralElement(parent, contextFlags);
            case 304 /* SyntaxKind.SpreadAssignment */:
                return getContextualType(parent.parent, contextFlags);
            case 208 /* SyntaxKind.ArrayLiteralExpression */: {
                var arrayLiteral = parent;
                var type = getApparentTypeOfContextualType(arrayLiteral, contextFlags);
                var elementIndex = (0, ts_1.indexOfNode)(arrayLiteral.elements, node);
                var spreadIndices = (_a = (_b = getNodeLinks(arrayLiteral)).spreadIndices) !== null && _a !== void 0 ? _a : (_b.spreadIndices = getSpreadIndices(arrayLiteral.elements));
                return getContextualTypeForElementExpression(type, elementIndex, arrayLiteral.elements.length, spreadIndices.first, spreadIndices.last);
            }
            case 226 /* SyntaxKind.ConditionalExpression */:
                return getContextualTypeForConditionalOperand(node, contextFlags);
            case 238 /* SyntaxKind.TemplateSpan */:
                ts_1.Debug.assert(parent.parent.kind === 227 /* SyntaxKind.TemplateExpression */);
                return getContextualTypeForSubstitutionExpression(parent.parent, node);
            case 216 /* SyntaxKind.ParenthesizedExpression */: {
                if ((0, ts_1.isInJSFile)(parent)) {
                    if ((0, ts_1.isJSDocSatisfiesExpression)(parent)) {
                        return getTypeFromTypeNode((0, ts_1.getJSDocSatisfiesExpressionType)(parent));
                    }
                    // Like in `checkParenthesizedExpression`, an `/** @type {xyz} */` comment before a parenthesized expression acts as a type cast.
                    var typeTag = (0, ts_1.getJSDocTypeTag)(parent);
                    if (typeTag && !(0, ts_1.isConstTypeReference)(typeTag.typeExpression.type)) {
                        return getTypeFromTypeNode(typeTag.typeExpression.type);
                    }
                }
                return getContextualType(parent, contextFlags);
            }
            case 234 /* SyntaxKind.NonNullExpression */:
                return getContextualType(parent, contextFlags);
            case 237 /* SyntaxKind.SatisfiesExpression */:
                return getTypeFromTypeNode(parent.type);
            case 276 /* SyntaxKind.ExportAssignment */:
                return tryGetTypeFromEffectiveTypeNode(parent);
            case 293 /* SyntaxKind.JsxExpression */:
                return getContextualTypeForJsxExpression(parent, contextFlags);
            case 290 /* SyntaxKind.JsxAttribute */:
            case 292 /* SyntaxKind.JsxSpreadAttribute */:
                return getContextualTypeForJsxAttribute(parent, contextFlags);
            case 285 /* SyntaxKind.JsxOpeningElement */:
            case 284 /* SyntaxKind.JsxSelfClosingElement */:
                return getContextualJsxElementAttributesType(parent, contextFlags);
        }
        return undefined;
    }
    function pushCachedContextualType(node) {
        pushContextualType(node, getContextualType(node, /*contextFlags*/ undefined), /*isCache*/ true);
    }
    function pushContextualType(node, type, isCache) {
        contextualTypeNodes[contextualTypeCount] = node;
        contextualTypes[contextualTypeCount] = type;
        contextualIsCache[contextualTypeCount] = isCache;
        contextualTypeCount++;
    }
    function popContextualType() {
        contextualTypeCount--;
    }
    function findContextualNode(node, includeCaches) {
        for (var i = contextualTypeCount - 1; i >= 0; i--) {
            if (node === contextualTypeNodes[i] && (includeCaches || !contextualIsCache[i])) {
                return i;
            }
        }
        return -1;
    }
    function pushInferenceContext(node, inferenceContext) {
        inferenceContextNodes[inferenceContextCount] = node;
        inferenceContexts[inferenceContextCount] = inferenceContext;
        inferenceContextCount++;
    }
    function popInferenceContext() {
        inferenceContextCount--;
    }
    function getInferenceContext(node) {
        for (var i = inferenceContextCount - 1; i >= 0; i--) {
            if ((0, ts_1.isNodeDescendantOf)(node, inferenceContextNodes[i])) {
                return inferenceContexts[i];
            }
        }
    }
    function getContextualJsxElementAttributesType(node, contextFlags) {
        if ((0, ts_1.isJsxOpeningElement)(node) && contextFlags !== 4 /* ContextFlags.Completions */) {
            var index = findContextualNode(node.parent, /*includeCaches*/ !contextFlags);
            if (index >= 0) {
                // Contextually applied type is moved from attributes up to the outer jsx attributes so when walking up from the children they get hit
                // _However_ to hit them from the _attributes_ we must look for them here; otherwise we'll used the declared type
                // (as below) instead!
                return contextualTypes[index];
            }
        }
        return getContextualTypeForArgumentAtIndex(node, 0);
    }
    function getEffectiveFirstArgumentForJsxSignature(signature, node) {
        return getJsxReferenceKind(node) !== 0 /* JsxReferenceKind.Component */
            ? getJsxPropsTypeFromCallSignature(signature, node)
            : getJsxPropsTypeFromClassType(signature, node);
    }
    function getJsxPropsTypeFromCallSignature(sig, context) {
        var propsType = getTypeOfFirstParameterOfSignatureWithFallback(sig, unknownType);
        propsType = getJsxManagedAttributesFromLocatedAttributes(context, getJsxNamespaceAt(context), propsType);
        var intrinsicAttribs = getJsxType(JsxNames.IntrinsicAttributes, context);
        if (!isErrorType(intrinsicAttribs)) {
            propsType = intersectTypes(intrinsicAttribs, propsType);
        }
        return propsType;
    }
    function getJsxPropsTypeForSignatureFromMember(sig, forcedLookupLocation) {
        if (sig.compositeSignatures) {
            // JSX Elements using the legacy `props`-field based lookup (eg, react class components) need to treat the `props` member as an input
            // instead of an output position when resolving the signature. We need to go back to the input signatures of the composite signature,
            // get the type of `props` on each return type individually, and then _intersect them_, rather than union them (as would normally occur
            // for a union signature). It's an unfortunate quirk of looking in the output of the signature for the type we want to use for the input.
            // The default behavior of `getTypeOfFirstParameterOfSignatureWithFallback` when no `props` member name is defined is much more sane.
            var results = [];
            for (var _i = 0, _a = sig.compositeSignatures; _i < _a.length; _i++) {
                var signature = _a[_i];
                var instance = getReturnTypeOfSignature(signature);
                if (isTypeAny(instance)) {
                    return instance;
                }
                var propType = getTypeOfPropertyOfType(instance, forcedLookupLocation);
                if (!propType) {
                    return;
                }
                results.push(propType);
            }
            return getIntersectionType(results); // Same result for both union and intersection signatures
        }
        var instanceType = getReturnTypeOfSignature(sig);
        return isTypeAny(instanceType) ? instanceType : getTypeOfPropertyOfType(instanceType, forcedLookupLocation);
    }
    function getStaticTypeOfReferencedJsxConstructor(context) {
        if (isJsxIntrinsicTagName(context.tagName)) {
            var result = getIntrinsicAttributesTypeFromJsxOpeningLikeElement(context);
            var fakeSignature = createSignatureForJSXIntrinsic(context, result);
            return getOrCreateTypeFromSignature(fakeSignature);
        }
        var tagType = checkExpressionCached(context.tagName);
        if (tagType.flags & 128 /* TypeFlags.StringLiteral */) {
            var result = getIntrinsicAttributesTypeFromStringLiteralType(tagType, context);
            if (!result) {
                return errorType;
            }
            var fakeSignature = createSignatureForJSXIntrinsic(context, result);
            return getOrCreateTypeFromSignature(fakeSignature);
        }
        return tagType;
    }
    function getJsxManagedAttributesFromLocatedAttributes(context, ns, attributesType) {
        var managedSym = getJsxLibraryManagedAttributes(ns);
        if (managedSym) {
            var ctorType = getStaticTypeOfReferencedJsxConstructor(context);
            var result = instantiateAliasOrInterfaceWithDefaults(managedSym, (0, ts_1.isInJSFile)(context), ctorType, attributesType);
            if (result) {
                return result;
            }
        }
        return attributesType;
    }
    function getJsxPropsTypeFromClassType(sig, context) {
        var ns = getJsxNamespaceAt(context);
        var forcedLookupLocation = getJsxElementPropertiesName(ns);
        var attributesType = forcedLookupLocation === undefined
            // If there is no type ElementAttributesProperty, return the type of the first parameter of the signature, which should be the props type
            ? getTypeOfFirstParameterOfSignatureWithFallback(sig, unknownType)
            : forcedLookupLocation === ""
                // If there is no e.g. 'props' member in ElementAttributesProperty, use the element class type instead
                ? getReturnTypeOfSignature(sig)
                // Otherwise get the type of the property on the signature return type
                : getJsxPropsTypeForSignatureFromMember(sig, forcedLookupLocation);
        if (!attributesType) {
            // There is no property named 'props' on this instance type
            if (!!forcedLookupLocation && !!(0, ts_1.length)(context.attributes.properties)) {
                error(context, ts_1.Diagnostics.JSX_element_class_does_not_support_attributes_because_it_does_not_have_a_0_property, (0, ts_1.unescapeLeadingUnderscores)(forcedLookupLocation));
            }
            return unknownType;
        }
        attributesType = getJsxManagedAttributesFromLocatedAttributes(context, ns, attributesType);
        if (isTypeAny(attributesType)) {
            // Props is of type 'any' or unknown
            return attributesType;
        }
        else {
            // Normal case -- add in IntrinsicClassElements<T> and IntrinsicElements
            var apparentAttributesType = attributesType;
            var intrinsicClassAttribs = getJsxType(JsxNames.IntrinsicClassAttributes, context);
            if (!isErrorType(intrinsicClassAttribs)) {
                var typeParams = getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(intrinsicClassAttribs.symbol);
                var hostClassType = getReturnTypeOfSignature(sig);
                var libraryManagedAttributeType = void 0;
                if (typeParams) {
                    // apply JSX.IntrinsicClassElements<hostClassType, ...>
                    var inferredArgs = fillMissingTypeArguments([hostClassType], typeParams, getMinTypeArgumentCount(typeParams), (0, ts_1.isInJSFile)(context));
                    libraryManagedAttributeType = instantiateType(intrinsicClassAttribs, createTypeMapper(typeParams, inferredArgs));
                }
                // or JSX.IntrinsicClassElements has no generics.
                else
                    libraryManagedAttributeType = intrinsicClassAttribs;
                apparentAttributesType = intersectTypes(libraryManagedAttributeType, apparentAttributesType);
            }
            var intrinsicAttribs = getJsxType(JsxNames.IntrinsicAttributes, context);
            if (!isErrorType(intrinsicAttribs)) {
                apparentAttributesType = intersectTypes(intrinsicAttribs, apparentAttributesType);
            }
            return apparentAttributesType;
        }
    }
    function getIntersectedSignatures(signatures) {
        return (0, ts_1.getStrictOptionValue)(compilerOptions, "noImplicitAny")
            ? (0, ts_1.reduceLeft)(signatures, function (left, right) {
                return left === right || !left ? left
                    : compareTypeParametersIdentical(left.typeParameters, right.typeParameters) ? combineSignaturesOfIntersectionMembers(left, right)
                        : undefined;
            })
            : undefined;
    }
    function combineIntersectionThisParam(left, right, mapper) {
        if (!left || !right) {
            return left || right;
        }
        // A signature `this` type might be a read or a write position... It's very possible that it should be invariant
        // and we should refuse to merge signatures if there are `this` types and they do not match. However, so as to be
        // pessimistic when contextual typing, for now, we'll union the `this` types.
        var thisType = getUnionType([getTypeOfSymbol(left), instantiateType(getTypeOfSymbol(right), mapper)]);
        return createSymbolWithType(left, thisType);
    }
    function combineIntersectionParameters(left, right, mapper) {
        var leftCount = getParameterCount(left);
        var rightCount = getParameterCount(right);
        var longest = leftCount >= rightCount ? left : right;
        var shorter = longest === left ? right : left;
        var longestCount = longest === left ? leftCount : rightCount;
        var eitherHasEffectiveRest = (hasEffectiveRestParameter(left) || hasEffectiveRestParameter(right));
        var needsExtraRestElement = eitherHasEffectiveRest && !hasEffectiveRestParameter(longest);
        var params = new Array(longestCount + (needsExtraRestElement ? 1 : 0));
        for (var i = 0; i < longestCount; i++) {
            var longestParamType = tryGetTypeAtPosition(longest, i);
            if (longest === right) {
                longestParamType = instantiateType(longestParamType, mapper);
            }
            var shorterParamType = tryGetTypeAtPosition(shorter, i) || unknownType;
            if (shorter === right) {
                shorterParamType = instantiateType(shorterParamType, mapper);
            }
            var unionParamType = getUnionType([longestParamType, shorterParamType]);
            var isRestParam = eitherHasEffectiveRest && !needsExtraRestElement && i === (longestCount - 1);
            var isOptional = i >= getMinArgumentCount(longest) && i >= getMinArgumentCount(shorter);
            var leftName = i >= leftCount ? undefined : getParameterNameAtPosition(left, i);
            var rightName = i >= rightCount ? undefined : getParameterNameAtPosition(right, i);
            var paramName = leftName === rightName ? leftName :
                !leftName ? rightName :
                    !rightName ? leftName :
                        undefined;
            var paramSymbol = createSymbol(1 /* SymbolFlags.FunctionScopedVariable */ | (isOptional && !isRestParam ? 16777216 /* SymbolFlags.Optional */ : 0), paramName || "arg".concat(i));
            paramSymbol.links.type = isRestParam ? createArrayType(unionParamType) : unionParamType;
            params[i] = paramSymbol;
        }
        if (needsExtraRestElement) {
            var restParamSymbol = createSymbol(1 /* SymbolFlags.FunctionScopedVariable */, "args");
            restParamSymbol.links.type = createArrayType(getTypeAtPosition(shorter, longestCount));
            if (shorter === right) {
                restParamSymbol.links.type = instantiateType(restParamSymbol.links.type, mapper);
            }
            params[longestCount] = restParamSymbol;
        }
        return params;
    }
    function combineSignaturesOfIntersectionMembers(left, right) {
        var typeParams = left.typeParameters || right.typeParameters;
        var paramMapper;
        if (left.typeParameters && right.typeParameters) {
            paramMapper = createTypeMapper(right.typeParameters, left.typeParameters);
            // We just use the type parameter defaults from the first signature
        }
        var declaration = left.declaration;
        var params = combineIntersectionParameters(left, right, paramMapper);
        var thisParam = combineIntersectionThisParam(left.thisParameter, right.thisParameter, paramMapper);
        var minArgCount = Math.max(left.minArgumentCount, right.minArgumentCount);
        var result = createSignature(declaration, typeParams, thisParam, params, 
        /*resolvedReturnType*/ undefined, 
        /*resolvedTypePredicate*/ undefined, minArgCount, (left.flags | right.flags) & 39 /* SignatureFlags.PropagatingFlags */);
        result.compositeKind = 2097152 /* TypeFlags.Intersection */;
        result.compositeSignatures = (0, ts_1.concatenate)(left.compositeKind === 2097152 /* TypeFlags.Intersection */ && left.compositeSignatures || [left], [right]);
        if (paramMapper) {
            result.mapper = left.compositeKind === 2097152 /* TypeFlags.Intersection */ && left.mapper && left.compositeSignatures ? combineTypeMappers(left.mapper, paramMapper) : paramMapper;
        }
        return result;
    }
    // If the given type is an object or union type with a single signature, and if that signature has at
    // least as many parameters as the given function, return the signature. Otherwise return undefined.
    function getContextualCallSignature(type, node) {
        var signatures = getSignaturesOfType(type, 0 /* SignatureKind.Call */);
        var applicableByArity = (0, ts_1.filter)(signatures, function (s) { return !isAritySmaller(s, node); });
        return applicableByArity.length === 1 ? applicableByArity[0] : getIntersectedSignatures(applicableByArity);
    }
    /** If the contextual signature has fewer parameters than the function expression, do not use it */
    function isAritySmaller(signature, target) {
        var targetParameterCount = 0;
        for (; targetParameterCount < target.parameters.length; targetParameterCount++) {
            var param = target.parameters[targetParameterCount];
            if (param.initializer || param.questionToken || param.dotDotDotToken || (0, ts_1.isJSDocOptionalParameter)(param)) {
                break;
            }
        }
        if (target.parameters.length && (0, ts_1.parameterIsThisKeyword)(target.parameters[0])) {
            targetParameterCount--;
        }
        return !hasEffectiveRestParameter(signature) && getParameterCount(signature) < targetParameterCount;
    }
    function getContextualSignatureForFunctionLikeDeclaration(node) {
        // Only function expressions, arrow functions, and object literal methods are contextually typed.
        return (0, ts_1.isFunctionExpressionOrArrowFunction)(node) || (0, ts_1.isObjectLiteralMethod)(node)
            ? getContextualSignature(node)
            : undefined;
    }
    // Return the contextual signature for a given expression node. A contextual type provides a
    // contextual signature if it has a single call signature and if that call signature is non-generic.
    // If the contextual type is a union type, get the signature from each type possible and if they are
    // all identical ignoring their return type, the result is same signature but with return type as
    // union type of return types from these signatures
    function getContextualSignature(node) {
        ts_1.Debug.assert(node.kind !== 173 /* SyntaxKind.MethodDeclaration */ || (0, ts_1.isObjectLiteralMethod)(node));
        var typeTagSignature = getSignatureOfTypeTag(node);
        if (typeTagSignature) {
            return typeTagSignature;
        }
        var type = getApparentTypeOfContextualType(node, 1 /* ContextFlags.Signature */);
        if (!type) {
            return undefined;
        }
        if (!(type.flags & 1048576 /* TypeFlags.Union */)) {
            return getContextualCallSignature(type, node);
        }
        var signatureList;
        var types = type.types;
        for (var _i = 0, types_18 = types; _i < types_18.length; _i++) {
            var current = types_18[_i];
            var signature = getContextualCallSignature(current, node);
            if (signature) {
                if (!signatureList) {
                    // This signature will contribute to contextual union signature
                    signatureList = [signature];
                }
                else if (!compareSignaturesIdentical(signatureList[0], signature, /*partialMatch*/ false, /*ignoreThisTypes*/ true, /*ignoreReturnTypes*/ true, compareTypesIdentical)) {
                    // Signatures aren't identical, do not use
                    return undefined;
                }
                else {
                    // Use this signature for contextual union signature
                    signatureList.push(signature);
                }
            }
        }
        // Result is union of signatures collected (return type is union of return types of this signature set)
        if (signatureList) {
            return signatureList.length === 1 ? signatureList[0] : createUnionSignature(signatureList[0], signatureList);
        }
    }
    function checkSpreadExpression(node, checkMode) {
        if (languageVersion < 2 /* ScriptTarget.ES2015 */) {
            checkExternalEmitHelpers(node, compilerOptions.downlevelIteration ? 1536 /* ExternalEmitHelpers.SpreadIncludes */ : 1024 /* ExternalEmitHelpers.SpreadArray */);
        }
        var arrayOrIterableType = checkExpression(node.expression, checkMode);
        return checkIteratedTypeOrElementType(33 /* IterationUse.Spread */, arrayOrIterableType, undefinedType, node.expression);
    }
    function checkSyntheticExpression(node) {
        return node.isSpread ? getIndexedAccessType(node.type, numberType) : node.type;
    }
    function hasDefaultValue(node) {
        return (node.kind === 207 /* SyntaxKind.BindingElement */ && !!node.initializer) ||
            (node.kind === 225 /* SyntaxKind.BinaryExpression */ && node.operatorToken.kind === 64 /* SyntaxKind.EqualsToken */);
    }
    function checkArrayLiteral(node, checkMode, forceTuple) {
        var elements = node.elements;
        var elementCount = elements.length;
        var elementTypes = [];
        var elementFlags = [];
        pushCachedContextualType(node);
        var inDestructuringPattern = (0, ts_1.isAssignmentTarget)(node);
        var isSpreadIntoCallOrNew = (0, ts_1.isSpreadElement)(node.parent) && (0, ts_1.isCallOrNewExpression)(node.parent.parent);
        var inConstContext = isSpreadIntoCallOrNew || isConstContext(node);
        var contextualType = getApparentTypeOfContextualType(node, /*contextFlags*/ undefined);
        var inTupleContext = isSpreadIntoCallOrNew || !!contextualType && someType(contextualType, isTupleLikeType);
        var hasOmittedExpression = false;
        for (var i = 0; i < elementCount; i++) {
            var e = elements[i];
            if (e.kind === 229 /* SyntaxKind.SpreadElement */) {
                if (languageVersion < 2 /* ScriptTarget.ES2015 */) {
                    checkExternalEmitHelpers(e, compilerOptions.downlevelIteration ? 1536 /* ExternalEmitHelpers.SpreadIncludes */ : 1024 /* ExternalEmitHelpers.SpreadArray */);
                }
                var spreadType = checkExpression(e.expression, checkMode, forceTuple);
                if (isArrayLikeType(spreadType)) {
                    elementTypes.push(spreadType);
                    elementFlags.push(8 /* ElementFlags.Variadic */);
                }
                else if (inDestructuringPattern) {
                    // Given the following situation:
                    //    var c: {};
                    //    [...c] = ["", 0];
                    //
                    // c is represented in the tree as a spread element in an array literal.
                    // But c really functions as a rest element, and its purpose is to provide
                    // a contextual type for the right hand side of the assignment. Therefore,
                    // instead of calling checkExpression on "...c", which will give an error
                    // if c is not iterable/array-like, we need to act as if we are trying to
                    // get the contextual element type from it. So we do something similar to
                    // getContextualTypeForElementExpression, which will crucially not error
                    // if there is no index type / iterated type.
                    var restElementType = getIndexTypeOfType(spreadType, numberType) ||
                        getIteratedTypeOrElementType(65 /* IterationUse.Destructuring */, spreadType, undefinedType, /*errorNode*/ undefined, /*checkAssignability*/ false) ||
                        unknownType;
                    elementTypes.push(restElementType);
                    elementFlags.push(4 /* ElementFlags.Rest */);
                }
                else {
                    elementTypes.push(checkIteratedTypeOrElementType(33 /* IterationUse.Spread */, spreadType, undefinedType, e.expression));
                    elementFlags.push(4 /* ElementFlags.Rest */);
                }
            }
            else if (exactOptionalPropertyTypes && e.kind === 231 /* SyntaxKind.OmittedExpression */) {
                hasOmittedExpression = true;
                elementTypes.push(undefinedOrMissingType);
                elementFlags.push(2 /* ElementFlags.Optional */);
            }
            else {
                var type = checkExpressionForMutableLocation(e, checkMode, forceTuple);
                elementTypes.push(addOptionality(type, /*isProperty*/ true, hasOmittedExpression));
                elementFlags.push(hasOmittedExpression ? 2 /* ElementFlags.Optional */ : 1 /* ElementFlags.Required */);
                if (inTupleContext && checkMode && checkMode & 2 /* CheckMode.Inferential */ && !(checkMode & 4 /* CheckMode.SkipContextSensitive */) && isContextSensitive(e)) {
                    var inferenceContext = getInferenceContext(node);
                    ts_1.Debug.assert(inferenceContext); // In CheckMode.Inferential we should always have an inference context
                    addIntraExpressionInferenceSite(inferenceContext, e, type);
                }
            }
        }
        popContextualType();
        if (inDestructuringPattern) {
            return createTupleType(elementTypes, elementFlags);
        }
        if (forceTuple || inConstContext || inTupleContext) {
            return createArrayLiteralType(createTupleType(elementTypes, elementFlags, /*readonly*/ inConstContext));
        }
        return createArrayLiteralType(createArrayType(elementTypes.length ?
            getUnionType((0, ts_1.sameMap)(elementTypes, function (t, i) { return elementFlags[i] & 8 /* ElementFlags.Variadic */ ? getIndexedAccessTypeOrUndefined(t, numberType) || anyType : t; }), 2 /* UnionReduction.Subtype */) :
            strictNullChecks ? implicitNeverType : undefinedWideningType, inConstContext));
    }
    function createArrayLiteralType(type) {
        if (!((0, ts_1.getObjectFlags)(type) & 4 /* ObjectFlags.Reference */)) {
            return type;
        }
        var literalType = type.literalType;
        if (!literalType) {
            literalType = type.literalType = cloneTypeReference(type);
            literalType.objectFlags |= 16384 /* ObjectFlags.ArrayLiteral */ | 131072 /* ObjectFlags.ContainsObjectOrArrayLiteral */;
        }
        return literalType;
    }
    function isNumericName(name) {
        switch (name.kind) {
            case 166 /* SyntaxKind.ComputedPropertyName */:
                return isNumericComputedName(name);
            case 80 /* SyntaxKind.Identifier */:
                return (0, ts_1.isNumericLiteralName)(name.escapedText);
            case 9 /* SyntaxKind.NumericLiteral */:
            case 11 /* SyntaxKind.StringLiteral */:
                return (0, ts_1.isNumericLiteralName)(name.text);
            default:
                return false;
        }
    }
    function isNumericComputedName(name) {
        // It seems odd to consider an expression of type Any to result in a numeric name,
        // but this behavior is consistent with checkIndexedAccess
        return isTypeAssignableToKind(checkComputedPropertyName(name), 296 /* TypeFlags.NumberLike */);
    }
    function checkComputedPropertyName(node) {
        var links = getNodeLinks(node.expression);
        if (!links.resolvedType) {
            if (((0, ts_1.isTypeLiteralNode)(node.parent.parent) || (0, ts_1.isClassLike)(node.parent.parent) || (0, ts_1.isInterfaceDeclaration)(node.parent.parent))
                && (0, ts_1.isBinaryExpression)(node.expression) && node.expression.operatorToken.kind === 103 /* SyntaxKind.InKeyword */
                && node.parent.kind !== 176 /* SyntaxKind.GetAccessor */ && node.parent.kind !== 177 /* SyntaxKind.SetAccessor */) {
                return links.resolvedType = errorType;
            }
            links.resolvedType = checkExpression(node.expression);
            // The computed property name of a non-static class field within a loop must be stored in a block-scoped binding.
            // (It needs to be bound at class evaluation time.)
            if ((0, ts_1.isPropertyDeclaration)(node.parent) && !(0, ts_1.hasStaticModifier)(node.parent) && (0, ts_1.isClassExpression)(node.parent.parent)) {
                var container = (0, ts_1.getEnclosingBlockScopeContainer)(node.parent.parent);
                var enclosingIterationStatement = getEnclosingIterationStatement(container);
                if (enclosingIterationStatement) {
                    // The computed field name will use a block scoped binding which can be unique for each iteration of the loop.
                    getNodeLinks(enclosingIterationStatement).flags |= 4096 /* NodeCheckFlags.LoopWithCapturedBlockScopedBinding */;
                    // The generated variable which stores the computed field name must be block-scoped.
                    getNodeLinks(node).flags |= 32768 /* NodeCheckFlags.BlockScopedBindingInLoop */;
                    // The generated variable which stores the class must be block-scoped.
                    getNodeLinks(node.parent.parent).flags |= 32768 /* NodeCheckFlags.BlockScopedBindingInLoop */;
                }
            }
            // This will allow types number, string, symbol or any. It will also allow enums, the unknown
            // type, and any union of these types (like string | number).
            if (links.resolvedType.flags & 98304 /* TypeFlags.Nullable */ ||
                !isTypeAssignableToKind(links.resolvedType, 402653316 /* TypeFlags.StringLike */ | 296 /* TypeFlags.NumberLike */ | 12288 /* TypeFlags.ESSymbolLike */) &&
                    !isTypeAssignableTo(links.resolvedType, stringNumberSymbolType)) {
                error(node, ts_1.Diagnostics.A_computed_property_name_must_be_of_type_string_number_symbol_or_any);
            }
        }
        return links.resolvedType;
    }
    function isSymbolWithNumericName(symbol) {
        var _a;
        var firstDecl = (_a = symbol.declarations) === null || _a === void 0 ? void 0 : _a[0];
        return (0, ts_1.isNumericLiteralName)(symbol.escapedName) || (firstDecl && (0, ts_1.isNamedDeclaration)(firstDecl) && isNumericName(firstDecl.name));
    }
    function isSymbolWithSymbolName(symbol) {
        var _a;
        var firstDecl = (_a = symbol.declarations) === null || _a === void 0 ? void 0 : _a[0];
        return (0, ts_1.isKnownSymbol)(symbol) || (firstDecl && (0, ts_1.isNamedDeclaration)(firstDecl) && (0, ts_1.isComputedPropertyName)(firstDecl.name) &&
            isTypeAssignableToKind(checkComputedPropertyName(firstDecl.name), 4096 /* TypeFlags.ESSymbol */));
    }
    function getObjectLiteralIndexInfo(node, offset, properties, keyType) {
        var propTypes = [];
        for (var i = offset; i < properties.length; i++) {
            var prop = properties[i];
            if (keyType === stringType && !isSymbolWithSymbolName(prop) ||
                keyType === numberType && isSymbolWithNumericName(prop) ||
                keyType === esSymbolType && isSymbolWithSymbolName(prop)) {
                propTypes.push(getTypeOfSymbol(properties[i]));
            }
        }
        var unionType = propTypes.length ? getUnionType(propTypes, 2 /* UnionReduction.Subtype */) : undefinedType;
        return createIndexInfo(keyType, unionType, isConstContext(node));
    }
    function getImmediateAliasedSymbol(symbol) {
        ts_1.Debug.assert((symbol.flags & 2097152 /* SymbolFlags.Alias */) !== 0, "Should only get Alias here.");
        var links = getSymbolLinks(symbol);
        if (!links.immediateTarget) {
            var node = getDeclarationOfAliasSymbol(symbol);
            if (!node)
                return ts_1.Debug.fail();
            links.immediateTarget = getTargetOfAliasDeclaration(node, /*dontRecursivelyResolve*/ true);
        }
        return links.immediateTarget;
    }
    function checkObjectLiteral(node, checkMode) {
        var _a;
        if (checkMode === void 0) { checkMode = 0 /* CheckMode.Normal */; }
        var inDestructuringPattern = (0, ts_1.isAssignmentTarget)(node);
        // Grammar checking
        checkGrammarObjectLiteralExpression(node, inDestructuringPattern);
        var allPropertiesTable = strictNullChecks ? (0, ts_1.createSymbolTable)() : undefined;
        var propertiesTable = (0, ts_1.createSymbolTable)();
        var propertiesArray = [];
        var spread = emptyObjectType;
        pushCachedContextualType(node);
        var contextualType = getApparentTypeOfContextualType(node, /*contextFlags*/ undefined);
        var contextualTypeHasPattern = contextualType && contextualType.pattern &&
            (contextualType.pattern.kind === 205 /* SyntaxKind.ObjectBindingPattern */ || contextualType.pattern.kind === 209 /* SyntaxKind.ObjectLiteralExpression */);
        var inConstContext = isConstContext(node);
        var checkFlags = inConstContext ? 8 /* CheckFlags.Readonly */ : 0;
        var isInJavascript = (0, ts_1.isInJSFile)(node) && !(0, ts_1.isInJsonFile)(node);
        var enumTag = isInJavascript ? (0, ts_1.getJSDocEnumTag)(node) : undefined;
        var isJSObjectLiteral = !contextualType && isInJavascript && !enumTag;
        var objectFlags = freshObjectLiteralFlag;
        var patternWithComputedProperties = false;
        var hasComputedStringProperty = false;
        var hasComputedNumberProperty = false;
        var hasComputedSymbolProperty = false;
        // Spreads may cause an early bail; ensure computed names are always checked (this is cached)
        // As otherwise they may not be checked until exports for the type at this position are retrieved,
        // which may never occur.
        for (var _i = 0, _b = node.properties; _i < _b.length; _i++) {
            var elem = _b[_i];
            if (elem.name && (0, ts_1.isComputedPropertyName)(elem.name)) {
                checkComputedPropertyName(elem.name);
            }
        }
        var offset = 0;
        for (var _c = 0, _d = node.properties; _c < _d.length; _c++) {
            var memberDecl = _d[_c];
            var member = getSymbolOfDeclaration(memberDecl);
            var computedNameType = memberDecl.name && memberDecl.name.kind === 166 /* SyntaxKind.ComputedPropertyName */ ?
                checkComputedPropertyName(memberDecl.name) : undefined;
            if (memberDecl.kind === 302 /* SyntaxKind.PropertyAssignment */ ||
                memberDecl.kind === 303 /* SyntaxKind.ShorthandPropertyAssignment */ ||
                (0, ts_1.isObjectLiteralMethod)(memberDecl)) {
                var type = memberDecl.kind === 302 /* SyntaxKind.PropertyAssignment */ ? checkPropertyAssignment(memberDecl, checkMode) :
                    // avoid resolving the left side of the ShorthandPropertyAssignment outside of the destructuring
                    // for error recovery purposes. For example, if a user wrote `{ a = 100 }` instead of `{ a: 100 }`.
                    // we don't want to say "could not find 'a'".
                    memberDecl.kind === 303 /* SyntaxKind.ShorthandPropertyAssignment */ ? checkExpressionForMutableLocation(!inDestructuringPattern && memberDecl.objectAssignmentInitializer ? memberDecl.objectAssignmentInitializer : memberDecl.name, checkMode) :
                        checkObjectLiteralMethod(memberDecl, checkMode);
                if (isInJavascript) {
                    var jsDocType = getTypeForDeclarationFromJSDocComment(memberDecl);
                    if (jsDocType) {
                        checkTypeAssignableTo(type, jsDocType, memberDecl);
                        type = jsDocType;
                    }
                    else if (enumTag && enumTag.typeExpression) {
                        checkTypeAssignableTo(type, getTypeFromTypeNode(enumTag.typeExpression), memberDecl);
                    }
                }
                objectFlags |= (0, ts_1.getObjectFlags)(type) & 458752 /* ObjectFlags.PropagatingFlags */;
                var nameType = computedNameType && isTypeUsableAsPropertyName(computedNameType) ? computedNameType : undefined;
                var prop = nameType ?
                    createSymbol(4 /* SymbolFlags.Property */ | member.flags, getPropertyNameFromType(nameType), checkFlags | 4096 /* CheckFlags.Late */) :
                    createSymbol(4 /* SymbolFlags.Property */ | member.flags, member.escapedName, checkFlags);
                if (nameType) {
                    prop.links.nameType = nameType;
                }
                if (inDestructuringPattern) {
                    // If object literal is an assignment pattern and if the assignment pattern specifies a default value
                    // for the property, make the property optional.
                    var isOptional = (memberDecl.kind === 302 /* SyntaxKind.PropertyAssignment */ && hasDefaultValue(memberDecl.initializer)) ||
                        (memberDecl.kind === 303 /* SyntaxKind.ShorthandPropertyAssignment */ && memberDecl.objectAssignmentInitializer);
                    if (isOptional) {
                        prop.flags |= 16777216 /* SymbolFlags.Optional */;
                    }
                }
                else if (contextualTypeHasPattern && !((0, ts_1.getObjectFlags)(contextualType) & 512 /* ObjectFlags.ObjectLiteralPatternWithComputedProperties */)) {
                    // If object literal is contextually typed by the implied type of a binding pattern, and if the
                    // binding pattern specifies a default value for the property, make the property optional.
                    var impliedProp = getPropertyOfType(contextualType, member.escapedName);
                    if (impliedProp) {
                        prop.flags |= impliedProp.flags & 16777216 /* SymbolFlags.Optional */;
                    }
                    else if (!compilerOptions.suppressExcessPropertyErrors && !getIndexInfoOfType(contextualType, stringType)) {
                        error(memberDecl.name, ts_1.Diagnostics.Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1, symbolToString(member), typeToString(contextualType));
                    }
                }
                prop.declarations = member.declarations;
                prop.parent = member.parent;
                if (member.valueDeclaration) {
                    prop.valueDeclaration = member.valueDeclaration;
                }
                prop.links.type = type;
                prop.links.target = member;
                member = prop;
                allPropertiesTable === null || allPropertiesTable === void 0 ? void 0 : allPropertiesTable.set(prop.escapedName, prop);
                if (contextualType && checkMode & 2 /* CheckMode.Inferential */ && !(checkMode & 4 /* CheckMode.SkipContextSensitive */) &&
                    (memberDecl.kind === 302 /* SyntaxKind.PropertyAssignment */ || memberDecl.kind === 173 /* SyntaxKind.MethodDeclaration */) && isContextSensitive(memberDecl)) {
                    var inferenceContext = getInferenceContext(node);
                    ts_1.Debug.assert(inferenceContext); // In CheckMode.Inferential we should always have an inference context
                    var inferenceNode = memberDecl.kind === 302 /* SyntaxKind.PropertyAssignment */ ? memberDecl.initializer : memberDecl;
                    addIntraExpressionInferenceSite(inferenceContext, inferenceNode, type);
                }
            }
            else if (memberDecl.kind === 304 /* SyntaxKind.SpreadAssignment */) {
                if (languageVersion < 2 /* ScriptTarget.ES2015 */) {
                    checkExternalEmitHelpers(memberDecl, 2 /* ExternalEmitHelpers.Assign */);
                }
                if (propertiesArray.length > 0) {
                    spread = getSpreadType(spread, createObjectLiteralType(), node.symbol, objectFlags, inConstContext);
                    propertiesArray = [];
                    propertiesTable = (0, ts_1.createSymbolTable)();
                    hasComputedStringProperty = false;
                    hasComputedNumberProperty = false;
                    hasComputedSymbolProperty = false;
                }
                var type = getReducedType(checkExpression(memberDecl.expression, checkMode & 2 /* CheckMode.Inferential */));
                if (isValidSpreadType(type)) {
                    var mergedType = tryMergeUnionOfObjectTypeAndEmptyObject(type, inConstContext);
                    if (allPropertiesTable) {
                        checkSpreadPropOverrides(mergedType, allPropertiesTable, memberDecl);
                    }
                    offset = propertiesArray.length;
                    if (isErrorType(spread)) {
                        continue;
                    }
                    spread = getSpreadType(spread, mergedType, node.symbol, objectFlags, inConstContext);
                }
                else {
                    error(memberDecl, ts_1.Diagnostics.Spread_types_may_only_be_created_from_object_types);
                    spread = errorType;
                }
                continue;
            }
            else {
                // TypeScript 1.0 spec (April 2014)
                // A get accessor declaration is processed in the same manner as
                // an ordinary function declaration(section 6.1) with no parameters.
                // A set accessor declaration is processed in the same manner
                // as an ordinary function declaration with a single parameter and a Void return type.
                ts_1.Debug.assert(memberDecl.kind === 176 /* SyntaxKind.GetAccessor */ || memberDecl.kind === 177 /* SyntaxKind.SetAccessor */);
                checkNodeDeferred(memberDecl);
            }
            if (computedNameType && !(computedNameType.flags & 8576 /* TypeFlags.StringOrNumberLiteralOrUnique */)) {
                if (isTypeAssignableTo(computedNameType, stringNumberSymbolType)) {
                    if (isTypeAssignableTo(computedNameType, numberType)) {
                        hasComputedNumberProperty = true;
                    }
                    else if (isTypeAssignableTo(computedNameType, esSymbolType)) {
                        hasComputedSymbolProperty = true;
                    }
                    else {
                        hasComputedStringProperty = true;
                    }
                    if (inDestructuringPattern) {
                        patternWithComputedProperties = true;
                    }
                }
            }
            else {
                propertiesTable.set(member.escapedName, member);
            }
            propertiesArray.push(member);
        }
        popContextualType();
        // If object literal is contextually typed by the implied type of a binding pattern, augment the result
        // type with those properties for which the binding pattern specifies a default value.
        // If the object literal is spread into another object literal, skip this step and let the top-level object
        // literal handle it instead. Note that this might require full traversal to the root pattern's parent
        // as it's the guaranteed to be the common ancestor of the pattern node and the current object node.
        // It's not possible to check if the immediate parent node is a spread assignment
        // since the type flows in non-obvious ways through conditional expressions, IIFEs and more.
        if (contextualTypeHasPattern) {
            var rootPatternParent_1 = (0, ts_1.findAncestor)(contextualType.pattern.parent, function (n) {
                return n.kind === 259 /* SyntaxKind.VariableDeclaration */ ||
                    n.kind === 225 /* SyntaxKind.BinaryExpression */ ||
                    n.kind === 168 /* SyntaxKind.Parameter */;
            });
            var spreadOrOutsideRootObject = (0, ts_1.findAncestor)(node, function (n) {
                return n === rootPatternParent_1 ||
                    n.kind === 304 /* SyntaxKind.SpreadAssignment */;
            });
            if (spreadOrOutsideRootObject.kind !== 304 /* SyntaxKind.SpreadAssignment */) {
                for (var _e = 0, _f = getPropertiesOfType(contextualType); _e < _f.length; _e++) {
                    var prop = _f[_e];
                    if (!propertiesTable.get(prop.escapedName) && !getPropertyOfType(spread, prop.escapedName)) {
                        if (!(prop.flags & 16777216 /* SymbolFlags.Optional */)) {
                            error(prop.valueDeclaration || ((_a = (0, ts_1.tryCast)(prop, ts_1.isTransientSymbol)) === null || _a === void 0 ? void 0 : _a.links.bindingElement), ts_1.Diagnostics.Initializer_provides_no_value_for_this_binding_element_and_the_binding_element_has_no_default_value);
                        }
                        propertiesTable.set(prop.escapedName, prop);
                        propertiesArray.push(prop);
                    }
                }
            }
        }
        if (isErrorType(spread)) {
            return errorType;
        }
        if (spread !== emptyObjectType) {
            if (propertiesArray.length > 0) {
                spread = getSpreadType(spread, createObjectLiteralType(), node.symbol, objectFlags, inConstContext);
                propertiesArray = [];
                propertiesTable = (0, ts_1.createSymbolTable)();
                hasComputedStringProperty = false;
                hasComputedNumberProperty = false;
            }
            // remap the raw emptyObjectType fed in at the top into a fresh empty object literal type, unique to this use site
            return mapType(spread, function (t) { return t === emptyObjectType ? createObjectLiteralType() : t; });
        }
        return createObjectLiteralType();
        function createObjectLiteralType() {
            var indexInfos = [];
            if (hasComputedStringProperty)
                indexInfos.push(getObjectLiteralIndexInfo(node, offset, propertiesArray, stringType));
            if (hasComputedNumberProperty)
                indexInfos.push(getObjectLiteralIndexInfo(node, offset, propertiesArray, numberType));
            if (hasComputedSymbolProperty)
                indexInfos.push(getObjectLiteralIndexInfo(node, offset, propertiesArray, esSymbolType));
            var result = createAnonymousType(node.symbol, propertiesTable, ts_1.emptyArray, ts_1.emptyArray, indexInfos);
            result.objectFlags |= objectFlags | 128 /* ObjectFlags.ObjectLiteral */ | 131072 /* ObjectFlags.ContainsObjectOrArrayLiteral */;
            if (isJSObjectLiteral) {
                result.objectFlags |= 4096 /* ObjectFlags.JSLiteral */;
            }
            if (patternWithComputedProperties) {
                result.objectFlags |= 512 /* ObjectFlags.ObjectLiteralPatternWithComputedProperties */;
            }
            if (inDestructuringPattern) {
                result.pattern = node;
            }
            return result;
        }
    }
    function isValidSpreadType(type) {
        var t = removeDefinitelyFalsyTypes(mapType(type, getBaseConstraintOrType));
        return !!(t.flags & (1 /* TypeFlags.Any */ | 67108864 /* TypeFlags.NonPrimitive */ | 524288 /* TypeFlags.Object */ | 58982400 /* TypeFlags.InstantiableNonPrimitive */) ||
            t.flags & 3145728 /* TypeFlags.UnionOrIntersection */ && (0, ts_1.every)(t.types, isValidSpreadType));
    }
    function checkJsxSelfClosingElementDeferred(node) {
        checkJsxOpeningLikeElementOrOpeningFragment(node);
    }
    function checkJsxSelfClosingElement(node, _checkMode) {
        checkNodeDeferred(node);
        return getJsxElementTypeAt(node) || anyType;
    }
    function checkJsxElementDeferred(node) {
        // Check attributes
        checkJsxOpeningLikeElementOrOpeningFragment(node.openingElement);
        // Perform resolution on the closing tag so that rename/go to definition/etc work
        if (isJsxIntrinsicTagName(node.closingElement.tagName)) {
            getIntrinsicTagSymbol(node.closingElement);
        }
        else {
            checkExpression(node.closingElement.tagName);
        }
        checkJsxChildren(node);
    }
    function checkJsxElement(node, _checkMode) {
        checkNodeDeferred(node);
        return getJsxElementTypeAt(node) || anyType;
    }
    function checkJsxFragment(node) {
        checkJsxOpeningLikeElementOrOpeningFragment(node.openingFragment);
        // by default, jsx:'react' will use jsxFactory = React.createElement and jsxFragmentFactory = React.Fragment
        // if jsxFactory compiler option is provided, ensure jsxFragmentFactory compiler option or @jsxFrag pragma is provided too
        var nodeSourceFile = (0, ts_1.getSourceFileOfNode)(node);
        if ((0, ts_1.getJSXTransformEnabled)(compilerOptions) && (compilerOptions.jsxFactory || nodeSourceFile.pragmas.has("jsx"))
            && !compilerOptions.jsxFragmentFactory && !nodeSourceFile.pragmas.has("jsxfrag")) {
            error(node, compilerOptions.jsxFactory
                ? ts_1.Diagnostics.The_jsxFragmentFactory_compiler_option_must_be_provided_to_use_JSX_fragments_with_the_jsxFactory_compiler_option
                : ts_1.Diagnostics.An_jsxFrag_pragma_is_required_when_using_an_jsx_pragma_with_JSX_fragments);
        }
        checkJsxChildren(node);
        return getJsxElementTypeAt(node) || anyType;
    }
    function isHyphenatedJsxName(name) {
        return (0, ts_1.stringContains)(name, "-");
    }
    /**
     * Returns true iff React would emit this tag name as a string rather than an identifier or qualified name
     */
    function isJsxIntrinsicTagName(tagName) {
        return (0, ts_1.isIdentifier)(tagName) && (0, ts_1.isIntrinsicJsxName)(tagName.escapedText) || (0, ts_1.isJsxNamespacedName)(tagName);
    }
    function checkJsxAttribute(node, checkMode) {
        return node.initializer
            ? checkExpressionForMutableLocation(node.initializer, checkMode)
            : trueType; // <Elem attr /> is sugar for <Elem attr={true} />
    }
    /**
     * Get attributes type of the JSX opening-like element. The result is from resolving "attributes" property of the opening-like element.
     *
     * @param openingLikeElement a JSX opening-like element
     * @param filter a function to remove attributes that will not participate in checking whether attributes are assignable
     * @return an anonymous type (similar to the one returned by checkObjectLiteral) in which its properties are attributes property.
     * @remarks Because this function calls getSpreadType, it needs to use the same checks as checkObjectLiteral,
     * which also calls getSpreadType.
     */
    function createJsxAttributesTypeFromAttributesProperty(openingLikeElement, checkMode) {
        if (checkMode === void 0) { checkMode = 0 /* CheckMode.Normal */; }
        var attributes = openingLikeElement.attributes;
        var contextualType = getContextualType(attributes, 0 /* ContextFlags.None */);
        var allAttributesTable = strictNullChecks ? (0, ts_1.createSymbolTable)() : undefined;
        var attributesTable = (0, ts_1.createSymbolTable)();
        var spread = emptyJsxObjectType;
        var hasSpreadAnyType = false;
        var typeToIntersect;
        var explicitlySpecifyChildrenAttribute = false;
        var objectFlags = 2048 /* ObjectFlags.JsxAttributes */;
        var jsxChildrenPropertyName = getJsxElementChildrenPropertyName(getJsxNamespaceAt(openingLikeElement));
        for (var _i = 0, _a = attributes.properties; _i < _a.length; _i++) {
            var attributeDecl = _a[_i];
            var member = attributeDecl.symbol;
            if ((0, ts_1.isJsxAttribute)(attributeDecl)) {
                var exprType = checkJsxAttribute(attributeDecl, checkMode);
                objectFlags |= (0, ts_1.getObjectFlags)(exprType) & 458752 /* ObjectFlags.PropagatingFlags */;
                var attributeSymbol = createSymbol(4 /* SymbolFlags.Property */ | member.flags, member.escapedName);
                attributeSymbol.declarations = member.declarations;
                attributeSymbol.parent = member.parent;
                if (member.valueDeclaration) {
                    attributeSymbol.valueDeclaration = member.valueDeclaration;
                }
                attributeSymbol.links.type = exprType;
                attributeSymbol.links.target = member;
                attributesTable.set(attributeSymbol.escapedName, attributeSymbol);
                allAttributesTable === null || allAttributesTable === void 0 ? void 0 : allAttributesTable.set(attributeSymbol.escapedName, attributeSymbol);
                if ((0, ts_1.getEscapedTextOfJsxAttributeName)(attributeDecl.name) === jsxChildrenPropertyName) {
                    explicitlySpecifyChildrenAttribute = true;
                }
                if (contextualType) {
                    var prop = getPropertyOfType(contextualType, member.escapedName);
                    if (prop && prop.declarations && isDeprecatedSymbol(prop) && (0, ts_1.isIdentifier)(attributeDecl.name)) {
                        addDeprecatedSuggestion(attributeDecl.name, prop.declarations, attributeDecl.name.escapedText);
                    }
                }
                if (contextualType && checkMode & 2 /* CheckMode.Inferential */ && !(checkMode & 4 /* CheckMode.SkipContextSensitive */) && isContextSensitive(attributeDecl)) {
                    var inferenceContext = getInferenceContext(attributes);
                    ts_1.Debug.assert(inferenceContext); // In CheckMode.Inferential we should always have an inference context
                    var inferenceNode = attributeDecl.initializer.expression;
                    addIntraExpressionInferenceSite(inferenceContext, inferenceNode, exprType);
                }
            }
            else {
                ts_1.Debug.assert(attributeDecl.kind === 292 /* SyntaxKind.JsxSpreadAttribute */);
                if (attributesTable.size > 0) {
                    spread = getSpreadType(spread, createJsxAttributesType(), attributes.symbol, objectFlags, /*readonly*/ false);
                    attributesTable = (0, ts_1.createSymbolTable)();
                }
                var exprType = getReducedType(checkExpression(attributeDecl.expression, checkMode & 2 /* CheckMode.Inferential */));
                if (isTypeAny(exprType)) {
                    hasSpreadAnyType = true;
                }
                if (isValidSpreadType(exprType)) {
                    spread = getSpreadType(spread, exprType, attributes.symbol, objectFlags, /*readonly*/ false);
                    if (allAttributesTable) {
                        checkSpreadPropOverrides(exprType, allAttributesTable, attributeDecl);
                    }
                }
                else {
                    error(attributeDecl.expression, ts_1.Diagnostics.Spread_types_may_only_be_created_from_object_types);
                    typeToIntersect = typeToIntersect ? getIntersectionType([typeToIntersect, exprType]) : exprType;
                }
            }
        }
        if (!hasSpreadAnyType) {
            if (attributesTable.size > 0) {
                spread = getSpreadType(spread, createJsxAttributesType(), attributes.symbol, objectFlags, /*readonly*/ false);
            }
        }
        // Handle children attribute
        var parent = openingLikeElement.parent.kind === 283 /* SyntaxKind.JsxElement */ ? openingLikeElement.parent : undefined;
        // We have to check that openingElement of the parent is the one we are visiting as this may not be true for selfClosingElement
        if (parent && parent.openingElement === openingLikeElement && parent.children.length > 0) {
            var childrenTypes = checkJsxChildren(parent, checkMode);
            if (!hasSpreadAnyType && jsxChildrenPropertyName && jsxChildrenPropertyName !== "") {
                // Error if there is a attribute named "children" explicitly specified and children element.
                // This is because children element will overwrite the value from attributes.
                // Note: we will not warn "children" attribute overwritten if "children" attribute is specified in object spread.
                if (explicitlySpecifyChildrenAttribute) {
                    error(attributes, ts_1.Diagnostics._0_are_specified_twice_The_attribute_named_0_will_be_overwritten, (0, ts_1.unescapeLeadingUnderscores)(jsxChildrenPropertyName));
                }
                var contextualType_1 = getApparentTypeOfContextualType(openingLikeElement.attributes, /*contextFlags*/ undefined);
                var childrenContextualType = contextualType_1 && getTypeOfPropertyOfContextualType(contextualType_1, jsxChildrenPropertyName);
                // If there are children in the body of JSX element, create dummy attribute "children" with the union of children types so that it will pass the attribute checking process
                var childrenPropSymbol = createSymbol(4 /* SymbolFlags.Property */, jsxChildrenPropertyName);
                childrenPropSymbol.links.type = childrenTypes.length === 1 ? childrenTypes[0] :
                    childrenContextualType && someType(childrenContextualType, isTupleLikeType) ? createTupleType(childrenTypes) :
                        createArrayType(getUnionType(childrenTypes));
                // Fake up a property declaration for the children
                childrenPropSymbol.valueDeclaration = ts_1.factory.createPropertySignature(/*modifiers*/ undefined, (0, ts_1.unescapeLeadingUnderscores)(jsxChildrenPropertyName), /*questionToken*/ undefined, /*type*/ undefined);
                (0, ts_1.setParent)(childrenPropSymbol.valueDeclaration, attributes);
                childrenPropSymbol.valueDeclaration.symbol = childrenPropSymbol;
                var childPropMap = (0, ts_1.createSymbolTable)();
                childPropMap.set(jsxChildrenPropertyName, childrenPropSymbol);
                spread = getSpreadType(spread, createAnonymousType(attributes.symbol, childPropMap, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray), attributes.symbol, objectFlags, /*readonly*/ false);
            }
        }
        if (hasSpreadAnyType) {
            return anyType;
        }
        if (typeToIntersect && spread !== emptyJsxObjectType) {
            return getIntersectionType([typeToIntersect, spread]);
        }
        return typeToIntersect || (spread === emptyJsxObjectType ? createJsxAttributesType() : spread);
        /**
         * Create anonymous type from given attributes symbol table.
         * @param symbol a symbol of JsxAttributes containing attributes corresponding to attributesTable
         * @param attributesTable a symbol table of attributes property
         */
        function createJsxAttributesType() {
            objectFlags |= freshObjectLiteralFlag;
            var result = createAnonymousType(attributes.symbol, attributesTable, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
            result.objectFlags |= objectFlags | 128 /* ObjectFlags.ObjectLiteral */ | 131072 /* ObjectFlags.ContainsObjectOrArrayLiteral */;
            return result;
        }
    }
    function checkJsxChildren(node, checkMode) {
        var childrenTypes = [];
        for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
            var child = _a[_i];
            // In React, JSX text that contains only whitespaces will be ignored so we don't want to type-check that
            // because then type of children property will have constituent of string type.
            if (child.kind === 12 /* SyntaxKind.JsxText */) {
                if (!child.containsOnlyTriviaWhiteSpaces) {
                    childrenTypes.push(stringType);
                }
            }
            else if (child.kind === 293 /* SyntaxKind.JsxExpression */ && !child.expression) {
                continue; // empty jsx expressions don't *really* count as present children
            }
            else {
                childrenTypes.push(checkExpressionForMutableLocation(child, checkMode));
            }
        }
        return childrenTypes;
    }
    function checkSpreadPropOverrides(type, props, spread) {
        for (var _i = 0, _a = getPropertiesOfType(type); _i < _a.length; _i++) {
            var right = _a[_i];
            if (!(right.flags & 16777216 /* SymbolFlags.Optional */)) {
                var left = props.get(right.escapedName);
                if (left) {
                    var diagnostic = error(left.valueDeclaration, ts_1.Diagnostics._0_is_specified_more_than_once_so_this_usage_will_be_overwritten, (0, ts_1.unescapeLeadingUnderscores)(left.escapedName));
                    (0, ts_1.addRelatedInfo)(diagnostic, (0, ts_1.createDiagnosticForNode)(spread, ts_1.Diagnostics.This_spread_always_overwrites_this_property));
                }
            }
        }
    }
    /**
     * Check attributes property of opening-like element. This function is called during chooseOverload to get call signature of a JSX opening-like element.
     * (See "checkApplicableSignatureForJsxOpeningLikeElement" for how the function is used)
     * @param node a JSXAttributes to be resolved of its type
     */
    function checkJsxAttributes(node, checkMode) {
        return createJsxAttributesTypeFromAttributesProperty(node.parent, checkMode);
    }
    function getJsxType(name, location) {
        var namespace = getJsxNamespaceAt(location);
        var exports = namespace && getExportsOfSymbol(namespace);
        var typeSymbol = exports && getSymbol(exports, name, 788968 /* SymbolFlags.Type */);
        return typeSymbol ? getDeclaredTypeOfSymbol(typeSymbol) : errorType;
    }
    /**
     * Looks up an intrinsic tag name and returns a symbol that either points to an intrinsic
     * property (in which case nodeLinks.jsxFlags will be IntrinsicNamedElement) or an intrinsic
     * string index signature (in which case nodeLinks.jsxFlags will be IntrinsicIndexedElement).
     * May also return unknownSymbol if both of these lookups fail.
     */
    function getIntrinsicTagSymbol(node) {
        var links = getNodeLinks(node);
        if (!links.resolvedSymbol) {
            var intrinsicElementsType = getJsxType(JsxNames.IntrinsicElements, node);
            if (!isErrorType(intrinsicElementsType)) {
                // Property case
                if (!(0, ts_1.isIdentifier)(node.tagName) && !(0, ts_1.isJsxNamespacedName)(node.tagName))
                    return ts_1.Debug.fail();
                var intrinsicProp = getPropertyOfType(intrinsicElementsType, (0, ts_1.isJsxNamespacedName)(node.tagName) ? (0, ts_1.getEscapedTextOfJsxNamespacedName)(node.tagName) : node.tagName.escapedText);
                if (intrinsicProp) {
                    links.jsxFlags |= 1 /* JsxFlags.IntrinsicNamedElement */;
                    return links.resolvedSymbol = intrinsicProp;
                }
                // Intrinsic string indexer case
                var indexSignatureType = getIndexTypeOfType(intrinsicElementsType, stringType);
                if (indexSignatureType) {
                    links.jsxFlags |= 2 /* JsxFlags.IntrinsicIndexedElement */;
                    return links.resolvedSymbol = intrinsicElementsType.symbol;
                }
                // Wasn't found
                error(node, ts_1.Diagnostics.Property_0_does_not_exist_on_type_1, (0, ts_1.intrinsicTagNameToString)(node.tagName), "JSX." + JsxNames.IntrinsicElements);
                return links.resolvedSymbol = unknownSymbol;
            }
            else {
                if (noImplicitAny) {
                    error(node, ts_1.Diagnostics.JSX_element_implicitly_has_type_any_because_no_interface_JSX_0_exists, (0, ts_1.unescapeLeadingUnderscores)(JsxNames.IntrinsicElements));
                }
                return links.resolvedSymbol = unknownSymbol;
            }
        }
        return links.resolvedSymbol;
    }
    function getJsxNamespaceContainerForImplicitImport(location) {
        var file = location && (0, ts_1.getSourceFileOfNode)(location);
        var links = file && getNodeLinks(file);
        if (links && links.jsxImplicitImportContainer === false) {
            return undefined;
        }
        if (links && links.jsxImplicitImportContainer) {
            return links.jsxImplicitImportContainer;
        }
        var runtimeImportSpecifier = (0, ts_1.getJSXRuntimeImport)((0, ts_1.getJSXImplicitImportBase)(compilerOptions, file), compilerOptions);
        if (!runtimeImportSpecifier) {
            return undefined;
        }
        var isClassic = (0, ts_1.getEmitModuleResolutionKind)(compilerOptions) === ts_1.ModuleResolutionKind.Classic;
        var errorMessage = isClassic
            ? ts_1.Diagnostics.Cannot_find_module_0_Did_you_mean_to_set_the_moduleResolution_option_to_nodenext_or_to_add_aliases_to_the_paths_option
            : ts_1.Diagnostics.Cannot_find_module_0_or_its_corresponding_type_declarations;
        var mod = resolveExternalModule(location, runtimeImportSpecifier, errorMessage, location);
        var result = mod && mod !== unknownSymbol ? getMergedSymbol(resolveSymbol(mod)) : undefined;
        if (links) {
            links.jsxImplicitImportContainer = result || false;
        }
        return result;
    }
    function getJsxNamespaceAt(location) {
        var links = location && getNodeLinks(location);
        if (links && links.jsxNamespace) {
            return links.jsxNamespace;
        }
        if (!links || links.jsxNamespace !== false) {
            var resolvedNamespace = getJsxNamespaceContainerForImplicitImport(location);
            if (!resolvedNamespace || resolvedNamespace === unknownSymbol) {
                var namespaceName = getJsxNamespace(location);
                resolvedNamespace = resolveName(location, namespaceName, 1920 /* SymbolFlags.Namespace */, /*nameNotFoundMessage*/ undefined, namespaceName, /*isUse*/ false);
            }
            if (resolvedNamespace) {
                var candidate = resolveSymbol(getSymbol(getExportsOfSymbol(resolveSymbol(resolvedNamespace)), JsxNames.JSX, 1920 /* SymbolFlags.Namespace */));
                if (candidate && candidate !== unknownSymbol) {
                    if (links) {
                        links.jsxNamespace = candidate;
                    }
                    return candidate;
                }
            }
            if (links) {
                links.jsxNamespace = false;
            }
        }
        // JSX global fallback
        var s = resolveSymbol(getGlobalSymbol(JsxNames.JSX, 1920 /* SymbolFlags.Namespace */, /*diagnostic*/ undefined));
        if (s === unknownSymbol) {
            return undefined; // TODO: GH#18217
        }
        return s; // TODO: GH#18217
    }
    /**
     * Look into JSX namespace and then look for container with matching name as nameOfAttribPropContainer.
     * Get a single property from that container if existed. Report an error if there are more than one property.
     *
     * @param nameOfAttribPropContainer a string of value JsxNames.ElementAttributesPropertyNameContainer or JsxNames.ElementChildrenAttributeNameContainer
     *          if other string is given or the container doesn't exist, return undefined.
     */
    function getNameFromJsxElementAttributesContainer(nameOfAttribPropContainer, jsxNamespace) {
        // JSX.ElementAttributesProperty | JSX.ElementChildrenAttribute [symbol]
        var jsxElementAttribPropInterfaceSym = jsxNamespace && getSymbol(jsxNamespace.exports, nameOfAttribPropContainer, 788968 /* SymbolFlags.Type */);
        // JSX.ElementAttributesProperty | JSX.ElementChildrenAttribute [type]
        var jsxElementAttribPropInterfaceType = jsxElementAttribPropInterfaceSym && getDeclaredTypeOfSymbol(jsxElementAttribPropInterfaceSym);
        // The properties of JSX.ElementAttributesProperty | JSX.ElementChildrenAttribute
        var propertiesOfJsxElementAttribPropInterface = jsxElementAttribPropInterfaceType && getPropertiesOfType(jsxElementAttribPropInterfaceType);
        if (propertiesOfJsxElementAttribPropInterface) {
            // Element Attributes has zero properties, so the element attributes type will be the class instance type
            if (propertiesOfJsxElementAttribPropInterface.length === 0) {
                return "";
            }
            // Element Attributes has one property, so the element attributes type will be the type of the corresponding
            // property of the class instance type
            else if (propertiesOfJsxElementAttribPropInterface.length === 1) {
                return propertiesOfJsxElementAttribPropInterface[0].escapedName;
            }
            else if (propertiesOfJsxElementAttribPropInterface.length > 1 && jsxElementAttribPropInterfaceSym.declarations) {
                // More than one property on ElementAttributesProperty is an error
                error(jsxElementAttribPropInterfaceSym.declarations[0], ts_1.Diagnostics.The_global_type_JSX_0_may_not_have_more_than_one_property, (0, ts_1.unescapeLeadingUnderscores)(nameOfAttribPropContainer));
            }
        }
        return undefined;
    }
    function getJsxLibraryManagedAttributes(jsxNamespace) {
        // JSX.LibraryManagedAttributes [symbol]
        return jsxNamespace && getSymbol(jsxNamespace.exports, JsxNames.LibraryManagedAttributes, 788968 /* SymbolFlags.Type */);
    }
    function getJsxElementTypeSymbol(jsxNamespace) {
        // JSX.ElementType [symbol]
        return jsxNamespace && getSymbol(jsxNamespace.exports, JsxNames.ElementType, 788968 /* SymbolFlags.Type */);
    }
    /// e.g. "props" for React.d.ts,
    /// or 'undefined' if ElementAttributesProperty doesn't exist (which means all
    ///     non-intrinsic elements' attributes type is 'any'),
    /// or '' if it has 0 properties (which means every
    ///     non-intrinsic elements' attributes type is the element instance type)
    function getJsxElementPropertiesName(jsxNamespace) {
        return getNameFromJsxElementAttributesContainer(JsxNames.ElementAttributesPropertyNameContainer, jsxNamespace);
    }
    function getJsxElementChildrenPropertyName(jsxNamespace) {
        return getNameFromJsxElementAttributesContainer(JsxNames.ElementChildrenAttributeNameContainer, jsxNamespace);
    }
    function getUninstantiatedJsxSignaturesOfType(elementType, caller) {
        if (elementType.flags & 4 /* TypeFlags.String */) {
            return [anySignature];
        }
        else if (elementType.flags & 128 /* TypeFlags.StringLiteral */) {
            var intrinsicType = getIntrinsicAttributesTypeFromStringLiteralType(elementType, caller);
            if (!intrinsicType) {
                error(caller, ts_1.Diagnostics.Property_0_does_not_exist_on_type_1, elementType.value, "JSX." + JsxNames.IntrinsicElements);
                return ts_1.emptyArray;
            }
            else {
                var fakeSignature = createSignatureForJSXIntrinsic(caller, intrinsicType);
                return [fakeSignature];
            }
        }
        var apparentElemType = getApparentType(elementType);
        // Resolve the signatures, preferring constructor
        var signatures = getSignaturesOfType(apparentElemType, 1 /* SignatureKind.Construct */);
        if (signatures.length === 0) {
            // No construct signatures, try call signatures
            signatures = getSignaturesOfType(apparentElemType, 0 /* SignatureKind.Call */);
        }
        if (signatures.length === 0 && apparentElemType.flags & 1048576 /* TypeFlags.Union */) {
            // If each member has some combination of new/call signatures; make a union signature list for those
            signatures = getUnionSignatures((0, ts_1.map)(apparentElemType.types, function (t) { return getUninstantiatedJsxSignaturesOfType(t, caller); }));
        }
        return signatures;
    }
    function getIntrinsicAttributesTypeFromStringLiteralType(type, location) {
        // If the elemType is a stringLiteral type, we can then provide a check to make sure that the string literal type is one of the Jsx intrinsic element type
        // For example:
        //      var CustomTag: "h1" = "h1";
        //      <CustomTag> Hello World </CustomTag>
        var intrinsicElementsType = getJsxType(JsxNames.IntrinsicElements, location);
        if (!isErrorType(intrinsicElementsType)) {
            var stringLiteralTypeName = type.value;
            var intrinsicProp = getPropertyOfType(intrinsicElementsType, (0, ts_1.escapeLeadingUnderscores)(stringLiteralTypeName));
            if (intrinsicProp) {
                return getTypeOfSymbol(intrinsicProp);
            }
            var indexSignatureType = getIndexTypeOfType(intrinsicElementsType, stringType);
            if (indexSignatureType) {
                return indexSignatureType;
            }
            return undefined;
        }
        // If we need to report an error, we already done so here. So just return any to prevent any more error downstream
        return anyType;
    }
    function checkJsxReturnAssignableToAppropriateBound(refKind, elemInstanceType, openingLikeElement) {
        if (refKind === 1 /* JsxReferenceKind.Function */) {
            var sfcReturnConstraint = getJsxStatelessElementTypeAt(openingLikeElement);
            if (sfcReturnConstraint) {
                checkTypeRelatedTo(elemInstanceType, sfcReturnConstraint, assignableRelation, openingLikeElement.tagName, ts_1.Diagnostics.Its_return_type_0_is_not_a_valid_JSX_element, generateInitialErrorChain);
            }
        }
        else if (refKind === 0 /* JsxReferenceKind.Component */) {
            var classConstraint = getJsxElementClassTypeAt(openingLikeElement);
            if (classConstraint) {
                // Issue an error if this return type isn't assignable to JSX.ElementClass, failing that
                checkTypeRelatedTo(elemInstanceType, classConstraint, assignableRelation, openingLikeElement.tagName, ts_1.Diagnostics.Its_instance_type_0_is_not_a_valid_JSX_element, generateInitialErrorChain);
            }
        }
        else { // Mixed
            var sfcReturnConstraint = getJsxStatelessElementTypeAt(openingLikeElement);
            var classConstraint = getJsxElementClassTypeAt(openingLikeElement);
            if (!sfcReturnConstraint || !classConstraint) {
                return;
            }
            var combined = getUnionType([sfcReturnConstraint, classConstraint]);
            checkTypeRelatedTo(elemInstanceType, combined, assignableRelation, openingLikeElement.tagName, ts_1.Diagnostics.Its_element_type_0_is_not_a_valid_JSX_element, generateInitialErrorChain);
        }
        function generateInitialErrorChain() {
            var componentName = (0, ts_1.getTextOfNode)(openingLikeElement.tagName);
            return (0, ts_1.chainDiagnosticMessages)(/*details*/ undefined, ts_1.Diagnostics._0_cannot_be_used_as_a_JSX_component, componentName);
        }
    }
    /**
     * Get attributes type of the given intrinsic opening-like Jsx element by resolving the tag name.
     * The function is intended to be called from a function which has checked that the opening element is an intrinsic element.
     * @param node an intrinsic JSX opening-like element
     */
    function getIntrinsicAttributesTypeFromJsxOpeningLikeElement(node) {
        ts_1.Debug.assert(isJsxIntrinsicTagName(node.tagName));
        var links = getNodeLinks(node);
        if (!links.resolvedJsxElementAttributesType) {
            var symbol = getIntrinsicTagSymbol(node);
            if (links.jsxFlags & 1 /* JsxFlags.IntrinsicNamedElement */) {
                return links.resolvedJsxElementAttributesType = getTypeOfSymbol(symbol) || errorType;
            }
            else if (links.jsxFlags & 2 /* JsxFlags.IntrinsicIndexedElement */) {
                return links.resolvedJsxElementAttributesType =
                    getIndexTypeOfType(getJsxType(JsxNames.IntrinsicElements, node), stringType) || errorType;
            }
            else {
                return links.resolvedJsxElementAttributesType = errorType;
            }
        }
        return links.resolvedJsxElementAttributesType;
    }
    function getJsxElementClassTypeAt(location) {
        var type = getJsxType(JsxNames.ElementClass, location);
        if (isErrorType(type))
            return undefined;
        return type;
    }
    function getJsxElementTypeAt(location) {
        return getJsxType(JsxNames.Element, location);
    }
    function getJsxStatelessElementTypeAt(location) {
        var jsxElementType = getJsxElementTypeAt(location);
        if (jsxElementType) {
            return getUnionType([jsxElementType, nullType]);
        }
    }
    function getJsxElementTypeTypeAt(location) {
        var ns = getJsxNamespaceAt(location);
        if (!ns)
            return undefined;
        var sym = getJsxElementTypeSymbol(ns);
        if (!sym)
            return undefined;
        var type = instantiateAliasOrInterfaceWithDefaults(sym, (0, ts_1.isInJSFile)(location));
        if (!type || isErrorType(type))
            return undefined;
        return type;
    }
    function instantiateAliasOrInterfaceWithDefaults(managedSym, inJs) {
        var typeArguments = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            typeArguments[_i - 2] = arguments[_i];
        }
        var declaredManagedType = getDeclaredTypeOfSymbol(managedSym); // fetches interface type, or initializes symbol links type parmaeters
        if (managedSym.flags & 524288 /* SymbolFlags.TypeAlias */) {
            var params = getSymbolLinks(managedSym).typeParameters;
            if ((0, ts_1.length)(params) >= typeArguments.length) {
                var args = fillMissingTypeArguments(typeArguments, params, typeArguments.length, inJs);
                return (0, ts_1.length)(args) === 0 ? declaredManagedType : getTypeAliasInstantiation(managedSym, args);
            }
        }
        if ((0, ts_1.length)(declaredManagedType.typeParameters) >= typeArguments.length) {
            var args = fillMissingTypeArguments(typeArguments, declaredManagedType.typeParameters, typeArguments.length, inJs);
            return createTypeReference(declaredManagedType, args);
        }
        return undefined;
    }
    /**
     * Returns all the properties of the Jsx.IntrinsicElements interface
     */
    function getJsxIntrinsicTagNamesAt(location) {
        var intrinsics = getJsxType(JsxNames.IntrinsicElements, location);
        return intrinsics ? getPropertiesOfType(intrinsics) : ts_1.emptyArray;
    }
    function checkJsxPreconditions(errorNode) {
        // Preconditions for using JSX
        if ((compilerOptions.jsx || 0 /* JsxEmit.None */) === 0 /* JsxEmit.None */) {
            error(errorNode, ts_1.Diagnostics.Cannot_use_JSX_unless_the_jsx_flag_is_provided);
        }
        if (getJsxElementTypeAt(errorNode) === undefined) {
            if (noImplicitAny) {
                error(errorNode, ts_1.Diagnostics.JSX_element_implicitly_has_type_any_because_the_global_type_JSX_Element_does_not_exist);
            }
        }
    }
    function checkJsxOpeningLikeElementOrOpeningFragment(node) {
        var isNodeOpeningLikeElement = (0, ts_1.isJsxOpeningLikeElement)(node);
        if (isNodeOpeningLikeElement) {
            checkGrammarJsxElement(node);
        }
        checkJsxPreconditions(node);
        if (!getJsxNamespaceContainerForImplicitImport(node)) {
            // The reactNamespace/jsxFactory's root symbol should be marked as 'used' so we don't incorrectly elide its import.
            // And if there is no reactNamespace/jsxFactory's symbol in scope when targeting React emit, we should issue an error.
            var jsxFactoryRefErr = diagnostics && compilerOptions.jsx === 2 /* JsxEmit.React */ ? ts_1.Diagnostics.Cannot_find_name_0 : undefined;
            var jsxFactoryNamespace = getJsxNamespace(node);
            var jsxFactoryLocation = isNodeOpeningLikeElement ? node.tagName : node;
            // allow null as jsxFragmentFactory
            var jsxFactorySym = void 0;
            if (!((0, ts_1.isJsxOpeningFragment)(node) && jsxFactoryNamespace === "null")) {
                jsxFactorySym = resolveName(jsxFactoryLocation, jsxFactoryNamespace, 111551 /* SymbolFlags.Value */, jsxFactoryRefErr, jsxFactoryNamespace, /*isUse*/ true);
            }
            if (jsxFactorySym) {
                // Mark local symbol as referenced here because it might not have been marked
                // if jsx emit was not jsxFactory as there wont be error being emitted
                jsxFactorySym.isReferenced = 67108863 /* SymbolFlags.All */;
                // If react/jsxFactory symbol is alias, mark it as refereced
                if (canCollectSymbolAliasAccessabilityData && jsxFactorySym.flags & 2097152 /* SymbolFlags.Alias */ && !getTypeOnlyAliasDeclaration(jsxFactorySym)) {
                    markAliasSymbolAsReferenced(jsxFactorySym);
                }
            }
            // For JsxFragment, mark jsx pragma as referenced via resolveName
            if ((0, ts_1.isJsxOpeningFragment)(node)) {
                var file = (0, ts_1.getSourceFileOfNode)(node);
                var localJsxNamespace = getLocalJsxNamespace(file);
                if (localJsxNamespace) {
                    resolveName(jsxFactoryLocation, localJsxNamespace, 111551 /* SymbolFlags.Value */, jsxFactoryRefErr, localJsxNamespace, /*isUse*/ true);
                }
            }
        }
        if (isNodeOpeningLikeElement) {
            var jsxOpeningLikeNode = node;
            var sig = getResolvedSignature(jsxOpeningLikeNode);
            checkDeprecatedSignature(sig, node);
            var elementTypeConstraint = getJsxElementTypeTypeAt(jsxOpeningLikeNode);
            if (elementTypeConstraint !== undefined) {
                var tagName_1 = jsxOpeningLikeNode.tagName;
                var tagType = isJsxIntrinsicTagName(tagName_1)
                    ? getStringLiteralType((0, ts_1.intrinsicTagNameToString)(tagName_1))
                    : checkExpression(tagName_1);
                checkTypeRelatedTo(tagType, elementTypeConstraint, assignableRelation, tagName_1, ts_1.Diagnostics.Its_type_0_is_not_a_valid_JSX_element_type, function () {
                    var componentName = (0, ts_1.getTextOfNode)(tagName_1);
                    return (0, ts_1.chainDiagnosticMessages)(/*details*/ undefined, ts_1.Diagnostics._0_cannot_be_used_as_a_JSX_component, componentName);
                });
            }
            else {
                checkJsxReturnAssignableToAppropriateBound(getJsxReferenceKind(jsxOpeningLikeNode), getReturnTypeOfSignature(sig), jsxOpeningLikeNode);
            }
        }
    }
    /**
     * Check if a property with the given name is known anywhere in the given type. In an object type, a property
     * is considered known if
     * 1. the object type is empty and the check is for assignability, or
     * 2. if the object type has index signatures, or
     * 3. if the property is actually declared in the object type
     *    (this means that 'toString', for example, is not usually a known property).
     * 4. In a union or intersection type,
     *    a property is considered known if it is known in any constituent type.
     * @param targetType a type to search a given name in
     * @param name a property name to search
     * @param isComparingJsxAttributes a boolean flag indicating whether we are searching in JsxAttributesType
     */
    function isKnownProperty(targetType, name, isComparingJsxAttributes) {
        if (targetType.flags & 524288 /* TypeFlags.Object */) {
            // For backwards compatibility a symbol-named property is satisfied by a string index signature. This
            // is incorrect and inconsistent with element access expressions, where it is an error, so eventually
            // we should remove this exception.
            if (getPropertyOfObjectType(targetType, name) ||
                getApplicableIndexInfoForName(targetType, name) ||
                isLateBoundName(name) && getIndexInfoOfType(targetType, stringType) ||
                isComparingJsxAttributes && isHyphenatedJsxName(name)) {
                // For JSXAttributes, if the attribute has a hyphenated name, consider that the attribute to be known.
                return true;
            }
        }
        else if (targetType.flags & 3145728 /* TypeFlags.UnionOrIntersection */ && isExcessPropertyCheckTarget(targetType)) {
            for (var _i = 0, _a = targetType.types; _i < _a.length; _i++) {
                var t = _a[_i];
                if (isKnownProperty(t, name, isComparingJsxAttributes)) {
                    return true;
                }
            }
        }
        return false;
    }
    function isExcessPropertyCheckTarget(type) {
        return !!(type.flags & 524288 /* TypeFlags.Object */ && !((0, ts_1.getObjectFlags)(type) & 512 /* ObjectFlags.ObjectLiteralPatternWithComputedProperties */) ||
            type.flags & 67108864 /* TypeFlags.NonPrimitive */ ||
            type.flags & 1048576 /* TypeFlags.Union */ && (0, ts_1.some)(type.types, isExcessPropertyCheckTarget) ||
            type.flags & 2097152 /* TypeFlags.Intersection */ && (0, ts_1.every)(type.types, isExcessPropertyCheckTarget));
    }
    function checkJsxExpression(node, checkMode) {
        checkGrammarJsxExpression(node);
        if (node.expression) {
            var type = checkExpression(node.expression, checkMode);
            if (node.dotDotDotToken && type !== anyType && !isArrayType(type)) {
                error(node, ts_1.Diagnostics.JSX_spread_child_must_be_an_array_type);
            }
            return type;
        }
        else {
            return errorType;
        }
    }
    function getDeclarationNodeFlagsFromSymbol(s) {
        return s.valueDeclaration ? (0, ts_1.getCombinedNodeFlags)(s.valueDeclaration) : 0;
    }
    /**
     * Return whether this symbol is a member of a prototype somewhere
     * Note that this is not tracked well within the compiler, so the answer may be incorrect.
     */
    function isPrototypeProperty(symbol) {
        if (symbol.flags & 8192 /* SymbolFlags.Method */ || (0, ts_1.getCheckFlags)(symbol) & 4 /* CheckFlags.SyntheticMethod */) {
            return true;
        }
        if ((0, ts_1.isInJSFile)(symbol.valueDeclaration)) {
            var parent_12 = symbol.valueDeclaration.parent;
            return parent_12 && (0, ts_1.isBinaryExpression)(parent_12) &&
                (0, ts_1.getAssignmentDeclarationKind)(parent_12) === 3 /* AssignmentDeclarationKind.PrototypeProperty */;
        }
    }
    /**
     * Check whether the requested property access is valid.
     * Returns true if node is a valid property access, and false otherwise.
     * @param node The node to be checked.
     * @param isSuper True if the access is from `super.`.
     * @param type The type of the object whose property is being accessed. (Not the type of the property.)
     * @param prop The symbol for the property being accessed.
     */
    function checkPropertyAccessibility(node, isSuper, writing, type, prop, reportError) {
        if (reportError === void 0) { reportError = true; }
        var errorNode = !reportError ? undefined :
            node.kind === 165 /* SyntaxKind.QualifiedName */ ? node.right :
                node.kind === 204 /* SyntaxKind.ImportType */ ? node :
                    node.kind === 207 /* SyntaxKind.BindingElement */ && node.propertyName ? node.propertyName : node.name;
        return checkPropertyAccessibilityAtLocation(node, isSuper, writing, type, prop, errorNode);
    }
    /**
     * Check whether the requested property can be accessed at the requested location.
     * Returns true if node is a valid property access, and false otherwise.
     * @param location The location node where we want to check if the property is accessible.
     * @param isSuper True if the access is from `super.`.
     * @param writing True if this is a write property access, false if it is a read property access.
     * @param containingType The type of the object whose property is being accessed. (Not the type of the property.)
     * @param prop The symbol for the property being accessed.
     * @param errorNode The node where we should report an invalid property access error, or undefined if we should not report errors.
     */
    function checkPropertyAccessibilityAtLocation(location, isSuper, writing, containingType, prop, errorNode) {
        var flags = (0, ts_1.getDeclarationModifierFlagsFromSymbol)(prop, writing);
        if (isSuper) {
            // TS 1.0 spec (April 2014): 4.8.2
            // - In a constructor, instance member function, instance member accessor, or
            //   instance member variable initializer where this references a derived class instance,
            //   a super property access is permitted and must specify a public instance member function of the base class.
            // - In a static member function or static member accessor
            //   where this references the constructor function object of a derived class,
            //   a super property access is permitted and must specify a public static member function of the base class.
            if (languageVersion < 2 /* ScriptTarget.ES2015 */) {
                if (symbolHasNonMethodDeclaration(prop)) {
                    if (errorNode) {
                        error(errorNode, ts_1.Diagnostics.Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword);
                    }
                    return false;
                }
            }
            if (flags & 256 /* ModifierFlags.Abstract */) {
                // A method cannot be accessed in a super property access if the method is abstract.
                // This error could mask a private property access error. But, a member
                // cannot simultaneously be private and abstract, so this will trigger an
                // additional error elsewhere.
                if (errorNode) {
                    error(errorNode, ts_1.Diagnostics.Abstract_method_0_in_class_1_cannot_be_accessed_via_super_expression, symbolToString(prop), typeToString(getDeclaringClass(prop)));
                }
                return false;
            }
        }
        // Referencing abstract properties within their own constructors is not allowed
        if ((flags & 256 /* ModifierFlags.Abstract */) && symbolHasNonMethodDeclaration(prop) &&
            ((0, ts_1.isThisProperty)(location) || (0, ts_1.isThisInitializedObjectBindingExpression)(location) || (0, ts_1.isObjectBindingPattern)(location.parent) && (0, ts_1.isThisInitializedDeclaration)(location.parent.parent))) {
            var declaringClassDeclaration = (0, ts_1.getClassLikeDeclarationOfSymbol)(getParentOfSymbol(prop));
            if (declaringClassDeclaration && isNodeUsedDuringClassInitialization(location)) {
                if (errorNode) {
                    error(errorNode, ts_1.Diagnostics.Abstract_property_0_in_class_1_cannot_be_accessed_in_the_constructor, symbolToString(prop), (0, ts_1.getTextOfIdentifierOrLiteral)(declaringClassDeclaration.name));
                }
                return false;
            }
        }
        // Public properties are otherwise accessible.
        if (!(flags & 24 /* ModifierFlags.NonPublicAccessibilityModifier */)) {
            return true;
        }
        // Property is known to be private or protected at this point
        // Private property is accessible if the property is within the declaring class
        if (flags & 8 /* ModifierFlags.Private */) {
            var declaringClassDeclaration = (0, ts_1.getClassLikeDeclarationOfSymbol)(getParentOfSymbol(prop));
            if (!isNodeWithinClass(location, declaringClassDeclaration)) {
                if (errorNode) {
                    error(errorNode, ts_1.Diagnostics.Property_0_is_private_and_only_accessible_within_class_1, symbolToString(prop), typeToString(getDeclaringClass(prop)));
                }
                return false;
            }
            return true;
        }
        // Property is known to be protected at this point
        // All protected properties of a supertype are accessible in a super access
        if (isSuper) {
            return true;
        }
        // Find the first enclosing class that has the declaring classes of the protected constituents
        // of the property as base classes
        var enclosingClass = forEachEnclosingClass(location, function (enclosingDeclaration) {
            var enclosingClass = getDeclaredTypeOfSymbol(getSymbolOfDeclaration(enclosingDeclaration));
            return isClassDerivedFromDeclaringClasses(enclosingClass, prop, writing);
        });
        // A protected property is accessible if the property is within the declaring class or classes derived from it
        if (!enclosingClass) {
            // allow PropertyAccessibility if context is in function with this parameter
            // static member access is disallowed
            enclosingClass = getEnclosingClassFromThisParameter(location);
            enclosingClass = enclosingClass && isClassDerivedFromDeclaringClasses(enclosingClass, prop, writing);
            if (flags & 32 /* ModifierFlags.Static */ || !enclosingClass) {
                if (errorNode) {
                    error(errorNode, ts_1.Diagnostics.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses, symbolToString(prop), typeToString(getDeclaringClass(prop) || containingType));
                }
                return false;
            }
        }
        // No further restrictions for static properties
        if (flags & 32 /* ModifierFlags.Static */) {
            return true;
        }
        if (containingType.flags & 262144 /* TypeFlags.TypeParameter */) {
            // get the original type -- represented as the type constraint of the 'this' type
            containingType = containingType.isThisType ? getConstraintOfTypeParameter(containingType) : getBaseConstraintOfType(containingType); // TODO: GH#18217 Use a different variable that's allowed to be undefined
        }
        if (!containingType || !hasBaseType(containingType, enclosingClass)) {
            if (errorNode) {
                error(errorNode, ts_1.Diagnostics.Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1_This_is_an_instance_of_class_2, symbolToString(prop), typeToString(enclosingClass), typeToString(containingType));
            }
            return false;
        }
        return true;
    }
    function getEnclosingClassFromThisParameter(node) {
        var thisParameter = getThisParameterFromNodeContext(node);
        var thisType = (thisParameter === null || thisParameter === void 0 ? void 0 : thisParameter.type) && getTypeFromTypeNode(thisParameter.type);
        if (thisType && thisType.flags & 262144 /* TypeFlags.TypeParameter */) {
            thisType = getConstraintOfTypeParameter(thisType);
        }
        if (thisType && (0, ts_1.getObjectFlags)(thisType) & (3 /* ObjectFlags.ClassOrInterface */ | 4 /* ObjectFlags.Reference */)) {
            return getTargetType(thisType);
        }
        return undefined;
    }
    function getThisParameterFromNodeContext(node) {
        var thisContainer = (0, ts_1.getThisContainer)(node, /*includeArrowFunctions*/ false, /*includeClassComputedPropertyName*/ false);
        return thisContainer && (0, ts_1.isFunctionLike)(thisContainer) ? (0, ts_1.getThisParameter)(thisContainer) : undefined;
    }
    function symbolHasNonMethodDeclaration(symbol) {
        return !!forEachProperty(symbol, function (prop) { return !(prop.flags & 8192 /* SymbolFlags.Method */); });
    }
    function checkNonNullExpression(node) {
        return checkNonNullType(checkExpression(node), node);
    }
    function isNullableType(type) {
        return !!(getTypeFacts(type) & 50331648 /* TypeFacts.IsUndefinedOrNull */);
    }
    function getNonNullableTypeIfNeeded(type) {
        return isNullableType(type) ? getNonNullableType(type) : type;
    }
    function reportObjectPossiblyNullOrUndefinedError(node, facts) {
        var nodeText = (0, ts_1.isEntityNameExpression)(node) ? (0, ts_1.entityNameToString)(node) : undefined;
        if (node.kind === 106 /* SyntaxKind.NullKeyword */) {
            error(node, ts_1.Diagnostics.The_value_0_cannot_be_used_here, "null");
            return;
        }
        if (nodeText !== undefined && nodeText.length < 100) {
            if ((0, ts_1.isIdentifier)(node) && nodeText === "undefined") {
                error(node, ts_1.Diagnostics.The_value_0_cannot_be_used_here, "undefined");
                return;
            }
            error(node, facts & 16777216 /* TypeFacts.IsUndefined */ ? facts & 33554432 /* TypeFacts.IsNull */ ?
                ts_1.Diagnostics._0_is_possibly_null_or_undefined :
                ts_1.Diagnostics._0_is_possibly_undefined :
                ts_1.Diagnostics._0_is_possibly_null, nodeText);
        }
        else {
            error(node, facts & 16777216 /* TypeFacts.IsUndefined */ ? facts & 33554432 /* TypeFacts.IsNull */ ?
                ts_1.Diagnostics.Object_is_possibly_null_or_undefined :
                ts_1.Diagnostics.Object_is_possibly_undefined :
                ts_1.Diagnostics.Object_is_possibly_null);
        }
    }
    function reportCannotInvokePossiblyNullOrUndefinedError(node, facts) {
        error(node, facts & 16777216 /* TypeFacts.IsUndefined */ ? facts & 33554432 /* TypeFacts.IsNull */ ?
            ts_1.Diagnostics.Cannot_invoke_an_object_which_is_possibly_null_or_undefined :
            ts_1.Diagnostics.Cannot_invoke_an_object_which_is_possibly_undefined :
            ts_1.Diagnostics.Cannot_invoke_an_object_which_is_possibly_null);
    }
    function checkNonNullTypeWithReporter(type, node, reportError) {
        if (strictNullChecks && type.flags & 2 /* TypeFlags.Unknown */) {
            if ((0, ts_1.isEntityNameExpression)(node)) {
                var nodeText = (0, ts_1.entityNameToString)(node);
                if (nodeText.length < 100) {
                    error(node, ts_1.Diagnostics._0_is_of_type_unknown, nodeText);
                    return errorType;
                }
            }
            error(node, ts_1.Diagnostics.Object_is_of_type_unknown);
            return errorType;
        }
        var facts = getTypeFacts(type);
        if (facts & 50331648 /* TypeFacts.IsUndefinedOrNull */) {
            reportError(node, facts);
            var t = getNonNullableType(type);
            return t.flags & (98304 /* TypeFlags.Nullable */ | 131072 /* TypeFlags.Never */) ? errorType : t;
        }
        return type;
    }
    function checkNonNullType(type, node) {
        return checkNonNullTypeWithReporter(type, node, reportObjectPossiblyNullOrUndefinedError);
    }
    function checkNonNullNonVoidType(type, node) {
        var nonNullType = checkNonNullType(type, node);
        if (nonNullType.flags & 16384 /* TypeFlags.Void */) {
            if ((0, ts_1.isEntityNameExpression)(node)) {
                var nodeText = (0, ts_1.entityNameToString)(node);
                if ((0, ts_1.isIdentifier)(node) && nodeText === "undefined") {
                    error(node, ts_1.Diagnostics.The_value_0_cannot_be_used_here, nodeText);
                    return nonNullType;
                }
                if (nodeText.length < 100) {
                    error(node, ts_1.Diagnostics._0_is_possibly_undefined, nodeText);
                    return nonNullType;
                }
            }
            error(node, ts_1.Diagnostics.Object_is_possibly_undefined);
        }
        return nonNullType;
    }
    function checkPropertyAccessExpression(node, checkMode, writeOnly) {
        return node.flags & 32 /* NodeFlags.OptionalChain */ ? checkPropertyAccessChain(node, checkMode) :
            checkPropertyAccessExpressionOrQualifiedName(node, node.expression, checkNonNullExpression(node.expression), node.name, checkMode, writeOnly);
    }
    function checkPropertyAccessChain(node, checkMode) {
        var leftType = checkExpression(node.expression);
        var nonOptionalType = getOptionalExpressionType(leftType, node.expression);
        return propagateOptionalTypeMarker(checkPropertyAccessExpressionOrQualifiedName(node, node.expression, checkNonNullType(nonOptionalType, node.expression), node.name, checkMode), node, nonOptionalType !== leftType);
    }
    function checkQualifiedName(node, checkMode) {
        var leftType = (0, ts_1.isPartOfTypeQuery)(node) && (0, ts_1.isThisIdentifier)(node.left) ? checkNonNullType(checkThisExpression(node.left), node.left) : checkNonNullExpression(node.left);
        return checkPropertyAccessExpressionOrQualifiedName(node, node.left, leftType, node.right, checkMode);
    }
    function isMethodAccessForCall(node) {
        while (node.parent.kind === 216 /* SyntaxKind.ParenthesizedExpression */) {
            node = node.parent;
        }
        return (0, ts_1.isCallOrNewExpression)(node.parent) && node.parent.expression === node;
    }
    // Lookup the private identifier lexically.
    function lookupSymbolForPrivateIdentifierDeclaration(propName, location) {
        for (var containingClass = (0, ts_1.getContainingClass)(location); !!containingClass; containingClass = (0, ts_1.getContainingClass)(containingClass)) {
            var symbol = containingClass.symbol;
            var name_28 = (0, ts_1.getSymbolNameForPrivateIdentifier)(symbol, propName);
            var prop = (symbol.members && symbol.members.get(name_28)) || (symbol.exports && symbol.exports.get(name_28));
            if (prop) {
                return prop;
            }
        }
    }
    function checkGrammarPrivateIdentifierExpression(privId) {
        if (!(0, ts_1.getContainingClass)(privId)) {
            return grammarErrorOnNode(privId, ts_1.Diagnostics.Private_identifiers_are_not_allowed_outside_class_bodies);
        }
        if (!(0, ts_1.isForInStatement)(privId.parent)) {
            if (!(0, ts_1.isExpressionNode)(privId)) {
                return grammarErrorOnNode(privId, ts_1.Diagnostics.Private_identifiers_are_only_allowed_in_class_bodies_and_may_only_be_used_as_part_of_a_class_member_declaration_property_access_or_on_the_left_hand_side_of_an_in_expression);
            }
            var isInOperation = (0, ts_1.isBinaryExpression)(privId.parent) && privId.parent.operatorToken.kind === 103 /* SyntaxKind.InKeyword */;
            if (!getSymbolForPrivateIdentifierExpression(privId) && !isInOperation) {
                return grammarErrorOnNode(privId, ts_1.Diagnostics.Cannot_find_name_0, (0, ts_1.idText)(privId));
            }
        }
        return false;
    }
    function checkPrivateIdentifierExpression(privId) {
        checkGrammarPrivateIdentifierExpression(privId);
        var symbol = getSymbolForPrivateIdentifierExpression(privId);
        if (symbol) {
            markPropertyAsReferenced(symbol, /*nodeForCheckWriteOnly*/ undefined, /*isSelfTypeAccess*/ false);
        }
        return anyType;
    }
    function getSymbolForPrivateIdentifierExpression(privId) {
        if (!(0, ts_1.isExpressionNode)(privId)) {
            return undefined;
        }
        var links = getNodeLinks(privId);
        if (links.resolvedSymbol === undefined) {
            links.resolvedSymbol = lookupSymbolForPrivateIdentifierDeclaration(privId.escapedText, privId);
        }
        return links.resolvedSymbol;
    }
    function getPrivateIdentifierPropertyOfType(leftType, lexicallyScopedIdentifier) {
        return getPropertyOfType(leftType, lexicallyScopedIdentifier.escapedName);
    }
    function checkPrivateIdentifierPropertyAccess(leftType, right, lexicallyScopedIdentifier) {
        // Either the identifier could not be looked up in the lexical scope OR the lexically scoped identifier did not exist on the type.
        // Find a private identifier with the same description on the type.
        var propertyOnType;
        var properties = getPropertiesOfType(leftType);
        if (properties) {
            (0, ts_1.forEach)(properties, function (symbol) {
                var decl = symbol.valueDeclaration;
                if (decl && (0, ts_1.isNamedDeclaration)(decl) && (0, ts_1.isPrivateIdentifier)(decl.name) && decl.name.escapedText === right.escapedText) {
                    propertyOnType = symbol;
                    return true;
                }
            });
        }
        var diagName = diagnosticName(right);
        if (propertyOnType) {
            var typeValueDecl = ts_1.Debug.checkDefined(propertyOnType.valueDeclaration);
            var typeClass_1 = ts_1.Debug.checkDefined((0, ts_1.getContainingClass)(typeValueDecl));
            // We found a private identifier property with the same description.
            // Either:
            // - There is a lexically scoped private identifier AND it shadows the one we found on the type.
            // - It is an attempt to access the private identifier outside of the class.
            if (lexicallyScopedIdentifier === null || lexicallyScopedIdentifier === void 0 ? void 0 : lexicallyScopedIdentifier.valueDeclaration) {
                var lexicalValueDecl = lexicallyScopedIdentifier.valueDeclaration;
                var lexicalClass = (0, ts_1.getContainingClass)(lexicalValueDecl);
                ts_1.Debug.assert(!!lexicalClass);
                if ((0, ts_1.findAncestor)(lexicalClass, function (n) { return typeClass_1 === n; })) {
                    var diagnostic = error(right, ts_1.Diagnostics.The_property_0_cannot_be_accessed_on_type_1_within_this_class_because_it_is_shadowed_by_another_private_identifier_with_the_same_spelling, diagName, typeToString(leftType));
                    (0, ts_1.addRelatedInfo)(diagnostic, (0, ts_1.createDiagnosticForNode)(lexicalValueDecl, ts_1.Diagnostics.The_shadowing_declaration_of_0_is_defined_here, diagName), (0, ts_1.createDiagnosticForNode)(typeValueDecl, ts_1.Diagnostics.The_declaration_of_0_that_you_probably_intended_to_use_is_defined_here, diagName));
                    return true;
                }
            }
            error(right, ts_1.Diagnostics.Property_0_is_not_accessible_outside_class_1_because_it_has_a_private_identifier, diagName, diagnosticName(typeClass_1.name || anon));
            return true;
        }
        return false;
    }
    function isThisPropertyAccessInConstructor(node, prop) {
        return (isConstructorDeclaredProperty(prop) || (0, ts_1.isThisProperty)(node) && isAutoTypedProperty(prop))
            && (0, ts_1.getThisContainer)(node, /*includeArrowFunctions*/ true, /*includeClassComputedPropertyName*/ false) === getDeclaringConstructor(prop);
    }
    function checkPropertyAccessExpressionOrQualifiedName(node, left, leftType, right, checkMode, writeOnly) {
        var parentSymbol = getNodeLinks(left).resolvedSymbol;
        var assignmentKind = (0, ts_1.getAssignmentTargetKind)(node);
        var apparentType = getApparentType(assignmentKind !== 0 /* AssignmentKind.None */ || isMethodAccessForCall(node) ? getWidenedType(leftType) : leftType);
        var isAnyLike = isTypeAny(apparentType) || apparentType === silentNeverType;
        var prop;
        if ((0, ts_1.isPrivateIdentifier)(right)) {
            if (languageVersion < 99 /* ScriptTarget.ESNext */) {
                if (assignmentKind !== 0 /* AssignmentKind.None */) {
                    checkExternalEmitHelpers(node, 1048576 /* ExternalEmitHelpers.ClassPrivateFieldSet */);
                }
                if (assignmentKind !== 1 /* AssignmentKind.Definite */) {
                    checkExternalEmitHelpers(node, 524288 /* ExternalEmitHelpers.ClassPrivateFieldGet */);
                }
            }
            var lexicallyScopedSymbol = lookupSymbolForPrivateIdentifierDeclaration(right.escapedText, right);
            if (assignmentKind && lexicallyScopedSymbol && lexicallyScopedSymbol.valueDeclaration && (0, ts_1.isMethodDeclaration)(lexicallyScopedSymbol.valueDeclaration)) {
                grammarErrorOnNode(right, ts_1.Diagnostics.Cannot_assign_to_private_method_0_Private_methods_are_not_writable, (0, ts_1.idText)(right));
            }
            if (isAnyLike) {
                if (lexicallyScopedSymbol) {
                    return isErrorType(apparentType) ? errorType : apparentType;
                }
                if (!(0, ts_1.getContainingClass)(right)) {
                    grammarErrorOnNode(right, ts_1.Diagnostics.Private_identifiers_are_not_allowed_outside_class_bodies);
                    return anyType;
                }
            }
            prop = lexicallyScopedSymbol ? getPrivateIdentifierPropertyOfType(leftType, lexicallyScopedSymbol) : undefined;
            // Check for private-identifier-specific shadowing and lexical-scoping errors.
            if (!prop && checkPrivateIdentifierPropertyAccess(leftType, right, lexicallyScopedSymbol)) {
                return errorType;
            }
            else {
                var isSetonlyAccessor = prop && prop.flags & 65536 /* SymbolFlags.SetAccessor */ && !(prop.flags & 32768 /* SymbolFlags.GetAccessor */);
                if (isSetonlyAccessor && assignmentKind !== 1 /* AssignmentKind.Definite */) {
                    error(node, ts_1.Diagnostics.Private_accessor_was_defined_without_a_getter);
                }
            }
        }
        else {
            if (isAnyLike) {
                if ((0, ts_1.isIdentifier)(left) && parentSymbol) {
                    markAliasReferenced(parentSymbol, node);
                }
                return isErrorType(apparentType) ? errorType : apparentType;
            }
            prop = getPropertyOfType(apparentType, right.escapedText, /*skipObjectFunctionPropertyAugment*/ false, /*includeTypeOnlyMembers*/ node.kind === 165 /* SyntaxKind.QualifiedName */);
        }
        // In `Foo.Bar.Baz`, 'Foo' is not referenced if 'Bar' is a const enum or a module containing only const enums.
        // `Foo` is also not referenced in `enum FooCopy { Bar = Foo.Bar }`, because the enum member value gets inlined
        // here even if `Foo` is not a const enum.
        //
        // The exceptions are:
        //   1. if 'isolatedModules' is enabled, because the const enum value will not be inlined, and
        //   2. if 'preserveConstEnums' is enabled and the expression is itself an export, e.g. `export = Foo.Bar.Baz`.
        if ((0, ts_1.isIdentifier)(left) && parentSymbol && ((0, ts_1.getIsolatedModules)(compilerOptions) ||
            !(prop && (isConstEnumOrConstEnumOnlyModule(prop) || prop.flags & 8 /* SymbolFlags.EnumMember */ && node.parent.kind === 305 /* SyntaxKind.EnumMember */)) ||
            (0, ts_1.shouldPreserveConstEnums)(compilerOptions) && isExportOrExportExpression(node))) {
            markAliasReferenced(parentSymbol, node);
        }
        var propType;
        if (!prop) {
            var indexInfo = !(0, ts_1.isPrivateIdentifier)(right) && (assignmentKind === 0 /* AssignmentKind.None */ || !isGenericObjectType(leftType) || (0, ts_1.isThisTypeParameter)(leftType)) ?
                getApplicableIndexInfoForName(apparentType, right.escapedText) : undefined;
            if (!(indexInfo && indexInfo.type)) {
                var isUncheckedJS = isUncheckedJSSuggestion(node, leftType.symbol, /*excludeClasses*/ true);
                if (!isUncheckedJS && isJSLiteralType(leftType)) {
                    return anyType;
                }
                if (leftType.symbol === globalThisSymbol) {
                    if (globalThisSymbol.exports.has(right.escapedText) && (globalThisSymbol.exports.get(right.escapedText).flags & 418 /* SymbolFlags.BlockScoped */)) {
                        error(right, ts_1.Diagnostics.Property_0_does_not_exist_on_type_1, (0, ts_1.unescapeLeadingUnderscores)(right.escapedText), typeToString(leftType));
                    }
                    else if (noImplicitAny) {
                        error(right, ts_1.Diagnostics.Element_implicitly_has_an_any_type_because_type_0_has_no_index_signature, typeToString(leftType));
                    }
                    return anyType;
                }
                if (right.escapedText && !checkAndReportErrorForExtendingInterface(node)) {
                    reportNonexistentProperty(right, (0, ts_1.isThisTypeParameter)(leftType) ? apparentType : leftType, isUncheckedJS);
                }
                return errorType;
            }
            if (indexInfo.isReadonly && ((0, ts_1.isAssignmentTarget)(node) || (0, ts_1.isDeleteTarget)(node))) {
                error(node, ts_1.Diagnostics.Index_signature_in_type_0_only_permits_reading, typeToString(apparentType));
            }
            propType = (compilerOptions.noUncheckedIndexedAccess && !(0, ts_1.isAssignmentTarget)(node)) ? getUnionType([indexInfo.type, missingType]) : indexInfo.type;
            if (compilerOptions.noPropertyAccessFromIndexSignature && (0, ts_1.isPropertyAccessExpression)(node)) {
                error(right, ts_1.Diagnostics.Property_0_comes_from_an_index_signature_so_it_must_be_accessed_with_0, (0, ts_1.unescapeLeadingUnderscores)(right.escapedText));
            }
            if (indexInfo.declaration && (0, ts_1.getCombinedNodeFlags)(indexInfo.declaration) & 268435456 /* NodeFlags.Deprecated */) {
                addDeprecatedSuggestion(right, [indexInfo.declaration], right.escapedText);
            }
        }
        else {
            var targetPropSymbol = resolveAliasWithDeprecationCheck(prop, right);
            if (isDeprecatedSymbol(targetPropSymbol) && isUncalledFunctionReference(node, targetPropSymbol) && targetPropSymbol.declarations) {
                addDeprecatedSuggestion(right, targetPropSymbol.declarations, right.escapedText);
            }
            checkPropertyNotUsedBeforeDeclaration(prop, node, right);
            markPropertyAsReferenced(prop, node, isSelfTypeAccess(left, parentSymbol));
            getNodeLinks(node).resolvedSymbol = prop;
            checkPropertyAccessibility(node, left.kind === 108 /* SyntaxKind.SuperKeyword */, (0, ts_1.isWriteAccess)(node), apparentType, prop);
            if (isAssignmentToReadonlyEntity(node, prop, assignmentKind)) {
                error(right, ts_1.Diagnostics.Cannot_assign_to_0_because_it_is_a_read_only_property, (0, ts_1.idText)(right));
                return errorType;
            }
            propType = isThisPropertyAccessInConstructor(node, prop) ? autoType : writeOnly || (0, ts_1.isWriteOnlyAccess)(node) ? getWriteTypeOfSymbol(prop) : getTypeOfSymbol(prop);
        }
        return getFlowTypeOfAccessExpression(node, prop, propType, right, checkMode);
    }
    /**
     * Determines whether a did-you-mean error should be a suggestion in an unchecked JS file.
     * Only applies to unchecked JS files without checkJS, // @ts-check or // @ts-nocheck
     * It does not suggest when the suggestion:
     * - Is from a global file that is different from the reference file, or
     * - (optionally) Is a class, or is a this.x property access expression
     */
    function isUncheckedJSSuggestion(node, suggestion, excludeClasses) {
        var file = (0, ts_1.getSourceFileOfNode)(node);
        if (file) {
            if (compilerOptions.checkJs === undefined && file.checkJsDirective === undefined && (file.scriptKind === 1 /* ScriptKind.JS */ || file.scriptKind === 2 /* ScriptKind.JSX */)) {
                var declarationFile = (0, ts_1.forEach)(suggestion === null || suggestion === void 0 ? void 0 : suggestion.declarations, ts_1.getSourceFileOfNode);
                return !(file !== declarationFile && !!declarationFile && isGlobalSourceFile(declarationFile))
                    && !(excludeClasses && suggestion && suggestion.flags & 32 /* SymbolFlags.Class */)
                    && !(!!node && excludeClasses && (0, ts_1.isPropertyAccessExpression)(node) && node.expression.kind === 110 /* SyntaxKind.ThisKeyword */);
            }
        }
        return false;
    }
    function getFlowTypeOfAccessExpression(node, prop, propType, errorNode, checkMode) {
        // Only compute control flow type if this is a property access expression that isn't an
        // assignment target, and the referenced property was declared as a variable, property,
        // accessor, or optional method.
        var assignmentKind = (0, ts_1.getAssignmentTargetKind)(node);
        if (assignmentKind === 1 /* AssignmentKind.Definite */) {
            return removeMissingType(propType, !!(prop && prop.flags & 16777216 /* SymbolFlags.Optional */));
        }
        if (prop &&
            !(prop.flags & (3 /* SymbolFlags.Variable */ | 4 /* SymbolFlags.Property */ | 98304 /* SymbolFlags.Accessor */))
            && !(prop.flags & 8192 /* SymbolFlags.Method */ && propType.flags & 1048576 /* TypeFlags.Union */)
            && !isDuplicatedCommonJSExport(prop.declarations)) {
            return propType;
        }
        if (propType === autoType) {
            return getFlowTypeOfProperty(node, prop);
        }
        propType = getNarrowableTypeForReference(propType, node, checkMode);
        // If strict null checks and strict property initialization checks are enabled, if we have
        // a this.xxx property access, if the property is an instance property without an initializer,
        // and if we are in a constructor of the same class as the property declaration, assume that
        // the property is uninitialized at the top of the control flow.
        var assumeUninitialized = false;
        if (strictNullChecks && strictPropertyInitialization && (0, ts_1.isAccessExpression)(node) && node.expression.kind === 110 /* SyntaxKind.ThisKeyword */) {
            var declaration = prop && prop.valueDeclaration;
            if (declaration && isPropertyWithoutInitializer(declaration)) {
                if (!(0, ts_1.isStatic)(declaration)) {
                    var flowContainer = getControlFlowContainer(node);
                    if (flowContainer.kind === 175 /* SyntaxKind.Constructor */ && flowContainer.parent === declaration.parent && !(declaration.flags & 16777216 /* NodeFlags.Ambient */)) {
                        assumeUninitialized = true;
                    }
                }
            }
        }
        else if (strictNullChecks && prop && prop.valueDeclaration &&
            (0, ts_1.isPropertyAccessExpression)(prop.valueDeclaration) &&
            (0, ts_1.getAssignmentDeclarationPropertyAccessKind)(prop.valueDeclaration) &&
            getControlFlowContainer(node) === getControlFlowContainer(prop.valueDeclaration)) {
            assumeUninitialized = true;
        }
        var flowType = getFlowTypeOfReference(node, propType, assumeUninitialized ? getOptionalType(propType) : propType);
        if (assumeUninitialized && !containsUndefinedType(propType) && containsUndefinedType(flowType)) {
            error(errorNode, ts_1.Diagnostics.Property_0_is_used_before_being_assigned, symbolToString(prop)); // TODO: GH#18217
            // Return the declared type to reduce follow-on errors
            return propType;
        }
        return assignmentKind ? getBaseTypeOfLiteralType(flowType) : flowType;
    }
    function checkPropertyNotUsedBeforeDeclaration(prop, node, right) {
        var valueDeclaration = prop.valueDeclaration;
        if (!valueDeclaration || (0, ts_1.getSourceFileOfNode)(node).isDeclarationFile) {
            return;
        }
        var diagnosticMessage;
        var declarationName = (0, ts_1.idText)(right);
        if (isInPropertyInitializerOrClassStaticBlock(node)
            && !isOptionalPropertyDeclaration(valueDeclaration)
            && !((0, ts_1.isAccessExpression)(node) && (0, ts_1.isAccessExpression)(node.expression))
            && !isBlockScopedNameDeclaredBeforeUse(valueDeclaration, right)
            && !((0, ts_1.isMethodDeclaration)(valueDeclaration) && (0, ts_1.getCombinedModifierFlags)(valueDeclaration) & 32 /* ModifierFlags.Static */)
            && (compilerOptions.useDefineForClassFields || !isPropertyDeclaredInAncestorClass(prop))) {
            diagnosticMessage = error(right, ts_1.Diagnostics.Property_0_is_used_before_its_initialization, declarationName);
        }
        else if (valueDeclaration.kind === 262 /* SyntaxKind.ClassDeclaration */ &&
            node.parent.kind !== 182 /* SyntaxKind.TypeReference */ &&
            !(valueDeclaration.flags & 16777216 /* NodeFlags.Ambient */) &&
            !isBlockScopedNameDeclaredBeforeUse(valueDeclaration, right)) {
            diagnosticMessage = error(right, ts_1.Diagnostics.Class_0_used_before_its_declaration, declarationName);
        }
        if (diagnosticMessage) {
            (0, ts_1.addRelatedInfo)(diagnosticMessage, (0, ts_1.createDiagnosticForNode)(valueDeclaration, ts_1.Diagnostics._0_is_declared_here, declarationName));
        }
    }
    function isInPropertyInitializerOrClassStaticBlock(node) {
        return !!(0, ts_1.findAncestor)(node, function (node) {
            switch (node.kind) {
                case 171 /* SyntaxKind.PropertyDeclaration */:
                    return true;
                case 302 /* SyntaxKind.PropertyAssignment */:
                case 173 /* SyntaxKind.MethodDeclaration */:
                case 176 /* SyntaxKind.GetAccessor */:
                case 177 /* SyntaxKind.SetAccessor */:
                case 304 /* SyntaxKind.SpreadAssignment */:
                case 166 /* SyntaxKind.ComputedPropertyName */:
                case 238 /* SyntaxKind.TemplateSpan */:
                case 293 /* SyntaxKind.JsxExpression */:
                case 290 /* SyntaxKind.JsxAttribute */:
                case 291 /* SyntaxKind.JsxAttributes */:
                case 292 /* SyntaxKind.JsxSpreadAttribute */:
                case 285 /* SyntaxKind.JsxOpeningElement */:
                case 232 /* SyntaxKind.ExpressionWithTypeArguments */:
                case 297 /* SyntaxKind.HeritageClause */:
                    return false;
                case 218 /* SyntaxKind.ArrowFunction */:
                case 243 /* SyntaxKind.ExpressionStatement */:
                    return (0, ts_1.isBlock)(node.parent) && (0, ts_1.isClassStaticBlockDeclaration)(node.parent.parent) ? true : "quit";
                default:
                    return (0, ts_1.isExpressionNode)(node) ? false : "quit";
            }
        });
    }
    /**
     * It's possible that "prop.valueDeclaration" is a local declaration, but the property was also declared in a superclass.
     * In that case we won't consider it used before its declaration, because it gets its value from the superclass' declaration.
     */
    function isPropertyDeclaredInAncestorClass(prop) {
        if (!(prop.parent.flags & 32 /* SymbolFlags.Class */)) {
            return false;
        }
        var classType = getTypeOfSymbol(prop.parent);
        while (true) {
            classType = classType.symbol && getSuperClass(classType);
            if (!classType) {
                return false;
            }
            var superProperty = getPropertyOfType(classType, prop.escapedName);
            if (superProperty && superProperty.valueDeclaration) {
                return true;
            }
        }
    }
    function getSuperClass(classType) {
        var x = getBaseTypes(classType);
        if (x.length === 0) {
            return undefined;
        }
        return getIntersectionType(x);
    }
    function reportNonexistentProperty(propNode, containingType, isUncheckedJS) {
        var errorInfo;
        var relatedInfo;
        if (!(0, ts_1.isPrivateIdentifier)(propNode) && containingType.flags & 1048576 /* TypeFlags.Union */ && !(containingType.flags & 402784252 /* TypeFlags.Primitive */)) {
            for (var _i = 0, _a = containingType.types; _i < _a.length; _i++) {
                var subtype = _a[_i];
                if (!getPropertyOfType(subtype, propNode.escapedText) && !getApplicableIndexInfoForName(subtype, propNode.escapedText)) {
                    errorInfo = (0, ts_1.chainDiagnosticMessages)(errorInfo, ts_1.Diagnostics.Property_0_does_not_exist_on_type_1, (0, ts_1.declarationNameToString)(propNode), typeToString(subtype));
                    break;
                }
            }
        }
        if (typeHasStaticProperty(propNode.escapedText, containingType)) {
            var propName = (0, ts_1.declarationNameToString)(propNode);
            var typeName = typeToString(containingType);
            errorInfo = (0, ts_1.chainDiagnosticMessages)(errorInfo, ts_1.Diagnostics.Property_0_does_not_exist_on_type_1_Did_you_mean_to_access_the_static_member_2_instead, propName, typeName, typeName + "." + propName);
        }
        else {
            var promisedType = getPromisedTypeOfPromise(containingType);
            if (promisedType && getPropertyOfType(promisedType, propNode.escapedText)) {
                errorInfo = (0, ts_1.chainDiagnosticMessages)(errorInfo, ts_1.Diagnostics.Property_0_does_not_exist_on_type_1, (0, ts_1.declarationNameToString)(propNode), typeToString(containingType));
                relatedInfo = (0, ts_1.createDiagnosticForNode)(propNode, ts_1.Diagnostics.Did_you_forget_to_use_await);
            }
            else {
                var missingProperty = (0, ts_1.declarationNameToString)(propNode);
                var container = typeToString(containingType);
                var libSuggestion = getSuggestedLibForNonExistentProperty(missingProperty, containingType);
                if (libSuggestion !== undefined) {
                    errorInfo = (0, ts_1.chainDiagnosticMessages)(errorInfo, ts_1.Diagnostics.Property_0_does_not_exist_on_type_1_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_2_or_later, missingProperty, container, libSuggestion);
                }
                else {
                    var suggestion = getSuggestedSymbolForNonexistentProperty(propNode, containingType);
                    if (suggestion !== undefined) {
                        var suggestedName = (0, ts_1.symbolName)(suggestion);
                        var message = isUncheckedJS ? ts_1.Diagnostics.Property_0_may_not_exist_on_type_1_Did_you_mean_2 : ts_1.Diagnostics.Property_0_does_not_exist_on_type_1_Did_you_mean_2;
                        errorInfo = (0, ts_1.chainDiagnosticMessages)(errorInfo, message, missingProperty, container, suggestedName);
                        relatedInfo = suggestion.valueDeclaration && (0, ts_1.createDiagnosticForNode)(suggestion.valueDeclaration, ts_1.Diagnostics._0_is_declared_here, suggestedName);
                    }
                    else {
                        var diagnostic = containerSeemsToBeEmptyDomElement(containingType)
                            ? ts_1.Diagnostics.Property_0_does_not_exist_on_type_1_Try_changing_the_lib_compiler_option_to_include_dom
                            : ts_1.Diagnostics.Property_0_does_not_exist_on_type_1;
                        errorInfo = (0, ts_1.chainDiagnosticMessages)(elaborateNeverIntersection(errorInfo, containingType), diagnostic, missingProperty, container);
                    }
                }
            }
        }
        var resultDiagnostic = (0, ts_1.createDiagnosticForNodeFromMessageChain)((0, ts_1.getSourceFileOfNode)(propNode), propNode, errorInfo);
        if (relatedInfo) {
            (0, ts_1.addRelatedInfo)(resultDiagnostic, relatedInfo);
        }
        addErrorOrSuggestion(!isUncheckedJS || errorInfo.code !== ts_1.Diagnostics.Property_0_may_not_exist_on_type_1_Did_you_mean_2.code, resultDiagnostic);
    }
    function containerSeemsToBeEmptyDomElement(containingType) {
        return (compilerOptions.lib && !compilerOptions.lib.includes("dom")) &&
            everyContainedType(containingType, function (type) { return type.symbol && /^(EventTarget|Node|((HTML[a-zA-Z]*)?Element))$/.test((0, ts_1.unescapeLeadingUnderscores)(type.symbol.escapedName)); }) &&
            isEmptyObjectType(containingType);
    }
    function typeHasStaticProperty(propName, containingType) {
        var prop = containingType.symbol && getPropertyOfType(getTypeOfSymbol(containingType.symbol), propName);
        return prop !== undefined && !!prop.valueDeclaration && (0, ts_1.isStatic)(prop.valueDeclaration);
    }
    function getSuggestedLibForNonExistentName(name) {
        var missingName = diagnosticName(name);
        var allFeatures = (0, ts_1.getScriptTargetFeatures)();
        var typeFeatures = allFeatures.get(missingName);
        return typeFeatures && (0, ts_1.firstIterator)(typeFeatures.keys());
    }
    function getSuggestedLibForNonExistentProperty(missingProperty, containingType) {
        var container = getApparentType(containingType).symbol;
        if (!container) {
            return undefined;
        }
        var containingTypeName = (0, ts_1.symbolName)(container);
        var allFeatures = (0, ts_1.getScriptTargetFeatures)();
        var typeFeatures = allFeatures.get(containingTypeName);
        if (typeFeatures) {
            for (var _i = 0, typeFeatures_1 = typeFeatures; _i < typeFeatures_1.length; _i++) {
                var _a = typeFeatures_1[_i], libTarget = _a[0], featuresOfType = _a[1];
                if ((0, ts_1.contains)(featuresOfType, missingProperty)) {
                    return libTarget;
                }
            }
        }
    }
    function getSuggestedSymbolForNonexistentClassMember(name, baseType) {
        return getSpellingSuggestionForName(name, getPropertiesOfType(baseType), 106500 /* SymbolFlags.ClassMember */);
    }
    function getSuggestedSymbolForNonexistentProperty(name, containingType) {
        var props = getPropertiesOfType(containingType);
        if (typeof name !== "string") {
            var parent_13 = name.parent;
            if ((0, ts_1.isPropertyAccessExpression)(parent_13)) {
                props = (0, ts_1.filter)(props, function (prop) { return isValidPropertyAccessForCompletions(parent_13, containingType, prop); });
            }
            name = (0, ts_1.idText)(name);
        }
        return getSpellingSuggestionForName(name, props, 111551 /* SymbolFlags.Value */);
    }
    function getSuggestedSymbolForNonexistentJSXAttribute(name, containingType) {
        var strName = (0, ts_1.isString)(name) ? name : (0, ts_1.idText)(name);
        var properties = getPropertiesOfType(containingType);
        var jsxSpecific = strName === "for" ? (0, ts_1.find)(properties, function (x) { return (0, ts_1.symbolName)(x) === "htmlFor"; })
            : strName === "class" ? (0, ts_1.find)(properties, function (x) { return (0, ts_1.symbolName)(x) === "className"; })
                : undefined;
        return jsxSpecific !== null && jsxSpecific !== void 0 ? jsxSpecific : getSpellingSuggestionForName(strName, properties, 111551 /* SymbolFlags.Value */);
    }
    function getSuggestionForNonexistentProperty(name, containingType) {
        var suggestion = getSuggestedSymbolForNonexistentProperty(name, containingType);
        return suggestion && (0, ts_1.symbolName)(suggestion);
    }
    function getSuggestedSymbolForNonexistentSymbol(location, outerName, meaning) {
        ts_1.Debug.assert(outerName !== undefined, "outername should always be defined");
        var result = resolveNameHelper(location, outerName, meaning, /*nameNotFoundMessage*/ undefined, outerName, /*isUse*/ false, /*excludeGlobals*/ false, /*getSpellingSuggestions*/ true, function (symbols, name, meaning) {
            ts_1.Debug.assertEqual(outerName, name, "name should equal outerName");
            var symbol = getSymbol(symbols, name, meaning);
            // Sometimes the symbol is found when location is a return type of a function: `typeof x` and `x` is declared in the body of the function
            // So the table *contains* `x` but `x` isn't actually in scope.
            // However, resolveNameHelper will continue and call this callback again, so we'll eventually get a correct suggestion.
            if (symbol)
                return symbol;
            var candidates;
            if (symbols === globals) {
                var primitives = (0, ts_1.mapDefined)(["string", "number", "boolean", "object", "bigint", "symbol"], function (s) { return symbols.has((s.charAt(0).toUpperCase() + s.slice(1)))
                    ? createSymbol(524288 /* SymbolFlags.TypeAlias */, s)
                    : undefined; });
                candidates = primitives.concat((0, ts_1.arrayFrom)(symbols.values()));
            }
            else {
                candidates = (0, ts_1.arrayFrom)(symbols.values());
            }
            return getSpellingSuggestionForName((0, ts_1.unescapeLeadingUnderscores)(name), candidates, meaning);
        });
        return result;
    }
    function getSuggestionForNonexistentSymbol(location, outerName, meaning) {
        var symbolResult = getSuggestedSymbolForNonexistentSymbol(location, outerName, meaning);
        return symbolResult && (0, ts_1.symbolName)(symbolResult);
    }
    function getSuggestedSymbolForNonexistentModule(name, targetModule) {
        return targetModule.exports && getSpellingSuggestionForName((0, ts_1.idText)(name), getExportsOfModuleAsArray(targetModule), 2623475 /* SymbolFlags.ModuleMember */);
    }
    function getSuggestionForNonexistentExport(name, targetModule) {
        var suggestion = getSuggestedSymbolForNonexistentModule(name, targetModule);
        return suggestion && (0, ts_1.symbolName)(suggestion);
    }
    function getSuggestionForNonexistentIndexSignature(objectType, expr, keyedType) {
        // check if object type has setter or getter
        function hasProp(name) {
            var prop = getPropertyOfObjectType(objectType, name);
            if (prop) {
                var s = getSingleCallSignature(getTypeOfSymbol(prop));
                return !!s && getMinArgumentCount(s) >= 1 && isTypeAssignableTo(keyedType, getTypeAtPosition(s, 0));
            }
            return false;
        }
        var suggestedMethod = (0, ts_1.isAssignmentTarget)(expr) ? "set" : "get";
        if (!hasProp(suggestedMethod)) {
            return undefined;
        }
        var suggestion = (0, ts_1.tryGetPropertyAccessOrIdentifierToString)(expr.expression);
        if (suggestion === undefined) {
            suggestion = suggestedMethod;
        }
        else {
            suggestion += "." + suggestedMethod;
        }
        return suggestion;
    }
    function getSuggestedTypeForNonexistentStringLiteralType(source, target) {
        var candidates = target.types.filter(function (type) { return !!(type.flags & 128 /* TypeFlags.StringLiteral */); });
        return (0, ts_1.getSpellingSuggestion)(source.value, candidates, function (type) { return type.value; });
    }
    /**
     * Given a name and a list of symbols whose names are *not* equal to the name, return a spelling suggestion if there is one that is close enough.
     * Names less than length 3 only check for case-insensitive equality, not levenshtein distance.
     *
     * If there is a candidate that's the same except for case, return that.
     * If there is a candidate that's within one edit of the name, return that.
     * Otherwise, return the candidate with the smallest Levenshtein distance,
     *    except for candidates:
     *      * With no name
     *      * Whose meaning doesn't match the `meaning` parameter.
     *      * Whose length differs from the target name by more than 0.34 of the length of the name.
     *      * Whose levenshtein distance is more than 0.4 of the length of the name
     *        (0.4 allows 1 substitution/transposition for every 5 characters,
     *         and 1 insertion/deletion at 3 characters)
     */
    function getSpellingSuggestionForName(name, symbols, meaning) {
        return (0, ts_1.getSpellingSuggestion)(name, symbols, getCandidateName);
        function getCandidateName(candidate) {
            var candidateName = (0, ts_1.symbolName)(candidate);
            if ((0, ts_1.startsWith)(candidateName, "\"")) {
                return undefined;
            }
            if (candidate.flags & meaning) {
                return candidateName;
            }
            if (candidate.flags & 2097152 /* SymbolFlags.Alias */) {
                var alias = tryResolveAlias(candidate);
                if (alias && alias.flags & meaning) {
                    return candidateName;
                }
            }
            return undefined;
        }
    }
    function markPropertyAsReferenced(prop, nodeForCheckWriteOnly, isSelfTypeAccess) {
        var valueDeclaration = prop && (prop.flags & 106500 /* SymbolFlags.ClassMember */) && prop.valueDeclaration;
        if (!valueDeclaration) {
            return;
        }
        var hasPrivateModifier = (0, ts_1.hasEffectiveModifier)(valueDeclaration, 8 /* ModifierFlags.Private */);
        var hasPrivateIdentifier = prop.valueDeclaration && (0, ts_1.isNamedDeclaration)(prop.valueDeclaration) && (0, ts_1.isPrivateIdentifier)(prop.valueDeclaration.name);
        if (!hasPrivateModifier && !hasPrivateIdentifier) {
            return;
        }
        if (nodeForCheckWriteOnly && (0, ts_1.isWriteOnlyAccess)(nodeForCheckWriteOnly) && !(prop.flags & 65536 /* SymbolFlags.SetAccessor */)) {
            return;
        }
        if (isSelfTypeAccess) {
            // Find any FunctionLikeDeclaration because those create a new 'this' binding. But this should only matter for methods (or getters/setters).
            var containingMethod = (0, ts_1.findAncestor)(nodeForCheckWriteOnly, ts_1.isFunctionLikeDeclaration);
            if (containingMethod && containingMethod.symbol === prop) {
                return;
            }
        }
        ((0, ts_1.getCheckFlags)(prop) & 1 /* CheckFlags.Instantiated */ ? getSymbolLinks(prop).target : prop).isReferenced = 67108863 /* SymbolFlags.All */;
    }
    function isSelfTypeAccess(name, parent) {
        return name.kind === 110 /* SyntaxKind.ThisKeyword */
            || !!parent && (0, ts_1.isEntityNameExpression)(name) && parent === getResolvedSymbol((0, ts_1.getFirstIdentifier)(name));
    }
    function isValidPropertyAccess(node, propertyName) {
        switch (node.kind) {
            case 210 /* SyntaxKind.PropertyAccessExpression */:
                return isValidPropertyAccessWithType(node, node.expression.kind === 108 /* SyntaxKind.SuperKeyword */, propertyName, getWidenedType(checkExpression(node.expression)));
            case 165 /* SyntaxKind.QualifiedName */:
                return isValidPropertyAccessWithType(node, /*isSuper*/ false, propertyName, getWidenedType(checkExpression(node.left)));
            case 204 /* SyntaxKind.ImportType */:
                return isValidPropertyAccessWithType(node, /*isSuper*/ false, propertyName, getTypeFromTypeNode(node));
        }
    }
    /**
     * Checks if an existing property access is valid for completions purposes.
     * @param node a property access-like node where we want to check if we can access a property.
     * This node does not need to be an access of the property we are checking.
     * e.g. in completions, this node will often be an incomplete property access node, as in `foo.`.
     * Besides providing a location (i.e. scope) used to check property accessibility, we use this node for
     * computing whether this is a `super` property access.
     * @param type the type whose property we are checking.
     * @param property the accessed property's symbol.
     */
    function isValidPropertyAccessForCompletions(node, type, property) {
        return isPropertyAccessible(node, node.kind === 210 /* SyntaxKind.PropertyAccessExpression */ && node.expression.kind === 108 /* SyntaxKind.SuperKeyword */, 
        /*isWrite*/ false, type, property);
        // Previously we validated the 'this' type of methods but this adversely affected performance. See #31377 for more context.
    }
    function isValidPropertyAccessWithType(node, isSuper, propertyName, type) {
        // Short-circuiting for improved performance.
        if (isTypeAny(type)) {
            return true;
        }
        var prop = getPropertyOfType(type, propertyName);
        return !!prop && isPropertyAccessible(node, isSuper, /*isWrite*/ false, type, prop);
    }
    /**
     * Checks if a property can be accessed in a location.
     * The location is given by the `node` parameter.
     * The node does not need to be a property access.
     * @param node location where to check property accessibility
     * @param isSuper whether to consider this a `super` property access, e.g. `super.foo`.
     * @param isWrite whether this is a write access, e.g. `++foo.x`.
     * @param containingType type where the property comes from.
     * @param property property symbol.
     */
    function isPropertyAccessible(node, isSuper, isWrite, containingType, property) {
        // Short-circuiting for improved performance.
        if (isTypeAny(containingType)) {
            return true;
        }
        // A #private property access in an optional chain is an error dealt with by the parser.
        // The checker does not check for it, so we need to do our own check here.
        if (property.valueDeclaration && (0, ts_1.isPrivateIdentifierClassElementDeclaration)(property.valueDeclaration)) {
            var declClass_1 = (0, ts_1.getContainingClass)(property.valueDeclaration);
            return !(0, ts_1.isOptionalChain)(node) && !!(0, ts_1.findAncestor)(node, function (parent) { return parent === declClass_1; });
        }
        return checkPropertyAccessibilityAtLocation(node, isSuper, isWrite, containingType, property);
    }
    /**
     * Return the symbol of the for-in variable declared or referenced by the given for-in statement.
     */
    function getForInVariableSymbol(node) {
        var initializer = node.initializer;
        if (initializer.kind === 260 /* SyntaxKind.VariableDeclarationList */) {
            var variable = initializer.declarations[0];
            if (variable && !(0, ts_1.isBindingPattern)(variable.name)) {
                return getSymbolOfDeclaration(variable);
            }
        }
        else if (initializer.kind === 80 /* SyntaxKind.Identifier */) {
            return getResolvedSymbol(initializer);
        }
        return undefined;
    }
    /**
     * Return true if the given type is considered to have numeric property names.
     */
    function hasNumericPropertyNames(type) {
        return getIndexInfosOfType(type).length === 1 && !!getIndexInfoOfType(type, numberType);
    }
    /**
     * Return true if given node is an expression consisting of an identifier (possibly parenthesized)
     * that references a for-in variable for an object with numeric property names.
     */
    function isForInVariableForNumericPropertyNames(expr) {
        var e = (0, ts_1.skipParentheses)(expr);
        if (e.kind === 80 /* SyntaxKind.Identifier */) {
            var symbol = getResolvedSymbol(e);
            if (symbol.flags & 3 /* SymbolFlags.Variable */) {
                var child = expr;
                var node = expr.parent;
                while (node) {
                    if (node.kind === 248 /* SyntaxKind.ForInStatement */ &&
                        child === node.statement &&
                        getForInVariableSymbol(node) === symbol &&
                        hasNumericPropertyNames(getTypeOfExpression(node.expression))) {
                        return true;
                    }
                    child = node;
                    node = node.parent;
                }
            }
        }
        return false;
    }
    function checkIndexedAccess(node, checkMode) {
        return node.flags & 32 /* NodeFlags.OptionalChain */ ? checkElementAccessChain(node, checkMode) :
            checkElementAccessExpression(node, checkNonNullExpression(node.expression), checkMode);
    }
    function checkElementAccessChain(node, checkMode) {
        var exprType = checkExpression(node.expression);
        var nonOptionalType = getOptionalExpressionType(exprType, node.expression);
        return propagateOptionalTypeMarker(checkElementAccessExpression(node, checkNonNullType(nonOptionalType, node.expression), checkMode), node, nonOptionalType !== exprType);
    }
    function checkElementAccessExpression(node, exprType, checkMode) {
        var objectType = (0, ts_1.getAssignmentTargetKind)(node) !== 0 /* AssignmentKind.None */ || isMethodAccessForCall(node) ? getWidenedType(exprType) : exprType;
        var indexExpression = node.argumentExpression;
        var indexType = checkExpression(indexExpression);
        if (isErrorType(objectType) || objectType === silentNeverType) {
            return objectType;
        }
        if (isConstEnumObjectType(objectType) && !(0, ts_1.isStringLiteralLike)(indexExpression)) {
            error(indexExpression, ts_1.Diagnostics.A_const_enum_member_can_only_be_accessed_using_a_string_literal);
            return errorType;
        }
        var effectiveIndexType = isForInVariableForNumericPropertyNames(indexExpression) ? numberType : indexType;
        var accessFlags = (0, ts_1.isAssignmentTarget)(node) ?
            4 /* AccessFlags.Writing */ | (isGenericObjectType(objectType) && !(0, ts_1.isThisTypeParameter)(objectType) ? 2 /* AccessFlags.NoIndexSignatures */ : 0) :
            32 /* AccessFlags.ExpressionPosition */;
        var indexedAccessType = getIndexedAccessTypeOrUndefined(objectType, effectiveIndexType, accessFlags, node) || errorType;
        return checkIndexedAccessIndexType(getFlowTypeOfAccessExpression(node, getNodeLinks(node).resolvedSymbol, indexedAccessType, indexExpression, checkMode), node);
    }
    function callLikeExpressionMayHaveTypeArguments(node) {
        return (0, ts_1.isCallOrNewExpression)(node) || (0, ts_1.isTaggedTemplateExpression)(node) || (0, ts_1.isJsxOpeningLikeElement)(node);
    }
    function resolveUntypedCall(node) {
        if (callLikeExpressionMayHaveTypeArguments(node)) {
            // Check type arguments even though we will give an error that untyped calls may not accept type arguments.
            // This gets us diagnostics for the type arguments and marks them as referenced.
            (0, ts_1.forEach)(node.typeArguments, checkSourceElement);
        }
        if (node.kind === 214 /* SyntaxKind.TaggedTemplateExpression */) {
            checkExpression(node.template);
        }
        else if ((0, ts_1.isJsxOpeningLikeElement)(node)) {
            checkExpression(node.attributes);
        }
        else if (node.kind !== 169 /* SyntaxKind.Decorator */) {
            (0, ts_1.forEach)(node.arguments, function (argument) {
                checkExpression(argument);
            });
        }
        return anySignature;
    }
    function resolveErrorCall(node) {
        resolveUntypedCall(node);
        return unknownSignature;
    }
    // Re-order candidate signatures into the result array. Assumes the result array to be empty.
    // The candidate list orders groups in reverse, but within a group signatures are kept in declaration order
    // A nit here is that we reorder only signatures that belong to the same symbol,
    // so order how inherited signatures are processed is still preserved.
    // interface A { (x: string): void }
    // interface B extends A { (x: 'foo'): string }
    // const b: B;
    // b('foo') // <- here overloads should be processed as [(x:'foo'): string, (x: string): void]
    function reorderCandidates(signatures, result, callChainFlags) {
        var lastParent;
        var lastSymbol;
        var cutoffIndex = 0;
        var index;
        var specializedIndex = -1;
        var spliceIndex;
        ts_1.Debug.assert(!result.length);
        for (var _i = 0, signatures_7 = signatures; _i < signatures_7.length; _i++) {
            var signature = signatures_7[_i];
            var symbol = signature.declaration && getSymbolOfDeclaration(signature.declaration);
            var parent_14 = signature.declaration && signature.declaration.parent;
            if (!lastSymbol || symbol === lastSymbol) {
                if (lastParent && parent_14 === lastParent) {
                    index = index + 1;
                }
                else {
                    lastParent = parent_14;
                    index = cutoffIndex;
                }
            }
            else {
                // current declaration belongs to a different symbol
                // set cutoffIndex so re-orderings in the future won't change result set from 0 to cutoffIndex
                index = cutoffIndex = result.length;
                lastParent = parent_14;
            }
            lastSymbol = symbol;
            // specialized signatures always need to be placed before non-specialized signatures regardless
            // of the cutoff position; see GH#1133
            if (signatureHasLiteralTypes(signature)) {
                specializedIndex++;
                spliceIndex = specializedIndex;
                // The cutoff index always needs to be greater than or equal to the specialized signature index
                // in order to prevent non-specialized signatures from being added before a specialized
                // signature.
                cutoffIndex++;
            }
            else {
                spliceIndex = index;
            }
            result.splice(spliceIndex, 0, callChainFlags ? getOptionalCallSignature(signature, callChainFlags) : signature);
        }
    }
    function isSpreadArgument(arg) {
        return !!arg && (arg.kind === 229 /* SyntaxKind.SpreadElement */ || arg.kind === 236 /* SyntaxKind.SyntheticExpression */ && arg.isSpread);
    }
    function getSpreadArgumentIndex(args) {
        return (0, ts_1.findIndex)(args, isSpreadArgument);
    }
    function acceptsVoid(t) {
        return !!(t.flags & 16384 /* TypeFlags.Void */);
    }
    function acceptsVoidUndefinedUnknownOrAny(t) {
        return !!(t.flags & (16384 /* TypeFlags.Void */ | 32768 /* TypeFlags.Undefined */ | 2 /* TypeFlags.Unknown */ | 1 /* TypeFlags.Any */));
    }
    function hasCorrectArity(node, args, signature, signatureHelpTrailingComma) {
        if (signatureHelpTrailingComma === void 0) { signatureHelpTrailingComma = false; }
        var argCount;
        var callIsIncomplete = false; // In incomplete call we want to be lenient when we have too few arguments
        var effectiveParameterCount = getParameterCount(signature);
        var effectiveMinimumArguments = getMinArgumentCount(signature);
        if (node.kind === 214 /* SyntaxKind.TaggedTemplateExpression */) {
            argCount = args.length;
            if (node.template.kind === 227 /* SyntaxKind.TemplateExpression */) {
                // If a tagged template expression lacks a tail literal, the call is incomplete.
                // Specifically, a template only can end in a TemplateTail or a Missing literal.
                var lastSpan = (0, ts_1.last)(node.template.templateSpans); // we should always have at least one span.
                callIsIncomplete = (0, ts_1.nodeIsMissing)(lastSpan.literal) || !!lastSpan.literal.isUnterminated;
            }
            else {
                // If the template didn't end in a backtick, or its beginning occurred right prior to EOF,
                // then this might actually turn out to be a TemplateHead in the future;
                // so we consider the call to be incomplete.
                var templateLiteral = node.template;
                ts_1.Debug.assert(templateLiteral.kind === 15 /* SyntaxKind.NoSubstitutionTemplateLiteral */);
                callIsIncomplete = !!templateLiteral.isUnterminated;
            }
        }
        else if (node.kind === 169 /* SyntaxKind.Decorator */) {
            argCount = getDecoratorArgumentCount(node, signature);
        }
        else if ((0, ts_1.isJsxOpeningLikeElement)(node)) {
            callIsIncomplete = node.attributes.end === node.end;
            if (callIsIncomplete) {
                return true;
            }
            argCount = effectiveMinimumArguments === 0 ? args.length : 1;
            effectiveParameterCount = args.length === 0 ? effectiveParameterCount : 1; // class may have argumentless ctor functions - still resolve ctor and compare vs props member type
            effectiveMinimumArguments = Math.min(effectiveMinimumArguments, 1); // sfc may specify context argument - handled by framework and not typechecked
        }
        else if (!node.arguments) {
            // This only happens when we have something of the form: 'new C'
            ts_1.Debug.assert(node.kind === 213 /* SyntaxKind.NewExpression */);
            return getMinArgumentCount(signature) === 0;
        }
        else {
            argCount = signatureHelpTrailingComma ? args.length + 1 : args.length;
            // If we are missing the close parenthesis, the call is incomplete.
            callIsIncomplete = node.arguments.end === node.end;
            // If a spread argument is present, check that it corresponds to a rest parameter or at least that it's in the valid range.
            var spreadArgIndex = getSpreadArgumentIndex(args);
            if (spreadArgIndex >= 0) {
                return spreadArgIndex >= getMinArgumentCount(signature) && (hasEffectiveRestParameter(signature) || spreadArgIndex < getParameterCount(signature));
            }
        }
        // Too many arguments implies incorrect arity.
        if (!hasEffectiveRestParameter(signature) && argCount > effectiveParameterCount) {
            return false;
        }
        // If the call is incomplete, we should skip the lower bound check.
        // JSX signatures can have extra parameters provided by the library which we don't check
        if (callIsIncomplete || argCount >= effectiveMinimumArguments) {
            return true;
        }
        for (var i = argCount; i < effectiveMinimumArguments; i++) {
            var type = getTypeAtPosition(signature, i);
            if (filterType(type, (0, ts_1.isInJSFile)(node) && !strictNullChecks ? acceptsVoidUndefinedUnknownOrAny : acceptsVoid).flags & 131072 /* TypeFlags.Never */) {
                return false;
            }
        }
        return true;
    }
    function hasCorrectTypeArgumentArity(signature, typeArguments) {
        // If the user supplied type arguments, but the number of type arguments does not match
        // the declared number of type parameters, the call has an incorrect arity.
        var numTypeParameters = (0, ts_1.length)(signature.typeParameters);
        var minTypeArgumentCount = getMinTypeArgumentCount(signature.typeParameters);
        return !(0, ts_1.some)(typeArguments) ||
            (typeArguments.length >= minTypeArgumentCount && typeArguments.length <= numTypeParameters);
    }
    // If type has a single call signature and no other members, return that signature. Otherwise, return undefined.
    function getSingleCallSignature(type) {
        return getSingleSignature(type, 0 /* SignatureKind.Call */, /*allowMembers*/ false);
    }
    function getSingleCallOrConstructSignature(type) {
        return getSingleSignature(type, 0 /* SignatureKind.Call */, /*allowMembers*/ false) ||
            getSingleSignature(type, 1 /* SignatureKind.Construct */, /*allowMembers*/ false);
    }
    function getSingleSignature(type, kind, allowMembers) {
        if (type.flags & 524288 /* TypeFlags.Object */) {
            var resolved = resolveStructuredTypeMembers(type);
            if (allowMembers || resolved.properties.length === 0 && resolved.indexInfos.length === 0) {
                if (kind === 0 /* SignatureKind.Call */ && resolved.callSignatures.length === 1 && resolved.constructSignatures.length === 0) {
                    return resolved.callSignatures[0];
                }
                if (kind === 1 /* SignatureKind.Construct */ && resolved.constructSignatures.length === 1 && resolved.callSignatures.length === 0) {
                    return resolved.constructSignatures[0];
                }
            }
        }
        return undefined;
    }
    // Instantiate a generic signature in the context of a non-generic signature (section 3.8.5 in TypeScript spec)
    function instantiateSignatureInContextOf(signature, contextualSignature, inferenceContext, compareTypes) {
        var context = createInferenceContext(signature.typeParameters, signature, 0 /* InferenceFlags.None */, compareTypes);
        // We clone the inferenceContext to avoid fixing. For example, when the source signature is <T>(x: T) => T[] and
        // the contextual signature is (...args: A) => B, we want to infer the element type of A's constraint (say 'any')
        // for T but leave it possible to later infer '[any]' back to A.
        var restType = getEffectiveRestType(contextualSignature);
        var mapper = inferenceContext && (restType && restType.flags & 262144 /* TypeFlags.TypeParameter */ ? inferenceContext.nonFixingMapper : inferenceContext.mapper);
        var sourceSignature = mapper ? instantiateSignature(contextualSignature, mapper) : contextualSignature;
        applyToParameterTypes(sourceSignature, signature, function (source, target) {
            // Type parameters from outer context referenced by source type are fixed by instantiation of the source type
            inferTypes(context.inferences, source, target);
        });
        if (!inferenceContext) {
            applyToReturnTypes(contextualSignature, signature, function (source, target) {
                inferTypes(context.inferences, source, target, 128 /* InferencePriority.ReturnType */);
            });
        }
        return getSignatureInstantiation(signature, getInferredTypes(context), (0, ts_1.isInJSFile)(contextualSignature.declaration));
    }
    function inferJsxTypeArguments(node, signature, checkMode, context) {
        var paramType = getEffectiveFirstArgumentForJsxSignature(signature, node);
        var checkAttrType = checkExpressionWithContextualType(node.attributes, paramType, context, checkMode);
        inferTypes(context.inferences, checkAttrType, paramType);
        return getInferredTypes(context);
    }
    function getThisArgumentType(thisArgumentNode) {
        if (!thisArgumentNode) {
            return voidType;
        }
        var thisArgumentType = checkExpression(thisArgumentNode);
        return (0, ts_1.isOptionalChainRoot)(thisArgumentNode.parent) ? getNonNullableType(thisArgumentType) :
            (0, ts_1.isOptionalChain)(thisArgumentNode.parent) ? removeOptionalTypeMarker(thisArgumentType) :
                thisArgumentType;
    }
    function inferTypeArguments(node, signature, args, checkMode, context) {
        if ((0, ts_1.isJsxOpeningLikeElement)(node)) {
            return inferJsxTypeArguments(node, signature, checkMode, context);
        }
        // If a contextual type is available, infer from that type to the return type of the call expression. For
        // example, given a 'function wrap<T, U>(cb: (x: T) => U): (x: T) => U' and a call expression
        // 'let f: (x: string) => number = wrap(s => s.length)', we infer from the declared type of 'f' to the
        // return type of 'wrap'.
        if (node.kind !== 169 /* SyntaxKind.Decorator */) {
            var skipBindingPatterns = (0, ts_1.every)(signature.typeParameters, function (p) { return !!getDefaultFromTypeParameter(p); });
            var contextualType = getContextualType(node, skipBindingPatterns ? 8 /* ContextFlags.SkipBindingPatterns */ : 0 /* ContextFlags.None */);
            if (contextualType) {
                var inferenceTargetType = getReturnTypeOfSignature(signature);
                if (couldContainTypeVariables(inferenceTargetType)) {
                    var outerContext = getInferenceContext(node);
                    var isFromBindingPattern = !skipBindingPatterns && getContextualType(node, 8 /* ContextFlags.SkipBindingPatterns */) !== contextualType;
                    // A return type inference from a binding pattern can be used in instantiating the contextual
                    // type of an argument later in inference, but cannot stand on its own as the final return type.
                    // It is incorporated into `context.returnMapper` which is used in `instantiateContextualType`,
                    // but doesn't need to go into `context.inferences`. This allows a an array binding pattern to
                    // produce a tuple for `T` in
                    //   declare function f<T>(cb: () => T): T;
                    //   const [e1, e2, e3] = f(() => [1, "hi", true]);
                    // but does not produce any inference for `T` in
                    //   declare function f<T>(): T;
                    //   const [e1, e2, e3] = f();
                    if (!isFromBindingPattern) {
                        // We clone the inference context to avoid disturbing a resolution in progress for an
                        // outer call expression. Effectively we just want a snapshot of whatever has been
                        // inferred for any outer call expression so far.
                        var outerMapper = getMapperFromContext(cloneInferenceContext(outerContext, 1 /* InferenceFlags.NoDefault */));
                        var instantiatedType = instantiateType(contextualType, outerMapper);
                        // If the contextual type is a generic function type with a single call signature, we
                        // instantiate the type with its own type parameters and type arguments. This ensures that
                        // the type parameters are not erased to type any during type inference such that they can
                        // be inferred as actual types from the contextual type. For example:
                        //   declare function arrayMap<T, U>(f: (x: T) => U): (a: T[]) => U[];
                        //   const boxElements: <A>(a: A[]) => { value: A }[] = arrayMap(value => ({ value }));
                        // Above, the type of the 'value' parameter is inferred to be 'A'.
                        var contextualSignature = getSingleCallSignature(instantiatedType);
                        var inferenceSourceType = contextualSignature && contextualSignature.typeParameters ?
                            getOrCreateTypeFromSignature(getSignatureInstantiationWithoutFillingInTypeArguments(contextualSignature, contextualSignature.typeParameters)) :
                            instantiatedType;
                        // Inferences made from return types have lower priority than all other inferences.
                        inferTypes(context.inferences, inferenceSourceType, inferenceTargetType, 128 /* InferencePriority.ReturnType */);
                    }
                    // Create a type mapper for instantiating generic contextual types using the inferences made
                    // from the return type. We need a separate inference pass here because (a) instantiation of
                    // the source type uses the outer context's return mapper (which excludes inferences made from
                    // outer arguments), and (b) we don't want any further inferences going into this context.
                    var returnContext = createInferenceContext(signature.typeParameters, signature, context.flags);
                    var returnSourceType = instantiateType(contextualType, outerContext && outerContext.returnMapper);
                    inferTypes(returnContext.inferences, returnSourceType, inferenceTargetType);
                    context.returnMapper = (0, ts_1.some)(returnContext.inferences, hasInferenceCandidates) ? getMapperFromContext(cloneInferredPartOfContext(returnContext)) : undefined;
                }
            }
        }
        var restType = getNonArrayRestType(signature);
        var argCount = restType ? Math.min(getParameterCount(signature) - 1, args.length) : args.length;
        if (restType && restType.flags & 262144 /* TypeFlags.TypeParameter */) {
            var info = (0, ts_1.find)(context.inferences, function (info) { return info.typeParameter === restType; });
            if (info) {
                info.impliedArity = (0, ts_1.findIndex)(args, isSpreadArgument, argCount) < 0 ? args.length - argCount : undefined;
            }
        }
        var thisType = getThisTypeOfSignature(signature);
        if (thisType && couldContainTypeVariables(thisType)) {
            var thisArgumentNode = getThisArgumentOfCall(node);
            inferTypes(context.inferences, getThisArgumentType(thisArgumentNode), thisType);
        }
        for (var i = 0; i < argCount; i++) {
            var arg = args[i];
            if (arg.kind !== 231 /* SyntaxKind.OmittedExpression */) {
                var paramType = getTypeAtPosition(signature, i);
                if (couldContainTypeVariables(paramType)) {
                    var argType = checkExpressionWithContextualType(arg, paramType, context, checkMode);
                    inferTypes(context.inferences, argType, paramType);
                }
            }
        }
        if (restType && couldContainTypeVariables(restType)) {
            var spreadType = getSpreadArgumentType(args, argCount, args.length, restType, context, checkMode);
            inferTypes(context.inferences, spreadType, restType);
        }
        return getInferredTypes(context);
    }
    function getMutableArrayOrTupleType(type) {
        return type.flags & 1048576 /* TypeFlags.Union */ ? mapType(type, getMutableArrayOrTupleType) :
            type.flags & 1 /* TypeFlags.Any */ || isMutableArrayOrTuple(getBaseConstraintOfType(type) || type) ? type :
                isTupleType(type) ? createTupleType(getElementTypes(type), type.target.elementFlags, /*readonly*/ false, type.target.labeledElementDeclarations) :
                    createTupleType([type], [8 /* ElementFlags.Variadic */]);
    }
    function getSpreadArgumentType(args, index, argCount, restType, context, checkMode) {
        var inConstContext = isConstTypeVariable(restType);
        if (index >= argCount - 1) {
            var arg = args[argCount - 1];
            if (isSpreadArgument(arg)) {
                // We are inferring from a spread expression in the last argument position, i.e. both the parameter
                // and the argument are ...x forms.
                var spreadType = arg.kind === 236 /* SyntaxKind.SyntheticExpression */ ? arg.type :
                    checkExpressionWithContextualType(arg.expression, restType, context, checkMode);
                if (isArrayLikeType(spreadType)) {
                    return getMutableArrayOrTupleType(spreadType);
                }
                return createArrayType(checkIteratedTypeOrElementType(33 /* IterationUse.Spread */, spreadType, undefinedType, arg.kind === 229 /* SyntaxKind.SpreadElement */ ? arg.expression : arg), inConstContext);
            }
        }
        var types = [];
        var flags = [];
        var names = [];
        for (var i = index; i < argCount; i++) {
            var arg = args[i];
            if (isSpreadArgument(arg)) {
                var spreadType = arg.kind === 236 /* SyntaxKind.SyntheticExpression */ ? arg.type : checkExpression(arg.expression);
                if (isArrayLikeType(spreadType)) {
                    types.push(spreadType);
                    flags.push(8 /* ElementFlags.Variadic */);
                }
                else {
                    types.push(checkIteratedTypeOrElementType(33 /* IterationUse.Spread */, spreadType, undefinedType, arg.kind === 229 /* SyntaxKind.SpreadElement */ ? arg.expression : arg));
                    flags.push(4 /* ElementFlags.Rest */);
                }
            }
            else {
                var contextualType = isTupleType(restType) ?
                    getContextualTypeForElementExpression(restType, i - index, argCount - index) || unknownType :
                    getIndexedAccessType(restType, getNumberLiteralType(i - index), 256 /* AccessFlags.Contextual */);
                var argType = checkExpressionWithContextualType(arg, contextualType, context, checkMode);
                var hasPrimitiveContextualType = inConstContext || maybeTypeOfKind(contextualType, 402784252 /* TypeFlags.Primitive */ | 4194304 /* TypeFlags.Index */ | 134217728 /* TypeFlags.TemplateLiteral */ | 268435456 /* TypeFlags.StringMapping */);
                types.push(hasPrimitiveContextualType ? getRegularTypeOfLiteralType(argType) : getWidenedLiteralType(argType));
                flags.push(1 /* ElementFlags.Required */);
            }
            if (arg.kind === 236 /* SyntaxKind.SyntheticExpression */ && arg.tupleNameSource) {
                names.push(arg.tupleNameSource);
            }
        }
        return createTupleType(types, flags, inConstContext, (0, ts_1.length)(names) === (0, ts_1.length)(types) ? names : undefined);
    }
    function checkTypeArguments(signature, typeArgumentNodes, reportErrors, headMessage) {
        var isJavascript = (0, ts_1.isInJSFile)(signature.declaration);
        var typeParameters = signature.typeParameters;
        var typeArgumentTypes = fillMissingTypeArguments((0, ts_1.map)(typeArgumentNodes, getTypeFromTypeNode), typeParameters, getMinTypeArgumentCount(typeParameters), isJavascript);
        var mapper;
        for (var i = 0; i < typeArgumentNodes.length; i++) {
            ts_1.Debug.assert(typeParameters[i] !== undefined, "Should not call checkTypeArguments with too many type arguments");
            var constraint = getConstraintOfTypeParameter(typeParameters[i]);
            if (constraint) {
                var errorInfo = reportErrors && headMessage ? (function () { return (0, ts_1.chainDiagnosticMessages)(/*details*/ undefined, ts_1.Diagnostics.Type_0_does_not_satisfy_the_constraint_1); }) : undefined;
                var typeArgumentHeadMessage = headMessage || ts_1.Diagnostics.Type_0_does_not_satisfy_the_constraint_1;
                if (!mapper) {
                    mapper = createTypeMapper(typeParameters, typeArgumentTypes);
                }
                var typeArgument = typeArgumentTypes[i];
                if (!checkTypeAssignableTo(typeArgument, getTypeWithThisArgument(instantiateType(constraint, mapper), typeArgument), reportErrors ? typeArgumentNodes[i] : undefined, typeArgumentHeadMessage, errorInfo)) {
                    return undefined;
                }
            }
        }
        return typeArgumentTypes;
    }
    function getJsxReferenceKind(node) {
        if (isJsxIntrinsicTagName(node.tagName)) {
            return 2 /* JsxReferenceKind.Mixed */;
        }
        var tagType = getApparentType(checkExpression(node.tagName));
        if ((0, ts_1.length)(getSignaturesOfType(tagType, 1 /* SignatureKind.Construct */))) {
            return 0 /* JsxReferenceKind.Component */;
        }
        if ((0, ts_1.length)(getSignaturesOfType(tagType, 0 /* SignatureKind.Call */))) {
            return 1 /* JsxReferenceKind.Function */;
        }
        return 2 /* JsxReferenceKind.Mixed */;
    }
    /**
     * Check if the given signature can possibly be a signature called by the JSX opening-like element.
     * @param node a JSX opening-like element we are trying to figure its call signature
     * @param signature a candidate signature we are trying whether it is a call signature
     * @param relation a relationship to check parameter and argument type
     */
    function checkApplicableSignatureForJsxOpeningLikeElement(node, signature, relation, checkMode, reportErrors, containingMessageChain, errorOutputContainer) {
        // Stateless function components can have maximum of three arguments: "props", "context", and "updater".
        // However "context" and "updater" are implicit and can't be specify by users. Only the first parameter, props,
        // can be specified by users through attributes property.
        var paramType = getEffectiveFirstArgumentForJsxSignature(signature, node);
        var attributesType = checkExpressionWithContextualType(node.attributes, paramType, /*inferenceContext*/ undefined, checkMode);
        var checkAttributesType = checkMode & 4 /* CheckMode.SkipContextSensitive */ ? getRegularTypeOfObjectLiteral(attributesType) : attributesType;
        return checkTagNameDoesNotExpectTooManyArguments() && checkTypeRelatedToAndOptionallyElaborate(checkAttributesType, paramType, relation, reportErrors ? node.tagName : undefined, node.attributes, 
        /*headMessage*/ undefined, containingMessageChain, errorOutputContainer);
        function checkTagNameDoesNotExpectTooManyArguments() {
            var _a;
            if (getJsxNamespaceContainerForImplicitImport(node)) {
                return true; // factory is implicitly jsx/jsxdev - assume it fits the bill, since we don't strongly look for the jsx/jsxs/jsxDEV factory APIs anywhere else (at least not yet)
            }
            var tagType = ((0, ts_1.isJsxOpeningElement)(node) || (0, ts_1.isJsxSelfClosingElement)(node)) && !(isJsxIntrinsicTagName(node.tagName) || (0, ts_1.isJsxNamespacedName)(node.tagName)) ? checkExpression(node.tagName) : undefined;
            if (!tagType) {
                return true;
            }
            var tagCallSignatures = getSignaturesOfType(tagType, 0 /* SignatureKind.Call */);
            if (!(0, ts_1.length)(tagCallSignatures)) {
                return true;
            }
            var factory = getJsxFactoryEntity(node);
            if (!factory) {
                return true;
            }
            var factorySymbol = resolveEntityName(factory, 111551 /* SymbolFlags.Value */, /*ignoreErrors*/ true, /*dontResolveAlias*/ false, node);
            if (!factorySymbol) {
                return true;
            }
            var factoryType = getTypeOfSymbol(factorySymbol);
            var callSignatures = getSignaturesOfType(factoryType, 0 /* SignatureKind.Call */);
            if (!(0, ts_1.length)(callSignatures)) {
                return true;
            }
            var hasFirstParamSignatures = false;
            var maxParamCount = 0;
            // Check that _some_ first parameter expects a FC-like thing, and that some overload of the SFC expects an acceptable number of arguments
            for (var _i = 0, callSignatures_1 = callSignatures; _i < callSignatures_1.length; _i++) {
                var sig = callSignatures_1[_i];
                var firstparam = getTypeAtPosition(sig, 0);
                var signaturesOfParam = getSignaturesOfType(firstparam, 0 /* SignatureKind.Call */);
                if (!(0, ts_1.length)(signaturesOfParam))
                    continue;
                for (var _b = 0, signaturesOfParam_1 = signaturesOfParam; _b < signaturesOfParam_1.length; _b++) {
                    var paramSig = signaturesOfParam_1[_b];
                    hasFirstParamSignatures = true;
                    if (hasEffectiveRestParameter(paramSig)) {
                        return true; // some signature has a rest param, so function components can have an arbitrary number of arguments
                    }
                    var paramCount = getParameterCount(paramSig);
                    if (paramCount > maxParamCount) {
                        maxParamCount = paramCount;
                    }
                }
            }
            if (!hasFirstParamSignatures) {
                // Not a single signature had a first parameter which expected a signature - for back compat, and
                // to guard against generic factories which won't have signatures directly, do not error
                return true;
            }
            var absoluteMinArgCount = Infinity;
            for (var _c = 0, tagCallSignatures_1 = tagCallSignatures; _c < tagCallSignatures_1.length; _c++) {
                var tagSig = tagCallSignatures_1[_c];
                var tagRequiredArgCount = getMinArgumentCount(tagSig);
                if (tagRequiredArgCount < absoluteMinArgCount) {
                    absoluteMinArgCount = tagRequiredArgCount;
                }
            }
            if (absoluteMinArgCount <= maxParamCount) {
                return true; // some signature accepts the number of arguments the function component provides
            }
            if (reportErrors) {
                var diag = (0, ts_1.createDiagnosticForNode)(node.tagName, ts_1.Diagnostics.Tag_0_expects_at_least_1_arguments_but_the_JSX_factory_2_provides_at_most_3, (0, ts_1.entityNameToString)(node.tagName), absoluteMinArgCount, (0, ts_1.entityNameToString)(factory), maxParamCount);
                var tagNameDeclaration = (_a = getSymbolAtLocation(node.tagName)) === null || _a === void 0 ? void 0 : _a.valueDeclaration;
                if (tagNameDeclaration) {
                    (0, ts_1.addRelatedInfo)(diag, (0, ts_1.createDiagnosticForNode)(tagNameDeclaration, ts_1.Diagnostics._0_is_declared_here, (0, ts_1.entityNameToString)(node.tagName)));
                }
                if (errorOutputContainer && errorOutputContainer.skipLogging) {
                    (errorOutputContainer.errors || (errorOutputContainer.errors = [])).push(diag);
                }
                if (!errorOutputContainer.skipLogging) {
                    diagnostics.add(diag);
                }
            }
            return false;
        }
    }
    function getSignatureApplicabilityError(node, args, signature, relation, checkMode, reportErrors, containingMessageChain) {
        var errorOutputContainer = { errors: undefined, skipLogging: true };
        if ((0, ts_1.isJsxOpeningLikeElement)(node)) {
            if (!checkApplicableSignatureForJsxOpeningLikeElement(node, signature, relation, checkMode, reportErrors, containingMessageChain, errorOutputContainer)) {
                ts_1.Debug.assert(!reportErrors || !!errorOutputContainer.errors, "jsx should have errors when reporting errors");
                return errorOutputContainer.errors || ts_1.emptyArray;
            }
            return undefined;
        }
        var thisType = getThisTypeOfSignature(signature);
        if (thisType && thisType !== voidType && !((0, ts_1.isNewExpression)(node) || (0, ts_1.isCallExpression)(node) && (0, ts_1.isSuperProperty)(node.expression))) {
            // If the called expression is not of the form `x.f` or `x["f"]`, then sourceType = voidType
            // If the signature's 'this' type is voidType, then the check is skipped -- anything is compatible.
            // If the expression is a new expression or super call expression, then the check is skipped.
            var thisArgumentNode = getThisArgumentOfCall(node);
            var thisArgumentType = getThisArgumentType(thisArgumentNode);
            var errorNode = reportErrors ? (thisArgumentNode || node) : undefined;
            var headMessage_1 = ts_1.Diagnostics.The_this_context_of_type_0_is_not_assignable_to_method_s_this_of_type_1;
            if (!checkTypeRelatedTo(thisArgumentType, thisType, relation, errorNode, headMessage_1, containingMessageChain, errorOutputContainer)) {
                ts_1.Debug.assert(!reportErrors || !!errorOutputContainer.errors, "this parameter should have errors when reporting errors");
                return errorOutputContainer.errors || ts_1.emptyArray;
            }
        }
        var headMessage = ts_1.Diagnostics.Argument_of_type_0_is_not_assignable_to_parameter_of_type_1;
        var restType = getNonArrayRestType(signature);
        var argCount = restType ? Math.min(getParameterCount(signature) - 1, args.length) : args.length;
        for (var i = 0; i < argCount; i++) {
            var arg = args[i];
            if (arg.kind !== 231 /* SyntaxKind.OmittedExpression */) {
                var paramType = getTypeAtPosition(signature, i);
                var argType = checkExpressionWithContextualType(arg, paramType, /*inferenceContext*/ undefined, checkMode);
                // If one or more arguments are still excluded (as indicated by CheckMode.SkipContextSensitive),
                // we obtain the regular type of any object literal arguments because we may not have inferred complete
                // parameter types yet and therefore excess property checks may yield false positives (see #17041).
                var checkArgType = checkMode & 4 /* CheckMode.SkipContextSensitive */ ? getRegularTypeOfObjectLiteral(argType) : argType;
                if (!checkTypeRelatedToAndOptionallyElaborate(checkArgType, paramType, relation, reportErrors ? arg : undefined, arg, headMessage, containingMessageChain, errorOutputContainer)) {
                    ts_1.Debug.assert(!reportErrors || !!errorOutputContainer.errors, "parameter should have errors when reporting errors");
                    maybeAddMissingAwaitInfo(arg, checkArgType, paramType);
                    return errorOutputContainer.errors || ts_1.emptyArray;
                }
            }
        }
        if (restType) {
            var spreadType = getSpreadArgumentType(args, argCount, args.length, restType, /*context*/ undefined, checkMode);
            var restArgCount = args.length - argCount;
            var errorNode = !reportErrors ? undefined :
                restArgCount === 0 ? node :
                    restArgCount === 1 ? args[argCount] :
                        (0, ts_1.setTextRangePosEnd)(createSyntheticExpression(node, spreadType), args[argCount].pos, args[args.length - 1].end);
            if (!checkTypeRelatedTo(spreadType, restType, relation, errorNode, headMessage, /*containingMessageChain*/ undefined, errorOutputContainer)) {
                ts_1.Debug.assert(!reportErrors || !!errorOutputContainer.errors, "rest parameter should have errors when reporting errors");
                maybeAddMissingAwaitInfo(errorNode, spreadType, restType);
                return errorOutputContainer.errors || ts_1.emptyArray;
            }
        }
        return undefined;
        function maybeAddMissingAwaitInfo(errorNode, source, target) {
            if (errorNode && reportErrors && errorOutputContainer.errors && errorOutputContainer.errors.length) {
                // Bail if target is Promise-like---something else is wrong
                if (getAwaitedTypeOfPromise(target)) {
                    return;
                }
                var awaitedTypeOfSource = getAwaitedTypeOfPromise(source);
                if (awaitedTypeOfSource && isTypeRelatedTo(awaitedTypeOfSource, target, relation)) {
                    (0, ts_1.addRelatedInfo)(errorOutputContainer.errors[0], (0, ts_1.createDiagnosticForNode)(errorNode, ts_1.Diagnostics.Did_you_forget_to_use_await));
                }
            }
        }
    }
    /**
     * Returns the this argument in calls like x.f(...) and x[f](...). Undefined otherwise.
     */
    function getThisArgumentOfCall(node) {
        var expression = node.kind === 212 /* SyntaxKind.CallExpression */ ? node.expression :
            node.kind === 214 /* SyntaxKind.TaggedTemplateExpression */ ? node.tag : undefined;
        if (expression) {
            var callee = (0, ts_1.skipOuterExpressions)(expression);
            if ((0, ts_1.isAccessExpression)(callee)) {
                return callee.expression;
            }
        }
    }
    function createSyntheticExpression(parent, type, isSpread, tupleNameSource) {
        var result = ts_1.parseNodeFactory.createSyntheticExpression(type, isSpread, tupleNameSource);
        (0, ts_1.setTextRange)(result, parent);
        (0, ts_1.setParent)(result, parent);
        return result;
    }
    /**
     * Returns the effective arguments for an expression that works like a function invocation.
     */
    function getEffectiveCallArguments(node) {
        if (node.kind === 214 /* SyntaxKind.TaggedTemplateExpression */) {
            var template = node.template;
            var args_1 = [createSyntheticExpression(template, getGlobalTemplateStringsArrayType())];
            if (template.kind === 227 /* SyntaxKind.TemplateExpression */) {
                (0, ts_1.forEach)(template.templateSpans, function (span) {
                    args_1.push(span.expression);
                });
            }
            return args_1;
        }
        if (node.kind === 169 /* SyntaxKind.Decorator */) {
            return getEffectiveDecoratorArguments(node);
        }
        if ((0, ts_1.isJsxOpeningLikeElement)(node)) {
            return node.attributes.properties.length > 0 || ((0, ts_1.isJsxOpeningElement)(node) && node.parent.children.length > 0) ? [node.attributes] : ts_1.emptyArray;
        }
        var args = node.arguments || ts_1.emptyArray;
        var spreadIndex = getSpreadArgumentIndex(args);
        if (spreadIndex >= 0) {
            // Create synthetic arguments from spreads of tuple types.
            var effectiveArgs_1 = args.slice(0, spreadIndex);
            var _loop_21 = function (i) {
                var arg = args[i];
                // We can call checkExpressionCached because spread expressions never have a contextual type.
                var spreadType = arg.kind === 229 /* SyntaxKind.SpreadElement */ && (flowLoopCount ? checkExpression(arg.expression) : checkExpressionCached(arg.expression));
                if (spreadType && isTupleType(spreadType)) {
                    (0, ts_1.forEach)(getElementTypes(spreadType), function (t, i) {
                        var _a;
                        var flags = spreadType.target.elementFlags[i];
                        var syntheticArg = createSyntheticExpression(arg, flags & 4 /* ElementFlags.Rest */ ? createArrayType(t) : t, !!(flags & 12 /* ElementFlags.Variable */), (_a = spreadType.target.labeledElementDeclarations) === null || _a === void 0 ? void 0 : _a[i]);
                        effectiveArgs_1.push(syntheticArg);
                    });
                }
                else {
                    effectiveArgs_1.push(arg);
                }
            };
            for (var i = spreadIndex; i < args.length; i++) {
                _loop_21(i);
            }
            return effectiveArgs_1;
        }
        return args;
    }
    /**
     * Returns the synthetic argument list for a decorator invocation.
     */
    function getEffectiveDecoratorArguments(node) {
        var expr = node.expression;
        var signature = getDecoratorCallSignature(node);
        if (signature) {
            var args = [];
            for (var _i = 0, _a = signature.parameters; _i < _a.length; _i++) {
                var param = _a[_i];
                var type = getTypeOfSymbol(param);
                args.push(createSyntheticExpression(expr, type));
            }
            return args;
        }
        return ts_1.Debug.fail();
    }
    /**
     * Returns the argument count for a decorator node that works like a function invocation.
     */
    function getDecoratorArgumentCount(node, signature) {
        return compilerOptions.experimentalDecorators ?
            getLegacyDecoratorArgumentCount(node, signature) :
            2;
    }
    /**
     * Returns the argument count for a decorator node that works like a function invocation.
     */
    function getLegacyDecoratorArgumentCount(node, signature) {
        switch (node.parent.kind) {
            case 262 /* SyntaxKind.ClassDeclaration */:
            case 230 /* SyntaxKind.ClassExpression */:
                return 1;
            case 171 /* SyntaxKind.PropertyDeclaration */:
                return (0, ts_1.hasAccessorModifier)(node.parent) ? 3 : 2;
            case 173 /* SyntaxKind.MethodDeclaration */:
            case 176 /* SyntaxKind.GetAccessor */:
            case 177 /* SyntaxKind.SetAccessor */:
                // For ES3 or decorators with only two parameters we supply only two arguments
                return languageVersion === 0 /* ScriptTarget.ES3 */ || signature.parameters.length <= 2 ? 2 : 3;
            case 168 /* SyntaxKind.Parameter */:
                return 3;
            default:
                return ts_1.Debug.fail();
        }
    }
    function getDiagnosticSpanForCallNode(node, doNotIncludeArguments) {
        var start;
        var length;
        var sourceFile = (0, ts_1.getSourceFileOfNode)(node);
        if ((0, ts_1.isPropertyAccessExpression)(node.expression)) {
            var nameSpan = (0, ts_1.getErrorSpanForNode)(sourceFile, node.expression.name);
            start = nameSpan.start;
            length = doNotIncludeArguments ? nameSpan.length : node.end - start;
        }
        else {
            var expressionSpan = (0, ts_1.getErrorSpanForNode)(sourceFile, node.expression);
            start = expressionSpan.start;
            length = doNotIncludeArguments ? expressionSpan.length : node.end - start;
        }
        return { start: start, length: length, sourceFile: sourceFile };
    }
    function getDiagnosticForCallNode(node, message) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if ((0, ts_1.isCallExpression)(node)) {
            var _a = getDiagnosticSpanForCallNode(node), sourceFile = _a.sourceFile, start = _a.start, length_5 = _a.length;
            if ("message" in message) { // eslint-disable-line local/no-in-operator
                return ts_1.createFileDiagnostic.apply(void 0, __spreadArray([sourceFile, start, length_5, message], args, false));
            }
            return (0, ts_1.createDiagnosticForFileFromMessageChain)(sourceFile, message);
        }
        else {
            if ("message" in message) { // eslint-disable-line local/no-in-operator
                return ts_1.createDiagnosticForNode.apply(void 0, __spreadArray([node, message], args, false));
            }
            return (0, ts_1.createDiagnosticForNodeFromMessageChain)((0, ts_1.getSourceFileOfNode)(node), node, message);
        }
    }
    function isPromiseResolveArityError(node) {
        if (!(0, ts_1.isCallExpression)(node) || !(0, ts_1.isIdentifier)(node.expression))
            return false;
        var symbol = resolveName(node.expression, node.expression.escapedText, 111551 /* SymbolFlags.Value */, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ false);
        var decl = symbol === null || symbol === void 0 ? void 0 : symbol.valueDeclaration;
        if (!decl || !(0, ts_1.isParameter)(decl) || !(0, ts_1.isFunctionExpressionOrArrowFunction)(decl.parent) || !(0, ts_1.isNewExpression)(decl.parent.parent) || !(0, ts_1.isIdentifier)(decl.parent.parent.expression)) {
            return false;
        }
        var globalPromiseSymbol = getGlobalPromiseConstructorSymbol(/*reportErrors*/ false);
        if (!globalPromiseSymbol)
            return false;
        var constructorSymbol = getSymbolAtLocation(decl.parent.parent.expression, /*ignoreErrors*/ true);
        return constructorSymbol === globalPromiseSymbol;
    }
    function getArgumentArityError(node, signatures, args, headMessage) {
        var _a;
        var spreadIndex = getSpreadArgumentIndex(args);
        if (spreadIndex > -1) {
            return (0, ts_1.createDiagnosticForNode)(args[spreadIndex], ts_1.Diagnostics.A_spread_argument_must_either_have_a_tuple_type_or_be_passed_to_a_rest_parameter);
        }
        var min = Number.POSITIVE_INFINITY; // smallest parameter count
        var max = Number.NEGATIVE_INFINITY; // largest parameter count
        var maxBelow = Number.NEGATIVE_INFINITY; // largest parameter count that is smaller than the number of arguments
        var minAbove = Number.POSITIVE_INFINITY; // smallest parameter count that is larger than the number of arguments
        var closestSignature;
        for (var _i = 0, signatures_8 = signatures; _i < signatures_8.length; _i++) {
            var sig = signatures_8[_i];
            var minParameter = getMinArgumentCount(sig);
            var maxParameter = getParameterCount(sig);
            // smallest/largest parameter counts
            if (minParameter < min) {
                min = minParameter;
                closestSignature = sig;
            }
            max = Math.max(max, maxParameter);
            // shortest parameter count *longer than the call*/longest parameter count *shorter than the call*
            if (minParameter < args.length && minParameter > maxBelow)
                maxBelow = minParameter;
            if (args.length < maxParameter && maxParameter < minAbove)
                minAbove = maxParameter;
        }
        var hasRestParameter = (0, ts_1.some)(signatures, hasEffectiveRestParameter);
        var parameterRange = hasRestParameter ? min
            : min < max ? min + "-" + max
                : min;
        var isVoidPromiseError = !hasRestParameter && parameterRange === 1 && args.length === 0 && isPromiseResolveArityError(node);
        if (isVoidPromiseError && (0, ts_1.isInJSFile)(node)) {
            return getDiagnosticForCallNode(node, ts_1.Diagnostics.Expected_1_argument_but_got_0_new_Promise_needs_a_JSDoc_hint_to_produce_a_resolve_that_can_be_called_without_arguments);
        }
        var error = (0, ts_1.isDecorator)(node) ?
            hasRestParameter ? ts_1.Diagnostics.The_runtime_will_invoke_the_decorator_with_1_arguments_but_the_decorator_expects_at_least_0 :
                ts_1.Diagnostics.The_runtime_will_invoke_the_decorator_with_1_arguments_but_the_decorator_expects_0 :
            hasRestParameter ? ts_1.Diagnostics.Expected_at_least_0_arguments_but_got_1 :
                isVoidPromiseError ? ts_1.Diagnostics.Expected_0_arguments_but_got_1_Did_you_forget_to_include_void_in_your_type_argument_to_Promise :
                    ts_1.Diagnostics.Expected_0_arguments_but_got_1;
        if (min < args.length && args.length < max) {
            // between min and max, but with no matching overload
            if (headMessage) {
                var chain = (0, ts_1.chainDiagnosticMessages)(/*details*/ undefined, ts_1.Diagnostics.No_overload_expects_0_arguments_but_overloads_do_exist_that_expect_either_1_or_2_arguments, args.length, maxBelow, minAbove);
                chain = (0, ts_1.chainDiagnosticMessages)(chain, headMessage);
                return getDiagnosticForCallNode(node, chain);
            }
            return getDiagnosticForCallNode(node, ts_1.Diagnostics.No_overload_expects_0_arguments_but_overloads_do_exist_that_expect_either_1_or_2_arguments, args.length, maxBelow, minAbove);
        }
        else if (args.length < min) {
            // too short: put the error span on the call expression, not any of the args
            var diagnostic = void 0;
            if (headMessage) {
                var chain = (0, ts_1.chainDiagnosticMessages)(/*details*/ undefined, error, parameterRange, args.length);
                chain = (0, ts_1.chainDiagnosticMessages)(chain, headMessage);
                diagnostic = getDiagnosticForCallNode(node, chain);
            }
            else {
                diagnostic = getDiagnosticForCallNode(node, error, parameterRange, args.length);
            }
            var parameter = (_a = closestSignature === null || closestSignature === void 0 ? void 0 : closestSignature.declaration) === null || _a === void 0 ? void 0 : _a.parameters[closestSignature.thisParameter ? args.length + 1 : args.length];
            if (parameter) {
                var messageAndArgs = (0, ts_1.isBindingPattern)(parameter.name) ? [ts_1.Diagnostics.An_argument_matching_this_binding_pattern_was_not_provided]
                    : (0, ts_1.isRestParameter)(parameter) ? [ts_1.Diagnostics.Arguments_for_the_rest_parameter_0_were_not_provided, (0, ts_1.idText)((0, ts_1.getFirstIdentifier)(parameter.name))]
                        : [ts_1.Diagnostics.An_argument_for_0_was_not_provided, !parameter.name ? args.length : (0, ts_1.idText)((0, ts_1.getFirstIdentifier)(parameter.name))];
                var parameterError = ts_1.createDiagnosticForNode.apply(void 0, __spreadArray([parameter], messageAndArgs, false));
                return (0, ts_1.addRelatedInfo)(diagnostic, parameterError);
            }
            return diagnostic;
        }
        else {
            // too long; error goes on the excess parameters
            var errorSpan = ts_1.factory.createNodeArray(args.slice(max));
            var pos = (0, ts_1.first)(errorSpan).pos;
            var end = (0, ts_1.last)(errorSpan).end;
            if (end === pos) {
                end++;
            }
            (0, ts_1.setTextRangePosEnd)(errorSpan, pos, end);
            if (headMessage) {
                var chain = (0, ts_1.chainDiagnosticMessages)(/*details*/ undefined, error, parameterRange, args.length);
                chain = (0, ts_1.chainDiagnosticMessages)(chain, headMessage);
                return (0, ts_1.createDiagnosticForNodeArrayFromMessageChain)((0, ts_1.getSourceFileOfNode)(node), errorSpan, chain);
            }
            return (0, ts_1.createDiagnosticForNodeArray)((0, ts_1.getSourceFileOfNode)(node), errorSpan, error, parameterRange, args.length);
        }
    }
    function getTypeArgumentArityError(node, signatures, typeArguments, headMessage) {
        var argCount = typeArguments.length;
        // No overloads exist
        if (signatures.length === 1) {
            var sig = signatures[0];
            var min = getMinTypeArgumentCount(sig.typeParameters);
            var max = (0, ts_1.length)(sig.typeParameters);
            if (headMessage) {
                var chain = (0, ts_1.chainDiagnosticMessages)(/*details*/ undefined, ts_1.Diagnostics.Expected_0_type_arguments_but_got_1, min < max ? min + "-" + max : min, argCount);
                chain = (0, ts_1.chainDiagnosticMessages)(chain, headMessage);
                return (0, ts_1.createDiagnosticForNodeArrayFromMessageChain)((0, ts_1.getSourceFileOfNode)(node), typeArguments, chain);
            }
            return (0, ts_1.createDiagnosticForNodeArray)((0, ts_1.getSourceFileOfNode)(node), typeArguments, ts_1.Diagnostics.Expected_0_type_arguments_but_got_1, min < max ? min + "-" + max : min, argCount);
        }
        // Overloads exist
        var belowArgCount = -Infinity;
        var aboveArgCount = Infinity;
        for (var _i = 0, signatures_9 = signatures; _i < signatures_9.length; _i++) {
            var sig = signatures_9[_i];
            var min = getMinTypeArgumentCount(sig.typeParameters);
            var max = (0, ts_1.length)(sig.typeParameters);
            if (min > argCount) {
                aboveArgCount = Math.min(aboveArgCount, min);
            }
            else if (max < argCount) {
                belowArgCount = Math.max(belowArgCount, max);
            }
        }
        if (belowArgCount !== -Infinity && aboveArgCount !== Infinity) {
            if (headMessage) {
                var chain = (0, ts_1.chainDiagnosticMessages)(/*details*/ undefined, ts_1.Diagnostics.No_overload_expects_0_type_arguments_but_overloads_do_exist_that_expect_either_1_or_2_type_arguments, argCount, belowArgCount, aboveArgCount);
                chain = (0, ts_1.chainDiagnosticMessages)(chain, headMessage);
                return (0, ts_1.createDiagnosticForNodeArrayFromMessageChain)((0, ts_1.getSourceFileOfNode)(node), typeArguments, chain);
            }
            return (0, ts_1.createDiagnosticForNodeArray)((0, ts_1.getSourceFileOfNode)(node), typeArguments, ts_1.Diagnostics.No_overload_expects_0_type_arguments_but_overloads_do_exist_that_expect_either_1_or_2_type_arguments, argCount, belowArgCount, aboveArgCount);
        }
        if (headMessage) {
            var chain = (0, ts_1.chainDiagnosticMessages)(/*details*/ undefined, ts_1.Diagnostics.Expected_0_type_arguments_but_got_1, belowArgCount === -Infinity ? aboveArgCount : belowArgCount, argCount);
            chain = (0, ts_1.chainDiagnosticMessages)(chain, headMessage);
            return (0, ts_1.createDiagnosticForNodeArrayFromMessageChain)((0, ts_1.getSourceFileOfNode)(node), typeArguments, chain);
        }
        return (0, ts_1.createDiagnosticForNodeArray)((0, ts_1.getSourceFileOfNode)(node), typeArguments, ts_1.Diagnostics.Expected_0_type_arguments_but_got_1, belowArgCount === -Infinity ? aboveArgCount : belowArgCount, argCount);
    }
    function resolveCall(node, signatures, candidatesOutArray, checkMode, callChainFlags, headMessage) {
        var isTaggedTemplate = node.kind === 214 /* SyntaxKind.TaggedTemplateExpression */;
        var isDecorator = node.kind === 169 /* SyntaxKind.Decorator */;
        var isJsxOpeningOrSelfClosingElement = (0, ts_1.isJsxOpeningLikeElement)(node);
        var reportErrors = !isInferencePartiallyBlocked && !candidatesOutArray;
        var typeArguments;
        if (!isDecorator && !(0, ts_1.isSuperCall)(node)) {
            typeArguments = node.typeArguments;
            // We already perform checking on the type arguments on the class declaration itself.
            if (isTaggedTemplate || isJsxOpeningOrSelfClosingElement || node.expression.kind !== 108 /* SyntaxKind.SuperKeyword */) {
                (0, ts_1.forEach)(typeArguments, checkSourceElement);
            }
        }
        var candidates = candidatesOutArray || [];
        // reorderCandidates fills up the candidates array directly
        reorderCandidates(signatures, candidates, callChainFlags);
        if (!candidates.length) {
            if (reportErrors) {
                diagnostics.add(getDiagnosticForCallNode(node, ts_1.Diagnostics.Call_target_does_not_contain_any_signatures));
            }
            return resolveErrorCall(node);
        }
        var args = getEffectiveCallArguments(node);
        // The excludeArgument array contains true for each context sensitive argument (an argument
        // is context sensitive it is susceptible to a one-time permanent contextual typing).
        //
        // The idea is that we will perform type argument inference & assignability checking once
        // without using the susceptible parameters that are functions, and once more for those
        // parameters, contextually typing each as we go along.
        //
        // For a tagged template, then the first argument be 'undefined' if necessary because it
        // represents a TemplateStringsArray.
        //
        // For a decorator, no arguments are susceptible to contextual typing due to the fact
        // decorators are applied to a declaration by the emitter, and not to an expression.
        var isSingleNonGenericCandidate = candidates.length === 1 && !candidates[0].typeParameters;
        var argCheckMode = !isDecorator && !isSingleNonGenericCandidate && (0, ts_1.some)(args, isContextSensitive) ? 4 /* CheckMode.SkipContextSensitive */ : 0 /* CheckMode.Normal */;
        // The following variables are captured and modified by calls to chooseOverload.
        // If overload resolution or type argument inference fails, we want to report the
        // best error possible. The best error is one which says that an argument was not
        // assignable to a parameter. This implies that everything else about the overload
        // was fine. So if there is any overload that is only incorrect because of an
        // argument, we will report an error on that one.
        //
        //     function foo(s: string): void;
        //     function foo(n: number): void; // Report argument error on this overload
        //     function foo(): void;
        //     foo(true);
        //
        // If none of the overloads even made it that far, there are two possibilities.
        // There was a problem with type arguments for some overload, in which case
        // report an error on that. Or none of the overloads even had correct arity,
        // in which case give an arity error.
        //
        //     function foo<T extends string>(x: T): void; // Report type argument error
        //     function foo(): void;
        //     foo<number>(0);
        //
        var candidatesForArgumentError;
        var candidateForArgumentArityError;
        var candidateForTypeArgumentError;
        var result;
        // If we are in signature help, a trailing comma indicates that we intend to provide another argument,
        // so we will only accept overloads with arity at least 1 higher than the current number of provided arguments.
        var signatureHelpTrailingComma = !!(checkMode & 16 /* CheckMode.IsForSignatureHelp */) && node.kind === 212 /* SyntaxKind.CallExpression */ && node.arguments.hasTrailingComma;
        // Section 4.12.1:
        // if the candidate list contains one or more signatures for which the type of each argument
        // expression is a subtype of each corresponding parameter type, the return type of the first
        // of those signatures becomes the return type of the function call.
        // Otherwise, the return type of the first signature in the candidate list becomes the return
        // type of the function call.
        //
        // Whether the call is an error is determined by assignability of the arguments. The subtype pass
        // is just important for choosing the best signature. So in the case where there is only one
        // signature, the subtype pass is useless. So skipping it is an optimization.
        if (candidates.length > 1) {
            result = chooseOverload(candidates, subtypeRelation, isSingleNonGenericCandidate, signatureHelpTrailingComma);
        }
        if (!result) {
            result = chooseOverload(candidates, assignableRelation, isSingleNonGenericCandidate, signatureHelpTrailingComma);
        }
        if (result) {
            return result;
        }
        result = getCandidateForOverloadFailure(node, candidates, args, !!candidatesOutArray, checkMode);
        // Preemptively cache the result; getResolvedSignature will do this after we return, but
        // we need to ensure that the result is present for the error checks below so that if
        // this signature is encountered again, we handle the circularity (rather than producing a
        // different result which may produce no errors and assert). Callers of getResolvedSignature
        // don't hit this issue because they only observe this result after it's had a chance to
        // be cached, but the error reporting code below executes before getResolvedSignature sets
        // resolvedSignature.
        getNodeLinks(node).resolvedSignature = result;
        // No signatures were applicable. Now report errors based on the last applicable signature with
        // no arguments excluded from assignability checks.
        // If candidate is undefined, it means that no candidates had a suitable arity. In that case,
        // skip the checkApplicableSignature check.
        if (reportErrors) {
            if (candidatesForArgumentError) {
                if (candidatesForArgumentError.length === 1 || candidatesForArgumentError.length > 3) {
                    var last_2 = candidatesForArgumentError[candidatesForArgumentError.length - 1];
                    var chain_1;
                    if (candidatesForArgumentError.length > 3) {
                        chain_1 = (0, ts_1.chainDiagnosticMessages)(chain_1, ts_1.Diagnostics.The_last_overload_gave_the_following_error);
                        chain_1 = (0, ts_1.chainDiagnosticMessages)(chain_1, ts_1.Diagnostics.No_overload_matches_this_call);
                    }
                    if (headMessage) {
                        chain_1 = (0, ts_1.chainDiagnosticMessages)(chain_1, headMessage);
                    }
                    var diags = getSignatureApplicabilityError(node, args, last_2, assignableRelation, 0 /* CheckMode.Normal */, /*reportErrors*/ true, function () { return chain_1; });
                    if (diags) {
                        for (var _i = 0, diags_1 = diags; _i < diags_1.length; _i++) {
                            var d = diags_1[_i];
                            if (last_2.declaration && candidatesForArgumentError.length > 3) {
                                (0, ts_1.addRelatedInfo)(d, (0, ts_1.createDiagnosticForNode)(last_2.declaration, ts_1.Diagnostics.The_last_overload_is_declared_here));
                            }
                            addImplementationSuccessElaboration(last_2, d);
                            diagnostics.add(d);
                        }
                    }
                    else {
                        ts_1.Debug.fail("No error for last overload signature");
                    }
                }
                else {
                    var allDiagnostics = [];
                    var max = 0;
                    var min = Number.MAX_VALUE;
                    var minIndex = 0;
                    var i_1 = 0;
                    var _loop_22 = function (c) {
                        var chain_2 = function () { return (0, ts_1.chainDiagnosticMessages)(/*details*/ undefined, ts_1.Diagnostics.Overload_0_of_1_2_gave_the_following_error, i_1 + 1, candidates.length, signatureToString(c)); };
                        var diags_2 = getSignatureApplicabilityError(node, args, c, assignableRelation, 0 /* CheckMode.Normal */, /*reportErrors*/ true, chain_2);
                        if (diags_2) {
                            if (diags_2.length <= min) {
                                min = diags_2.length;
                                minIndex = i_1;
                            }
                            max = Math.max(max, diags_2.length);
                            allDiagnostics.push(diags_2);
                        }
                        else {
                            ts_1.Debug.fail("No error for 3 or fewer overload signatures");
                        }
                        i_1++;
                    };
                    for (var _a = 0, candidatesForArgumentError_1 = candidatesForArgumentError; _a < candidatesForArgumentError_1.length; _a++) {
                        var c = candidatesForArgumentError_1[_a];
                        _loop_22(c);
                    }
                    var diags_3 = max > 1 ? allDiagnostics[minIndex] : (0, ts_1.flatten)(allDiagnostics);
                    ts_1.Debug.assert(diags_3.length > 0, "No errors reported for 3 or fewer overload signatures");
                    var chain = (0, ts_1.chainDiagnosticMessages)((0, ts_1.map)(diags_3, ts_1.createDiagnosticMessageChainFromDiagnostic), ts_1.Diagnostics.No_overload_matches_this_call);
                    if (headMessage) {
                        chain = (0, ts_1.chainDiagnosticMessages)(chain, headMessage);
                    }
                    // The below is a spread to guarantee we get a new (mutable) array - our `flatMap` helper tries to do "smart" optimizations where it reuses input
                    // arrays and the emptyArray singleton where possible, which is decidedly not what we want while we're still constructing this diagnostic
                    var related = __spreadArray([], (0, ts_1.flatMap)(diags_3, function (d) { return d.relatedInformation; }), true);
                    var diag = void 0;
                    if ((0, ts_1.every)(diags_3, function (d) { return d.start === diags_3[0].start && d.length === diags_3[0].length && d.file === diags_3[0].file; })) {
                        var _b = diags_3[0], file = _b.file, start = _b.start, length_6 = _b.length;
                        diag = { file: file, start: start, length: length_6, code: chain.code, category: chain.category, messageText: chain, relatedInformation: related };
                    }
                    else {
                        diag = (0, ts_1.createDiagnosticForNodeFromMessageChain)((0, ts_1.getSourceFileOfNode)(node), node, chain, related);
                    }
                    addImplementationSuccessElaboration(candidatesForArgumentError[0], diag);
                    diagnostics.add(diag);
                }
            }
            else if (candidateForArgumentArityError) {
                diagnostics.add(getArgumentArityError(node, [candidateForArgumentArityError], args, headMessage));
            }
            else if (candidateForTypeArgumentError) {
                checkTypeArguments(candidateForTypeArgumentError, node.typeArguments, /*reportErrors*/ true, headMessage);
            }
            else {
                var signaturesWithCorrectTypeArgumentArity = (0, ts_1.filter)(signatures, function (s) { return hasCorrectTypeArgumentArity(s, typeArguments); });
                if (signaturesWithCorrectTypeArgumentArity.length === 0) {
                    diagnostics.add(getTypeArgumentArityError(node, signatures, typeArguments, headMessage));
                }
                else {
                    diagnostics.add(getArgumentArityError(node, signaturesWithCorrectTypeArgumentArity, args, headMessage));
                }
            }
        }
        return result;
        function addImplementationSuccessElaboration(failed, diagnostic) {
            var _a, _b;
            var oldCandidatesForArgumentError = candidatesForArgumentError;
            var oldCandidateForArgumentArityError = candidateForArgumentArityError;
            var oldCandidateForTypeArgumentError = candidateForTypeArgumentError;
            var failedSignatureDeclarations = ((_b = (_a = failed.declaration) === null || _a === void 0 ? void 0 : _a.symbol) === null || _b === void 0 ? void 0 : _b.declarations) || ts_1.emptyArray;
            var isOverload = failedSignatureDeclarations.length > 1;
            var implDecl = isOverload ? (0, ts_1.find)(failedSignatureDeclarations, function (d) { return (0, ts_1.isFunctionLikeDeclaration)(d) && (0, ts_1.nodeIsPresent)(d.body); }) : undefined;
            if (implDecl) {
                var candidate = getSignatureFromDeclaration(implDecl);
                var isSingleNonGenericCandidate_1 = !candidate.typeParameters;
                if (chooseOverload([candidate], assignableRelation, isSingleNonGenericCandidate_1)) {
                    (0, ts_1.addRelatedInfo)(diagnostic, (0, ts_1.createDiagnosticForNode)(implDecl, ts_1.Diagnostics.The_call_would_have_succeeded_against_this_implementation_but_implementation_signatures_of_overloads_are_not_externally_visible));
                }
            }
            candidatesForArgumentError = oldCandidatesForArgumentError;
            candidateForArgumentArityError = oldCandidateForArgumentArityError;
            candidateForTypeArgumentError = oldCandidateForTypeArgumentError;
        }
        function chooseOverload(candidates, relation, isSingleNonGenericCandidate, signatureHelpTrailingComma) {
            if (signatureHelpTrailingComma === void 0) { signatureHelpTrailingComma = false; }
            candidatesForArgumentError = undefined;
            candidateForArgumentArityError = undefined;
            candidateForTypeArgumentError = undefined;
            if (isSingleNonGenericCandidate) {
                var candidate = candidates[0];
                if ((0, ts_1.some)(typeArguments) || !hasCorrectArity(node, args, candidate, signatureHelpTrailingComma)) {
                    return undefined;
                }
                if (getSignatureApplicabilityError(node, args, candidate, relation, 0 /* CheckMode.Normal */, /*reportErrors*/ false, /*containingMessageChain*/ undefined)) {
                    candidatesForArgumentError = [candidate];
                    return undefined;
                }
                return candidate;
            }
            for (var candidateIndex = 0; candidateIndex < candidates.length; candidateIndex++) {
                var candidate = candidates[candidateIndex];
                if (!hasCorrectTypeArgumentArity(candidate, typeArguments) || !hasCorrectArity(node, args, candidate, signatureHelpTrailingComma)) {
                    continue;
                }
                var checkCandidate = void 0;
                var inferenceContext = void 0;
                if (candidate.typeParameters) {
                    var typeArgumentTypes = void 0;
                    if ((0, ts_1.some)(typeArguments)) {
                        typeArgumentTypes = checkTypeArguments(candidate, typeArguments, /*reportErrors*/ false);
                        if (!typeArgumentTypes) {
                            candidateForTypeArgumentError = candidate;
                            continue;
                        }
                    }
                    else {
                        inferenceContext = createInferenceContext(candidate.typeParameters, candidate, /*flags*/ (0, ts_1.isInJSFile)(node) ? 2 /* InferenceFlags.AnyDefault */ : 0 /* InferenceFlags.None */);
                        typeArgumentTypes = inferTypeArguments(node, candidate, args, argCheckMode | 8 /* CheckMode.SkipGenericFunctions */, inferenceContext);
                        argCheckMode |= inferenceContext.flags & 4 /* InferenceFlags.SkippedGenericFunction */ ? 8 /* CheckMode.SkipGenericFunctions */ : 0 /* CheckMode.Normal */;
                    }
                    checkCandidate = getSignatureInstantiation(candidate, typeArgumentTypes, (0, ts_1.isInJSFile)(candidate.declaration), inferenceContext && inferenceContext.inferredTypeParameters);
                    // If the original signature has a generic rest type, instantiation may produce a
                    // signature with different arity and we need to perform another arity check.
                    if (getNonArrayRestType(candidate) && !hasCorrectArity(node, args, checkCandidate, signatureHelpTrailingComma)) {
                        candidateForArgumentArityError = checkCandidate;
                        continue;
                    }
                }
                else {
                    checkCandidate = candidate;
                }
                if (getSignatureApplicabilityError(node, args, checkCandidate, relation, argCheckMode, /*reportErrors*/ false, /*containingMessageChain*/ undefined)) {
                    // Give preference to error candidates that have no rest parameters (as they are more specific)
                    (candidatesForArgumentError || (candidatesForArgumentError = [])).push(checkCandidate);
                    continue;
                }
                if (argCheckMode) {
                    // If one or more context sensitive arguments were excluded, we start including
                    // them now (and keeping do so for any subsequent candidates) and perform a second
                    // round of type inference and applicability checking for this particular candidate.
                    argCheckMode = 0 /* CheckMode.Normal */;
                    if (inferenceContext) {
                        var typeArgumentTypes = inferTypeArguments(node, candidate, args, argCheckMode, inferenceContext);
                        checkCandidate = getSignatureInstantiation(candidate, typeArgumentTypes, (0, ts_1.isInJSFile)(candidate.declaration), inferenceContext.inferredTypeParameters);
                        // If the original signature has a generic rest type, instantiation may produce a
                        // signature with different arity and we need to perform another arity check.
                        if (getNonArrayRestType(candidate) && !hasCorrectArity(node, args, checkCandidate, signatureHelpTrailingComma)) {
                            candidateForArgumentArityError = checkCandidate;
                            continue;
                        }
                    }
                    if (getSignatureApplicabilityError(node, args, checkCandidate, relation, argCheckMode, /*reportErrors*/ false, /*containingMessageChain*/ undefined)) {
                        // Give preference to error candidates that have no rest parameters (as they are more specific)
                        (candidatesForArgumentError || (candidatesForArgumentError = [])).push(checkCandidate);
                        continue;
                    }
                }
                candidates[candidateIndex] = checkCandidate;
                return checkCandidate;
            }
            return undefined;
        }
    }
    // No signature was applicable. We have already reported the errors for the invalid signature.
    function getCandidateForOverloadFailure(node, candidates, args, hasCandidatesOutArray, checkMode) {
        ts_1.Debug.assert(candidates.length > 0); // Else should not have called this.
        checkNodeDeferred(node);
        // Normally we will combine overloads. Skip this if they have type parameters since that's hard to combine.
        // Don't do this if there is a `candidatesOutArray`,
        // because then we want the chosen best candidate to be one of the overloads, not a combination.
        return hasCandidatesOutArray || candidates.length === 1 || candidates.some(function (c) { return !!c.typeParameters; })
            ? pickLongestCandidateSignature(node, candidates, args, checkMode)
            : createUnionOfSignaturesForOverloadFailure(candidates);
    }
    function createUnionOfSignaturesForOverloadFailure(candidates) {
        var thisParameters = (0, ts_1.mapDefined)(candidates, function (c) { return c.thisParameter; });
        var thisParameter;
        if (thisParameters.length) {
            thisParameter = createCombinedSymbolFromTypes(thisParameters, thisParameters.map(getTypeOfParameter));
        }
        var _a = (0, ts_1.minAndMax)(candidates, getNumNonRestParameters), minArgumentCount = _a.min, maxNonRestParam = _a.max;
        var parameters = [];
        var _loop_23 = function (i) {
            var symbols = (0, ts_1.mapDefined)(candidates, function (s) { return signatureHasRestParameter(s) ?
                i < s.parameters.length - 1 ? s.parameters[i] : (0, ts_1.last)(s.parameters) :
                i < s.parameters.length ? s.parameters[i] : undefined; });
            ts_1.Debug.assert(symbols.length !== 0);
            parameters.push(createCombinedSymbolFromTypes(symbols, (0, ts_1.mapDefined)(candidates, function (candidate) { return tryGetTypeAtPosition(candidate, i); })));
        };
        for (var i = 0; i < maxNonRestParam; i++) {
            _loop_23(i);
        }
        var restParameterSymbols = (0, ts_1.mapDefined)(candidates, function (c) { return signatureHasRestParameter(c) ? (0, ts_1.last)(c.parameters) : undefined; });
        var flags = 0 /* SignatureFlags.None */;
        if (restParameterSymbols.length !== 0) {
            var type = createArrayType(getUnionType((0, ts_1.mapDefined)(candidates, tryGetRestTypeOfSignature), 2 /* UnionReduction.Subtype */));
            parameters.push(createCombinedSymbolForOverloadFailure(restParameterSymbols, type));
            flags |= 1 /* SignatureFlags.HasRestParameter */;
        }
        if (candidates.some(signatureHasLiteralTypes)) {
            flags |= 2 /* SignatureFlags.HasLiteralTypes */;
        }
        return createSignature(candidates[0].declaration, 
        /*typeParameters*/ undefined, // Before calling this we tested for `!candidates.some(c => !!c.typeParameters)`.
        thisParameter, parameters, 
        /*resolvedReturnType*/ getIntersectionType(candidates.map(getReturnTypeOfSignature)), 
        /*resolvedTypePredicate*/ undefined, minArgumentCount, flags);
    }
    function getNumNonRestParameters(signature) {
        var numParams = signature.parameters.length;
        return signatureHasRestParameter(signature) ? numParams - 1 : numParams;
    }
    function createCombinedSymbolFromTypes(sources, types) {
        return createCombinedSymbolForOverloadFailure(sources, getUnionType(types, 2 /* UnionReduction.Subtype */));
    }
    function createCombinedSymbolForOverloadFailure(sources, type) {
        // This function is currently only used for erroneous overloads, so it's good enough to just use the first source.
        return createSymbolWithType((0, ts_1.first)(sources), type);
    }
    function pickLongestCandidateSignature(node, candidates, args, checkMode) {
        // Pick the longest signature. This way we can get a contextual type for cases like:
        //     declare function f(a: { xa: number; xb: number; }, b: number);
        //     f({ |
        // Also, use explicitly-supplied type arguments if they are provided, so we can get a contextual signature in cases like:
        //     declare function f<T>(k: keyof T);
        //     f<Foo>("
        var bestIndex = getLongestCandidateIndex(candidates, apparentArgumentCount === undefined ? args.length : apparentArgumentCount);
        var candidate = candidates[bestIndex];
        var typeParameters = candidate.typeParameters;
        if (!typeParameters) {
            return candidate;
        }
        var typeArgumentNodes = callLikeExpressionMayHaveTypeArguments(node) ? node.typeArguments : undefined;
        var instantiated = typeArgumentNodes
            ? createSignatureInstantiation(candidate, getTypeArgumentsFromNodes(typeArgumentNodes, typeParameters, (0, ts_1.isInJSFile)(node)))
            : inferSignatureInstantiationForOverloadFailure(node, typeParameters, candidate, args, checkMode);
        candidates[bestIndex] = instantiated;
        return instantiated;
    }
    function getTypeArgumentsFromNodes(typeArgumentNodes, typeParameters, isJs) {
        var typeArguments = typeArgumentNodes.map(getTypeOfNode);
        while (typeArguments.length > typeParameters.length) {
            typeArguments.pop();
        }
        while (typeArguments.length < typeParameters.length) {
            typeArguments.push(getDefaultFromTypeParameter(typeParameters[typeArguments.length]) || getConstraintOfTypeParameter(typeParameters[typeArguments.length]) || getDefaultTypeArgumentType(isJs));
        }
        return typeArguments;
    }
    function inferSignatureInstantiationForOverloadFailure(node, typeParameters, candidate, args, checkMode) {
        var inferenceContext = createInferenceContext(typeParameters, candidate, /*flags*/ (0, ts_1.isInJSFile)(node) ? 2 /* InferenceFlags.AnyDefault */ : 0 /* InferenceFlags.None */);
        var typeArgumentTypes = inferTypeArguments(node, candidate, args, checkMode | 4 /* CheckMode.SkipContextSensitive */ | 8 /* CheckMode.SkipGenericFunctions */, inferenceContext);
        return createSignatureInstantiation(candidate, typeArgumentTypes);
    }
    function getLongestCandidateIndex(candidates, argsCount) {
        var maxParamsIndex = -1;
        var maxParams = -1;
        for (var i = 0; i < candidates.length; i++) {
            var candidate = candidates[i];
            var paramCount = getParameterCount(candidate);
            if (hasEffectiveRestParameter(candidate) || paramCount >= argsCount) {
                return i;
            }
            if (paramCount > maxParams) {
                maxParams = paramCount;
                maxParamsIndex = i;
            }
        }
        return maxParamsIndex;
    }
    function resolveCallExpression(node, candidatesOutArray, checkMode) {
        if (node.expression.kind === 108 /* SyntaxKind.SuperKeyword */) {
            var superType = checkSuperExpression(node.expression);
            if (isTypeAny(superType)) {
                for (var _i = 0, _a = node.arguments; _i < _a.length; _i++) {
                    var arg = _a[_i];
                    checkExpression(arg); // Still visit arguments so they get marked for visibility, etc
                }
                return anySignature;
            }
            if (!isErrorType(superType)) {
                // In super call, the candidate signatures are the matching arity signatures of the base constructor function instantiated
                // with the type arguments specified in the extends clause.
                var baseTypeNode = (0, ts_1.getEffectiveBaseTypeNode)((0, ts_1.getContainingClass)(node));
                if (baseTypeNode) {
                    var baseConstructors = getInstantiatedConstructorsForTypeArguments(superType, baseTypeNode.typeArguments, baseTypeNode);
                    return resolveCall(node, baseConstructors, candidatesOutArray, checkMode, 0 /* SignatureFlags.None */);
                }
            }
            return resolveUntypedCall(node);
        }
        var callChainFlags;
        var funcType = checkExpression(node.expression);
        if ((0, ts_1.isCallChain)(node)) {
            var nonOptionalType = getOptionalExpressionType(funcType, node.expression);
            callChainFlags = nonOptionalType === funcType ? 0 /* SignatureFlags.None */ :
                (0, ts_1.isOutermostOptionalChain)(node) ? 16 /* SignatureFlags.IsOuterCallChain */ :
                    8 /* SignatureFlags.IsInnerCallChain */;
            funcType = nonOptionalType;
        }
        else {
            callChainFlags = 0 /* SignatureFlags.None */;
        }
        funcType = checkNonNullTypeWithReporter(funcType, node.expression, reportCannotInvokePossiblyNullOrUndefinedError);
        if (funcType === silentNeverType) {
            return silentNeverSignature;
        }
        var apparentType = getApparentType(funcType);
        if (isErrorType(apparentType)) {
            // Another error has already been reported
            return resolveErrorCall(node);
        }
        // Technically, this signatures list may be incomplete. We are taking the apparent type,
        // but we are not including call signatures that may have been added to the Object or
        // Function interface, since they have none by default. This is a bit of a leap of faith
        // that the user will not add any.
        var callSignatures = getSignaturesOfType(apparentType, 0 /* SignatureKind.Call */);
        var numConstructSignatures = getSignaturesOfType(apparentType, 1 /* SignatureKind.Construct */).length;
        // TS 1.0 Spec: 4.12
        // In an untyped function call no TypeArgs are permitted, Args can be any argument list, no contextual
        // types are provided for the argument expressions, and the result is always of type Any.
        if (isUntypedFunctionCall(funcType, apparentType, callSignatures.length, numConstructSignatures)) {
            // The unknownType indicates that an error already occurred (and was reported).  No
            // need to report another error in this case.
            if (!isErrorType(funcType) && node.typeArguments) {
                error(node, ts_1.Diagnostics.Untyped_function_calls_may_not_accept_type_arguments);
            }
            return resolveUntypedCall(node);
        }
        // If FuncExpr's apparent type(section 3.8.1) is a function type, the call is a typed function call.
        // TypeScript employs overload resolution in typed function calls in order to support functions
        // with multiple call signatures.
        if (!callSignatures.length) {
            if (numConstructSignatures) {
                error(node, ts_1.Diagnostics.Value_of_type_0_is_not_callable_Did_you_mean_to_include_new, typeToString(funcType));
            }
            else {
                var relatedInformation = void 0;
                if (node.arguments.length === 1) {
                    var text = (0, ts_1.getSourceFileOfNode)(node).text;
                    if ((0, ts_1.isLineBreak)(text.charCodeAt((0, ts_1.skipTrivia)(text, node.expression.end, /*stopAfterLineBreak*/ true) - 1))) {
                        relatedInformation = (0, ts_1.createDiagnosticForNode)(node.expression, ts_1.Diagnostics.Are_you_missing_a_semicolon);
                    }
                }
                invocationError(node.expression, apparentType, 0 /* SignatureKind.Call */, relatedInformation);
            }
            return resolveErrorCall(node);
        }
        // When a call to a generic function is an argument to an outer call to a generic function for which
        // inference is in process, we have a choice to make. If the inner call relies on inferences made from
        // its contextual type to its return type, deferring the inner call processing allows the best possible
        // contextual type to accumulate. But if the outer call relies on inferences made from the return type of
        // the inner call, the inner call should be processed early. There's no sure way to know which choice is
        // right (only a full unification algorithm can determine that), so we resort to the following heuristic:
        // If no type arguments are specified in the inner call and at least one call signature is generic and
        // returns a function type, we choose to defer processing. This narrowly permits function composition
        // operators to flow inferences through return types, but otherwise processes calls right away. We
        // use the resolvingSignature singleton to indicate that we deferred processing. This result will be
        // propagated out and eventually turned into silentNeverType (a type that is assignable to anything and
        // from which we never make inferences).
        if (checkMode & 8 /* CheckMode.SkipGenericFunctions */ && !node.typeArguments && callSignatures.some(isGenericFunctionReturningFunction)) {
            skippedGenericFunction(node, checkMode);
            return resolvingSignature;
        }
        // If the function is explicitly marked with `@class`, then it must be constructed.
        if (callSignatures.some(function (sig) { return (0, ts_1.isInJSFile)(sig.declaration) && !!(0, ts_1.getJSDocClassTag)(sig.declaration); })) {
            error(node, ts_1.Diagnostics.Value_of_type_0_is_not_callable_Did_you_mean_to_include_new, typeToString(funcType));
            return resolveErrorCall(node);
        }
        return resolveCall(node, callSignatures, candidatesOutArray, checkMode, callChainFlags);
    }
    function isGenericFunctionReturningFunction(signature) {
        return !!(signature.typeParameters && isFunctionType(getReturnTypeOfSignature(signature)));
    }
    /**
     * TS 1.0 spec: 4.12
     * If FuncExpr is of type Any, or of an object type that has no call or construct signatures
     * but is a subtype of the Function interface, the call is an untyped function call.
     */
    function isUntypedFunctionCall(funcType, apparentFuncType, numCallSignatures, numConstructSignatures) {
        // We exclude union types because we may have a union of function types that happen to have no common signatures.
        return isTypeAny(funcType) || isTypeAny(apparentFuncType) && !!(funcType.flags & 262144 /* TypeFlags.TypeParameter */) ||
            !numCallSignatures && !numConstructSignatures && !(apparentFuncType.flags & 1048576 /* TypeFlags.Union */) && !(getReducedType(apparentFuncType).flags & 131072 /* TypeFlags.Never */) && isTypeAssignableTo(funcType, globalFunctionType);
    }
    function resolveNewExpression(node, candidatesOutArray, checkMode) {
        if (node.arguments && languageVersion < 1 /* ScriptTarget.ES5 */) {
            var spreadIndex = getSpreadArgumentIndex(node.arguments);
            if (spreadIndex >= 0) {
                error(node.arguments[spreadIndex], ts_1.Diagnostics.Spread_operator_in_new_expressions_is_only_available_when_targeting_ECMAScript_5_and_higher);
            }
        }
        var expressionType = checkNonNullExpression(node.expression);
        if (expressionType === silentNeverType) {
            return silentNeverSignature;
        }
        // If expressionType's apparent type(section 3.8.1) is an object type with one or
        // more construct signatures, the expression is processed in the same manner as a
        // function call, but using the construct signatures as the initial set of candidate
        // signatures for overload resolution. The result type of the function call becomes
        // the result type of the operation.
        expressionType = getApparentType(expressionType);
        if (isErrorType(expressionType)) {
            // Another error has already been reported
            return resolveErrorCall(node);
        }
        // TS 1.0 spec: 4.11
        // If expressionType is of type Any, Args can be any argument
        // list and the result of the operation is of type Any.
        if (isTypeAny(expressionType)) {
            if (node.typeArguments) {
                error(node, ts_1.Diagnostics.Untyped_function_calls_may_not_accept_type_arguments);
            }
            return resolveUntypedCall(node);
        }
        // Technically, this signatures list may be incomplete. We are taking the apparent type,
        // but we are not including construct signatures that may have been added to the Object or
        // Function interface, since they have none by default. This is a bit of a leap of faith
        // that the user will not add any.
        var constructSignatures = getSignaturesOfType(expressionType, 1 /* SignatureKind.Construct */);
        if (constructSignatures.length) {
            if (!isConstructorAccessible(node, constructSignatures[0])) {
                return resolveErrorCall(node);
            }
            // If the expression is a class of abstract type, or an abstract construct signature,
            // then it cannot be instantiated.
            // In the case of a merged class-module or class-interface declaration,
            // only the class declaration node will have the Abstract flag set.
            if (someSignature(constructSignatures, function (signature) { return !!(signature.flags & 4 /* SignatureFlags.Abstract */); })) {
                error(node, ts_1.Diagnostics.Cannot_create_an_instance_of_an_abstract_class);
                return resolveErrorCall(node);
            }
            var valueDecl = expressionType.symbol && (0, ts_1.getClassLikeDeclarationOfSymbol)(expressionType.symbol);
            if (valueDecl && (0, ts_1.hasSyntacticModifier)(valueDecl, 256 /* ModifierFlags.Abstract */)) {
                error(node, ts_1.Diagnostics.Cannot_create_an_instance_of_an_abstract_class);
                return resolveErrorCall(node);
            }
            return resolveCall(node, constructSignatures, candidatesOutArray, checkMode, 0 /* SignatureFlags.None */);
        }
        // If expressionType's apparent type is an object type with no construct signatures but
        // one or more call signatures, the expression is processed as a function call. A compile-time
        // error occurs if the result of the function call is not Void. The type of the result of the
        // operation is Any. It is an error to have a Void this type.
        var callSignatures = getSignaturesOfType(expressionType, 0 /* SignatureKind.Call */);
        if (callSignatures.length) {
            var signature = resolveCall(node, callSignatures, candidatesOutArray, checkMode, 0 /* SignatureFlags.None */);
            if (!noImplicitAny) {
                if (signature.declaration && !isJSConstructor(signature.declaration) && getReturnTypeOfSignature(signature) !== voidType) {
                    error(node, ts_1.Diagnostics.Only_a_void_function_can_be_called_with_the_new_keyword);
                }
                if (getThisTypeOfSignature(signature) === voidType) {
                    error(node, ts_1.Diagnostics.A_function_that_is_called_with_the_new_keyword_cannot_have_a_this_type_that_is_void);
                }
            }
            return signature;
        }
        invocationError(node.expression, expressionType, 1 /* SignatureKind.Construct */);
        return resolveErrorCall(node);
    }
    function someSignature(signatures, f) {
        if ((0, ts_1.isArray)(signatures)) {
            return (0, ts_1.some)(signatures, function (signature) { return someSignature(signature, f); });
        }
        return signatures.compositeKind === 1048576 /* TypeFlags.Union */ ? (0, ts_1.some)(signatures.compositeSignatures, f) : f(signatures);
    }
    function typeHasProtectedAccessibleBase(target, type) {
        var baseTypes = getBaseTypes(type);
        if (!(0, ts_1.length)(baseTypes)) {
            return false;
        }
        var firstBase = baseTypes[0];
        if (firstBase.flags & 2097152 /* TypeFlags.Intersection */) {
            var types = firstBase.types;
            var mixinFlags = findMixins(types);
            var i = 0;
            for (var _i = 0, _a = firstBase.types; _i < _a.length; _i++) {
                var intersectionMember = _a[_i];
                // We want to ignore mixin ctors
                if (!mixinFlags[i]) {
                    if ((0, ts_1.getObjectFlags)(intersectionMember) & (1 /* ObjectFlags.Class */ | 2 /* ObjectFlags.Interface */)) {
                        if (intersectionMember.symbol === target) {
                            return true;
                        }
                        if (typeHasProtectedAccessibleBase(target, intersectionMember)) {
                            return true;
                        }
                    }
                }
                i++;
            }
            return false;
        }
        if (firstBase.symbol === target) {
            return true;
        }
        return typeHasProtectedAccessibleBase(target, firstBase);
    }
    function isConstructorAccessible(node, signature) {
        if (!signature || !signature.declaration) {
            return true;
        }
        var declaration = signature.declaration;
        var modifiers = (0, ts_1.getSelectedEffectiveModifierFlags)(declaration, 24 /* ModifierFlags.NonPublicAccessibilityModifier */);
        // (1) Public constructors and (2) constructor functions are always accessible.
        if (!modifiers || declaration.kind !== 175 /* SyntaxKind.Constructor */) {
            return true;
        }
        var declaringClassDeclaration = (0, ts_1.getClassLikeDeclarationOfSymbol)(declaration.parent.symbol);
        var declaringClass = getDeclaredTypeOfSymbol(declaration.parent.symbol);
        // A private or protected constructor can only be instantiated within its own class (or a subclass, for protected)
        if (!isNodeWithinClass(node, declaringClassDeclaration)) {
            var containingClass = (0, ts_1.getContainingClass)(node);
            if (containingClass && modifiers & 16 /* ModifierFlags.Protected */) {
                var containingType = getTypeOfNode(containingClass);
                if (typeHasProtectedAccessibleBase(declaration.parent.symbol, containingType)) {
                    return true;
                }
            }
            if (modifiers & 8 /* ModifierFlags.Private */) {
                error(node, ts_1.Diagnostics.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration, typeToString(declaringClass));
            }
            if (modifiers & 16 /* ModifierFlags.Protected */) {
                error(node, ts_1.Diagnostics.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration, typeToString(declaringClass));
            }
            return false;
        }
        return true;
    }
    function invocationErrorDetails(errorTarget, apparentType, kind) {
        var errorInfo;
        var isCall = kind === 0 /* SignatureKind.Call */;
        var awaitedType = getAwaitedType(apparentType);
        var maybeMissingAwait = awaitedType && getSignaturesOfType(awaitedType, kind).length > 0;
        if (apparentType.flags & 1048576 /* TypeFlags.Union */) {
            var types = apparentType.types;
            var hasSignatures = false;
            for (var _i = 0, types_19 = types; _i < types_19.length; _i++) {
                var constituent = types_19[_i];
                var signatures = getSignaturesOfType(constituent, kind);
                if (signatures.length !== 0) {
                    hasSignatures = true;
                    if (errorInfo) {
                        // Bail early if we already have an error, no chance of "No constituent of type is callable"
                        break;
                    }
                }
                else {
                    // Error on the first non callable constituent only
                    if (!errorInfo) {
                        errorInfo = (0, ts_1.chainDiagnosticMessages)(errorInfo, isCall ?
                            ts_1.Diagnostics.Type_0_has_no_call_signatures :
                            ts_1.Diagnostics.Type_0_has_no_construct_signatures, typeToString(constituent));
                        errorInfo = (0, ts_1.chainDiagnosticMessages)(errorInfo, isCall ?
                            ts_1.Diagnostics.Not_all_constituents_of_type_0_are_callable :
                            ts_1.Diagnostics.Not_all_constituents_of_type_0_are_constructable, typeToString(apparentType));
                    }
                    if (hasSignatures) {
                        // Bail early if we already found a siganture, no chance of "No constituent of type is callable"
                        break;
                    }
                }
            }
            if (!hasSignatures) {
                errorInfo = (0, ts_1.chainDiagnosticMessages)(
                /*details*/ undefined, isCall ?
                    ts_1.Diagnostics.No_constituent_of_type_0_is_callable :
                    ts_1.Diagnostics.No_constituent_of_type_0_is_constructable, typeToString(apparentType));
            }
            if (!errorInfo) {
                errorInfo = (0, ts_1.chainDiagnosticMessages)(errorInfo, isCall ?
                    ts_1.Diagnostics.Each_member_of_the_union_type_0_has_signatures_but_none_of_those_signatures_are_compatible_with_each_other :
                    ts_1.Diagnostics.Each_member_of_the_union_type_0_has_construct_signatures_but_none_of_those_signatures_are_compatible_with_each_other, typeToString(apparentType));
            }
        }
        else {
            errorInfo = (0, ts_1.chainDiagnosticMessages)(errorInfo, isCall ?
                ts_1.Diagnostics.Type_0_has_no_call_signatures :
                ts_1.Diagnostics.Type_0_has_no_construct_signatures, typeToString(apparentType));
        }
        var headMessage = isCall ? ts_1.Diagnostics.This_expression_is_not_callable : ts_1.Diagnostics.This_expression_is_not_constructable;
        // Diagnose get accessors incorrectly called as functions
        if ((0, ts_1.isCallExpression)(errorTarget.parent) && errorTarget.parent.arguments.length === 0) {
            var resolvedSymbol = getNodeLinks(errorTarget).resolvedSymbol;
            if (resolvedSymbol && resolvedSymbol.flags & 32768 /* SymbolFlags.GetAccessor */) {
                headMessage = ts_1.Diagnostics.This_expression_is_not_callable_because_it_is_a_get_accessor_Did_you_mean_to_use_it_without;
            }
        }
        return {
            messageChain: (0, ts_1.chainDiagnosticMessages)(errorInfo, headMessage),
            relatedMessage: maybeMissingAwait ? ts_1.Diagnostics.Did_you_forget_to_use_await : undefined,
        };
    }
    function invocationError(errorTarget, apparentType, kind, relatedInformation) {
        var _a = invocationErrorDetails(errorTarget, apparentType, kind), messageChain = _a.messageChain, relatedInfo = _a.relatedMessage;
        var diagnostic = (0, ts_1.createDiagnosticForNodeFromMessageChain)((0, ts_1.getSourceFileOfNode)(errorTarget), errorTarget, messageChain);
        if (relatedInfo) {
            (0, ts_1.addRelatedInfo)(diagnostic, (0, ts_1.createDiagnosticForNode)(errorTarget, relatedInfo));
        }
        if ((0, ts_1.isCallExpression)(errorTarget.parent)) {
            var _b = getDiagnosticSpanForCallNode(errorTarget.parent, /*doNotIncludeArguments*/ true), start = _b.start, length_7 = _b.length;
            diagnostic.start = start;
            diagnostic.length = length_7;
        }
        diagnostics.add(diagnostic);
        invocationErrorRecovery(apparentType, kind, relatedInformation ? (0, ts_1.addRelatedInfo)(diagnostic, relatedInformation) : diagnostic);
    }
    function invocationErrorRecovery(apparentType, kind, diagnostic) {
        if (!apparentType.symbol) {
            return;
        }
        var importNode = getSymbolLinks(apparentType.symbol).originatingImport;
        // Create a diagnostic on the originating import if possible onto which we can attach a quickfix
        //  An import call expression cannot be rewritten into another form to correct the error - the only solution is to use `.default` at the use-site
        if (importNode && !(0, ts_1.isImportCall)(importNode)) {
            var sigs = getSignaturesOfType(getTypeOfSymbol(getSymbolLinks(apparentType.symbol).target), kind);
            if (!sigs || !sigs.length)
                return;
            (0, ts_1.addRelatedInfo)(diagnostic, (0, ts_1.createDiagnosticForNode)(importNode, ts_1.Diagnostics.Type_originates_at_this_import_A_namespace_style_import_cannot_be_called_or_constructed_and_will_cause_a_failure_at_runtime_Consider_using_a_default_import_or_import_require_here_instead));
        }
    }
    function resolveTaggedTemplateExpression(node, candidatesOutArray, checkMode) {
        var tagType = checkExpression(node.tag);
        var apparentType = getApparentType(tagType);
        if (isErrorType(apparentType)) {
            // Another error has already been reported
            return resolveErrorCall(node);
        }
        var callSignatures = getSignaturesOfType(apparentType, 0 /* SignatureKind.Call */);
        var numConstructSignatures = getSignaturesOfType(apparentType, 1 /* SignatureKind.Construct */).length;
        if (isUntypedFunctionCall(tagType, apparentType, callSignatures.length, numConstructSignatures)) {
            return resolveUntypedCall(node);
        }
        if (!callSignatures.length) {
            if ((0, ts_1.isArrayLiteralExpression)(node.parent)) {
                var diagnostic = (0, ts_1.createDiagnosticForNode)(node.tag, ts_1.Diagnostics.It_is_likely_that_you_are_missing_a_comma_to_separate_these_two_template_expressions_They_form_a_tagged_template_expression_which_cannot_be_invoked);
                diagnostics.add(diagnostic);
                return resolveErrorCall(node);
            }
            invocationError(node.tag, apparentType, 0 /* SignatureKind.Call */);
            return resolveErrorCall(node);
        }
        return resolveCall(node, callSignatures, candidatesOutArray, checkMode, 0 /* SignatureFlags.None */);
    }
    /**
     * Gets the localized diagnostic head message to use for errors when resolving a decorator as a call expression.
     */
    function getDiagnosticHeadMessageForDecoratorResolution(node) {
        switch (node.parent.kind) {
            case 262 /* SyntaxKind.ClassDeclaration */:
            case 230 /* SyntaxKind.ClassExpression */:
                return ts_1.Diagnostics.Unable_to_resolve_signature_of_class_decorator_when_called_as_an_expression;
            case 168 /* SyntaxKind.Parameter */:
                return ts_1.Diagnostics.Unable_to_resolve_signature_of_parameter_decorator_when_called_as_an_expression;
            case 171 /* SyntaxKind.PropertyDeclaration */:
                return ts_1.Diagnostics.Unable_to_resolve_signature_of_property_decorator_when_called_as_an_expression;
            case 173 /* SyntaxKind.MethodDeclaration */:
            case 176 /* SyntaxKind.GetAccessor */:
            case 177 /* SyntaxKind.SetAccessor */:
                return ts_1.Diagnostics.Unable_to_resolve_signature_of_method_decorator_when_called_as_an_expression;
            default:
                return ts_1.Debug.fail();
        }
    }
    /**
     * Resolves a decorator as if it were a call expression.
     */
    function resolveDecorator(node, candidatesOutArray, checkMode) {
        var funcType = checkExpression(node.expression);
        var apparentType = getApparentType(funcType);
        if (isErrorType(apparentType)) {
            return resolveErrorCall(node);
        }
        var callSignatures = getSignaturesOfType(apparentType, 0 /* SignatureKind.Call */);
        var numConstructSignatures = getSignaturesOfType(apparentType, 1 /* SignatureKind.Construct */).length;
        if (isUntypedFunctionCall(funcType, apparentType, callSignatures.length, numConstructSignatures)) {
            return resolveUntypedCall(node);
        }
        if (isPotentiallyUncalledDecorator(node, callSignatures) && !(0, ts_1.isParenthesizedExpression)(node.expression)) {
            var nodeStr = (0, ts_1.getTextOfNode)(node.expression, /*includeTrivia*/ false);
            error(node, ts_1.Diagnostics._0_accepts_too_few_arguments_to_be_used_as_a_decorator_here_Did_you_mean_to_call_it_first_and_write_0, nodeStr);
            return resolveErrorCall(node);
        }
        var headMessage = getDiagnosticHeadMessageForDecoratorResolution(node);
        if (!callSignatures.length) {
            var errorDetails = invocationErrorDetails(node.expression, apparentType, 0 /* SignatureKind.Call */);
            var messageChain = (0, ts_1.chainDiagnosticMessages)(errorDetails.messageChain, headMessage);
            var diag = (0, ts_1.createDiagnosticForNodeFromMessageChain)((0, ts_1.getSourceFileOfNode)(node.expression), node.expression, messageChain);
            if (errorDetails.relatedMessage) {
                (0, ts_1.addRelatedInfo)(diag, (0, ts_1.createDiagnosticForNode)(node.expression, errorDetails.relatedMessage));
            }
            diagnostics.add(diag);
            invocationErrorRecovery(apparentType, 0 /* SignatureKind.Call */, diag);
            return resolveErrorCall(node);
        }
        return resolveCall(node, callSignatures, candidatesOutArray, checkMode, 0 /* SignatureFlags.None */, headMessage);
    }
    function createSignatureForJSXIntrinsic(node, result) {
        var namespace = getJsxNamespaceAt(node);
        var exports = namespace && getExportsOfSymbol(namespace);
        // We fake up a SFC signature for each intrinsic, however a more specific per-element signature drawn from the JSX declaration
        // file would probably be preferable.
        var typeSymbol = exports && getSymbol(exports, JsxNames.Element, 788968 /* SymbolFlags.Type */);
        var returnNode = typeSymbol && nodeBuilder.symbolToEntityName(typeSymbol, 788968 /* SymbolFlags.Type */, node);
        var declaration = ts_1.factory.createFunctionTypeNode(/*typeParameters*/ undefined, [ts_1.factory.createParameterDeclaration(/*modifiers*/ undefined, /*dotDotDotToken*/ undefined, "props", /*questionToken*/ undefined, nodeBuilder.typeToTypeNode(result, node))], returnNode ? ts_1.factory.createTypeReferenceNode(returnNode, /*typeArguments*/ undefined) : ts_1.factory.createKeywordTypeNode(133 /* SyntaxKind.AnyKeyword */));
        var parameterSymbol = createSymbol(1 /* SymbolFlags.FunctionScopedVariable */, "props");
        parameterSymbol.links.type = result;
        return createSignature(declaration, 
        /*typeParameters*/ undefined, 
        /*thisParameter*/ undefined, [parameterSymbol], typeSymbol ? getDeclaredTypeOfSymbol(typeSymbol) : errorType, 
        /*resolvedTypePredicate*/ undefined, 1, 0 /* SignatureFlags.None */);
    }
    function resolveJsxOpeningLikeElement(node, candidatesOutArray, checkMode) {
        if (isJsxIntrinsicTagName(node.tagName)) {
            var result = getIntrinsicAttributesTypeFromJsxOpeningLikeElement(node);
            var fakeSignature = createSignatureForJSXIntrinsic(node, result);
            checkTypeAssignableToAndOptionallyElaborate(checkExpressionWithContextualType(node.attributes, getEffectiveFirstArgumentForJsxSignature(fakeSignature, node), /*inferenceContext*/ undefined, 0 /* CheckMode.Normal */), result, node.tagName, node.attributes);
            if ((0, ts_1.length)(node.typeArguments)) {
                (0, ts_1.forEach)(node.typeArguments, checkSourceElement);
                diagnostics.add((0, ts_1.createDiagnosticForNodeArray)((0, ts_1.getSourceFileOfNode)(node), node.typeArguments, ts_1.Diagnostics.Expected_0_type_arguments_but_got_1, 0, (0, ts_1.length)(node.typeArguments)));
            }
            return fakeSignature;
        }
        var exprTypes = checkExpression(node.tagName);
        var apparentType = getApparentType(exprTypes);
        if (isErrorType(apparentType)) {
            return resolveErrorCall(node);
        }
        var signatures = getUninstantiatedJsxSignaturesOfType(exprTypes, node);
        if (isUntypedFunctionCall(exprTypes, apparentType, signatures.length, /*constructSignatures*/ 0)) {
            return resolveUntypedCall(node);
        }
        if (signatures.length === 0) {
            // We found no signatures at all, which is an error
            error(node.tagName, ts_1.Diagnostics.JSX_element_type_0_does_not_have_any_construct_or_call_signatures, (0, ts_1.getTextOfNode)(node.tagName));
            return resolveErrorCall(node);
        }
        return resolveCall(node, signatures, candidatesOutArray, checkMode, 0 /* SignatureFlags.None */);
    }
    /**
     * Sometimes, we have a decorator that could accept zero arguments,
     * but is receiving too many arguments as part of the decorator invocation.
     * In those cases, a user may have meant to *call* the expression before using it as a decorator.
     */
    function isPotentiallyUncalledDecorator(decorator, signatures) {
        return signatures.length && (0, ts_1.every)(signatures, function (signature) {
            return signature.minArgumentCount === 0 &&
                !signatureHasRestParameter(signature) &&
                signature.parameters.length < getDecoratorArgumentCount(decorator, signature);
        });
    }
    function resolveSignature(node, candidatesOutArray, checkMode) {
        switch (node.kind) {
            case 212 /* SyntaxKind.CallExpression */:
                return resolveCallExpression(node, candidatesOutArray, checkMode);
            case 213 /* SyntaxKind.NewExpression */:
                return resolveNewExpression(node, candidatesOutArray, checkMode);
            case 214 /* SyntaxKind.TaggedTemplateExpression */:
                return resolveTaggedTemplateExpression(node, candidatesOutArray, checkMode);
            case 169 /* SyntaxKind.Decorator */:
                return resolveDecorator(node, candidatesOutArray, checkMode);
            case 285 /* SyntaxKind.JsxOpeningElement */:
            case 284 /* SyntaxKind.JsxSelfClosingElement */:
                return resolveJsxOpeningLikeElement(node, candidatesOutArray, checkMode);
        }
        ts_1.Debug.assertNever(node, "Branch in 'resolveSignature' should be unreachable.");
    }
    /**
     * Resolve a signature of a given call-like expression.
     * @param node a call-like expression to try resolve a signature for
     * @param candidatesOutArray an array of signature to be filled in by the function. It is passed by signature help in the language service;
     *                           the function will fill it up with appropriate candidate signatures
     * @return a signature of the call-like expression or undefined if one can't be found
     */
    function getResolvedSignature(node, candidatesOutArray, checkMode) {
        var links = getNodeLinks(node);
        // If getResolvedSignature has already been called, we will have cached the resolvedSignature.
        // However, it is possible that either candidatesOutArray was not passed in the first time,
        // or that a different candidatesOutArray was passed in. Therefore, we need to redo the work
        // to correctly fill the candidatesOutArray.
        var cached = links.resolvedSignature;
        if (cached && cached !== resolvingSignature && !candidatesOutArray) {
            return cached;
        }
        links.resolvedSignature = resolvingSignature;
        var result = resolveSignature(node, candidatesOutArray, checkMode || 0 /* CheckMode.Normal */);
        // When CheckMode.SkipGenericFunctions is set we use resolvingSignature to indicate that call
        // resolution should be deferred.
        if (result !== resolvingSignature) {
            // if the signature resolution originated on a node that itself depends on the contextual type
            // then it's possible that the resolved signature might not be the same as the one that would be computed in source order
            // since resolving such signature leads to resolving the potential outer signature, its arguments and thus the very same signature
            // it's possible that this inner resolution sets the resolvedSignature first.
            // In such a case we ignore the local result and reuse the correct one that was cached.
            if (links.resolvedSignature !== resolvingSignature) {
                result = links.resolvedSignature;
            }
            // If signature resolution originated in control flow type analysis (for example to compute the
            // assigned type in a flow assignment) we don't cache the result as it may be based on temporary
            // types from the control flow analysis.
            links.resolvedSignature = flowLoopStart === flowLoopCount ? result : cached;
        }
        return result;
    }
    /**
     * Indicates whether a declaration can be treated as a constructor in a JavaScript
     * file.
     */
    function isJSConstructor(node) {
        var _a;
        if (!node || !(0, ts_1.isInJSFile)(node)) {
            return false;
        }
        var func = (0, ts_1.isFunctionDeclaration)(node) || (0, ts_1.isFunctionExpression)(node) ? node :
            ((0, ts_1.isVariableDeclaration)(node) || (0, ts_1.isPropertyAssignment)(node)) && node.initializer && (0, ts_1.isFunctionExpression)(node.initializer) ? node.initializer :
                undefined;
        if (func) {
            // If the node has a @class or @constructor tag, treat it like a constructor.
            if ((0, ts_1.getJSDocClassTag)(node))
                return true;
            // If the node is a property of an object literal.
            if ((0, ts_1.isPropertyAssignment)((0, ts_1.walkUpParenthesizedExpressions)(func.parent)))
                return false;
            // If the symbol of the node has members, treat it like a constructor.
            var symbol = getSymbolOfDeclaration(func);
            return !!((_a = symbol === null || symbol === void 0 ? void 0 : symbol.members) === null || _a === void 0 ? void 0 : _a.size);
        }
        return false;
    }
    function mergeJSSymbols(target, source) {
        var _a, _b;
        if (source) {
            var links = getSymbolLinks(source);
            if (!links.inferredClassSymbol || !links.inferredClassSymbol.has(getSymbolId(target))) {
                var inferred = (0, ts_1.isTransientSymbol)(target) ? target : cloneSymbol(target);
                inferred.exports = inferred.exports || (0, ts_1.createSymbolTable)();
                inferred.members = inferred.members || (0, ts_1.createSymbolTable)();
                inferred.flags |= source.flags & 32 /* SymbolFlags.Class */;
                if ((_a = source.exports) === null || _a === void 0 ? void 0 : _a.size) {
                    mergeSymbolTable(inferred.exports, source.exports);
                }
                if ((_b = source.members) === null || _b === void 0 ? void 0 : _b.size) {
                    mergeSymbolTable(inferred.members, source.members);
                }
                (links.inferredClassSymbol || (links.inferredClassSymbol = new Map())).set(getSymbolId(inferred), inferred);
                return inferred;
            }
            return links.inferredClassSymbol.get(getSymbolId(target));
        }
    }
    function getAssignedClassSymbol(decl) {
        var _a;
        var assignmentSymbol = decl && getSymbolOfExpando(decl, /*allowDeclaration*/ true);
        var prototype = (_a = assignmentSymbol === null || assignmentSymbol === void 0 ? void 0 : assignmentSymbol.exports) === null || _a === void 0 ? void 0 : _a.get("prototype");
        var init = (prototype === null || prototype === void 0 ? void 0 : prototype.valueDeclaration) && getAssignedJSPrototype(prototype.valueDeclaration);
        return init ? getSymbolOfDeclaration(init) : undefined;
    }
    function getSymbolOfExpando(node, allowDeclaration) {
        if (!node.parent) {
            return undefined;
        }
        var name;
        var decl;
        if ((0, ts_1.isVariableDeclaration)(node.parent) && node.parent.initializer === node) {
            if (!(0, ts_1.isInJSFile)(node) && !((0, ts_1.isVarConst)(node.parent) && (0, ts_1.isFunctionLikeDeclaration)(node))) {
                return undefined;
            }
            name = node.parent.name;
            decl = node.parent;
        }
        else if ((0, ts_1.isBinaryExpression)(node.parent)) {
            var parentNode = node.parent;
            var parentNodeOperator = node.parent.operatorToken.kind;
            if (parentNodeOperator === 64 /* SyntaxKind.EqualsToken */ && (allowDeclaration || parentNode.right === node)) {
                name = parentNode.left;
                decl = name;
            }
            else if (parentNodeOperator === 57 /* SyntaxKind.BarBarToken */ || parentNodeOperator === 61 /* SyntaxKind.QuestionQuestionToken */) {
                if ((0, ts_1.isVariableDeclaration)(parentNode.parent) && parentNode.parent.initializer === parentNode) {
                    name = parentNode.parent.name;
                    decl = parentNode.parent;
                }
                else if ((0, ts_1.isBinaryExpression)(parentNode.parent) && parentNode.parent.operatorToken.kind === 64 /* SyntaxKind.EqualsToken */ && (allowDeclaration || parentNode.parent.right === parentNode)) {
                    name = parentNode.parent.left;
                    decl = name;
                }
                if (!name || !(0, ts_1.isBindableStaticNameExpression)(name) || !(0, ts_1.isSameEntityName)(name, parentNode.left)) {
                    return undefined;
                }
            }
        }
        else if (allowDeclaration && (0, ts_1.isFunctionDeclaration)(node)) {
            name = node.name;
            decl = node;
        }
        if (!decl || !name || (!allowDeclaration && !(0, ts_1.getExpandoInitializer)(node, (0, ts_1.isPrototypeAccess)(name)))) {
            return undefined;
        }
        return getSymbolOfNode(decl);
    }
    function getAssignedJSPrototype(node) {
        if (!node.parent) {
            return false;
        }
        var parent = node.parent;
        while (parent && parent.kind === 210 /* SyntaxKind.PropertyAccessExpression */) {
            parent = parent.parent;
        }
        if (parent && (0, ts_1.isBinaryExpression)(parent) && (0, ts_1.isPrototypeAccess)(parent.left) && parent.operatorToken.kind === 64 /* SyntaxKind.EqualsToken */) {
            var right = (0, ts_1.getInitializerOfBinaryExpression)(parent);
            return (0, ts_1.isObjectLiteralExpression)(right) && right;
        }
    }
    /**
     * Syntactically and semantically checks a call or new expression.
     * @param node The call/new expression to be checked.
     * @returns On success, the expression's signature's return type. On failure, anyType.
     */
    function checkCallExpression(node, checkMode) {
        var _a, _b, _c;
        checkGrammarTypeArguments(node, node.typeArguments);
        var signature = getResolvedSignature(node, /*candidatesOutArray*/ undefined, checkMode);
        if (signature === resolvingSignature) {
            // CheckMode.SkipGenericFunctions is enabled and this is a call to a generic function that
            // returns a function type. We defer checking and return silentNeverType.
            return silentNeverType;
        }
        checkDeprecatedSignature(signature, node);
        if (node.expression.kind === 108 /* SyntaxKind.SuperKeyword */) {
            return voidType;
        }
        if (node.kind === 213 /* SyntaxKind.NewExpression */) {
            var declaration = signature.declaration;
            if (declaration &&
                declaration.kind !== 175 /* SyntaxKind.Constructor */ &&
                declaration.kind !== 179 /* SyntaxKind.ConstructSignature */ &&
                declaration.kind !== 184 /* SyntaxKind.ConstructorType */ &&
                !((0, ts_1.isJSDocSignature)(declaration) && ((_b = (_a = (0, ts_1.getJSDocRoot)(declaration)) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.kind) === 175 /* SyntaxKind.Constructor */) &&
                !(0, ts_1.isJSDocConstructSignature)(declaration) &&
                !isJSConstructor(declaration)) {
                // When resolved signature is a call signature (and not a construct signature) the result type is any
                if (noImplicitAny) {
                    error(node, ts_1.Diagnostics.new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type);
                }
                return anyType;
            }
        }
        // In JavaScript files, calls to any identifier 'require' are treated as external module imports
        if ((0, ts_1.isInJSFile)(node) && (0, ts_1.shouldResolveJsRequire)(compilerOptions) && isCommonJsRequire(node)) {
            return resolveExternalModuleTypeByLiteral(node.arguments[0]);
        }
        var returnType = getReturnTypeOfSignature(signature);
        // Treat any call to the global 'Symbol' function that is part of a const variable or readonly property
        // as a fresh unique symbol literal type.
        if (returnType.flags & 12288 /* TypeFlags.ESSymbolLike */ && isSymbolOrSymbolForCall(node)) {
            return getESSymbolLikeTypeForNode((0, ts_1.walkUpParenthesizedExpressions)(node.parent));
        }
        if (node.kind === 212 /* SyntaxKind.CallExpression */ && !node.questionDotToken && node.parent.kind === 243 /* SyntaxKind.ExpressionStatement */ &&
            returnType.flags & 16384 /* TypeFlags.Void */ && getTypePredicateOfSignature(signature)) {
            if (!(0, ts_1.isDottedName)(node.expression)) {
                error(node.expression, ts_1.Diagnostics.Assertions_require_the_call_target_to_be_an_identifier_or_qualified_name);
            }
            else if (!getEffectsSignature(node)) {
                var diagnostic = error(node.expression, ts_1.Diagnostics.Assertions_require_every_name_in_the_call_target_to_be_declared_with_an_explicit_type_annotation);
                getTypeOfDottedName(node.expression, diagnostic);
            }
        }
        if ((0, ts_1.isInJSFile)(node)) {
            var jsSymbol = getSymbolOfExpando(node, /*allowDeclaration*/ false);
            if ((_c = jsSymbol === null || jsSymbol === void 0 ? void 0 : jsSymbol.exports) === null || _c === void 0 ? void 0 : _c.size) {
                var jsAssignmentType = createAnonymousType(jsSymbol, jsSymbol.exports, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
                jsAssignmentType.objectFlags |= 4096 /* ObjectFlags.JSLiteral */;
                return getIntersectionType([returnType, jsAssignmentType]);
            }
        }
        return returnType;
    }
    function checkDeprecatedSignature(signature, node) {
        if (signature.declaration && signature.declaration.flags & 268435456 /* NodeFlags.Deprecated */) {
            var suggestionNode = getDeprecatedSuggestionNode(node);
            var name_29 = (0, ts_1.tryGetPropertyAccessOrIdentifierToString)((0, ts_1.getInvokedExpression)(node));
            addDeprecatedSuggestionWithSignature(suggestionNode, signature.declaration, name_29, signatureToString(signature));
        }
    }
    function getDeprecatedSuggestionNode(node) {
        node = (0, ts_1.skipParentheses)(node);
        switch (node.kind) {
            case 212 /* SyntaxKind.CallExpression */:
            case 169 /* SyntaxKind.Decorator */:
            case 213 /* SyntaxKind.NewExpression */:
                return getDeprecatedSuggestionNode(node.expression);
            case 214 /* SyntaxKind.TaggedTemplateExpression */:
                return getDeprecatedSuggestionNode(node.tag);
            case 285 /* SyntaxKind.JsxOpeningElement */:
            case 284 /* SyntaxKind.JsxSelfClosingElement */:
                return getDeprecatedSuggestionNode(node.tagName);
            case 211 /* SyntaxKind.ElementAccessExpression */:
                return node.argumentExpression;
            case 210 /* SyntaxKind.PropertyAccessExpression */:
                return node.name;
            case 182 /* SyntaxKind.TypeReference */:
                var typeReference = node;
                return (0, ts_1.isQualifiedName)(typeReference.typeName) ? typeReference.typeName.right : typeReference;
            default:
                return node;
        }
    }
    function isSymbolOrSymbolForCall(node) {
        if (!(0, ts_1.isCallExpression)(node))
            return false;
        var left = node.expression;
        if ((0, ts_1.isPropertyAccessExpression)(left) && left.name.escapedText === "for") {
            left = left.expression;
        }
        if (!(0, ts_1.isIdentifier)(left) || left.escapedText !== "Symbol") {
            return false;
        }
        // make sure `Symbol` is the global symbol
        var globalESSymbol = getGlobalESSymbolConstructorSymbol(/*reportErrors*/ false);
        if (!globalESSymbol) {
            return false;
        }
        return globalESSymbol === resolveName(left, "Symbol", 111551 /* SymbolFlags.Value */, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ false);
    }
    function checkImportCallExpression(node) {
        // Check grammar of dynamic import
        checkGrammarImportCallExpression(node);
        if (node.arguments.length === 0) {
            return createPromiseReturnType(node, anyType);
        }
        var specifier = node.arguments[0];
        var specifierType = checkExpressionCached(specifier);
        var optionsType = node.arguments.length > 1 ? checkExpressionCached(node.arguments[1]) : undefined;
        // Even though multiple arguments is grammatically incorrect, type-check extra arguments for completion
        for (var i = 2; i < node.arguments.length; ++i) {
            checkExpressionCached(node.arguments[i]);
        }
        if (specifierType.flags & 32768 /* TypeFlags.Undefined */ || specifierType.flags & 65536 /* TypeFlags.Null */ || !isTypeAssignableTo(specifierType, stringType)) {
            error(specifier, ts_1.Diagnostics.Dynamic_import_s_specifier_must_be_of_type_string_but_here_has_type_0, typeToString(specifierType));
        }
        if (optionsType) {
            var importCallOptionsType = getGlobalImportCallOptionsType(/*reportErrors*/ true);
            if (importCallOptionsType !== emptyObjectType) {
                checkTypeAssignableTo(optionsType, getNullableType(importCallOptionsType, 32768 /* TypeFlags.Undefined */), node.arguments[1]);
            }
        }
        // resolveExternalModuleName will return undefined if the moduleReferenceExpression is not a string literal
        var moduleSymbol = resolveExternalModuleName(node, specifier);
        if (moduleSymbol) {
            var esModuleSymbol = resolveESModuleSymbol(moduleSymbol, specifier, /*dontResolveAlias*/ true, /*suppressInteropError*/ false);
            if (esModuleSymbol) {
                return createPromiseReturnType(node, getTypeWithSyntheticDefaultOnly(getTypeOfSymbol(esModuleSymbol), esModuleSymbol, moduleSymbol, specifier) ||
                    getTypeWithSyntheticDefaultImportType(getTypeOfSymbol(esModuleSymbol), esModuleSymbol, moduleSymbol, specifier));
            }
        }
        return createPromiseReturnType(node, anyType);
    }
    function createDefaultPropertyWrapperForModule(symbol, originalSymbol, anonymousSymbol) {
        var memberTable = (0, ts_1.createSymbolTable)();
        var newSymbol = createSymbol(2097152 /* SymbolFlags.Alias */, "default" /* InternalSymbolName.Default */);
        newSymbol.parent = originalSymbol;
        newSymbol.links.nameType = getStringLiteralType("default");
        newSymbol.links.aliasTarget = resolveSymbol(symbol);
        memberTable.set("default" /* InternalSymbolName.Default */, newSymbol);
        return createAnonymousType(anonymousSymbol, memberTable, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
    }
    function getTypeWithSyntheticDefaultOnly(type, symbol, originalSymbol, moduleSpecifier) {
        var hasDefaultOnly = isOnlyImportedAsDefault(moduleSpecifier);
        if (hasDefaultOnly && type && !isErrorType(type)) {
            var synthType = type;
            if (!synthType.defaultOnlyType) {
                var type_3 = createDefaultPropertyWrapperForModule(symbol, originalSymbol);
                synthType.defaultOnlyType = type_3;
            }
            return synthType.defaultOnlyType;
        }
        return undefined;
    }
    function getTypeWithSyntheticDefaultImportType(type, symbol, originalSymbol, moduleSpecifier) {
        var _a;
        if (allowSyntheticDefaultImports && type && !isErrorType(type)) {
            var synthType = type;
            if (!synthType.syntheticType) {
                var file = (_a = originalSymbol.declarations) === null || _a === void 0 ? void 0 : _a.find(ts_1.isSourceFile);
                var hasSyntheticDefault = canHaveSyntheticDefault(file, originalSymbol, /*dontResolveAlias*/ false, moduleSpecifier);
                if (hasSyntheticDefault) {
                    var anonymousSymbol = createSymbol(2048 /* SymbolFlags.TypeLiteral */, "__type" /* InternalSymbolName.Type */);
                    var defaultContainingObject = createDefaultPropertyWrapperForModule(symbol, originalSymbol, anonymousSymbol);
                    anonymousSymbol.links.type = defaultContainingObject;
                    synthType.syntheticType = isValidSpreadType(type) ? getSpreadType(type, defaultContainingObject, anonymousSymbol, /*objectFlags*/ 0, /*readonly*/ false) : defaultContainingObject;
                }
                else {
                    synthType.syntheticType = type;
                }
            }
            return synthType.syntheticType;
        }
        return type;
    }
    function isCommonJsRequire(node) {
        if (!(0, ts_1.isRequireCall)(node, /*requireStringLiteralLikeArgument*/ true)) {
            return false;
        }
        // Make sure require is not a local function
        if (!(0, ts_1.isIdentifier)(node.expression))
            return ts_1.Debug.fail();
        var resolvedRequire = resolveName(node.expression, node.expression.escapedText, 111551 /* SymbolFlags.Value */, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ true); // TODO: GH#18217
        if (resolvedRequire === requireSymbol) {
            return true;
        }
        // project includes symbol named 'require' - make sure that it is ambient and local non-alias
        if (resolvedRequire.flags & 2097152 /* SymbolFlags.Alias */) {
            return false;
        }
        var targetDeclarationKind = resolvedRequire.flags & 16 /* SymbolFlags.Function */
            ? 261 /* SyntaxKind.FunctionDeclaration */
            : resolvedRequire.flags & 3 /* SymbolFlags.Variable */
                ? 259 /* SyntaxKind.VariableDeclaration */
                : 0 /* SyntaxKind.Unknown */;
        if (targetDeclarationKind !== 0 /* SyntaxKind.Unknown */) {
            var decl = (0, ts_1.getDeclarationOfKind)(resolvedRequire, targetDeclarationKind);
            // function/variable declaration should be ambient
            return !!decl && !!(decl.flags & 16777216 /* NodeFlags.Ambient */);
        }
        return false;
    }
    function checkTaggedTemplateExpression(node) {
        if (!checkGrammarTaggedTemplateChain(node))
            checkGrammarTypeArguments(node, node.typeArguments);
        if (languageVersion < 2 /* ScriptTarget.ES2015 */) {
            checkExternalEmitHelpers(node, 262144 /* ExternalEmitHelpers.MakeTemplateObject */);
        }
        var signature = getResolvedSignature(node);
        checkDeprecatedSignature(signature, node);
        return getReturnTypeOfSignature(signature);
    }
    function checkAssertion(node, checkMode) {
        if (node.kind === 215 /* SyntaxKind.TypeAssertionExpression */) {
            var file = (0, ts_1.getSourceFileOfNode)(node);
            if (file && (0, ts_1.fileExtensionIsOneOf)(file.fileName, [".cts" /* Extension.Cts */, ".mts" /* Extension.Mts */])) {
                grammarErrorOnNode(node, ts_1.Diagnostics.This_syntax_is_reserved_in_files_with_the_mts_or_cts_extension_Use_an_as_expression_instead);
            }
        }
        return checkAssertionWorker(node, checkMode);
    }
    function isValidConstAssertionArgument(node) {
        switch (node.kind) {
            case 11 /* SyntaxKind.StringLiteral */:
            case 15 /* SyntaxKind.NoSubstitutionTemplateLiteral */:
            case 9 /* SyntaxKind.NumericLiteral */:
            case 10 /* SyntaxKind.BigIntLiteral */:
            case 112 /* SyntaxKind.TrueKeyword */:
            case 97 /* SyntaxKind.FalseKeyword */:
            case 208 /* SyntaxKind.ArrayLiteralExpression */:
            case 209 /* SyntaxKind.ObjectLiteralExpression */:
            case 227 /* SyntaxKind.TemplateExpression */:
                return true;
            case 216 /* SyntaxKind.ParenthesizedExpression */:
                return isValidConstAssertionArgument(node.expression);
            case 223 /* SyntaxKind.PrefixUnaryExpression */:
                var op = node.operator;
                var arg = node.operand;
                return op === 41 /* SyntaxKind.MinusToken */ && (arg.kind === 9 /* SyntaxKind.NumericLiteral */ || arg.kind === 10 /* SyntaxKind.BigIntLiteral */) ||
                    op === 40 /* SyntaxKind.PlusToken */ && arg.kind === 9 /* SyntaxKind.NumericLiteral */;
            case 210 /* SyntaxKind.PropertyAccessExpression */:
            case 211 /* SyntaxKind.ElementAccessExpression */:
                var expr = (0, ts_1.skipParentheses)(node.expression);
                var symbol = (0, ts_1.isEntityNameExpression)(expr) ? resolveEntityName(expr, 111551 /* SymbolFlags.Value */, /*ignoreErrors*/ true) : undefined;
                return !!(symbol && symbol.flags & 384 /* SymbolFlags.Enum */);
        }
        return false;
    }
    function checkAssertionWorker(node, checkMode) {
        var _a = getAssertionTypeAndExpression(node), type = _a.type, expression = _a.expression;
        var exprType = checkExpression(expression, checkMode);
        if ((0, ts_1.isConstTypeReference)(type)) {
            if (!isValidConstAssertionArgument(expression)) {
                error(expression, ts_1.Diagnostics.A_const_assertions_can_only_be_applied_to_references_to_enum_members_or_string_number_boolean_array_or_object_literals);
            }
            return getRegularTypeOfLiteralType(exprType);
        }
        var links = getNodeLinks(node);
        links.assertionExpressionType = exprType;
        checkSourceElement(type);
        checkNodeDeferred(node);
        return getTypeFromTypeNode(type);
    }
    function getAssertionTypeAndExpression(node) {
        var type;
        var expression;
        switch (node.kind) {
            case 233 /* SyntaxKind.AsExpression */:
            case 215 /* SyntaxKind.TypeAssertionExpression */:
                type = node.type;
                expression = node.expression;
                break;
            case 216 /* SyntaxKind.ParenthesizedExpression */:
                type = (0, ts_1.getJSDocTypeAssertionType)(node);
                expression = node.expression;
                break;
        }
        return { type: type, expression: expression };
    }
    function checkAssertionDeferred(node) {
        var type = getAssertionTypeAndExpression(node).type;
        var errNode = (0, ts_1.isParenthesizedExpression)(node) ? type : node;
        var links = getNodeLinks(node);
        ts_1.Debug.assertIsDefined(links.assertionExpressionType);
        var exprType = getRegularTypeOfObjectLiteral(getBaseTypeOfLiteralType(links.assertionExpressionType));
        var targetType = getTypeFromTypeNode(type);
        if (!isErrorType(targetType)) {
            addLazyDiagnostic(function () {
                var widenedType = getWidenedType(exprType);
                if (!isTypeComparableTo(targetType, widenedType)) {
                    checkTypeComparableTo(exprType, targetType, errNode, ts_1.Diagnostics.Conversion_of_type_0_to_type_1_may_be_a_mistake_because_neither_type_sufficiently_overlaps_with_the_other_If_this_was_intentional_convert_the_expression_to_unknown_first);
                }
            });
        }
    }
    function checkNonNullChain(node) {
        var leftType = checkExpression(node.expression);
        var nonOptionalType = getOptionalExpressionType(leftType, node.expression);
        return propagateOptionalTypeMarker(getNonNullableType(nonOptionalType), node, nonOptionalType !== leftType);
    }
    function checkNonNullAssertion(node) {
        return node.flags & 32 /* NodeFlags.OptionalChain */ ? checkNonNullChain(node) :
            getNonNullableType(checkExpression(node.expression));
    }
    function checkExpressionWithTypeArguments(node) {
        checkGrammarExpressionWithTypeArguments(node);
        (0, ts_1.forEach)(node.typeArguments, checkSourceElement);
        if (node.kind === 232 /* SyntaxKind.ExpressionWithTypeArguments */) {
            var parent_15 = (0, ts_1.walkUpParenthesizedExpressions)(node.parent);
            if (parent_15.kind === 225 /* SyntaxKind.BinaryExpression */ && parent_15.operatorToken.kind === 104 /* SyntaxKind.InstanceOfKeyword */ && (0, ts_1.isNodeDescendantOf)(node, parent_15.right)) {
                error(node, ts_1.Diagnostics.The_right_hand_side_of_an_instanceof_expression_must_not_be_an_instantiation_expression);
            }
        }
        var exprType = node.kind === 232 /* SyntaxKind.ExpressionWithTypeArguments */ ? checkExpression(node.expression) :
            (0, ts_1.isThisIdentifier)(node.exprName) ? checkThisExpression(node.exprName) :
                checkExpression(node.exprName);
        return getInstantiationExpressionType(exprType, node);
    }
    function getInstantiationExpressionType(exprType, node) {
        var typeArguments = node.typeArguments;
        if (exprType === silentNeverType || isErrorType(exprType) || !(0, ts_1.some)(typeArguments)) {
            return exprType;
        }
        var hasSomeApplicableSignature = false;
        var nonApplicableType;
        var result = getInstantiatedType(exprType);
        var errorType = hasSomeApplicableSignature ? nonApplicableType : exprType;
        if (errorType) {
            diagnostics.add((0, ts_1.createDiagnosticForNodeArray)((0, ts_1.getSourceFileOfNode)(node), typeArguments, ts_1.Diagnostics.Type_0_has_no_signatures_for_which_the_type_argument_list_is_applicable, typeToString(errorType)));
        }
        return result;
        function getInstantiatedType(type) {
            var hasSignatures = false;
            var hasApplicableSignature = false;
            var result = getInstantiatedTypePart(type);
            hasSomeApplicableSignature || (hasSomeApplicableSignature = hasApplicableSignature);
            if (hasSignatures && !hasApplicableSignature) {
                nonApplicableType !== null && nonApplicableType !== void 0 ? nonApplicableType : (nonApplicableType = type);
            }
            return result;
            function getInstantiatedTypePart(type) {
                if (type.flags & 524288 /* TypeFlags.Object */) {
                    var resolved = resolveStructuredTypeMembers(type);
                    var callSignatures = getInstantiatedSignatures(resolved.callSignatures);
                    var constructSignatures = getInstantiatedSignatures(resolved.constructSignatures);
                    hasSignatures || (hasSignatures = resolved.callSignatures.length !== 0 || resolved.constructSignatures.length !== 0);
                    hasApplicableSignature || (hasApplicableSignature = callSignatures.length !== 0 || constructSignatures.length !== 0);
                    if (callSignatures !== resolved.callSignatures || constructSignatures !== resolved.constructSignatures) {
                        var result_7 = createAnonymousType(/*symbol*/ undefined, resolved.members, callSignatures, constructSignatures, resolved.indexInfos);
                        result_7.objectFlags |= 8388608 /* ObjectFlags.InstantiationExpressionType */;
                        result_7.node = node;
                        return result_7;
                    }
                }
                else if (type.flags & 58982400 /* TypeFlags.InstantiableNonPrimitive */) {
                    var constraint = getBaseConstraintOfType(type);
                    if (constraint) {
                        var instantiated = getInstantiatedTypePart(constraint);
                        if (instantiated !== constraint) {
                            return instantiated;
                        }
                    }
                }
                else if (type.flags & 1048576 /* TypeFlags.Union */) {
                    return mapType(type, getInstantiatedType);
                }
                else if (type.flags & 2097152 /* TypeFlags.Intersection */) {
                    return getIntersectionType((0, ts_1.sameMap)(type.types, getInstantiatedTypePart));
                }
                return type;
            }
        }
        function getInstantiatedSignatures(signatures) {
            var applicableSignatures = (0, ts_1.filter)(signatures, function (sig) { return !!sig.typeParameters && hasCorrectTypeArgumentArity(sig, typeArguments); });
            return (0, ts_1.sameMap)(applicableSignatures, function (sig) {
                var typeArgumentTypes = checkTypeArguments(sig, typeArguments, /*reportErrors*/ true);
                return typeArgumentTypes ? getSignatureInstantiation(sig, typeArgumentTypes, (0, ts_1.isInJSFile)(sig.declaration)) : sig;
            });
        }
    }
    function checkSatisfiesExpression(node) {
        checkSourceElement(node.type);
        return checkSatisfiesExpressionWorker(node.expression, node.type);
    }
    function checkSatisfiesExpressionWorker(expression, target, checkMode) {
        var exprType = checkExpression(expression, checkMode);
        var targetType = getTypeFromTypeNode(target);
        if (isErrorType(targetType)) {
            return targetType;
        }
        var errorNode = (0, ts_1.findAncestor)(target.parent, function (n) { return n.kind === 237 /* SyntaxKind.SatisfiesExpression */ || n.kind === 356 /* SyntaxKind.JSDocSatisfiesTag */; });
        checkTypeAssignableToAndOptionallyElaborate(exprType, targetType, errorNode, expression, ts_1.Diagnostics.Type_0_does_not_satisfy_the_expected_type_1);
        return exprType;
    }
    function checkMetaProperty(node) {
        checkGrammarMetaProperty(node);
        if (node.keywordToken === 105 /* SyntaxKind.NewKeyword */) {
            return checkNewTargetMetaProperty(node);
        }
        if (node.keywordToken === 102 /* SyntaxKind.ImportKeyword */) {
            return checkImportMetaProperty(node);
        }
        return ts_1.Debug.assertNever(node.keywordToken);
    }
    function checkMetaPropertyKeyword(node) {
        switch (node.keywordToken) {
            case 102 /* SyntaxKind.ImportKeyword */:
                return getGlobalImportMetaExpressionType();
            case 105 /* SyntaxKind.NewKeyword */:
                var type = checkNewTargetMetaProperty(node);
                return isErrorType(type) ? errorType : createNewTargetExpressionType(type);
            default:
                ts_1.Debug.assertNever(node.keywordToken);
        }
    }
    function checkNewTargetMetaProperty(node) {
        var container = (0, ts_1.getNewTargetContainer)(node);
        if (!container) {
            error(node, ts_1.Diagnostics.Meta_property_0_is_only_allowed_in_the_body_of_a_function_declaration_function_expression_or_constructor, "new.target");
            return errorType;
        }
        else if (container.kind === 175 /* SyntaxKind.Constructor */) {
            var symbol = getSymbolOfDeclaration(container.parent);
            return getTypeOfSymbol(symbol);
        }
        else {
            var symbol = getSymbolOfDeclaration(container);
            return getTypeOfSymbol(symbol);
        }
    }
    function checkImportMetaProperty(node) {
        if (moduleKind === ts_1.ModuleKind.Node16 || moduleKind === ts_1.ModuleKind.NodeNext) {
            if ((0, ts_1.getSourceFileOfNode)(node).impliedNodeFormat !== ts_1.ModuleKind.ESNext) {
                error(node, ts_1.Diagnostics.The_import_meta_meta_property_is_not_allowed_in_files_which_will_build_into_CommonJS_output);
            }
        }
        else if (moduleKind < ts_1.ModuleKind.ES2020 && moduleKind !== ts_1.ModuleKind.System) {
            error(node, ts_1.Diagnostics.The_import_meta_meta_property_is_only_allowed_when_the_module_option_is_es2020_es2022_esnext_system_node16_or_nodenext);
        }
        var file = (0, ts_1.getSourceFileOfNode)(node);
        ts_1.Debug.assert(!!(file.flags & 4194304 /* NodeFlags.PossiblyContainsImportMeta */), "Containing file is missing import meta node flag.");
        return node.name.escapedText === "meta" ? getGlobalImportMetaType() : errorType;
    }
    function getTypeOfParameter(symbol) {
        var type = getTypeOfSymbol(symbol);
        if (strictNullChecks) {
            var declaration = symbol.valueDeclaration;
            if (declaration && (0, ts_1.hasInitializer)(declaration)) {
                return getOptionalType(type);
            }
        }
        return type;
    }
    function getTupleElementLabel(d) {
        ts_1.Debug.assert((0, ts_1.isIdentifier)(d.name)); // Parameter declarations could be binding patterns, but we only allow identifier names
        return d.name.escapedText;
    }
    function getParameterNameAtPosition(signature, pos, overrideRestType) {
        var paramCount = signature.parameters.length - (signatureHasRestParameter(signature) ? 1 : 0);
        if (pos < paramCount) {
            return signature.parameters[pos].escapedName;
        }
        var restParameter = signature.parameters[paramCount] || unknownSymbol;
        var restType = overrideRestType || getTypeOfSymbol(restParameter);
        if (isTupleType(restType)) {
            var associatedNames = restType.target.labeledElementDeclarations;
            var index = pos - paramCount;
            return associatedNames && getTupleElementLabel(associatedNames[index]) || restParameter.escapedName + "_" + index;
        }
        return restParameter.escapedName;
    }
    function getParameterIdentifierNameAtPosition(signature, pos) {
        var _a;
        if (((_a = signature.declaration) === null || _a === void 0 ? void 0 : _a.kind) === 323 /* SyntaxKind.JSDocFunctionType */) {
            return undefined;
        }
        var paramCount = signature.parameters.length - (signatureHasRestParameter(signature) ? 1 : 0);
        if (pos < paramCount) {
            var param = signature.parameters[pos];
            return isParameterDeclarationWithIdentifierName(param) ? [param.escapedName, false] : undefined;
        }
        var restParameter = signature.parameters[paramCount] || unknownSymbol;
        if (!isParameterDeclarationWithIdentifierName(restParameter)) {
            return undefined;
        }
        var restType = getTypeOfSymbol(restParameter);
        if (isTupleType(restType)) {
            var associatedNames = restType.target.labeledElementDeclarations;
            var index = pos - paramCount;
            var associatedName = associatedNames === null || associatedNames === void 0 ? void 0 : associatedNames[index];
            var isRestTupleElement = !!(associatedName === null || associatedName === void 0 ? void 0 : associatedName.dotDotDotToken);
            return associatedName ? [
                getTupleElementLabel(associatedName),
                isRestTupleElement
            ] : undefined;
        }
        if (pos === paramCount) {
            return [restParameter.escapedName, true];
        }
        return undefined;
    }
    function isParameterDeclarationWithIdentifierName(symbol) {
        return symbol.valueDeclaration && (0, ts_1.isParameter)(symbol.valueDeclaration) && (0, ts_1.isIdentifier)(symbol.valueDeclaration.name);
    }
    function isValidDeclarationForTupleLabel(d) {
        return d.kind === 201 /* SyntaxKind.NamedTupleMember */ || ((0, ts_1.isParameter)(d) && d.name && (0, ts_1.isIdentifier)(d.name));
    }
    function getNameableDeclarationAtPosition(signature, pos) {
        var paramCount = signature.parameters.length - (signatureHasRestParameter(signature) ? 1 : 0);
        if (pos < paramCount) {
            var decl = signature.parameters[pos].valueDeclaration;
            return decl && isValidDeclarationForTupleLabel(decl) ? decl : undefined;
        }
        var restParameter = signature.parameters[paramCount] || unknownSymbol;
        var restType = getTypeOfSymbol(restParameter);
        if (isTupleType(restType)) {
            var associatedNames = restType.target.labeledElementDeclarations;
            var index = pos - paramCount;
            return associatedNames && associatedNames[index];
        }
        return restParameter.valueDeclaration && isValidDeclarationForTupleLabel(restParameter.valueDeclaration) ? restParameter.valueDeclaration : undefined;
    }
    function getTypeAtPosition(signature, pos) {
        return tryGetTypeAtPosition(signature, pos) || anyType;
    }
    function tryGetTypeAtPosition(signature, pos) {
        var paramCount = signature.parameters.length - (signatureHasRestParameter(signature) ? 1 : 0);
        if (pos < paramCount) {
            return getTypeOfParameter(signature.parameters[pos]);
        }
        if (signatureHasRestParameter(signature)) {
            // We want to return the value undefined for an out of bounds parameter position,
            // so we need to check bounds here before calling getIndexedAccessType (which
            // otherwise would return the type 'undefined').
            var restType = getTypeOfSymbol(signature.parameters[paramCount]);
            var index = pos - paramCount;
            if (!isTupleType(restType) || restType.target.hasRestElement || index < restType.target.fixedLength) {
                return getIndexedAccessType(restType, getNumberLiteralType(index));
            }
        }
        return undefined;
    }
    function getRestTypeAtPosition(source, pos) {
        var parameterCount = getParameterCount(source);
        var minArgumentCount = getMinArgumentCount(source);
        var restType = getEffectiveRestType(source);
        if (restType && pos >= parameterCount - 1) {
            return pos === parameterCount - 1 ? restType : createArrayType(getIndexedAccessType(restType, numberType));
        }
        var types = [];
        var flags = [];
        var names = [];
        for (var i = pos; i < parameterCount; i++) {
            if (!restType || i < parameterCount - 1) {
                types.push(getTypeAtPosition(source, i));
                flags.push(i < minArgumentCount ? 1 /* ElementFlags.Required */ : 2 /* ElementFlags.Optional */);
            }
            else {
                types.push(restType);
                flags.push(8 /* ElementFlags.Variadic */);
            }
            var name_30 = getNameableDeclarationAtPosition(source, i);
            if (name_30) {
                names.push(name_30);
            }
        }
        return createTupleType(types, flags, /*readonly*/ false, (0, ts_1.length)(names) === (0, ts_1.length)(types) ? names : undefined);
    }
    // Return the number of parameters in a signature. The rest parameter, if present, counts as one
    // parameter. For example, the parameter count of (x: number, y: number, ...z: string[]) is 3 and
    // the parameter count of (x: number, ...args: [number, ...string[], boolean])) is also 3. In the
    // latter example, the effective rest type is [...string[], boolean].
    function getParameterCount(signature) {
        var length = signature.parameters.length;
        if (signatureHasRestParameter(signature)) {
            var restType = getTypeOfSymbol(signature.parameters[length - 1]);
            if (isTupleType(restType)) {
                return length + restType.target.fixedLength - (restType.target.hasRestElement ? 0 : 1);
            }
        }
        return length;
    }
    function getMinArgumentCount(signature, flags) {
        var strongArityForUntypedJS = flags & 1 /* MinArgumentCountFlags.StrongArityForUntypedJS */;
        var voidIsNonOptional = flags & 2 /* MinArgumentCountFlags.VoidIsNonOptional */;
        if (voidIsNonOptional || signature.resolvedMinArgumentCount === undefined) {
            var minArgumentCount = void 0;
            if (signatureHasRestParameter(signature)) {
                var restType = getTypeOfSymbol(signature.parameters[signature.parameters.length - 1]);
                if (isTupleType(restType)) {
                    var firstOptionalIndex = (0, ts_1.findIndex)(restType.target.elementFlags, function (f) { return !(f & 1 /* ElementFlags.Required */); });
                    var requiredCount = firstOptionalIndex < 0 ? restType.target.fixedLength : firstOptionalIndex;
                    if (requiredCount > 0) {
                        minArgumentCount = signature.parameters.length - 1 + requiredCount;
                    }
                }
            }
            if (minArgumentCount === undefined) {
                if (!strongArityForUntypedJS && signature.flags & 32 /* SignatureFlags.IsUntypedSignatureInJSFile */) {
                    return 0;
                }
                minArgumentCount = signature.minArgumentCount;
            }
            if (voidIsNonOptional) {
                return minArgumentCount;
            }
            for (var i = minArgumentCount - 1; i >= 0; i--) {
                var type = getTypeAtPosition(signature, i);
                if (filterType(type, acceptsVoid).flags & 131072 /* TypeFlags.Never */) {
                    break;
                }
                minArgumentCount = i;
            }
            signature.resolvedMinArgumentCount = minArgumentCount;
        }
        return signature.resolvedMinArgumentCount;
    }
    function hasEffectiveRestParameter(signature) {
        if (signatureHasRestParameter(signature)) {
            var restType = getTypeOfSymbol(signature.parameters[signature.parameters.length - 1]);
            return !isTupleType(restType) || restType.target.hasRestElement;
        }
        return false;
    }
    function getEffectiveRestType(signature) {
        if (signatureHasRestParameter(signature)) {
            var restType = getTypeOfSymbol(signature.parameters[signature.parameters.length - 1]);
            if (!isTupleType(restType)) {
                return restType;
            }
            if (restType.target.hasRestElement) {
                return sliceTupleType(restType, restType.target.fixedLength);
            }
        }
        return undefined;
    }
    function getNonArrayRestType(signature) {
        var restType = getEffectiveRestType(signature);
        return restType && !isArrayType(restType) && !isTypeAny(restType) ? restType : undefined;
    }
    function getTypeOfFirstParameterOfSignature(signature) {
        return getTypeOfFirstParameterOfSignatureWithFallback(signature, neverType);
    }
    function getTypeOfFirstParameterOfSignatureWithFallback(signature, fallbackType) {
        return signature.parameters.length > 0 ? getTypeAtPosition(signature, 0) : fallbackType;
    }
    function inferFromAnnotatedParameters(signature, context, inferenceContext) {
        var len = signature.parameters.length - (signatureHasRestParameter(signature) ? 1 : 0);
        for (var i = 0; i < len; i++) {
            var declaration = signature.parameters[i].valueDeclaration;
            if (declaration.type) {
                var typeNode = (0, ts_1.getEffectiveTypeAnnotationNode)(declaration);
                if (typeNode) {
                    inferTypes(inferenceContext.inferences, getTypeFromTypeNode(typeNode), getTypeAtPosition(context, i));
                }
            }
        }
    }
    function assignContextualParameterTypes(signature, context) {
        if (context.typeParameters) {
            if (!signature.typeParameters) {
                signature.typeParameters = context.typeParameters;
            }
            else {
                return; // This signature has already has a contextual inference performed and cached on it!
            }
        }
        if (context.thisParameter) {
            var parameter = signature.thisParameter;
            if (!parameter || parameter.valueDeclaration && !parameter.valueDeclaration.type) {
                if (!parameter) {
                    signature.thisParameter = createSymbolWithType(context.thisParameter, /*type*/ undefined);
                }
                assignParameterType(signature.thisParameter, getTypeOfSymbol(context.thisParameter));
            }
        }
        var len = signature.parameters.length - (signatureHasRestParameter(signature) ? 1 : 0);
        for (var i = 0; i < len; i++) {
            var parameter = signature.parameters[i];
            if (!(0, ts_1.getEffectiveTypeAnnotationNode)(parameter.valueDeclaration)) {
                var contextualParameterType = tryGetTypeAtPosition(context, i);
                assignParameterType(parameter, contextualParameterType);
            }
        }
        if (signatureHasRestParameter(signature)) {
            // parameter might be a transient symbol generated by use of `arguments` in the function body.
            var parameter = (0, ts_1.last)(signature.parameters);
            if (parameter.valueDeclaration
                ? !(0, ts_1.getEffectiveTypeAnnotationNode)(parameter.valueDeclaration)
                // a declarationless parameter may still have a `.type` already set by its construction logic
                // (which may pull a type from a jsdoc) - only allow fixing on `DeferredType` parameters with a fallback type
                : !!((0, ts_1.getCheckFlags)(parameter) & 65536 /* CheckFlags.DeferredType */)) {
                var contextualParameterType = getRestTypeAtPosition(context, len);
                assignParameterType(parameter, contextualParameterType);
            }
        }
    }
    function assignNonContextualParameterTypes(signature) {
        if (signature.thisParameter) {
            assignParameterType(signature.thisParameter);
        }
        for (var _i = 0, _a = signature.parameters; _i < _a.length; _i++) {
            var parameter = _a[_i];
            assignParameterType(parameter);
        }
    }
    function assignParameterType(parameter, type) {
        var links = getSymbolLinks(parameter);
        if (!links.type) {
            var declaration = parameter.valueDeclaration;
            links.type = type || (declaration ? getWidenedTypeForVariableLikeDeclaration(declaration, /*reportErrors*/ true) : getTypeOfSymbol(parameter));
            if (declaration && declaration.name.kind !== 80 /* SyntaxKind.Identifier */) {
                // if inference didn't come up with anything but unknown, fall back to the binding pattern if present.
                if (links.type === unknownType) {
                    links.type = getTypeFromBindingPattern(declaration.name);
                }
                assignBindingElementTypes(declaration.name, links.type);
            }
        }
        else if (type) {
            ts_1.Debug.assertEqual(links.type, type, "Parameter symbol already has a cached type which differs from newly assigned type");
        }
    }
    // When contextual typing assigns a type to a parameter that contains a binding pattern, we also need to push
    // the destructured type into the contained binding elements.
    function assignBindingElementTypes(pattern, parentType) {
        for (var _i = 0, _a = pattern.elements; _i < _a.length; _i++) {
            var element = _a[_i];
            if (!(0, ts_1.isOmittedExpression)(element)) {
                var type = getBindingElementTypeFromParentType(element, parentType);
                if (element.name.kind === 80 /* SyntaxKind.Identifier */) {
                    getSymbolLinks(getSymbolOfDeclaration(element)).type = type;
                }
                else {
                    assignBindingElementTypes(element.name, type);
                }
            }
        }
    }
    function createClassDecoratorContextType(classType) {
        return tryCreateTypeReference(getGlobalClassDecoratorContextType(/*reportErrors*/ true), [classType]);
    }
    function createClassMethodDecoratorContextType(thisType, valueType) {
        return tryCreateTypeReference(getGlobalClassMethodDecoratorContextType(/*reportErrors*/ true), [thisType, valueType]);
    }
    function createClassGetterDecoratorContextType(thisType, valueType) {
        return tryCreateTypeReference(getGlobalClassGetterDecoratorContextType(/*reportErrors*/ true), [thisType, valueType]);
    }
    function createClassSetterDecoratorContextType(thisType, valueType) {
        return tryCreateTypeReference(getGlobalClassSetterDecoratorContextType(/*reportErrors*/ true), [thisType, valueType]);
    }
    function createClassAccessorDecoratorContextType(thisType, valueType) {
        return tryCreateTypeReference(getGlobalClassAccessorDecoratorContextType(/*reportErrors*/ true), [thisType, valueType]);
    }
    function createClassFieldDecoratorContextType(thisType, valueType) {
        return tryCreateTypeReference(getGlobalClassFieldDecoratorContextType(/*reportErrors*/ true), [thisType, valueType]);
    }
    /**
     * Gets a type like `{ name: "foo", private: false, static: true }` that is used to provided member-specific
     * details that will be intersected with a decorator context type.
     */
    function getClassMemberDecoratorContextOverrideType(nameType, isPrivate, isStatic) {
        var key = "".concat(isPrivate ? "p" : "P").concat(isStatic ? "s" : "S").concat(nameType.id);
        var overrideType = decoratorContextOverrideTypeCache.get(key);
        if (!overrideType) {
            var members = (0, ts_1.createSymbolTable)();
            members.set("name", createProperty("name", nameType));
            members.set("private", createProperty("private", isPrivate ? trueType : falseType));
            members.set("static", createProperty("static", isStatic ? trueType : falseType));
            overrideType = createAnonymousType(/*symbol*/ undefined, members, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
            decoratorContextOverrideTypeCache.set(key, overrideType);
        }
        return overrideType;
    }
    function createClassMemberDecoratorContextTypeForNode(node, thisType, valueType) {
        var isStatic = (0, ts_1.hasStaticModifier)(node);
        var isPrivate = (0, ts_1.isPrivateIdentifier)(node.name);
        var nameType = isPrivate ? getStringLiteralType((0, ts_1.idText)(node.name)) : getLiteralTypeFromPropertyName(node.name);
        var contextType = (0, ts_1.isMethodDeclaration)(node) ? createClassMethodDecoratorContextType(thisType, valueType) :
            (0, ts_1.isGetAccessorDeclaration)(node) ? createClassGetterDecoratorContextType(thisType, valueType) :
                (0, ts_1.isSetAccessorDeclaration)(node) ? createClassSetterDecoratorContextType(thisType, valueType) :
                    (0, ts_1.isAutoAccessorPropertyDeclaration)(node) ? createClassAccessorDecoratorContextType(thisType, valueType) :
                        (0, ts_1.isPropertyDeclaration)(node) ? createClassFieldDecoratorContextType(thisType, valueType) :
                            ts_1.Debug.failBadSyntaxKind(node);
        var overrideType = getClassMemberDecoratorContextOverrideType(nameType, isPrivate, isStatic);
        return getIntersectionType([contextType, overrideType]);
    }
    function createClassAccessorDecoratorTargetType(thisType, valueType) {
        return tryCreateTypeReference(getGlobalClassAccessorDecoratorTargetType(/*reportErrors*/ true), [thisType, valueType]);
    }
    function createClassAccessorDecoratorResultType(thisType, valueType) {
        return tryCreateTypeReference(getGlobalClassAccessorDecoratorResultType(/*reportErrors*/ true), [thisType, valueType]);
    }
    function createClassFieldDecoratorInitializerMutatorType(thisType, valueType) {
        var thisParam = createParameter("this", thisType);
        var valueParam = createParameter("value", valueType);
        return createFunctionType(/*typeParameters*/ undefined, thisParam, [valueParam], valueType, /*typePredicate*/ undefined, 1);
    }
    /**
     * Creates a call signature for an ES Decorator. This method is used by the semantics of
     * `getESDecoratorCallSignature`, which you should probably be using instead.
     */
    function createESDecoratorCallSignature(targetType, contextType, nonOptionalReturnType) {
        var targetParam = createParameter("target", targetType);
        var contextParam = createParameter("context", contextType);
        var returnType = getUnionType([nonOptionalReturnType, voidType]);
        return createCallSignature(/*typeParameters*/ undefined, /*thisParameter*/ undefined, [targetParam, contextParam], returnType);
    }
    /**
     * Gets a call signature that should be used when resolving `decorator` as a call. This does not use the value
     * of the decorator itself, but instead uses the declaration on which it is placed along with its relative
     * position amongst other decorators on the same declaration to determine the applicable signature. The
     * resulting signature can be used for call resolution, inference, and contextual typing.
     */
    function getESDecoratorCallSignature(decorator) {
        // We are considering a future change that would allow the type of a decorator to affect the type of the
        // class and its members, such as a `@Stringify` decorator changing the type of a `number` field to `string`, or
        // a `@Callable` decorator adding a call signature to a `class`. The type arguments for the various context
        // types may eventually change to reflect such mutations.
        //
        // In some cases we describe such potential mutations as coming from a "prior decorator application". It is
        // important to note that, while decorators are *evaluated* left to right, they are *applied* right to left
        // to preserve f ৹ g -> f(g(x)) application order. In these cases, a "prior" decorator usually means the
        // next decorator following this one in document order.
        //
        // The "original type" of a class or member is the type it was declared as, or the type we infer from
        // initializers, before _any_ decorators are applied.
        //
        // The type of a class or member that is a result of a prior decorator application represents the
        // "current type", i.e., the type for the declaration at the time the decorator is _applied_.
        //
        // The type of a class or member that is the result of the application of *all* relevant decorators is the
        // "final type".
        //
        // Any decorator that allows mutation or replacement will also refer to an "input type" and an
        // "output type". The "input type" corresponds to the "current type" of the declaration, while the
        // "output type" will become either the "input type/current type" for a subsequent decorator application,
        // or the "final type" for the decorated declaration.
        //
        // It is important to understand decorator application order as it relates to how the "current", "input",
        // "output", and "final" types will be determined:
        //
        //  @E2 @E1 class SomeClass {
        //      @A2 @A1 static f() {}
        //      @B2 @B1 g() {}
        //      @C2 @C1 static x;
        //      @D2 @D1 y;
        //  }
        //
        // Per [the specification][1], decorators are applied in the following order:
        //
        // 1. For each static method (incl. get/set methods and `accessor` fields), in document order:
        //    a. Apply each decorator for that method, in reverse order (`A1`, `A2`).
        // 2. For each instance method (incl. get/set methods and `accessor` fields), in document order:
        //    a. Apply each decorator for that method, in reverse order (`B1`, `B2`).
        // 3. For each static field (excl. auto-accessors), in document order:
        //    a. Apply each decorator for that field, in reverse order (`C1`, `C2`).
        // 4. For each instance field (excl. auto-accessors), in document order:
        //    a. Apply each decorator for that field, in reverse order (`D1`, `D2`).
        // 5. Apply each decorator for the class, in reverse order (`E1`, `E2`).
        //
        // As a result, "current" types at each decorator application are as follows:
        // - For `A1`, the "current" types of the class and method are their "original" types.
        // - For `A2`, the "current type" of the method is the "output type" of `A1`, and the "current type" of the
        //   class is the type of `SomeClass` where `f` is the "output type" of `A1`. This becomes the "final type"
        //   of `f`.
        // - For `B1`, the "current type" of the method is its "original type", and the "current type" of the class
        //   is the type of `SomeClass` where `f` now has its "final type".
        // - etc.
        //
        // [1]: https://arai-a.github.io/ecma262-compare/?pr=2417&id=sec-runtime-semantics-classdefinitionevaluation
        //
        // This seems complicated at first glance, but is not unlike our existing inference for functions:
        //
        //  declare function pipe<Original, A1, A2, B1, B2, C1, C2, D1, D2, E1, E2>(
        //      original: Original,
        //      a1: (input: Original, context: Context<E2>) => A1,
        //      a2: (input: A1, context: Context<E2>) => A2,
        //      b1: (input: A2, context: Context<E2>) => B1,
        //      b2: (input: B1, context: Context<E2>) => B2,
        //      c1: (input: B2, context: Context<E2>) => C1,
        //      c2: (input: C1, context: Context<E2>) => C2,
        //      d1: (input: C2, context: Context<E2>) => D1,
        //      d2: (input: D1, context: Context<E2>) => D2,
        //      e1: (input: D2, context: Context<E2>) => E1,
        //      e2: (input: E1, context: Context<E2>) => E2,
        //  ): E2;
        // When a decorator is applied, it is passed two arguments: "target", which is a value representing the
        // thing being decorated (constructors for classes, functions for methods/accessors, `undefined` for fields,
        // and a `{ get, set }` object for auto-accessors), and "context", which is an object that provides
        // reflection information about the decorated element, as well as the ability to add additional "extra"
        // initializers. In most cases, the "target" argument corresponds to the "input type" in some way, and the
        // return value similarly corresponds to the "output type" (though if the "output type" is `void` or
        // `undefined` then the "output type" is the "input type").
        var parent = decorator.parent;
        var links = getNodeLinks(parent);
        if (!links.decoratorSignature) {
            links.decoratorSignature = anySignature;
            switch (parent.kind) {
                case 262 /* SyntaxKind.ClassDeclaration */:
                case 230 /* SyntaxKind.ClassExpression */: {
                    // Class decorators have a `context` of `ClassDecoratorContext<Class>`, where the `Class` type
                    // argument will be the "final type" of the class after all decorators are applied.
                    var node = parent;
                    var targetType = getTypeOfSymbol(getSymbolOfDeclaration(node));
                    var contextType = createClassDecoratorContextType(targetType);
                    links.decoratorSignature = createESDecoratorCallSignature(targetType, contextType, targetType);
                    break;
                }
                case 173 /* SyntaxKind.MethodDeclaration */:
                case 176 /* SyntaxKind.GetAccessor */:
                case 177 /* SyntaxKind.SetAccessor */: {
                    var node = parent;
                    if (!(0, ts_1.isClassLike)(node.parent))
                        break;
                    // Method decorators have a `context` of `ClassMethodDecoratorContext<This, Value>`, where the
                    // `Value` type argument corresponds to the "final type" of the method.
                    //
                    // Getter decorators have a `context` of `ClassGetterDecoratorContext<This, Value>`, where the
                    // `Value` type argument corresponds to the "final type" of the value returned by the getter.
                    //
                    // Setter decorators have a `context` of `ClassSetterDecoratorContext<This, Value>`, where the
                    // `Value` type argument corresponds to the "final type" of the parameter of the setter.
                    //
                    // In all three cases, the `This` type argument is the "final type" of either the class or
                    // instance, depending on whether the member was `static`.
                    var valueType = (0, ts_1.isMethodDeclaration)(node) ? getOrCreateTypeFromSignature(getSignatureFromDeclaration(node)) :
                        getTypeOfNode(node);
                    var thisType = (0, ts_1.hasStaticModifier)(node) ?
                        getTypeOfSymbol(getSymbolOfDeclaration(node.parent)) :
                        getDeclaredTypeOfClassOrInterface(getSymbolOfDeclaration(node.parent));
                    // We wrap the "input type", if necessary, to match the decoration target. For getters this is
                    // something like `() => inputType`, for setters it's `(value: inputType) => void` and for
                    // methods it is just the input type.
                    var targetType = (0, ts_1.isGetAccessorDeclaration)(node) ? createGetterFunctionType(valueType) :
                        (0, ts_1.isSetAccessorDeclaration)(node) ? createSetterFunctionType(valueType) :
                            valueType;
                    var contextType = createClassMemberDecoratorContextTypeForNode(node, thisType, valueType);
                    // We also wrap the "output type", as needed.
                    var returnType = (0, ts_1.isGetAccessorDeclaration)(node) ? createGetterFunctionType(valueType) :
                        (0, ts_1.isSetAccessorDeclaration)(node) ? createSetterFunctionType(valueType) :
                            valueType;
                    links.decoratorSignature = createESDecoratorCallSignature(targetType, contextType, returnType);
                    break;
                }
                case 171 /* SyntaxKind.PropertyDeclaration */: {
                    var node = parent;
                    if (!(0, ts_1.isClassLike)(node.parent))
                        break;
                    // Field decorators have a `context` of `ClassFieldDecoratorContext<This, Value>` and
                    // auto-accessor decorators have a `context` of `ClassAccessorDecoratorContext<This, Value>. In
                    // both cases, the `This` type argument is the "final type" of either the class or instance,
                    // depending on whether the member was `static`, and the `Value` type argument corresponds to
                    // the "final type" of the value stored in the field.
                    var valueType = getTypeOfNode(node);
                    var thisType = (0, ts_1.hasStaticModifier)(node) ?
                        getTypeOfSymbol(getSymbolOfDeclaration(node.parent)) :
                        getDeclaredTypeOfClassOrInterface(getSymbolOfDeclaration(node.parent));
                    // The `target` of an auto-accessor decorator is a `{ get, set }` object, representing the
                    // runtime-generated getter and setter that are added to the class/prototype. The `target` of a
                    // regular field decorator is always `undefined` as it isn't installed until it is initialized.
                    var targetType = (0, ts_1.hasAccessorModifier)(node) ? createClassAccessorDecoratorTargetType(thisType, valueType) :
                        undefinedType;
                    var contextType = createClassMemberDecoratorContextTypeForNode(node, thisType, valueType);
                    // We wrap the "output type" depending on the declaration. For auto-accessors, we wrap the
                    // "output type" in a `ClassAccessorDecoratorResult<This, In, Out>` type, which allows for
                    // mutation of the runtime-generated getter and setter, as well as the injection of an
                    // initializer mutator. For regular fields, we wrap the "output type" in an initializer mutator.
                    var returnType = (0, ts_1.hasAccessorModifier)(node) ? createClassAccessorDecoratorResultType(thisType, valueType) :
                        createClassFieldDecoratorInitializerMutatorType(thisType, valueType);
                    links.decoratorSignature = createESDecoratorCallSignature(targetType, contextType, returnType);
                    break;
                }
            }
        }
        return links.decoratorSignature === anySignature ? undefined : links.decoratorSignature;
    }
    function getLegacyDecoratorCallSignature(decorator) {
        var parent = decorator.parent;
        var links = getNodeLinks(parent);
        if (!links.decoratorSignature) {
            links.decoratorSignature = anySignature;
            switch (parent.kind) {
                case 262 /* SyntaxKind.ClassDeclaration */:
                case 230 /* SyntaxKind.ClassExpression */: {
                    var node = parent;
                    // For a class decorator, the `target` is the type of the class (e.g. the
                    // "static" or "constructor" side of the class).
                    var targetType = getTypeOfSymbol(getSymbolOfDeclaration(node));
                    var targetParam = createParameter("target", targetType);
                    links.decoratorSignature = createCallSignature(
                    /*typeParameters*/ undefined, 
                    /*thisParameter*/ undefined, [targetParam], getUnionType([targetType, voidType]));
                    break;
                }
                case 168 /* SyntaxKind.Parameter */: {
                    var node = parent;
                    if (!(0, ts_1.isConstructorDeclaration)(node.parent) &&
                        !(((0, ts_1.isMethodDeclaration)(node.parent) || (0, ts_1.isSetAccessorDeclaration)(node.parent) && (0, ts_1.isClassLike)(node.parent.parent)))) {
                        break;
                    }
                    if ((0, ts_1.getThisParameter)(node.parent) === node) {
                        break;
                    }
                    var index = (0, ts_1.getThisParameter)(node.parent) ?
                        node.parent.parameters.indexOf(node) - 1 :
                        node.parent.parameters.indexOf(node);
                    ts_1.Debug.assert(index >= 0);
                    // A parameter declaration decorator will have three arguments (see `ParameterDecorator` in
                    // core.d.ts).
                    var targetType = (0, ts_1.isConstructorDeclaration)(node.parent) ? getTypeOfSymbol(getSymbolOfDeclaration(node.parent.parent)) :
                        getParentTypeOfClassElement(node.parent);
                    var keyType = (0, ts_1.isConstructorDeclaration)(node.parent) ? undefinedType :
                        getClassElementPropertyKeyType(node.parent);
                    var indexType = getNumberLiteralType(index);
                    var targetParam = createParameter("target", targetType);
                    var keyParam = createParameter("propertyKey", keyType);
                    var indexParam = createParameter("parameterIndex", indexType);
                    links.decoratorSignature = createCallSignature(
                    /*typeParameters*/ undefined, 
                    /*thisParameter*/ undefined, [targetParam, keyParam, indexParam], voidType);
                    break;
                }
                case 173 /* SyntaxKind.MethodDeclaration */:
                case 176 /* SyntaxKind.GetAccessor */:
                case 177 /* SyntaxKind.SetAccessor */:
                case 171 /* SyntaxKind.PropertyDeclaration */: {
                    var node = parent;
                    if (!(0, ts_1.isClassLike)(node.parent))
                        break;
                    // A method or accessor declaration decorator will have either two or three arguments (see
                    // `PropertyDecorator` and `MethodDecorator` in core.d.ts). If we are emitting decorators for
                    // ES3, we will only pass two arguments.
                    var targetType = getParentTypeOfClassElement(node);
                    var targetParam = createParameter("target", targetType);
                    var keyType = getClassElementPropertyKeyType(node);
                    var keyParam = createParameter("propertyKey", keyType);
                    var returnType = (0, ts_1.isPropertyDeclaration)(node) ? voidType :
                        createTypedPropertyDescriptorType(getTypeOfNode(node));
                    var hasPropDesc = languageVersion !== 0 /* ScriptTarget.ES3 */ && (!(0, ts_1.isPropertyDeclaration)(parent) || (0, ts_1.hasAccessorModifier)(parent));
                    if (hasPropDesc) {
                        var descriptorType = createTypedPropertyDescriptorType(getTypeOfNode(node));
                        var descriptorParam = createParameter("descriptor", descriptorType);
                        links.decoratorSignature = createCallSignature(
                        /*typeParameters*/ undefined, 
                        /*thisParameter*/ undefined, [targetParam, keyParam, descriptorParam], getUnionType([returnType, voidType]));
                    }
                    else {
                        links.decoratorSignature = createCallSignature(
                        /*typeParameters*/ undefined, 
                        /*thisParameter*/ undefined, [targetParam, keyParam], getUnionType([returnType, voidType]));
                    }
                    break;
                }
            }
        }
        return links.decoratorSignature === anySignature ? undefined : links.decoratorSignature;
    }
    function getDecoratorCallSignature(decorator) {
        return legacyDecorators ? getLegacyDecoratorCallSignature(decorator) :
            getESDecoratorCallSignature(decorator);
    }
    function createPromiseType(promisedType) {
        // creates a `Promise<T>` type where `T` is the promisedType argument
        var globalPromiseType = getGlobalPromiseType(/*reportErrors*/ true);
        if (globalPromiseType !== emptyGenericType) {
            // if the promised type is itself a promise, get the underlying type; otherwise, fallback to the promised type
            // Unwrap an `Awaited<T>` to `T` to improve inference.
            promisedType = getAwaitedTypeNoAlias(unwrapAwaitedType(promisedType)) || unknownType;
            return createTypeReference(globalPromiseType, [promisedType]);
        }
        return unknownType;
    }
    function createPromiseLikeType(promisedType) {
        // creates a `PromiseLike<T>` type where `T` is the promisedType argument
        var globalPromiseLikeType = getGlobalPromiseLikeType(/*reportErrors*/ true);
        if (globalPromiseLikeType !== emptyGenericType) {
            // if the promised type is itself a promise, get the underlying type; otherwise, fallback to the promised type
            // Unwrap an `Awaited<T>` to `T` to improve inference.
            promisedType = getAwaitedTypeNoAlias(unwrapAwaitedType(promisedType)) || unknownType;
            return createTypeReference(globalPromiseLikeType, [promisedType]);
        }
        return unknownType;
    }
    function createPromiseReturnType(func, promisedType) {
        var promiseType = createPromiseType(promisedType);
        if (promiseType === unknownType) {
            error(func, (0, ts_1.isImportCall)(func) ?
                ts_1.Diagnostics.A_dynamic_import_call_returns_a_Promise_Make_sure_you_have_a_declaration_for_Promise_or_include_ES2015_in_your_lib_option :
                ts_1.Diagnostics.An_async_function_or_method_must_return_a_Promise_Make_sure_you_have_a_declaration_for_Promise_or_include_ES2015_in_your_lib_option);
            return errorType;
        }
        else if (!getGlobalPromiseConstructorSymbol(/*reportErrors*/ true)) {
            error(func, (0, ts_1.isImportCall)(func) ?
                ts_1.Diagnostics.A_dynamic_import_call_in_ES5_SlashES3_requires_the_Promise_constructor_Make_sure_you_have_a_declaration_for_the_Promise_constructor_or_include_ES2015_in_your_lib_option :
                ts_1.Diagnostics.An_async_function_or_method_in_ES5_SlashES3_requires_the_Promise_constructor_Make_sure_you_have_a_declaration_for_the_Promise_constructor_or_include_ES2015_in_your_lib_option);
        }
        return promiseType;
    }
    function createNewTargetExpressionType(targetType) {
        // Create a synthetic type `NewTargetExpression { target: TargetType; }`
        var symbol = createSymbol(0 /* SymbolFlags.None */, "NewTargetExpression");
        var targetPropertySymbol = createSymbol(4 /* SymbolFlags.Property */, "target", 8 /* CheckFlags.Readonly */);
        targetPropertySymbol.parent = symbol;
        targetPropertySymbol.links.type = targetType;
        var members = (0, ts_1.createSymbolTable)([targetPropertySymbol]);
        symbol.members = members;
        return createAnonymousType(symbol, members, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
    }
    function getReturnTypeFromBody(func, checkMode) {
        if (!func.body) {
            return errorType;
        }
        var functionFlags = (0, ts_1.getFunctionFlags)(func);
        var isAsync = (functionFlags & 2 /* FunctionFlags.Async */) !== 0;
        var isGenerator = (functionFlags & 1 /* FunctionFlags.Generator */) !== 0;
        var returnType;
        var yieldType;
        var nextType;
        var fallbackReturnType = voidType;
        if (func.body.kind !== 240 /* SyntaxKind.Block */) { // Async or normal arrow function
            returnType = checkExpressionCached(func.body, checkMode && checkMode & ~8 /* CheckMode.SkipGenericFunctions */);
            if (isAsync) {
                // From within an async function you can return either a non-promise value or a promise. Any
                // Promise/A+ compatible implementation will always assimilate any foreign promise, so the
                // return type of the body should be unwrapped to its awaited type, which we will wrap in
                // the native Promise<T> type later in this function.
                returnType = unwrapAwaitedType(checkAwaitedType(returnType, /*withAlias*/ false, /*errorNode*/ func, ts_1.Diagnostics.The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member));
            }
        }
        else if (isGenerator) { // Generator or AsyncGenerator function
            var returnTypes = checkAndAggregateReturnExpressionTypes(func, checkMode);
            if (!returnTypes) {
                fallbackReturnType = neverType;
            }
            else if (returnTypes.length > 0) {
                returnType = getUnionType(returnTypes, 2 /* UnionReduction.Subtype */);
            }
            var _a = checkAndAggregateYieldOperandTypes(func, checkMode), yieldTypes = _a.yieldTypes, nextTypes = _a.nextTypes;
            yieldType = (0, ts_1.some)(yieldTypes) ? getUnionType(yieldTypes, 2 /* UnionReduction.Subtype */) : undefined;
            nextType = (0, ts_1.some)(nextTypes) ? getIntersectionType(nextTypes) : undefined;
        }
        else { // Async or normal function
            var types = checkAndAggregateReturnExpressionTypes(func, checkMode);
            if (!types) {
                // For an async function, the return type will not be never, but rather a Promise for never.
                return functionFlags & 2 /* FunctionFlags.Async */
                    ? createPromiseReturnType(func, neverType) // Async function
                    : neverType; // Normal function
            }
            if (types.length === 0) {
                // For an async function, the return type will not be void/undefined, but rather a Promise for void/undefined.
                var contextualReturnType = getContextualReturnType(func, /*contextFlags*/ undefined);
                var returnType_1 = contextualReturnType && (unwrapReturnType(contextualReturnType, functionFlags) || voidType).flags & 32768 /* TypeFlags.Undefined */ ? undefinedType : voidType;
                return functionFlags & 2 /* FunctionFlags.Async */ ? createPromiseReturnType(func, returnType_1) : // Async function
                    returnType_1; // Normal function
            }
            // Return a union of the return expression types.
            returnType = getUnionType(types, 2 /* UnionReduction.Subtype */);
        }
        if (returnType || yieldType || nextType) {
            if (yieldType)
                reportErrorsFromWidening(func, yieldType, 3 /* WideningKind.GeneratorYield */);
            if (returnType)
                reportErrorsFromWidening(func, returnType, 1 /* WideningKind.FunctionReturn */);
            if (nextType)
                reportErrorsFromWidening(func, nextType, 2 /* WideningKind.GeneratorNext */);
            if (returnType && isUnitType(returnType) ||
                yieldType && isUnitType(yieldType) ||
                nextType && isUnitType(nextType)) {
                var contextualSignature = getContextualSignatureForFunctionLikeDeclaration(func);
                var contextualType = !contextualSignature ? undefined :
                    contextualSignature === getSignatureFromDeclaration(func) ? isGenerator ? undefined : returnType :
                        instantiateContextualType(getReturnTypeOfSignature(contextualSignature), func, /*contextFlags*/ undefined);
                if (isGenerator) {
                    yieldType = getWidenedLiteralLikeTypeForContextualIterationTypeIfNeeded(yieldType, contextualType, 0 /* IterationTypeKind.Yield */, isAsync);
                    returnType = getWidenedLiteralLikeTypeForContextualIterationTypeIfNeeded(returnType, contextualType, 1 /* IterationTypeKind.Return */, isAsync);
                    nextType = getWidenedLiteralLikeTypeForContextualIterationTypeIfNeeded(nextType, contextualType, 2 /* IterationTypeKind.Next */, isAsync);
                }
                else {
                    returnType = getWidenedLiteralLikeTypeForContextualReturnTypeIfNeeded(returnType, contextualType, isAsync);
                }
            }
            if (yieldType)
                yieldType = getWidenedType(yieldType);
            if (returnType)
                returnType = getWidenedType(returnType);
            if (nextType)
                nextType = getWidenedType(nextType);
        }
        if (isGenerator) {
            return createGeneratorReturnType(yieldType || neverType, returnType || fallbackReturnType, nextType || getContextualIterationType(2 /* IterationTypeKind.Next */, func) || unknownType, isAsync);
        }
        else {
            // From within an async function you can return either a non-promise value or a promise. Any
            // Promise/A+ compatible implementation will always assimilate any foreign promise, so the
            // return type of the body is awaited type of the body, wrapped in a native Promise<T> type.
            return isAsync
                ? createPromiseType(returnType || fallbackReturnType)
                : returnType || fallbackReturnType;
        }
    }
    function createGeneratorReturnType(yieldType, returnType, nextType, isAsyncGenerator) {
        var resolver = isAsyncGenerator ? asyncIterationTypesResolver : syncIterationTypesResolver;
        var globalGeneratorType = resolver.getGlobalGeneratorType(/*reportErrors*/ false);
        yieldType = resolver.resolveIterationType(yieldType, /*errorNode*/ undefined) || unknownType;
        returnType = resolver.resolveIterationType(returnType, /*errorNode*/ undefined) || unknownType;
        nextType = resolver.resolveIterationType(nextType, /*errorNode*/ undefined) || unknownType;
        if (globalGeneratorType === emptyGenericType) {
            // Fall back to the global IterableIterator if returnType is assignable to the expected return iteration
            // type of IterableIterator, and the expected next iteration type of IterableIterator is assignable to
            // nextType.
            var globalType = resolver.getGlobalIterableIteratorType(/*reportErrors*/ false);
            var iterationTypes = globalType !== emptyGenericType ? getIterationTypesOfGlobalIterableType(globalType, resolver) : undefined;
            var iterableIteratorReturnType = iterationTypes ? iterationTypes.returnType : anyType;
            var iterableIteratorNextType = iterationTypes ? iterationTypes.nextType : undefinedType;
            if (isTypeAssignableTo(returnType, iterableIteratorReturnType) &&
                isTypeAssignableTo(iterableIteratorNextType, nextType)) {
                if (globalType !== emptyGenericType) {
                    return createTypeFromGenericGlobalType(globalType, [yieldType]);
                }
                // The global IterableIterator type doesn't exist, so report an error
                resolver.getGlobalIterableIteratorType(/*reportErrors*/ true);
                return emptyObjectType;
            }
            // The global Generator type doesn't exist, so report an error
            resolver.getGlobalGeneratorType(/*reportErrors*/ true);
            return emptyObjectType;
        }
        return createTypeFromGenericGlobalType(globalGeneratorType, [yieldType, returnType, nextType]);
    }
    function checkAndAggregateYieldOperandTypes(func, checkMode) {
        var yieldTypes = [];
        var nextTypes = [];
        var isAsync = ((0, ts_1.getFunctionFlags)(func) & 2 /* FunctionFlags.Async */) !== 0;
        (0, ts_1.forEachYieldExpression)(func.body, function (yieldExpression) {
            var yieldExpressionType = yieldExpression.expression ? checkExpression(yieldExpression.expression, checkMode) : undefinedWideningType;
            (0, ts_1.pushIfUnique)(yieldTypes, getYieldedTypeOfYieldExpression(yieldExpression, yieldExpressionType, anyType, isAsync));
            var nextType;
            if (yieldExpression.asteriskToken) {
                var iterationTypes = getIterationTypesOfIterable(yieldExpressionType, isAsync ? 19 /* IterationUse.AsyncYieldStar */ : 17 /* IterationUse.YieldStar */, yieldExpression.expression);
                nextType = iterationTypes && iterationTypes.nextType;
            }
            else {
                nextType = getContextualType(yieldExpression, /*contextFlags*/ undefined);
            }
            if (nextType)
                (0, ts_1.pushIfUnique)(nextTypes, nextType);
        });
        return { yieldTypes: yieldTypes, nextTypes: nextTypes };
    }
    function getYieldedTypeOfYieldExpression(node, expressionType, sentType, isAsync) {
        var errorNode = node.expression || node;
        // A `yield*` expression effectively yields everything that its operand yields
        var yieldedType = node.asteriskToken ? checkIteratedTypeOrElementType(isAsync ? 19 /* IterationUse.AsyncYieldStar */ : 17 /* IterationUse.YieldStar */, expressionType, sentType, errorNode) : expressionType;
        return !isAsync ? yieldedType : getAwaitedType(yieldedType, errorNode, node.asteriskToken
            ? ts_1.Diagnostics.Type_of_iterated_elements_of_a_yield_Asterisk_operand_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member
            : ts_1.Diagnostics.Type_of_yield_operand_in_an_async_generator_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member);
    }
    // Return the combined not-equal type facts for all cases except those between the start and end indices.
    function getNotEqualFactsFromTypeofSwitch(start, end, witnesses) {
        var facts = 0 /* TypeFacts.None */;
        for (var i = 0; i < witnesses.length; i++) {
            var witness = i < start || i >= end ? witnesses[i] : undefined;
            facts |= witness !== undefined ? typeofNEFacts.get(witness) || 32768 /* TypeFacts.TypeofNEHostObject */ : 0;
        }
        return facts;
    }
    function isExhaustiveSwitchStatement(node) {
        var links = getNodeLinks(node);
        if (links.isExhaustive === undefined) {
            links.isExhaustive = 0; // Indicate resolution is in process
            var exhaustive = computeExhaustiveSwitchStatement(node);
            if (links.isExhaustive === 0) {
                links.isExhaustive = exhaustive;
            }
        }
        else if (links.isExhaustive === 0) {
            links.isExhaustive = false; // Resolve circularity to false
        }
        return links.isExhaustive;
    }
    function computeExhaustiveSwitchStatement(node) {
        if (node.expression.kind === 220 /* SyntaxKind.TypeOfExpression */) {
            var witnesses = getSwitchClauseTypeOfWitnesses(node);
            if (!witnesses) {
                return false;
            }
            var operandConstraint = getBaseConstraintOrType(checkExpressionCached(node.expression.expression));
            // Get the not-equal flags for all handled cases.
            var notEqualFacts_2 = getNotEqualFactsFromTypeofSwitch(0, 0, witnesses);
            if (operandConstraint.flags & 3 /* TypeFlags.AnyOrUnknown */) {
                // We special case the top types to be exhaustive when all cases are handled.
                return (556800 /* TypeFacts.AllTypeofNE */ & notEqualFacts_2) === 556800 /* TypeFacts.AllTypeofNE */;
            }
            // A missing not-equal flag indicates that the type wasn't handled by some case.
            return !someType(operandConstraint, function (t) { return (getTypeFacts(t) & notEqualFacts_2) === notEqualFacts_2; });
        }
        var type = checkExpressionCached(node.expression);
        if (!isLiteralType(type)) {
            return false;
        }
        var switchTypes = getSwitchClauseTypes(node);
        if (!switchTypes.length || (0, ts_1.some)(switchTypes, isNeitherUnitTypeNorNever)) {
            return false;
        }
        return eachTypeContainedIn(mapType(type, getRegularTypeOfLiteralType), switchTypes);
    }
    function functionHasImplicitReturn(func) {
        return func.endFlowNode && isReachableFlowNode(func.endFlowNode);
    }
    /** NOTE: Return value of `[]` means a different thing than `undefined`. `[]` means func returns `void`, `undefined` means it returns `never`. */
    function checkAndAggregateReturnExpressionTypes(func, checkMode) {
        var functionFlags = (0, ts_1.getFunctionFlags)(func);
        var aggregatedTypes = [];
        var hasReturnWithNoExpression = functionHasImplicitReturn(func);
        var hasReturnOfTypeNever = false;
        (0, ts_1.forEachReturnStatement)(func.body, function (returnStatement) {
            var expr = returnStatement.expression;
            if (expr) {
                // Bare calls to this same function don't contribute to inference
                if (expr.kind === 212 /* SyntaxKind.CallExpression */ &&
                    expr.expression.kind === 80 /* SyntaxKind.Identifier */ &&
                    checkExpressionCached(expr.expression).symbol === func.symbol) {
                    hasReturnOfTypeNever = true;
                    return;
                }
                var type = checkExpressionCached(expr, checkMode && checkMode & ~8 /* CheckMode.SkipGenericFunctions */);
                if (functionFlags & 2 /* FunctionFlags.Async */) {
                    // From within an async function you can return either a non-promise value or a promise. Any
                    // Promise/A+ compatible implementation will always assimilate any foreign promise, so the
                    // return type of the body should be unwrapped to its awaited type, which should be wrapped in
                    // the native Promise<T> type by the caller.
                    type = unwrapAwaitedType(checkAwaitedType(type, /*withAlias*/ false, func, ts_1.Diagnostics.The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member));
                }
                if (type.flags & 131072 /* TypeFlags.Never */) {
                    hasReturnOfTypeNever = true;
                }
                (0, ts_1.pushIfUnique)(aggregatedTypes, type);
            }
            else {
                hasReturnWithNoExpression = true;
            }
        });
        if (aggregatedTypes.length === 0 && !hasReturnWithNoExpression && (hasReturnOfTypeNever || mayReturnNever(func))) {
            return undefined;
        }
        if (strictNullChecks && aggregatedTypes.length && hasReturnWithNoExpression &&
            !(isJSConstructor(func) && aggregatedTypes.some(function (t) { return t.symbol === func.symbol; }))) {
            // Javascript "callable constructors", containing eg `if (!(this instanceof A)) return new A()` should not add undefined
            (0, ts_1.pushIfUnique)(aggregatedTypes, undefinedType);
        }
        return aggregatedTypes;
    }
    function mayReturnNever(func) {
        switch (func.kind) {
            case 217 /* SyntaxKind.FunctionExpression */:
            case 218 /* SyntaxKind.ArrowFunction */:
                return true;
            case 173 /* SyntaxKind.MethodDeclaration */:
                return func.parent.kind === 209 /* SyntaxKind.ObjectLiteralExpression */;
            default:
                return false;
        }
    }
    /**
     * TypeScript Specification 1.0 (6.3) - July 2014
     *   An explicitly typed function whose return type isn't the Void type,
     *   the Any type, or a union type containing the Void or Any type as a constituent
     *   must have at least one return statement somewhere in its body.
     *   An exception to this rule is if the function implementation consists of a single 'throw' statement.
     *
     * @param returnType - return type of the function, can be undefined if return type is not explicitly specified
     */
    function checkAllCodePathsInNonVoidFunctionReturnOrThrow(func, returnType) {
        addLazyDiagnostic(checkAllCodePathsInNonVoidFunctionReturnOrThrowDiagnostics);
        return;
        function checkAllCodePathsInNonVoidFunctionReturnOrThrowDiagnostics() {
            var functionFlags = (0, ts_1.getFunctionFlags)(func);
            var type = returnType && unwrapReturnType(returnType, functionFlags);
            // Functions with an explicitly specified return type that includes `void` or is exactly `any` or `undefined` don't
            // need any return statements.
            if (type && (maybeTypeOfKind(type, 16384 /* TypeFlags.Void */) || type.flags & (1 /* TypeFlags.Any */ | 32768 /* TypeFlags.Undefined */))) {
                return;
            }
            // If all we have is a function signature, or an arrow function with an expression body, then there is nothing to check.
            // also if HasImplicitReturn flag is not set this means that all codepaths in function body end with return or throw
            if (func.kind === 172 /* SyntaxKind.MethodSignature */ || (0, ts_1.nodeIsMissing)(func.body) || func.body.kind !== 240 /* SyntaxKind.Block */ || !functionHasImplicitReturn(func)) {
                return;
            }
            var hasExplicitReturn = func.flags & 512 /* NodeFlags.HasExplicitReturn */;
            var errorNode = (0, ts_1.getEffectiveReturnTypeNode)(func) || func;
            if (type && type.flags & 131072 /* TypeFlags.Never */) {
                error(errorNode, ts_1.Diagnostics.A_function_returning_never_cannot_have_a_reachable_end_point);
            }
            else if (type && !hasExplicitReturn) {
                // minimal check: function has syntactic return type annotation and no explicit return statements in the body
                // this function does not conform to the specification.
                error(errorNode, ts_1.Diagnostics.A_function_whose_declared_type_is_neither_undefined_void_nor_any_must_return_a_value);
            }
            else if (type && strictNullChecks && !isTypeAssignableTo(undefinedType, type)) {
                error(errorNode, ts_1.Diagnostics.Function_lacks_ending_return_statement_and_return_type_does_not_include_undefined);
            }
            else if (compilerOptions.noImplicitReturns) {
                if (!type) {
                    // If return type annotation is omitted check if function has any explicit return statements.
                    // If it does not have any - its inferred return type is void - don't do any checks.
                    // Otherwise get inferred return type from function body and report error only if it is not void / anytype
                    if (!hasExplicitReturn) {
                        return;
                    }
                    var inferredReturnType = getReturnTypeOfSignature(getSignatureFromDeclaration(func));
                    if (isUnwrappedReturnTypeUndefinedVoidOrAny(func, inferredReturnType)) {
                        return;
                    }
                }
                error(errorNode, ts_1.Diagnostics.Not_all_code_paths_return_a_value);
            }
        }
    }
    function checkFunctionExpressionOrObjectLiteralMethod(node, checkMode) {
        ts_1.Debug.assert(node.kind !== 173 /* SyntaxKind.MethodDeclaration */ || (0, ts_1.isObjectLiteralMethod)(node));
        checkNodeDeferred(node);
        if ((0, ts_1.isFunctionExpression)(node)) {
            checkCollisionsForDeclarationName(node, node.name);
        }
        // The identityMapper object is used to indicate that function expressions are wildcards
        if (checkMode && checkMode & 4 /* CheckMode.SkipContextSensitive */ && isContextSensitive(node)) {
            // Skip parameters, return signature with return type that retains noncontextual parts so inferences can still be drawn in an early stage
            if (!(0, ts_1.getEffectiveReturnTypeNode)(node) && !(0, ts_1.hasContextSensitiveParameters)(node)) {
                // Return plain anyFunctionType if there is no possibility we'll make inferences from the return type
                var contextualSignature = getContextualSignature(node);
                if (contextualSignature && couldContainTypeVariables(getReturnTypeOfSignature(contextualSignature))) {
                    var links = getNodeLinks(node);
                    if (links.contextFreeType) {
                        return links.contextFreeType;
                    }
                    var returnType = getReturnTypeFromBody(node, checkMode);
                    var returnOnlySignature = createSignature(/*declaration*/ undefined, /*typeParameters*/ undefined, /*thisParameter*/ undefined, ts_1.emptyArray, returnType, /*resolvedTypePredicate*/ undefined, 0, 64 /* SignatureFlags.IsNonInferrable */);
                    var returnOnlyType = createAnonymousType(node.symbol, emptySymbols, [returnOnlySignature], ts_1.emptyArray, ts_1.emptyArray);
                    returnOnlyType.objectFlags |= 262144 /* ObjectFlags.NonInferrableType */;
                    return links.contextFreeType = returnOnlyType;
                }
            }
            return anyFunctionType;
        }
        // Grammar checking
        var hasGrammarError = checkGrammarFunctionLikeDeclaration(node);
        if (!hasGrammarError && node.kind === 217 /* SyntaxKind.FunctionExpression */) {
            checkGrammarForGenerator(node);
        }
        contextuallyCheckFunctionExpressionOrObjectLiteralMethod(node, checkMode);
        return getTypeOfSymbol(getSymbolOfDeclaration(node));
    }
    function contextuallyCheckFunctionExpressionOrObjectLiteralMethod(node, checkMode) {
        var links = getNodeLinks(node);
        // Check if function expression is contextually typed and assign parameter types if so.
        if (!(links.flags & 64 /* NodeCheckFlags.ContextChecked */)) {
            var contextualSignature = getContextualSignature(node);
            // If a type check is started at a function expression that is an argument of a function call, obtaining the
            // contextual type may recursively get back to here during overload resolution of the call. If so, we will have
            // already assigned contextual types.
            if (!(links.flags & 64 /* NodeCheckFlags.ContextChecked */)) {
                links.flags |= 64 /* NodeCheckFlags.ContextChecked */;
                var signature = (0, ts_1.firstOrUndefined)(getSignaturesOfType(getTypeOfSymbol(getSymbolOfDeclaration(node)), 0 /* SignatureKind.Call */));
                if (!signature) {
                    return;
                }
                if (isContextSensitive(node)) {
                    if (contextualSignature) {
                        var inferenceContext = getInferenceContext(node);
                        var instantiatedContextualSignature = void 0;
                        if (checkMode && checkMode & 2 /* CheckMode.Inferential */) {
                            inferFromAnnotatedParameters(signature, contextualSignature, inferenceContext);
                            var restType = getEffectiveRestType(contextualSignature);
                            if (restType && restType.flags & 262144 /* TypeFlags.TypeParameter */) {
                                instantiatedContextualSignature = instantiateSignature(contextualSignature, inferenceContext.nonFixingMapper);
                            }
                        }
                        instantiatedContextualSignature || (instantiatedContextualSignature = inferenceContext ?
                            instantiateSignature(contextualSignature, inferenceContext.mapper) : contextualSignature);
                        assignContextualParameterTypes(signature, instantiatedContextualSignature);
                    }
                    else {
                        // Force resolution of all parameter types such that the absence of a contextual type is consistently reflected.
                        assignNonContextualParameterTypes(signature);
                    }
                }
                else if (contextualSignature && !node.typeParameters && contextualSignature.parameters.length > node.parameters.length) {
                    var inferenceContext = getInferenceContext(node);
                    if (checkMode && checkMode & 2 /* CheckMode.Inferential */) {
                        inferFromAnnotatedParameters(signature, contextualSignature, inferenceContext);
                    }
                }
                if (contextualSignature && !getReturnTypeFromAnnotation(node) && !signature.resolvedReturnType) {
                    var returnType = getReturnTypeFromBody(node, checkMode);
                    if (!signature.resolvedReturnType) {
                        signature.resolvedReturnType = returnType;
                    }
                }
                checkSignatureDeclaration(node);
            }
        }
    }
    function checkFunctionExpressionOrObjectLiteralMethodDeferred(node) {
        ts_1.Debug.assert(node.kind !== 173 /* SyntaxKind.MethodDeclaration */ || (0, ts_1.isObjectLiteralMethod)(node));
        var functionFlags = (0, ts_1.getFunctionFlags)(node);
        var returnType = getReturnTypeFromAnnotation(node);
        checkAllCodePathsInNonVoidFunctionReturnOrThrow(node, returnType);
        if (node.body) {
            if (!(0, ts_1.getEffectiveReturnTypeNode)(node)) {
                // There are some checks that are only performed in getReturnTypeFromBody, that may produce errors
                // we need. An example is the noImplicitAny errors resulting from widening the return expression
                // of a function. Because checking of function expression bodies is deferred, there was never an
                // appropriate time to do this during the main walk of the file (see the comment at the top of
                // checkFunctionExpressionBodies). So it must be done now.
                getReturnTypeOfSignature(getSignatureFromDeclaration(node));
            }
            if (node.body.kind === 240 /* SyntaxKind.Block */) {
                checkSourceElement(node.body);
            }
            else {
                // From within an async function you can return either a non-promise value or a promise. Any
                // Promise/A+ compatible implementation will always assimilate any foreign promise, so we
                // should not be checking assignability of a promise to the return type. Instead, we need to
                // check assignability of the awaited type of the expression body against the promised type of
                // its return type annotation.
                var exprType = checkExpression(node.body);
                var returnOrPromisedType = returnType && unwrapReturnType(returnType, functionFlags);
                if (returnOrPromisedType) {
                    if ((functionFlags & 3 /* FunctionFlags.AsyncGenerator */) === 2 /* FunctionFlags.Async */) { // Async function
                        var awaitedType = checkAwaitedType(exprType, /*withAlias*/ false, node.body, ts_1.Diagnostics.The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member);
                        checkTypeAssignableToAndOptionallyElaborate(awaitedType, returnOrPromisedType, node.body, node.body);
                    }
                    else { // Normal function
                        checkTypeAssignableToAndOptionallyElaborate(exprType, returnOrPromisedType, node.body, node.body);
                    }
                }
            }
        }
    }
    function checkArithmeticOperandType(operand, type, diagnostic, isAwaitValid) {
        if (isAwaitValid === void 0) { isAwaitValid = false; }
        if (!isTypeAssignableTo(type, numberOrBigIntType)) {
            var awaitedType = isAwaitValid && getAwaitedTypeOfPromise(type);
            errorAndMaybeSuggestAwait(operand, !!awaitedType && isTypeAssignableTo(awaitedType, numberOrBigIntType), diagnostic);
            return false;
        }
        return true;
    }
    function isReadonlyAssignmentDeclaration(d) {
        if (!(0, ts_1.isCallExpression)(d)) {
            return false;
        }
        if (!(0, ts_1.isBindableObjectDefinePropertyCall)(d)) {
            return false;
        }
        var objectLitType = checkExpressionCached(d.arguments[2]);
        var valueType = getTypeOfPropertyOfType(objectLitType, "value");
        if (valueType) {
            var writableProp = getPropertyOfType(objectLitType, "writable");
            var writableType = writableProp && getTypeOfSymbol(writableProp);
            if (!writableType || writableType === falseType || writableType === regularFalseType) {
                return true;
            }
            // We include this definition whereupon we walk back and check the type at the declaration because
            // The usual definition of `Object.defineProperty` will _not_ cause literal types to be preserved in the
            // argument types, should the type be contextualized by the call itself.
            if (writableProp && writableProp.valueDeclaration && (0, ts_1.isPropertyAssignment)(writableProp.valueDeclaration)) {
                var initializer = writableProp.valueDeclaration.initializer;
                var rawOriginalType = checkExpression(initializer);
                if (rawOriginalType === falseType || rawOriginalType === regularFalseType) {
                    return true;
                }
            }
            return false;
        }
        var setProp = getPropertyOfType(objectLitType, "set");
        return !setProp;
    }
    function isReadonlySymbol(symbol) {
        // The following symbols are considered read-only:
        // Properties with a 'readonly' modifier
        // Variables declared with 'const'
        // Get accessors without matching set accessors
        // Enum members
        // Object.defineProperty assignments with writable false or no setter
        // Unions and intersections of the above (unions and intersections eagerly set isReadonly on creation)
        return !!((0, ts_1.getCheckFlags)(symbol) & 8 /* CheckFlags.Readonly */ ||
            symbol.flags & 4 /* SymbolFlags.Property */ && (0, ts_1.getDeclarationModifierFlagsFromSymbol)(symbol) & 64 /* ModifierFlags.Readonly */ ||
            symbol.flags & 3 /* SymbolFlags.Variable */ && getDeclarationNodeFlagsFromSymbol(symbol) & 2 /* NodeFlags.Const */ ||
            symbol.flags & 98304 /* SymbolFlags.Accessor */ && !(symbol.flags & 65536 /* SymbolFlags.SetAccessor */) ||
            symbol.flags & 8 /* SymbolFlags.EnumMember */ ||
            (0, ts_1.some)(symbol.declarations, isReadonlyAssignmentDeclaration));
    }
    function isAssignmentToReadonlyEntity(expr, symbol, assignmentKind) {
        var _a, _b;
        if (assignmentKind === 0 /* AssignmentKind.None */) {
            // no assigment means it doesn't matter whether the entity is readonly
            return false;
        }
        if (isReadonlySymbol(symbol)) {
            // Allow assignments to readonly properties within constructors of the same class declaration.
            if (symbol.flags & 4 /* SymbolFlags.Property */ &&
                (0, ts_1.isAccessExpression)(expr) &&
                expr.expression.kind === 110 /* SyntaxKind.ThisKeyword */) {
                // Look for if this is the constructor for the class that `symbol` is a property of.
                var ctor = (0, ts_1.getContainingFunction)(expr);
                if (!(ctor && (ctor.kind === 175 /* SyntaxKind.Constructor */ || isJSConstructor(ctor)))) {
                    return true;
                }
                if (symbol.valueDeclaration) {
                    var isAssignmentDeclaration_1 = (0, ts_1.isBinaryExpression)(symbol.valueDeclaration);
                    var isLocalPropertyDeclaration = ctor.parent === symbol.valueDeclaration.parent;
                    var isLocalParameterProperty = ctor === symbol.valueDeclaration.parent;
                    var isLocalThisPropertyAssignment = isAssignmentDeclaration_1 && ((_a = symbol.parent) === null || _a === void 0 ? void 0 : _a.valueDeclaration) === ctor.parent;
                    var isLocalThisPropertyAssignmentConstructorFunction = isAssignmentDeclaration_1 && ((_b = symbol.parent) === null || _b === void 0 ? void 0 : _b.valueDeclaration) === ctor;
                    var isWriteableSymbol = isLocalPropertyDeclaration
                        || isLocalParameterProperty
                        || isLocalThisPropertyAssignment
                        || isLocalThisPropertyAssignmentConstructorFunction;
                    return !isWriteableSymbol;
                }
            }
            return true;
        }
        if ((0, ts_1.isAccessExpression)(expr)) {
            // references through namespace import should be readonly
            var node = (0, ts_1.skipParentheses)(expr.expression);
            if (node.kind === 80 /* SyntaxKind.Identifier */) {
                var symbol_2 = getNodeLinks(node).resolvedSymbol;
                if (symbol_2.flags & 2097152 /* SymbolFlags.Alias */) {
                    var declaration = getDeclarationOfAliasSymbol(symbol_2);
                    return !!declaration && declaration.kind === 273 /* SyntaxKind.NamespaceImport */;
                }
            }
        }
        return false;
    }
    function checkReferenceExpression(expr, invalidReferenceMessage, invalidOptionalChainMessage) {
        // References are combinations of identifiers, parentheses, and property accesses.
        var node = (0, ts_1.skipOuterExpressions)(expr, 6 /* OuterExpressionKinds.Assertions */ | 1 /* OuterExpressionKinds.Parentheses */);
        if (node.kind !== 80 /* SyntaxKind.Identifier */ && !(0, ts_1.isAccessExpression)(node)) {
            error(expr, invalidReferenceMessage);
            return false;
        }
        if (node.flags & 32 /* NodeFlags.OptionalChain */) {
            error(expr, invalidOptionalChainMessage);
            return false;
        }
        return true;
    }
    function checkDeleteExpression(node) {
        checkExpression(node.expression);
        var expr = (0, ts_1.skipParentheses)(node.expression);
        if (!(0, ts_1.isAccessExpression)(expr)) {
            error(expr, ts_1.Diagnostics.The_operand_of_a_delete_operator_must_be_a_property_reference);
            return booleanType;
        }
        if ((0, ts_1.isPropertyAccessExpression)(expr) && (0, ts_1.isPrivateIdentifier)(expr.name)) {
            error(expr, ts_1.Diagnostics.The_operand_of_a_delete_operator_cannot_be_a_private_identifier);
        }
        var links = getNodeLinks(expr);
        var symbol = getExportSymbolOfValueSymbolIfExported(links.resolvedSymbol);
        if (symbol) {
            if (isReadonlySymbol(symbol)) {
                error(expr, ts_1.Diagnostics.The_operand_of_a_delete_operator_cannot_be_a_read_only_property);
            }
            checkDeleteExpressionMustBeOptional(expr, symbol);
        }
        return booleanType;
    }
    function checkDeleteExpressionMustBeOptional(expr, symbol) {
        var type = getTypeOfSymbol(symbol);
        if (strictNullChecks &&
            !(type.flags & (3 /* TypeFlags.AnyOrUnknown */ | 131072 /* TypeFlags.Never */)) &&
            !(exactOptionalPropertyTypes ? symbol.flags & 16777216 /* SymbolFlags.Optional */ : getTypeFacts(type) & 16777216 /* TypeFacts.IsUndefined */)) {
            error(expr, ts_1.Diagnostics.The_operand_of_a_delete_operator_must_be_optional);
        }
    }
    function checkTypeOfExpression(node) {
        checkExpression(node.expression);
        return typeofType;
    }
    function checkVoidExpression(node) {
        checkExpression(node.expression);
        return undefinedWideningType;
    }
    function checkAwaitExpressionGrammar(node) {
        // Grammar checking
        var container = (0, ts_1.getContainingFunctionOrClassStaticBlock)(node);
        if (container && (0, ts_1.isClassStaticBlockDeclaration)(container)) {
            error(node, ts_1.Diagnostics.Await_expression_cannot_be_used_inside_a_class_static_block);
        }
        else if (!(node.flags & 32768 /* NodeFlags.AwaitContext */)) {
            if ((0, ts_1.isInTopLevelContext)(node)) {
                var sourceFile = (0, ts_1.getSourceFileOfNode)(node);
                if (!hasParseDiagnostics(sourceFile)) {
                    var span = void 0;
                    if (!(0, ts_1.isEffectiveExternalModule)(sourceFile, compilerOptions)) {
                        span !== null && span !== void 0 ? span : (span = (0, ts_1.getSpanOfTokenAtPosition)(sourceFile, node.pos));
                        var diagnostic = (0, ts_1.createFileDiagnostic)(sourceFile, span.start, span.length, ts_1.Diagnostics.await_expressions_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_file_has_no_imports_or_exports_Consider_adding_an_empty_export_to_make_this_file_a_module);
                        diagnostics.add(diagnostic);
                    }
                    switch (moduleKind) {
                        case ts_1.ModuleKind.Node16:
                        case ts_1.ModuleKind.NodeNext:
                            if (sourceFile.impliedNodeFormat === ts_1.ModuleKind.CommonJS) {
                                span !== null && span !== void 0 ? span : (span = (0, ts_1.getSpanOfTokenAtPosition)(sourceFile, node.pos));
                                diagnostics.add((0, ts_1.createFileDiagnostic)(sourceFile, span.start, span.length, ts_1.Diagnostics.The_current_file_is_a_CommonJS_module_and_cannot_use_await_at_the_top_level));
                                break;
                            }
                        // fallthrough
                        case ts_1.ModuleKind.ES2022:
                        case ts_1.ModuleKind.ESNext:
                        case ts_1.ModuleKind.System:
                            if (languageVersion >= 4 /* ScriptTarget.ES2017 */) {
                                break;
                            }
                        // fallthrough
                        default:
                            span !== null && span !== void 0 ? span : (span = (0, ts_1.getSpanOfTokenAtPosition)(sourceFile, node.pos));
                            diagnostics.add((0, ts_1.createFileDiagnostic)(sourceFile, span.start, span.length, ts_1.Diagnostics.Top_level_await_expressions_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_node16_or_nodenext_and_the_target_option_is_set_to_es2017_or_higher));
                            break;
                    }
                }
            }
            else {
                // use of 'await' in non-async function
                var sourceFile = (0, ts_1.getSourceFileOfNode)(node);
                if (!hasParseDiagnostics(sourceFile)) {
                    var span = (0, ts_1.getSpanOfTokenAtPosition)(sourceFile, node.pos);
                    var diagnostic = (0, ts_1.createFileDiagnostic)(sourceFile, span.start, span.length, ts_1.Diagnostics.await_expressions_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules);
                    if (container && container.kind !== 175 /* SyntaxKind.Constructor */ && ((0, ts_1.getFunctionFlags)(container) & 2 /* FunctionFlags.Async */) === 0) {
                        var relatedInfo = (0, ts_1.createDiagnosticForNode)(container, ts_1.Diagnostics.Did_you_mean_to_mark_this_function_as_async);
                        (0, ts_1.addRelatedInfo)(diagnostic, relatedInfo);
                    }
                    diagnostics.add(diagnostic);
                }
            }
        }
        if (isInParameterInitializerBeforeContainingFunction(node)) {
            error(node, ts_1.Diagnostics.await_expressions_cannot_be_used_in_a_parameter_initializer);
        }
    }
    function checkAwaitExpression(node) {
        addLazyDiagnostic(function () { return checkAwaitExpressionGrammar(node); });
        var operandType = checkExpression(node.expression);
        var awaitedType = checkAwaitedType(operandType, /*withAlias*/ true, node, ts_1.Diagnostics.Type_of_await_operand_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member);
        if (awaitedType === operandType && !isErrorType(awaitedType) && !(operandType.flags & 3 /* TypeFlags.AnyOrUnknown */)) {
            addErrorOrSuggestion(/*isError*/ false, (0, ts_1.createDiagnosticForNode)(node, ts_1.Diagnostics.await_has_no_effect_on_the_type_of_this_expression));
        }
        return awaitedType;
    }
    function checkPrefixUnaryExpression(node) {
        var operandType = checkExpression(node.operand);
        if (operandType === silentNeverType) {
            return silentNeverType;
        }
        switch (node.operand.kind) {
            case 9 /* SyntaxKind.NumericLiteral */:
                switch (node.operator) {
                    case 41 /* SyntaxKind.MinusToken */:
                        return getFreshTypeOfLiteralType(getNumberLiteralType(-node.operand.text));
                    case 40 /* SyntaxKind.PlusToken */:
                        return getFreshTypeOfLiteralType(getNumberLiteralType(+node.operand.text));
                }
                break;
            case 10 /* SyntaxKind.BigIntLiteral */:
                if (node.operator === 41 /* SyntaxKind.MinusToken */) {
                    return getFreshTypeOfLiteralType(getBigIntLiteralType({
                        negative: true,
                        base10Value: (0, ts_1.parsePseudoBigInt)(node.operand.text)
                    }));
                }
        }
        switch (node.operator) {
            case 40 /* SyntaxKind.PlusToken */:
            case 41 /* SyntaxKind.MinusToken */:
            case 55 /* SyntaxKind.TildeToken */:
                checkNonNullType(operandType, node.operand);
                if (maybeTypeOfKindConsideringBaseConstraint(operandType, 12288 /* TypeFlags.ESSymbolLike */)) {
                    error(node.operand, ts_1.Diagnostics.The_0_operator_cannot_be_applied_to_type_symbol, (0, ts_1.tokenToString)(node.operator));
                }
                if (node.operator === 40 /* SyntaxKind.PlusToken */) {
                    if (maybeTypeOfKindConsideringBaseConstraint(operandType, 2112 /* TypeFlags.BigIntLike */)) {
                        error(node.operand, ts_1.Diagnostics.Operator_0_cannot_be_applied_to_type_1, (0, ts_1.tokenToString)(node.operator), typeToString(getBaseTypeOfLiteralType(operandType)));
                    }
                    return numberType;
                }
                return getUnaryResultType(operandType);
            case 54 /* SyntaxKind.ExclamationToken */:
                checkTruthinessOfType(operandType, node.operand);
                var facts = getTypeFacts(operandType) & (4194304 /* TypeFacts.Truthy */ | 8388608 /* TypeFacts.Falsy */);
                return facts === 4194304 /* TypeFacts.Truthy */ ? falseType :
                    facts === 8388608 /* TypeFacts.Falsy */ ? trueType :
                        booleanType;
            case 46 /* SyntaxKind.PlusPlusToken */:
            case 47 /* SyntaxKind.MinusMinusToken */:
                var ok = checkArithmeticOperandType(node.operand, checkNonNullType(operandType, node.operand), ts_1.Diagnostics.An_arithmetic_operand_must_be_of_type_any_number_bigint_or_an_enum_type);
                if (ok) {
                    // run check only if former checks succeeded to avoid reporting cascading errors
                    checkReferenceExpression(node.operand, ts_1.Diagnostics.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access, ts_1.Diagnostics.The_operand_of_an_increment_or_decrement_operator_may_not_be_an_optional_property_access);
                }
                return getUnaryResultType(operandType);
        }
        return errorType;
    }
    function checkPostfixUnaryExpression(node) {
        var operandType = checkExpression(node.operand);
        if (operandType === silentNeverType) {
            return silentNeverType;
        }
        var ok = checkArithmeticOperandType(node.operand, checkNonNullType(operandType, node.operand), ts_1.Diagnostics.An_arithmetic_operand_must_be_of_type_any_number_bigint_or_an_enum_type);
        if (ok) {
            // run check only if former checks succeeded to avoid reporting cascading errors
            checkReferenceExpression(node.operand, ts_1.Diagnostics.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access, ts_1.Diagnostics.The_operand_of_an_increment_or_decrement_operator_may_not_be_an_optional_property_access);
        }
        return getUnaryResultType(operandType);
    }
    function getUnaryResultType(operandType) {
        if (maybeTypeOfKind(operandType, 2112 /* TypeFlags.BigIntLike */)) {
            return isTypeAssignableToKind(operandType, 3 /* TypeFlags.AnyOrUnknown */) || maybeTypeOfKind(operandType, 296 /* TypeFlags.NumberLike */)
                ? numberOrBigIntType
                : bigintType;
        }
        // If it's not a bigint type, implicit coercion will result in a number
        return numberType;
    }
    function maybeTypeOfKindConsideringBaseConstraint(type, kind) {
        if (maybeTypeOfKind(type, kind)) {
            return true;
        }
        var baseConstraint = getBaseConstraintOrType(type);
        return !!baseConstraint && maybeTypeOfKind(baseConstraint, kind);
    }
    // Return true if type might be of the given kind. A union or intersection type might be of a given
    // kind if at least one constituent type is of the given kind.
    function maybeTypeOfKind(type, kind) {
        if (type.flags & kind) {
            return true;
        }
        if (type.flags & 3145728 /* TypeFlags.UnionOrIntersection */) {
            var types = type.types;
            for (var _i = 0, types_20 = types; _i < types_20.length; _i++) {
                var t = types_20[_i];
                if (maybeTypeOfKind(t, kind)) {
                    return true;
                }
            }
        }
        return false;
    }
    function isTypeAssignableToKind(source, kind, strict) {
        if (source.flags & kind) {
            return true;
        }
        if (strict && source.flags & (3 /* TypeFlags.AnyOrUnknown */ | 16384 /* TypeFlags.Void */ | 32768 /* TypeFlags.Undefined */ | 65536 /* TypeFlags.Null */)) {
            return false;
        }
        return !!(kind & 296 /* TypeFlags.NumberLike */) && isTypeAssignableTo(source, numberType) ||
            !!(kind & 2112 /* TypeFlags.BigIntLike */) && isTypeAssignableTo(source, bigintType) ||
            !!(kind & 402653316 /* TypeFlags.StringLike */) && isTypeAssignableTo(source, stringType) ||
            !!(kind & 528 /* TypeFlags.BooleanLike */) && isTypeAssignableTo(source, booleanType) ||
            !!(kind & 16384 /* TypeFlags.Void */) && isTypeAssignableTo(source, voidType) ||
            !!(kind & 131072 /* TypeFlags.Never */) && isTypeAssignableTo(source, neverType) ||
            !!(kind & 65536 /* TypeFlags.Null */) && isTypeAssignableTo(source, nullType) ||
            !!(kind & 32768 /* TypeFlags.Undefined */) && isTypeAssignableTo(source, undefinedType) ||
            !!(kind & 4096 /* TypeFlags.ESSymbol */) && isTypeAssignableTo(source, esSymbolType) ||
            !!(kind & 67108864 /* TypeFlags.NonPrimitive */) && isTypeAssignableTo(source, nonPrimitiveType);
    }
    function allTypesAssignableToKind(source, kind, strict) {
        return source.flags & 1048576 /* TypeFlags.Union */ ?
            (0, ts_1.every)(source.types, function (subType) { return allTypesAssignableToKind(subType, kind, strict); }) :
            isTypeAssignableToKind(source, kind, strict);
    }
    function isConstEnumObjectType(type) {
        return !!((0, ts_1.getObjectFlags)(type) & 16 /* ObjectFlags.Anonymous */) && !!type.symbol && isConstEnumSymbol(type.symbol);
    }
    function isConstEnumSymbol(symbol) {
        return (symbol.flags & 128 /* SymbolFlags.ConstEnum */) !== 0;
    }
    function checkInstanceOfExpression(left, right, leftType, rightType) {
        if (leftType === silentNeverType || rightType === silentNeverType) {
            return silentNeverType;
        }
        // TypeScript 1.0 spec (April 2014): 4.15.4
        // The instanceof operator requires the left operand to be of type Any, an object type, or a type parameter type,
        // and the right operand to be of type Any, a subtype of the 'Function' interface type, or have a call or construct signature.
        // The result is always of the Boolean primitive type.
        // NOTE: do not raise error if leftType is unknown as related error was already reported
        if (!isTypeAny(leftType) &&
            allTypesAssignableToKind(leftType, 402784252 /* TypeFlags.Primitive */)) {
            error(left, ts_1.Diagnostics.The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter);
        }
        // NOTE: do not raise error if right is unknown as related error was already reported
        if (!(isTypeAny(rightType) || typeHasCallOrConstructSignatures(rightType) || isTypeSubtypeOf(rightType, globalFunctionType))) {
            error(right, ts_1.Diagnostics.The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type);
        }
        return booleanType;
    }
    function hasEmptyObjectIntersection(type) {
        return someType(type, function (t) { return t === unknownEmptyObjectType || !!(t.flags & 2097152 /* TypeFlags.Intersection */) && isEmptyAnonymousObjectType(getBaseConstraintOrType(t)); });
    }
    function checkInExpression(left, right, leftType, rightType) {
        if (leftType === silentNeverType || rightType === silentNeverType) {
            return silentNeverType;
        }
        if ((0, ts_1.isPrivateIdentifier)(left)) {
            if (languageVersion < 99 /* ScriptTarget.ESNext */) {
                checkExternalEmitHelpers(left, 2097152 /* ExternalEmitHelpers.ClassPrivateFieldIn */);
            }
            // Unlike in 'checkPrivateIdentifierExpression' we now have access to the RHS type
            // which provides us with the opportunity to emit more detailed errors
            if (!getNodeLinks(left).resolvedSymbol && (0, ts_1.getContainingClass)(left)) {
                var isUncheckedJS = isUncheckedJSSuggestion(left, rightType.symbol, /*excludeClasses*/ true);
                reportNonexistentProperty(left, rightType, isUncheckedJS);
            }
        }
        else {
            // The type of the lef operand must be assignable to string, number, or symbol.
            checkTypeAssignableTo(checkNonNullType(leftType, left), stringNumberSymbolType, left);
        }
        // The type of the right operand must be assignable to 'object'.
        if (checkTypeAssignableTo(checkNonNullType(rightType, right), nonPrimitiveType, right)) {
            // The {} type is assignable to the object type, yet {} might represent a primitive type. Here we
            // detect and error on {} that results from narrowing the unknown type, as well as intersections
            // that include {} (we know that the other types in such intersections are assignable to object
            // since we already checked for that).
            if (hasEmptyObjectIntersection(rightType)) {
                error(right, ts_1.Diagnostics.Type_0_may_represent_a_primitive_value_which_is_not_permitted_as_the_right_operand_of_the_in_operator, typeToString(rightType));
            }
        }
        // The result is always of the Boolean primitive type.
        return booleanType;
    }
    function checkObjectLiteralAssignment(node, sourceType, rightIsThis) {
        var properties = node.properties;
        if (strictNullChecks && properties.length === 0) {
            return checkNonNullType(sourceType, node);
        }
        for (var i = 0; i < properties.length; i++) {
            checkObjectLiteralDestructuringPropertyAssignment(node, sourceType, i, properties, rightIsThis);
        }
        return sourceType;
    }
    /** Note: If property cannot be a SpreadAssignment, then allProperties does not need to be provided */
    function checkObjectLiteralDestructuringPropertyAssignment(node, objectLiteralType, propertyIndex, allProperties, rightIsThis) {
        if (rightIsThis === void 0) { rightIsThis = false; }
        var properties = node.properties;
        var property = properties[propertyIndex];
        if (property.kind === 302 /* SyntaxKind.PropertyAssignment */ || property.kind === 303 /* SyntaxKind.ShorthandPropertyAssignment */) {
            var name_31 = property.name;
            var exprType = getLiteralTypeFromPropertyName(name_31);
            if (isTypeUsableAsPropertyName(exprType)) {
                var text = getPropertyNameFromType(exprType);
                var prop = getPropertyOfType(objectLiteralType, text);
                if (prop) {
                    markPropertyAsReferenced(prop, property, rightIsThis);
                    checkPropertyAccessibility(property, /*isSuper*/ false, /*writing*/ true, objectLiteralType, prop);
                }
            }
            var elementType = getIndexedAccessType(objectLiteralType, exprType, 32 /* AccessFlags.ExpressionPosition */, name_31);
            var type = getFlowTypeOfDestructuring(property, elementType);
            return checkDestructuringAssignment(property.kind === 303 /* SyntaxKind.ShorthandPropertyAssignment */ ? property : property.initializer, type);
        }
        else if (property.kind === 304 /* SyntaxKind.SpreadAssignment */) {
            if (propertyIndex < properties.length - 1) {
                error(property, ts_1.Diagnostics.A_rest_element_must_be_last_in_a_destructuring_pattern);
            }
            else {
                if (languageVersion < 99 /* ScriptTarget.ESNext */) {
                    checkExternalEmitHelpers(property, 4 /* ExternalEmitHelpers.Rest */);
                }
                var nonRestNames = [];
                if (allProperties) {
                    for (var _i = 0, allProperties_1 = allProperties; _i < allProperties_1.length; _i++) {
                        var otherProperty = allProperties_1[_i];
                        if (!(0, ts_1.isSpreadAssignment)(otherProperty)) {
                            nonRestNames.push(otherProperty.name);
                        }
                    }
                }
                var type = getRestType(objectLiteralType, nonRestNames, objectLiteralType.symbol);
                checkGrammarForDisallowedTrailingComma(allProperties, ts_1.Diagnostics.A_rest_parameter_or_binding_pattern_may_not_have_a_trailing_comma);
                return checkDestructuringAssignment(property.expression, type);
            }
        }
        else {
            error(property, ts_1.Diagnostics.Property_assignment_expected);
        }
    }
    function checkArrayLiteralAssignment(node, sourceType, checkMode) {
        var elements = node.elements;
        if (languageVersion < 2 /* ScriptTarget.ES2015 */ && compilerOptions.downlevelIteration) {
            checkExternalEmitHelpers(node, 512 /* ExternalEmitHelpers.Read */);
        }
        // This elementType will be used if the specific property corresponding to this index is not
        // present (aka the tuple element property). This call also checks that the parentType is in
        // fact an iterable or array (depending on target language).
        var possiblyOutOfBoundsType = checkIteratedTypeOrElementType(65 /* IterationUse.Destructuring */ | 128 /* IterationUse.PossiblyOutOfBounds */, sourceType, undefinedType, node) || errorType;
        var inBoundsType = compilerOptions.noUncheckedIndexedAccess ? undefined : possiblyOutOfBoundsType;
        for (var i = 0; i < elements.length; i++) {
            var type = possiblyOutOfBoundsType;
            if (node.elements[i].kind === 229 /* SyntaxKind.SpreadElement */) {
                type = inBoundsType = inBoundsType !== null && inBoundsType !== void 0 ? inBoundsType : (checkIteratedTypeOrElementType(65 /* IterationUse.Destructuring */, sourceType, undefinedType, node) || errorType);
            }
            checkArrayLiteralDestructuringElementAssignment(node, sourceType, i, type, checkMode);
        }
        return sourceType;
    }
    function checkArrayLiteralDestructuringElementAssignment(node, sourceType, elementIndex, elementType, checkMode) {
        var elements = node.elements;
        var element = elements[elementIndex];
        if (element.kind !== 231 /* SyntaxKind.OmittedExpression */) {
            if (element.kind !== 229 /* SyntaxKind.SpreadElement */) {
                var indexType = getNumberLiteralType(elementIndex);
                if (isArrayLikeType(sourceType)) {
                    // We create a synthetic expression so that getIndexedAccessType doesn't get confused
                    // when the element is a SyntaxKind.ElementAccessExpression.
                    var accessFlags = 32 /* AccessFlags.ExpressionPosition */ | (hasDefaultValue(element) ? 16 /* AccessFlags.NoTupleBoundsCheck */ : 0);
                    var elementType_1 = getIndexedAccessTypeOrUndefined(sourceType, indexType, accessFlags, createSyntheticExpression(element, indexType)) || errorType;
                    var assignedType = hasDefaultValue(element) ? getTypeWithFacts(elementType_1, 524288 /* TypeFacts.NEUndefined */) : elementType_1;
                    var type = getFlowTypeOfDestructuring(element, assignedType);
                    return checkDestructuringAssignment(element, type, checkMode);
                }
                return checkDestructuringAssignment(element, elementType, checkMode);
            }
            if (elementIndex < elements.length - 1) {
                error(element, ts_1.Diagnostics.A_rest_element_must_be_last_in_a_destructuring_pattern);
            }
            else {
                var restExpression = element.expression;
                if (restExpression.kind === 225 /* SyntaxKind.BinaryExpression */ && restExpression.operatorToken.kind === 64 /* SyntaxKind.EqualsToken */) {
                    error(restExpression.operatorToken, ts_1.Diagnostics.A_rest_element_cannot_have_an_initializer);
                }
                else {
                    checkGrammarForDisallowedTrailingComma(node.elements, ts_1.Diagnostics.A_rest_parameter_or_binding_pattern_may_not_have_a_trailing_comma);
                    var type = everyType(sourceType, isTupleType) ?
                        mapType(sourceType, function (t) { return sliceTupleType(t, elementIndex); }) :
                        createArrayType(elementType);
                    return checkDestructuringAssignment(restExpression, type, checkMode);
                }
            }
        }
        return undefined;
    }
    function checkDestructuringAssignment(exprOrAssignment, sourceType, checkMode, rightIsThis) {
        var target;
        if (exprOrAssignment.kind === 303 /* SyntaxKind.ShorthandPropertyAssignment */) {
            var prop = exprOrAssignment;
            if (prop.objectAssignmentInitializer) {
                // In strict null checking mode, if a default value of a non-undefined type is specified, remove
                // undefined from the final type.
                if (strictNullChecks &&
                    !(getTypeFacts(checkExpression(prop.objectAssignmentInitializer)) & 16777216 /* TypeFacts.IsUndefined */)) {
                    sourceType = getTypeWithFacts(sourceType, 524288 /* TypeFacts.NEUndefined */);
                }
                checkBinaryLikeExpression(prop.name, prop.equalsToken, prop.objectAssignmentInitializer, checkMode);
            }
            target = exprOrAssignment.name;
        }
        else {
            target = exprOrAssignment;
        }
        if (target.kind === 225 /* SyntaxKind.BinaryExpression */ && target.operatorToken.kind === 64 /* SyntaxKind.EqualsToken */) {
            checkBinaryExpression(target, checkMode);
            target = target.left;
            // A default value is specified, so remove undefined from the final type.
            if (strictNullChecks) {
                sourceType = getTypeWithFacts(sourceType, 524288 /* TypeFacts.NEUndefined */);
            }
        }
        if (target.kind === 209 /* SyntaxKind.ObjectLiteralExpression */) {
            return checkObjectLiteralAssignment(target, sourceType, rightIsThis);
        }
        if (target.kind === 208 /* SyntaxKind.ArrayLiteralExpression */) {
            return checkArrayLiteralAssignment(target, sourceType, checkMode);
        }
        return checkReferenceAssignment(target, sourceType, checkMode);
    }
    function checkReferenceAssignment(target, sourceType, checkMode) {
        var targetType = checkExpression(target, checkMode);
        var error = target.parent.kind === 304 /* SyntaxKind.SpreadAssignment */ ?
            ts_1.Diagnostics.The_target_of_an_object_rest_assignment_must_be_a_variable_or_a_property_access :
            ts_1.Diagnostics.The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access;
        var optionalError = target.parent.kind === 304 /* SyntaxKind.SpreadAssignment */ ?
            ts_1.Diagnostics.The_target_of_an_object_rest_assignment_may_not_be_an_optional_property_access :
            ts_1.Diagnostics.The_left_hand_side_of_an_assignment_expression_may_not_be_an_optional_property_access;
        if (checkReferenceExpression(target, error, optionalError)) {
            checkTypeAssignableToAndOptionallyElaborate(sourceType, targetType, target, target);
        }
        if ((0, ts_1.isPrivateIdentifierPropertyAccessExpression)(target)) {
            checkExternalEmitHelpers(target.parent, 1048576 /* ExternalEmitHelpers.ClassPrivateFieldSet */);
        }
        return sourceType;
    }
    /**
     * This is a *shallow* check: An expression is side-effect-free if the
     * evaluation of the expression *itself* cannot produce side effects.
     * For example, x++ / 3 is side-effect free because the / operator
     * does not have side effects.
     * The intent is to "smell test" an expression for correctness in positions where
     * its value is discarded (e.g. the left side of the comma operator).
     */
    function isSideEffectFree(node) {
        node = (0, ts_1.skipParentheses)(node);
        switch (node.kind) {
            case 80 /* SyntaxKind.Identifier */:
            case 11 /* SyntaxKind.StringLiteral */:
            case 14 /* SyntaxKind.RegularExpressionLiteral */:
            case 214 /* SyntaxKind.TaggedTemplateExpression */:
            case 227 /* SyntaxKind.TemplateExpression */:
            case 15 /* SyntaxKind.NoSubstitutionTemplateLiteral */:
            case 9 /* SyntaxKind.NumericLiteral */:
            case 10 /* SyntaxKind.BigIntLiteral */:
            case 112 /* SyntaxKind.TrueKeyword */:
            case 97 /* SyntaxKind.FalseKeyword */:
            case 106 /* SyntaxKind.NullKeyword */:
            case 157 /* SyntaxKind.UndefinedKeyword */:
            case 217 /* SyntaxKind.FunctionExpression */:
            case 230 /* SyntaxKind.ClassExpression */:
            case 218 /* SyntaxKind.ArrowFunction */:
            case 208 /* SyntaxKind.ArrayLiteralExpression */:
            case 209 /* SyntaxKind.ObjectLiteralExpression */:
            case 220 /* SyntaxKind.TypeOfExpression */:
            case 234 /* SyntaxKind.NonNullExpression */:
            case 284 /* SyntaxKind.JsxSelfClosingElement */:
            case 283 /* SyntaxKind.JsxElement */:
                return true;
            case 226 /* SyntaxKind.ConditionalExpression */:
                return isSideEffectFree(node.whenTrue) &&
                    isSideEffectFree(node.whenFalse);
            case 225 /* SyntaxKind.BinaryExpression */:
                if ((0, ts_1.isAssignmentOperator)(node.operatorToken.kind)) {
                    return false;
                }
                return isSideEffectFree(node.left) &&
                    isSideEffectFree(node.right);
            case 223 /* SyntaxKind.PrefixUnaryExpression */:
            case 224 /* SyntaxKind.PostfixUnaryExpression */:
                // Unary operators ~, !, +, and - have no side effects.
                // The rest do.
                switch (node.operator) {
                    case 54 /* SyntaxKind.ExclamationToken */:
                    case 40 /* SyntaxKind.PlusToken */:
                    case 41 /* SyntaxKind.MinusToken */:
                    case 55 /* SyntaxKind.TildeToken */:
                        return true;
                }
                return false;
            // Some forms listed here for clarity
            case 221 /* SyntaxKind.VoidExpression */: // Explicit opt-out
            case 215 /* SyntaxKind.TypeAssertionExpression */: // Not SEF, but can produce useful type warnings
            case 233 /* SyntaxKind.AsExpression */: // Not SEF, but can produce useful type warnings
            default:
                return false;
        }
    }
    function isTypeEqualityComparableTo(source, target) {
        return (target.flags & 98304 /* TypeFlags.Nullable */) !== 0 || isTypeComparableTo(source, target);
    }
    function createCheckBinaryExpression() {
        var trampoline = (0, ts_1.createBinaryExpressionTrampoline)(onEnter, onLeft, onOperator, onRight, onExit, foldState);
        return function (node, checkMode) {
            var result = trampoline(node, checkMode);
            ts_1.Debug.assertIsDefined(result);
            return result;
        };
        function onEnter(node, state, checkMode) {
            if (state) {
                state.stackIndex++;
                state.skip = false;
                setLeftType(state, /*type*/ undefined);
                setLastResult(state, /*type*/ undefined);
            }
            else {
                state = {
                    checkMode: checkMode,
                    skip: false,
                    stackIndex: 0,
                    typeStack: [undefined, undefined],
                };
            }
            if ((0, ts_1.isInJSFile)(node) && (0, ts_1.getAssignedExpandoInitializer)(node)) {
                state.skip = true;
                setLastResult(state, checkExpression(node.right, checkMode));
                return state;
            }
            checkGrammarNullishCoalesceWithLogicalExpression(node);
            var operator = node.operatorToken.kind;
            if (operator === 64 /* SyntaxKind.EqualsToken */ && (node.left.kind === 209 /* SyntaxKind.ObjectLiteralExpression */ || node.left.kind === 208 /* SyntaxKind.ArrayLiteralExpression */)) {
                state.skip = true;
                setLastResult(state, checkDestructuringAssignment(node.left, checkExpression(node.right, checkMode), checkMode, node.right.kind === 110 /* SyntaxKind.ThisKeyword */));
                return state;
            }
            return state;
        }
        function onLeft(left, state, _node) {
            if (!state.skip) {
                return maybeCheckExpression(state, left);
            }
        }
        function onOperator(operatorToken, state, node) {
            if (!state.skip) {
                var leftType = getLastResult(state);
                ts_1.Debug.assertIsDefined(leftType);
                setLeftType(state, leftType);
                setLastResult(state, /*type*/ undefined);
                var operator = operatorToken.kind;
                if ((0, ts_1.isLogicalOrCoalescingBinaryOperator)(operator)) {
                    var parent_16 = node.parent;
                    while (parent_16.kind === 216 /* SyntaxKind.ParenthesizedExpression */ || (0, ts_1.isLogicalOrCoalescingBinaryExpression)(parent_16)) {
                        parent_16 = parent_16.parent;
                    }
                    if (operator === 56 /* SyntaxKind.AmpersandAmpersandToken */ || (0, ts_1.isIfStatement)(parent_16)) {
                        checkTestingKnownTruthyCallableOrAwaitableType(node.left, leftType, (0, ts_1.isIfStatement)(parent_16) ? parent_16.thenStatement : undefined);
                    }
                    checkTruthinessOfType(leftType, node.left);
                }
            }
        }
        function onRight(right, state, _node) {
            if (!state.skip) {
                return maybeCheckExpression(state, right);
            }
        }
        function onExit(node, state) {
            var result;
            if (state.skip) {
                result = getLastResult(state);
            }
            else {
                var leftType = getLeftType(state);
                ts_1.Debug.assertIsDefined(leftType);
                var rightType = getLastResult(state);
                ts_1.Debug.assertIsDefined(rightType);
                result = checkBinaryLikeExpressionWorker(node.left, node.operatorToken, node.right, leftType, rightType, state.checkMode, node);
            }
            state.skip = false;
            setLeftType(state, /*type*/ undefined);
            setLastResult(state, /*type*/ undefined);
            state.stackIndex--;
            return result;
        }
        function foldState(state, result, _side) {
            setLastResult(state, result);
            return state;
        }
        function maybeCheckExpression(state, node) {
            if ((0, ts_1.isBinaryExpression)(node)) {
                return node;
            }
            setLastResult(state, checkExpression(node, state.checkMode));
        }
        function getLeftType(state) {
            return state.typeStack[state.stackIndex];
        }
        function setLeftType(state, type) {
            state.typeStack[state.stackIndex] = type;
        }
        function getLastResult(state) {
            return state.typeStack[state.stackIndex + 1];
        }
        function setLastResult(state, type) {
            // To reduce overhead, reuse the next stack entry to store the
            // last result. This avoids the overhead of an additional property
            // on `WorkArea` and reuses empty stack entries as we walk back up
            // the stack.
            state.typeStack[state.stackIndex + 1] = type;
        }
    }
    function checkGrammarNullishCoalesceWithLogicalExpression(node) {
        var left = node.left, operatorToken = node.operatorToken, right = node.right;
        if (operatorToken.kind === 61 /* SyntaxKind.QuestionQuestionToken */) {
            if ((0, ts_1.isBinaryExpression)(left) && (left.operatorToken.kind === 57 /* SyntaxKind.BarBarToken */ || left.operatorToken.kind === 56 /* SyntaxKind.AmpersandAmpersandToken */)) {
                grammarErrorOnNode(left, ts_1.Diagnostics._0_and_1_operations_cannot_be_mixed_without_parentheses, (0, ts_1.tokenToString)(left.operatorToken.kind), (0, ts_1.tokenToString)(operatorToken.kind));
            }
            if ((0, ts_1.isBinaryExpression)(right) && (right.operatorToken.kind === 57 /* SyntaxKind.BarBarToken */ || right.operatorToken.kind === 56 /* SyntaxKind.AmpersandAmpersandToken */)) {
                grammarErrorOnNode(right, ts_1.Diagnostics._0_and_1_operations_cannot_be_mixed_without_parentheses, (0, ts_1.tokenToString)(right.operatorToken.kind), (0, ts_1.tokenToString)(operatorToken.kind));
            }
        }
    }
    // Note that this and `checkBinaryExpression` above should behave mostly the same, except this elides some
    // expression-wide checks and does not use a work stack to fold nested binary expressions into the same callstack frame
    function checkBinaryLikeExpression(left, operatorToken, right, checkMode, errorNode) {
        var operator = operatorToken.kind;
        if (operator === 64 /* SyntaxKind.EqualsToken */ && (left.kind === 209 /* SyntaxKind.ObjectLiteralExpression */ || left.kind === 208 /* SyntaxKind.ArrayLiteralExpression */)) {
            return checkDestructuringAssignment(left, checkExpression(right, checkMode), checkMode, right.kind === 110 /* SyntaxKind.ThisKeyword */);
        }
        var leftType;
        if ((0, ts_1.isLogicalOrCoalescingBinaryOperator)(operator)) {
            leftType = checkTruthinessExpression(left, checkMode);
        }
        else {
            leftType = checkExpression(left, checkMode);
        }
        var rightType = checkExpression(right, checkMode);
        return checkBinaryLikeExpressionWorker(left, operatorToken, right, leftType, rightType, checkMode, errorNode);
    }
    function checkBinaryLikeExpressionWorker(left, operatorToken, right, leftType, rightType, checkMode, errorNode) {
        var operator = operatorToken.kind;
        switch (operator) {
            case 42 /* SyntaxKind.AsteriskToken */:
            case 43 /* SyntaxKind.AsteriskAsteriskToken */:
            case 67 /* SyntaxKind.AsteriskEqualsToken */:
            case 68 /* SyntaxKind.AsteriskAsteriskEqualsToken */:
            case 44 /* SyntaxKind.SlashToken */:
            case 69 /* SyntaxKind.SlashEqualsToken */:
            case 45 /* SyntaxKind.PercentToken */:
            case 70 /* SyntaxKind.PercentEqualsToken */:
            case 41 /* SyntaxKind.MinusToken */:
            case 66 /* SyntaxKind.MinusEqualsToken */:
            case 48 /* SyntaxKind.LessThanLessThanToken */:
            case 71 /* SyntaxKind.LessThanLessThanEqualsToken */:
            case 49 /* SyntaxKind.GreaterThanGreaterThanToken */:
            case 72 /* SyntaxKind.GreaterThanGreaterThanEqualsToken */:
            case 50 /* SyntaxKind.GreaterThanGreaterThanGreaterThanToken */:
            case 73 /* SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken */:
            case 52 /* SyntaxKind.BarToken */:
            case 75 /* SyntaxKind.BarEqualsToken */:
            case 53 /* SyntaxKind.CaretToken */:
            case 79 /* SyntaxKind.CaretEqualsToken */:
            case 51 /* SyntaxKind.AmpersandToken */:
            case 74 /* SyntaxKind.AmpersandEqualsToken */:
                if (leftType === silentNeverType || rightType === silentNeverType) {
                    return silentNeverType;
                }
                leftType = checkNonNullType(leftType, left);
                rightType = checkNonNullType(rightType, right);
                var suggestedOperator = void 0;
                // if a user tries to apply a bitwise operator to 2 boolean operands
                // try and return them a helpful suggestion
                if ((leftType.flags & 528 /* TypeFlags.BooleanLike */) &&
                    (rightType.flags & 528 /* TypeFlags.BooleanLike */) &&
                    (suggestedOperator = getSuggestedBooleanOperator(operatorToken.kind)) !== undefined) {
                    error(errorNode || operatorToken, ts_1.Diagnostics.The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead, (0, ts_1.tokenToString)(operatorToken.kind), (0, ts_1.tokenToString)(suggestedOperator));
                    return numberType;
                }
                else {
                    // otherwise just check each operand separately and report errors as normal
                    var leftOk = checkArithmeticOperandType(left, leftType, ts_1.Diagnostics.The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type, /*isAwaitValid*/ true);
                    var rightOk = checkArithmeticOperandType(right, rightType, ts_1.Diagnostics.The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type, /*isAwaitValid*/ true);
                    var resultType_1;
                    // If both are any or unknown, allow operation; assume it will resolve to number
                    if ((isTypeAssignableToKind(leftType, 3 /* TypeFlags.AnyOrUnknown */) && isTypeAssignableToKind(rightType, 3 /* TypeFlags.AnyOrUnknown */)) ||
                        // Or, if neither could be bigint, implicit coercion results in a number result
                        !(maybeTypeOfKind(leftType, 2112 /* TypeFlags.BigIntLike */) || maybeTypeOfKind(rightType, 2112 /* TypeFlags.BigIntLike */))) {
                        resultType_1 = numberType;
                    }
                    // At least one is assignable to bigint, so check that both are
                    else if (bothAreBigIntLike(leftType, rightType)) {
                        switch (operator) {
                            case 50 /* SyntaxKind.GreaterThanGreaterThanGreaterThanToken */:
                            case 73 /* SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken */:
                                reportOperatorError();
                                break;
                            case 43 /* SyntaxKind.AsteriskAsteriskToken */:
                            case 68 /* SyntaxKind.AsteriskAsteriskEqualsToken */:
                                if (languageVersion < 3 /* ScriptTarget.ES2016 */) {
                                    error(errorNode, ts_1.Diagnostics.Exponentiation_cannot_be_performed_on_bigint_values_unless_the_target_option_is_set_to_es2016_or_later);
                                }
                        }
                        resultType_1 = bigintType;
                    }
                    // Exactly one of leftType/rightType is assignable to bigint
                    else {
                        reportOperatorError(bothAreBigIntLike);
                        resultType_1 = errorType;
                    }
                    if (leftOk && rightOk) {
                        checkAssignmentOperator(resultType_1);
                    }
                    return resultType_1;
                }
            case 40 /* SyntaxKind.PlusToken */:
            case 65 /* SyntaxKind.PlusEqualsToken */:
                if (leftType === silentNeverType || rightType === silentNeverType) {
                    return silentNeverType;
                }
                if (!isTypeAssignableToKind(leftType, 402653316 /* TypeFlags.StringLike */) && !isTypeAssignableToKind(rightType, 402653316 /* TypeFlags.StringLike */)) {
                    leftType = checkNonNullType(leftType, left);
                    rightType = checkNonNullType(rightType, right);
                }
                var resultType = void 0;
                if (isTypeAssignableToKind(leftType, 296 /* TypeFlags.NumberLike */, /*strict*/ true) && isTypeAssignableToKind(rightType, 296 /* TypeFlags.NumberLike */, /*strict*/ true)) {
                    // Operands of an enum type are treated as having the primitive type Number.
                    // If both operands are of the Number primitive type, the result is of the Number primitive type.
                    resultType = numberType;
                }
                else if (isTypeAssignableToKind(leftType, 2112 /* TypeFlags.BigIntLike */, /*strict*/ true) && isTypeAssignableToKind(rightType, 2112 /* TypeFlags.BigIntLike */, /*strict*/ true)) {
                    // If both operands are of the BigInt primitive type, the result is of the BigInt primitive type.
                    resultType = bigintType;
                }
                else if (isTypeAssignableToKind(leftType, 402653316 /* TypeFlags.StringLike */, /*strict*/ true) || isTypeAssignableToKind(rightType, 402653316 /* TypeFlags.StringLike */, /*strict*/ true)) {
                    // If one or both operands are of the String primitive type, the result is of the String primitive type.
                    resultType = stringType;
                }
                else if (isTypeAny(leftType) || isTypeAny(rightType)) {
                    // Otherwise, the result is of type Any.
                    // NOTE: unknown type here denotes error type. Old compiler treated this case as any type so do we.
                    resultType = isErrorType(leftType) || isErrorType(rightType) ? errorType : anyType;
                }
                // Symbols are not allowed at all in arithmetic expressions
                if (resultType && !checkForDisallowedESSymbolOperand(operator)) {
                    return resultType;
                }
                if (!resultType) {
                    // Types that have a reasonably good chance of being a valid operand type.
                    // If both types have an awaited type of one of these, we'll assume the user
                    // might be missing an await without doing an exhaustive check that inserting
                    // await(s) will actually be a completely valid binary expression.
                    var closeEnoughKind_1 = 296 /* TypeFlags.NumberLike */ | 2112 /* TypeFlags.BigIntLike */ | 402653316 /* TypeFlags.StringLike */ | 3 /* TypeFlags.AnyOrUnknown */;
                    reportOperatorError(function (left, right) {
                        return isTypeAssignableToKind(left, closeEnoughKind_1) &&
                            isTypeAssignableToKind(right, closeEnoughKind_1);
                    });
                    return anyType;
                }
                if (operator === 65 /* SyntaxKind.PlusEqualsToken */) {
                    checkAssignmentOperator(resultType);
                }
                return resultType;
            case 30 /* SyntaxKind.LessThanToken */:
            case 32 /* SyntaxKind.GreaterThanToken */:
            case 33 /* SyntaxKind.LessThanEqualsToken */:
            case 34 /* SyntaxKind.GreaterThanEqualsToken */:
                if (checkForDisallowedESSymbolOperand(operator)) {
                    leftType = getBaseTypeOfLiteralTypeForComparison(checkNonNullType(leftType, left));
                    rightType = getBaseTypeOfLiteralTypeForComparison(checkNonNullType(rightType, right));
                    reportOperatorErrorUnless(function (left, right) {
                        if (isTypeAny(left) || isTypeAny(right)) {
                            return true;
                        }
                        var leftAssignableToNumber = isTypeAssignableTo(left, numberOrBigIntType);
                        var rightAssignableToNumber = isTypeAssignableTo(right, numberOrBigIntType);
                        return leftAssignableToNumber && rightAssignableToNumber ||
                            !leftAssignableToNumber && !rightAssignableToNumber && areTypesComparable(left, right);
                    });
                }
                return booleanType;
            case 35 /* SyntaxKind.EqualsEqualsToken */:
            case 36 /* SyntaxKind.ExclamationEqualsToken */:
            case 37 /* SyntaxKind.EqualsEqualsEqualsToken */:
            case 38 /* SyntaxKind.ExclamationEqualsEqualsToken */:
                // We suppress errors in CheckMode.TypeOnly (meaning the invocation came from getTypeOfExpression). During
                // control flow analysis it is possible for operands to temporarily have narrower types, and those narrower
                // types may cause the operands to not be comparable. We don't want such errors reported (see #46475).
                if (!(checkMode && checkMode & 128 /* CheckMode.TypeOnly */)) {
                    if (((0, ts_1.isLiteralExpressionOfObject)(left) || (0, ts_1.isLiteralExpressionOfObject)(right)) &&
                        // only report for === and !== in JS, not == or !=
                        (!(0, ts_1.isInJSFile)(left) || (operator === 37 /* SyntaxKind.EqualsEqualsEqualsToken */ || operator === 38 /* SyntaxKind.ExclamationEqualsEqualsToken */))) {
                        var eqType = operator === 35 /* SyntaxKind.EqualsEqualsToken */ || operator === 37 /* SyntaxKind.EqualsEqualsEqualsToken */;
                        error(errorNode, ts_1.Diagnostics.This_condition_will_always_return_0_since_JavaScript_compares_objects_by_reference_not_value, eqType ? "false" : "true");
                    }
                    checkNaNEquality(errorNode, operator, left, right);
                    reportOperatorErrorUnless(function (left, right) { return isTypeEqualityComparableTo(left, right) || isTypeEqualityComparableTo(right, left); });
                }
                return booleanType;
            case 104 /* SyntaxKind.InstanceOfKeyword */:
                return checkInstanceOfExpression(left, right, leftType, rightType);
            case 103 /* SyntaxKind.InKeyword */:
                return checkInExpression(left, right, leftType, rightType);
            case 56 /* SyntaxKind.AmpersandAmpersandToken */:
            case 77 /* SyntaxKind.AmpersandAmpersandEqualsToken */: {
                var resultType_2 = getTypeFacts(leftType) & 4194304 /* TypeFacts.Truthy */ ?
                    getUnionType([extractDefinitelyFalsyTypes(strictNullChecks ? leftType : getBaseTypeOfLiteralType(rightType)), rightType]) :
                    leftType;
                if (operator === 77 /* SyntaxKind.AmpersandAmpersandEqualsToken */) {
                    checkAssignmentOperator(rightType);
                }
                return resultType_2;
            }
            case 57 /* SyntaxKind.BarBarToken */:
            case 76 /* SyntaxKind.BarBarEqualsToken */: {
                var resultType_3 = getTypeFacts(leftType) & 8388608 /* TypeFacts.Falsy */ ?
                    getUnionType([getNonNullableType(removeDefinitelyFalsyTypes(leftType)), rightType], 2 /* UnionReduction.Subtype */) :
                    leftType;
                if (operator === 76 /* SyntaxKind.BarBarEqualsToken */) {
                    checkAssignmentOperator(rightType);
                }
                return resultType_3;
            }
            case 61 /* SyntaxKind.QuestionQuestionToken */:
            case 78 /* SyntaxKind.QuestionQuestionEqualsToken */: {
                var resultType_4 = getTypeFacts(leftType) & 262144 /* TypeFacts.EQUndefinedOrNull */ ?
                    getUnionType([getNonNullableType(leftType), rightType], 2 /* UnionReduction.Subtype */) :
                    leftType;
                if (operator === 78 /* SyntaxKind.QuestionQuestionEqualsToken */) {
                    checkAssignmentOperator(rightType);
                }
                return resultType_4;
            }
            case 64 /* SyntaxKind.EqualsToken */:
                var declKind = (0, ts_1.isBinaryExpression)(left.parent) ? (0, ts_1.getAssignmentDeclarationKind)(left.parent) : 0 /* AssignmentDeclarationKind.None */;
                checkAssignmentDeclaration(declKind, rightType);
                if (isAssignmentDeclaration(declKind)) {
                    if (!(rightType.flags & 524288 /* TypeFlags.Object */) ||
                        declKind !== 2 /* AssignmentDeclarationKind.ModuleExports */ &&
                            declKind !== 6 /* AssignmentDeclarationKind.Prototype */ &&
                            !isEmptyObjectType(rightType) &&
                            !isFunctionObjectType(rightType) &&
                            !((0, ts_1.getObjectFlags)(rightType) & 1 /* ObjectFlags.Class */)) {
                        // don't check assignability of module.exports=, C.prototype=, or expando types because they will necessarily be incomplete
                        checkAssignmentOperator(rightType);
                    }
                    return leftType;
                }
                else {
                    checkAssignmentOperator(rightType);
                    return rightType;
                }
            case 28 /* SyntaxKind.CommaToken */:
                if (!compilerOptions.allowUnreachableCode && isSideEffectFree(left) && !isIndirectCall(left.parent)) {
                    var sf = (0, ts_1.getSourceFileOfNode)(left);
                    var sourceText = sf.text;
                    var start_1 = (0, ts_1.skipTrivia)(sourceText, left.pos);
                    var isInDiag2657 = sf.parseDiagnostics.some(function (diag) {
                        if (diag.code !== ts_1.Diagnostics.JSX_expressions_must_have_one_parent_element.code)
                            return false;
                        return (0, ts_1.textSpanContainsPosition)(diag, start_1);
                    });
                    if (!isInDiag2657)
                        error(left, ts_1.Diagnostics.Left_side_of_comma_operator_is_unused_and_has_no_side_effects);
                }
                return rightType;
            default:
                return ts_1.Debug.fail();
        }
        function bothAreBigIntLike(left, right) {
            return isTypeAssignableToKind(left, 2112 /* TypeFlags.BigIntLike */) && isTypeAssignableToKind(right, 2112 /* TypeFlags.BigIntLike */);
        }
        function checkAssignmentDeclaration(kind, rightType) {
            if (kind === 2 /* AssignmentDeclarationKind.ModuleExports */) {
                for (var _i = 0, _a = getPropertiesOfObjectType(rightType); _i < _a.length; _i++) {
                    var prop = _a[_i];
                    var propType = getTypeOfSymbol(prop);
                    if (propType.symbol && propType.symbol.flags & 32 /* SymbolFlags.Class */) {
                        var name_32 = prop.escapedName;
                        var symbol = resolveName(prop.valueDeclaration, name_32, 788968 /* SymbolFlags.Type */, /*nameNotFoundMessage*/ undefined, name_32, /*isUse*/ false);
                        if ((symbol === null || symbol === void 0 ? void 0 : symbol.declarations) && symbol.declarations.some(ts_1.isJSDocTypedefTag)) {
                            addDuplicateDeclarationErrorsForSymbols(symbol, ts_1.Diagnostics.Duplicate_identifier_0, (0, ts_1.unescapeLeadingUnderscores)(name_32), prop);
                            addDuplicateDeclarationErrorsForSymbols(prop, ts_1.Diagnostics.Duplicate_identifier_0, (0, ts_1.unescapeLeadingUnderscores)(name_32), symbol);
                        }
                    }
                }
            }
        }
        // Return true for "indirect calls", (i.e. `(0, x.f)(...)` or `(0, eval)(...)`), which prevents passing `this`.
        function isIndirectCall(node) {
            return node.parent.kind === 216 /* SyntaxKind.ParenthesizedExpression */ &&
                (0, ts_1.isNumericLiteral)(node.left) &&
                node.left.text === "0" &&
                ((0, ts_1.isCallExpression)(node.parent.parent) && node.parent.parent.expression === node.parent || node.parent.parent.kind === 214 /* SyntaxKind.TaggedTemplateExpression */) &&
                // special-case for "eval" because it's the only non-access case where an indirect call actually affects behavior.
                ((0, ts_1.isAccessExpression)(node.right) || (0, ts_1.isIdentifier)(node.right) && node.right.escapedText === "eval");
        }
        // Return true if there was no error, false if there was an error.
        function checkForDisallowedESSymbolOperand(operator) {
            var offendingSymbolOperand = maybeTypeOfKindConsideringBaseConstraint(leftType, 12288 /* TypeFlags.ESSymbolLike */) ? left :
                maybeTypeOfKindConsideringBaseConstraint(rightType, 12288 /* TypeFlags.ESSymbolLike */) ? right :
                    undefined;
            if (offendingSymbolOperand) {
                error(offendingSymbolOperand, ts_1.Diagnostics.The_0_operator_cannot_be_applied_to_type_symbol, (0, ts_1.tokenToString)(operator));
                return false;
            }
            return true;
        }
        function getSuggestedBooleanOperator(operator) {
            switch (operator) {
                case 52 /* SyntaxKind.BarToken */:
                case 75 /* SyntaxKind.BarEqualsToken */:
                    return 57 /* SyntaxKind.BarBarToken */;
                case 53 /* SyntaxKind.CaretToken */:
                case 79 /* SyntaxKind.CaretEqualsToken */:
                    return 38 /* SyntaxKind.ExclamationEqualsEqualsToken */;
                case 51 /* SyntaxKind.AmpersandToken */:
                case 74 /* SyntaxKind.AmpersandEqualsToken */:
                    return 56 /* SyntaxKind.AmpersandAmpersandToken */;
                default:
                    return undefined;
            }
        }
        function checkAssignmentOperator(valueType) {
            if ((0, ts_1.isAssignmentOperator)(operator)) {
                addLazyDiagnostic(checkAssignmentOperatorWorker);
            }
            function checkAssignmentOperatorWorker() {
                var assigneeType = leftType;
                // getters can be a subtype of setters, so to check for assignability we use the setter's type instead
                if ((0, ts_1.isCompoundAssignment)(operatorToken.kind) && left.kind === 210 /* SyntaxKind.PropertyAccessExpression */) {
                    assigneeType = checkPropertyAccessExpression(left, /*checkMode*/ undefined, /*writeOnly*/ true);
                }
                // TypeScript 1.0 spec (April 2014): 4.17
                // An assignment of the form
                //    VarExpr = ValueExpr
                // requires VarExpr to be classified as a reference
                // A compound assignment furthermore requires VarExpr to be classified as a reference (section 4.1)
                // and the type of the non-compound operation to be assignable to the type of VarExpr.
                if (checkReferenceExpression(left, ts_1.Diagnostics.The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access, ts_1.Diagnostics.The_left_hand_side_of_an_assignment_expression_may_not_be_an_optional_property_access)) {
                    var headMessage = void 0;
                    if (exactOptionalPropertyTypes && (0, ts_1.isPropertyAccessExpression)(left) && maybeTypeOfKind(valueType, 32768 /* TypeFlags.Undefined */)) {
                        var target = getTypeOfPropertyOfType(getTypeOfExpression(left.expression), left.name.escapedText);
                        if (isExactOptionalPropertyMismatch(valueType, target)) {
                            headMessage = ts_1.Diagnostics.Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_type_of_the_target;
                        }
                    }
                    // to avoid cascading errors check assignability only if 'isReference' check succeeded and no errors were reported
                    checkTypeAssignableToAndOptionallyElaborate(valueType, assigneeType, left, right, headMessage);
                }
            }
        }
        function isAssignmentDeclaration(kind) {
            var _a;
            switch (kind) {
                case 2 /* AssignmentDeclarationKind.ModuleExports */:
                    return true;
                case 1 /* AssignmentDeclarationKind.ExportsProperty */:
                case 5 /* AssignmentDeclarationKind.Property */:
                case 6 /* AssignmentDeclarationKind.Prototype */:
                case 3 /* AssignmentDeclarationKind.PrototypeProperty */:
                case 4 /* AssignmentDeclarationKind.ThisProperty */:
                    var symbol = getSymbolOfNode(left);
                    var init = (0, ts_1.getAssignedExpandoInitializer)(right);
                    return !!init && (0, ts_1.isObjectLiteralExpression)(init) &&
                        !!((_a = symbol === null || symbol === void 0 ? void 0 : symbol.exports) === null || _a === void 0 ? void 0 : _a.size);
                default:
                    return false;
            }
        }
        /**
         * Returns true if an error is reported
         */
        function reportOperatorErrorUnless(typesAreCompatible) {
            if (!typesAreCompatible(leftType, rightType)) {
                reportOperatorError(typesAreCompatible);
                return true;
            }
            return false;
        }
        function reportOperatorError(isRelated) {
            var _a;
            var wouldWorkWithAwait = false;
            var errNode = errorNode || operatorToken;
            if (isRelated) {
                var awaitedLeftType = getAwaitedTypeNoAlias(leftType);
                var awaitedRightType = getAwaitedTypeNoAlias(rightType);
                wouldWorkWithAwait = !(awaitedLeftType === leftType && awaitedRightType === rightType)
                    && !!(awaitedLeftType && awaitedRightType)
                    && isRelated(awaitedLeftType, awaitedRightType);
            }
            var effectiveLeft = leftType;
            var effectiveRight = rightType;
            if (!wouldWorkWithAwait && isRelated) {
                _a = getBaseTypesIfUnrelated(leftType, rightType, isRelated), effectiveLeft = _a[0], effectiveRight = _a[1];
            }
            var _b = getTypeNamesForErrorDisplay(effectiveLeft, effectiveRight), leftStr = _b[0], rightStr = _b[1];
            if (!tryGiveBetterPrimaryError(errNode, wouldWorkWithAwait, leftStr, rightStr)) {
                errorAndMaybeSuggestAwait(errNode, wouldWorkWithAwait, ts_1.Diagnostics.Operator_0_cannot_be_applied_to_types_1_and_2, (0, ts_1.tokenToString)(operatorToken.kind), leftStr, rightStr);
            }
        }
        function tryGiveBetterPrimaryError(errNode, maybeMissingAwait, leftStr, rightStr) {
            switch (operatorToken.kind) {
                case 37 /* SyntaxKind.EqualsEqualsEqualsToken */:
                case 35 /* SyntaxKind.EqualsEqualsToken */:
                case 38 /* SyntaxKind.ExclamationEqualsEqualsToken */:
                case 36 /* SyntaxKind.ExclamationEqualsToken */:
                    return errorAndMaybeSuggestAwait(errNode, maybeMissingAwait, ts_1.Diagnostics.This_comparison_appears_to_be_unintentional_because_the_types_0_and_1_have_no_overlap, leftStr, rightStr);
                default:
                    return undefined;
            }
        }
        function checkNaNEquality(errorNode, operator, left, right) {
            var isLeftNaN = isGlobalNaN((0, ts_1.skipParentheses)(left));
            var isRightNaN = isGlobalNaN((0, ts_1.skipParentheses)(right));
            if (isLeftNaN || isRightNaN) {
                var err = error(errorNode, ts_1.Diagnostics.This_condition_will_always_return_0, (0, ts_1.tokenToString)(operator === 37 /* SyntaxKind.EqualsEqualsEqualsToken */ || operator === 35 /* SyntaxKind.EqualsEqualsToken */ ? 97 /* SyntaxKind.FalseKeyword */ : 112 /* SyntaxKind.TrueKeyword */));
                if (isLeftNaN && isRightNaN)
                    return;
                var operatorString = operator === 38 /* SyntaxKind.ExclamationEqualsEqualsToken */ || operator === 36 /* SyntaxKind.ExclamationEqualsToken */ ? (0, ts_1.tokenToString)(54 /* SyntaxKind.ExclamationToken */) : "";
                var location_3 = isLeftNaN ? right : left;
                var expression = (0, ts_1.skipParentheses)(location_3);
                (0, ts_1.addRelatedInfo)(err, (0, ts_1.createDiagnosticForNode)(location_3, ts_1.Diagnostics.Did_you_mean_0, "".concat(operatorString, "Number.isNaN(").concat((0, ts_1.isEntityNameExpression)(expression) ? (0, ts_1.entityNameToString)(expression) : "...", ")")));
            }
        }
        function isGlobalNaN(expr) {
            if ((0, ts_1.isIdentifier)(expr) && expr.escapedText === "NaN") {
                var globalNaNSymbol = getGlobalNaNSymbol();
                return !!globalNaNSymbol && globalNaNSymbol === getResolvedSymbol(expr);
            }
            return false;
        }
    }
    function getBaseTypesIfUnrelated(leftType, rightType, isRelated) {
        var effectiveLeft = leftType;
        var effectiveRight = rightType;
        var leftBase = getBaseTypeOfLiteralType(leftType);
        var rightBase = getBaseTypeOfLiteralType(rightType);
        if (!isRelated(leftBase, rightBase)) {
            effectiveLeft = leftBase;
            effectiveRight = rightBase;
        }
        return [effectiveLeft, effectiveRight];
    }
    function checkYieldExpression(node) {
        addLazyDiagnostic(checkYieldExpressionGrammar);
        var func = (0, ts_1.getContainingFunction)(node);
        if (!func)
            return anyType;
        var functionFlags = (0, ts_1.getFunctionFlags)(func);
        if (!(functionFlags & 1 /* FunctionFlags.Generator */)) {
            // If the user's code is syntactically correct, the func should always have a star. After all, we are in a yield context.
            return anyType;
        }
        var isAsync = (functionFlags & 2 /* FunctionFlags.Async */) !== 0;
        if (node.asteriskToken) {
            // Async generator functions prior to ESNext require the __await, __asyncDelegator,
            // and __asyncValues helpers
            if (isAsync && languageVersion < 99 /* ScriptTarget.ESNext */) {
                checkExternalEmitHelpers(node, 26624 /* ExternalEmitHelpers.AsyncDelegatorIncludes */);
            }
            // Generator functions prior to ES2015 require the __values helper
            if (!isAsync && languageVersion < 2 /* ScriptTarget.ES2015 */ && compilerOptions.downlevelIteration) {
                checkExternalEmitHelpers(node, 256 /* ExternalEmitHelpers.Values */);
            }
        }
        // There is no point in doing an assignability check if the function
        // has no explicit return type because the return type is directly computed
        // from the yield expressions.
        var returnType = getReturnTypeFromAnnotation(func);
        var iterationTypes = returnType && getIterationTypesOfGeneratorFunctionReturnType(returnType, isAsync);
        var signatureYieldType = iterationTypes && iterationTypes.yieldType || anyType;
        var signatureNextType = iterationTypes && iterationTypes.nextType || anyType;
        var resolvedSignatureNextType = isAsync ? getAwaitedType(signatureNextType) || anyType : signatureNextType;
        var yieldExpressionType = node.expression ? checkExpression(node.expression) : undefinedWideningType;
        var yieldedType = getYieldedTypeOfYieldExpression(node, yieldExpressionType, resolvedSignatureNextType, isAsync);
        if (returnType && yieldedType) {
            checkTypeAssignableToAndOptionallyElaborate(yieldedType, signatureYieldType, node.expression || node, node.expression);
        }
        if (node.asteriskToken) {
            var use = isAsync ? 19 /* IterationUse.AsyncYieldStar */ : 17 /* IterationUse.YieldStar */;
            return getIterationTypeOfIterable(use, 1 /* IterationTypeKind.Return */, yieldExpressionType, node.expression)
                || anyType;
        }
        else if (returnType) {
            return getIterationTypeOfGeneratorFunctionReturnType(2 /* IterationTypeKind.Next */, returnType, isAsync)
                || anyType;
        }
        var type = getContextualIterationType(2 /* IterationTypeKind.Next */, func);
        if (!type) {
            type = anyType;
            addLazyDiagnostic(function () {
                if (noImplicitAny && !(0, ts_1.expressionResultIsUnused)(node)) {
                    var contextualType = getContextualType(node, /*contextFlags*/ undefined);
                    if (!contextualType || isTypeAny(contextualType)) {
                        error(node, ts_1.Diagnostics.yield_expression_implicitly_results_in_an_any_type_because_its_containing_generator_lacks_a_return_type_annotation);
                    }
                }
            });
        }
        return type;
        function checkYieldExpressionGrammar() {
            if (!(node.flags & 8192 /* NodeFlags.YieldContext */)) {
                grammarErrorOnFirstToken(node, ts_1.Diagnostics.A_yield_expression_is_only_allowed_in_a_generator_body);
            }
            if (isInParameterInitializerBeforeContainingFunction(node)) {
                error(node, ts_1.Diagnostics.yield_expressions_cannot_be_used_in_a_parameter_initializer);
            }
        }
    }
    function checkConditionalExpression(node, checkMode) {
        var type = checkTruthinessExpression(node.condition, checkMode);
        checkTestingKnownTruthyCallableOrAwaitableType(node.condition, type, node.whenTrue);
        var type1 = checkExpression(node.whenTrue, checkMode);
        var type2 = checkExpression(node.whenFalse, checkMode);
        return getUnionType([type1, type2], 2 /* UnionReduction.Subtype */);
    }
    function isTemplateLiteralContext(node) {
        var parent = node.parent;
        return (0, ts_1.isParenthesizedExpression)(parent) && isTemplateLiteralContext(parent) ||
            (0, ts_1.isElementAccessExpression)(parent) && parent.argumentExpression === node;
    }
    function checkTemplateExpression(node) {
        var texts = [node.head.text];
        var types = [];
        for (var _i = 0, _a = node.templateSpans; _i < _a.length; _i++) {
            var span = _a[_i];
            var type = checkExpression(span.expression);
            if (maybeTypeOfKindConsideringBaseConstraint(type, 12288 /* TypeFlags.ESSymbolLike */)) {
                error(span.expression, ts_1.Diagnostics.Implicit_conversion_of_a_symbol_to_a_string_will_fail_at_runtime_Consider_wrapping_this_expression_in_String);
            }
            texts.push(span.literal.text);
            types.push(isTypeAssignableTo(type, templateConstraintType) ? type : stringType);
        }
        if (isConstContext(node) || isTemplateLiteralContext(node) || someType(getContextualType(node, /*contextFlags*/ undefined) || unknownType, isTemplateLiteralContextualType)) {
            return getTemplateLiteralType(texts, types);
        }
        var evaluated = node.parent.kind !== 214 /* SyntaxKind.TaggedTemplateExpression */ && evaluateTemplateExpression(node);
        return evaluated ? getFreshTypeOfLiteralType(getStringLiteralType(evaluated)) : stringType;
    }
    function isTemplateLiteralContextualType(type) {
        return !!(type.flags & (128 /* TypeFlags.StringLiteral */ | 134217728 /* TypeFlags.TemplateLiteral */) ||
            type.flags & 58982400 /* TypeFlags.InstantiableNonPrimitive */ && maybeTypeOfKind(getBaseConstraintOfType(type) || unknownType, 402653316 /* TypeFlags.StringLike */));
    }
    function getContextNode(node) {
        if ((0, ts_1.isJsxAttributes)(node) && !(0, ts_1.isJsxSelfClosingElement)(node.parent)) {
            return node.parent.parent; // Needs to be the root JsxElement, so it encompasses the attributes _and_ the children (which are essentially part of the attributes)
        }
        return node;
    }
    function checkExpressionWithContextualType(node, contextualType, inferenceContext, checkMode) {
        var contextNode = getContextNode(node);
        pushContextualType(contextNode, contextualType, /*isCache*/ false);
        pushInferenceContext(contextNode, inferenceContext);
        var type = checkExpression(node, checkMode | 1 /* CheckMode.Contextual */ | (inferenceContext ? 2 /* CheckMode.Inferential */ : 0));
        // In CheckMode.Inferential we collect intra-expression inference sites to process before fixing any type
        // parameters. This information is no longer needed after the call to checkExpression.
        if (inferenceContext && inferenceContext.intraExpressionInferenceSites) {
            inferenceContext.intraExpressionInferenceSites = undefined;
        }
        // We strip literal freshness when an appropriate contextual type is present such that contextually typed
        // literals always preserve their literal types (otherwise they might widen during type inference). An alternative
        // here would be to not mark contextually typed literals as fresh in the first place.
        var result = maybeTypeOfKind(type, 2944 /* TypeFlags.Literal */) && isLiteralOfContextualType(type, instantiateContextualType(contextualType, node, /*contextFlags*/ undefined)) ?
            getRegularTypeOfLiteralType(type) : type;
        popInferenceContext();
        popContextualType();
        return result;
    }
    function checkExpressionCached(node, checkMode) {
        if (checkMode) {
            return checkExpression(node, checkMode);
        }
        var links = getNodeLinks(node);
        if (!links.resolvedType) {
            // When computing a type that we're going to cache, we need to ignore any ongoing control flow
            // analysis because variables may have transient types in indeterminable states. Moving flowLoopStart
            // to the top of the stack ensures all transient types are computed from a known point.
            var saveFlowLoopStart = flowLoopStart;
            var saveFlowTypeCache = flowTypeCache;
            flowLoopStart = flowLoopCount;
            flowTypeCache = undefined;
            links.resolvedType = checkExpression(node, checkMode);
            flowTypeCache = saveFlowTypeCache;
            flowLoopStart = saveFlowLoopStart;
        }
        return links.resolvedType;
    }
    function isTypeAssertion(node) {
        node = (0, ts_1.skipParentheses)(node, /*excludeJSDocTypeAssertions*/ true);
        return node.kind === 215 /* SyntaxKind.TypeAssertionExpression */ ||
            node.kind === 233 /* SyntaxKind.AsExpression */ ||
            (0, ts_1.isJSDocTypeAssertion)(node);
    }
    function checkDeclarationInitializer(declaration, checkMode, contextualType) {
        var initializer = (0, ts_1.getEffectiveInitializer)(declaration);
        if ((0, ts_1.isInJSFile)(declaration)) {
            var typeNode = (0, ts_1.tryGetJSDocSatisfiesTypeNode)(declaration);
            if (typeNode) {
                return checkSatisfiesExpressionWorker(initializer, typeNode, checkMode);
            }
        }
        var type = getQuickTypeOfExpression(initializer) ||
            (contextualType ?
                checkExpressionWithContextualType(initializer, contextualType, /*inferenceContext*/ undefined, checkMode || 0 /* CheckMode.Normal */)
                : checkExpressionCached(initializer, checkMode));
        return (0, ts_1.isParameter)(declaration) && declaration.name.kind === 206 /* SyntaxKind.ArrayBindingPattern */ &&
            isTupleType(type) && !type.target.hasRestElement && getTypeReferenceArity(type) < declaration.name.elements.length ?
            padTupleType(type, declaration.name) : type;
    }
    function padTupleType(type, pattern) {
        var patternElements = pattern.elements;
        var elementTypes = getElementTypes(type).slice();
        var elementFlags = type.target.elementFlags.slice();
        for (var i = getTypeReferenceArity(type); i < patternElements.length; i++) {
            var e = patternElements[i];
            if (i < patternElements.length - 1 || !(e.kind === 207 /* SyntaxKind.BindingElement */ && e.dotDotDotToken)) {
                elementTypes.push(!(0, ts_1.isOmittedExpression)(e) && hasDefaultValue(e) ? getTypeFromBindingElement(e, /*includePatternInType*/ false, /*reportErrors*/ false) : anyType);
                elementFlags.push(2 /* ElementFlags.Optional */);
                if (!(0, ts_1.isOmittedExpression)(e) && !hasDefaultValue(e)) {
                    reportImplicitAny(e, anyType);
                }
            }
        }
        return createTupleType(elementTypes, elementFlags, type.target.readonly);
    }
    function widenTypeInferredFromInitializer(declaration, type) {
        var widened = (0, ts_1.getCombinedNodeFlags)(declaration) & 2 /* NodeFlags.Const */ || (0, ts_1.isDeclarationReadonly)(declaration) ? type : getWidenedLiteralType(type);
        if ((0, ts_1.isInJSFile)(declaration)) {
            if (isEmptyLiteralType(widened)) {
                reportImplicitAny(declaration, anyType);
                return anyType;
            }
            else if (isEmptyArrayLiteralType(widened)) {
                reportImplicitAny(declaration, anyArrayType);
                return anyArrayType;
            }
        }
        return widened;
    }
    function isLiteralOfContextualType(candidateType, contextualType) {
        if (contextualType) {
            if (contextualType.flags & 3145728 /* TypeFlags.UnionOrIntersection */) {
                var types = contextualType.types;
                return (0, ts_1.some)(types, function (t) { return isLiteralOfContextualType(candidateType, t); });
            }
            if (contextualType.flags & 58982400 /* TypeFlags.InstantiableNonPrimitive */) {
                // If the contextual type is a type variable constrained to a primitive type, consider
                // this a literal context for literals of that primitive type. For example, given a
                // type parameter 'T extends string', infer string literal types for T.
                var constraint = getBaseConstraintOfType(contextualType) || unknownType;
                return maybeTypeOfKind(constraint, 4 /* TypeFlags.String */) && maybeTypeOfKind(candidateType, 128 /* TypeFlags.StringLiteral */) ||
                    maybeTypeOfKind(constraint, 8 /* TypeFlags.Number */) && maybeTypeOfKind(candidateType, 256 /* TypeFlags.NumberLiteral */) ||
                    maybeTypeOfKind(constraint, 64 /* TypeFlags.BigInt */) && maybeTypeOfKind(candidateType, 2048 /* TypeFlags.BigIntLiteral */) ||
                    maybeTypeOfKind(constraint, 4096 /* TypeFlags.ESSymbol */) && maybeTypeOfKind(candidateType, 8192 /* TypeFlags.UniqueESSymbol */) ||
                    isLiteralOfContextualType(candidateType, constraint);
            }
            // If the contextual type is a literal of a particular primitive type, we consider this a
            // literal context for all literals of that primitive type.
            return !!(contextualType.flags & (128 /* TypeFlags.StringLiteral */ | 4194304 /* TypeFlags.Index */ | 134217728 /* TypeFlags.TemplateLiteral */ | 268435456 /* TypeFlags.StringMapping */) && maybeTypeOfKind(candidateType, 128 /* TypeFlags.StringLiteral */) ||
                contextualType.flags & 256 /* TypeFlags.NumberLiteral */ && maybeTypeOfKind(candidateType, 256 /* TypeFlags.NumberLiteral */) ||
                contextualType.flags & 2048 /* TypeFlags.BigIntLiteral */ && maybeTypeOfKind(candidateType, 2048 /* TypeFlags.BigIntLiteral */) ||
                contextualType.flags & 512 /* TypeFlags.BooleanLiteral */ && maybeTypeOfKind(candidateType, 512 /* TypeFlags.BooleanLiteral */) ||
                contextualType.flags & 8192 /* TypeFlags.UniqueESSymbol */ && maybeTypeOfKind(candidateType, 8192 /* TypeFlags.UniqueESSymbol */));
        }
        return false;
    }
    function isConstContext(node) {
        var parent = node.parent;
        return (0, ts_1.isAssertionExpression)(parent) && (0, ts_1.isConstTypeReference)(parent.type) ||
            (0, ts_1.isJSDocTypeAssertion)(parent) && (0, ts_1.isConstTypeReference)((0, ts_1.getJSDocTypeAssertionType)(parent)) ||
            isValidConstAssertionArgument(node) && isConstTypeVariable(getContextualType(node, 0 /* ContextFlags.None */)) ||
            ((0, ts_1.isParenthesizedExpression)(parent) || (0, ts_1.isArrayLiteralExpression)(parent) || (0, ts_1.isSpreadElement)(parent)) && isConstContext(parent) ||
            ((0, ts_1.isPropertyAssignment)(parent) || (0, ts_1.isShorthandPropertyAssignment)(parent) || (0, ts_1.isTemplateSpan)(parent)) && isConstContext(parent.parent);
    }
    function checkExpressionForMutableLocation(node, checkMode, forceTuple) {
        var type = checkExpression(node, checkMode, forceTuple);
        return isConstContext(node) || (0, ts_1.isCommonJsExportedExpression)(node) ? getRegularTypeOfLiteralType(type) :
            isTypeAssertion(node) ? type :
                getWidenedLiteralLikeTypeForContextualType(type, instantiateContextualType(getContextualType(node, /*contextFlags*/ undefined), node, /*contextFlags*/ undefined));
    }
    function checkPropertyAssignment(node, checkMode) {
        // Do not use hasDynamicName here, because that returns false for well known symbols.
        // We want to perform checkComputedPropertyName for all computed properties, including
        // well known symbols.
        if (node.name.kind === 166 /* SyntaxKind.ComputedPropertyName */) {
            checkComputedPropertyName(node.name);
        }
        return checkExpressionForMutableLocation(node.initializer, checkMode);
    }
    function checkObjectLiteralMethod(node, checkMode) {
        // Grammar checking
        checkGrammarMethod(node);
        // Do not use hasDynamicName here, because that returns false for well known symbols.
        // We want to perform checkComputedPropertyName for all computed properties, including
        // well known symbols.
        if (node.name.kind === 166 /* SyntaxKind.ComputedPropertyName */) {
            checkComputedPropertyName(node.name);
        }
        var uninstantiatedType = checkFunctionExpressionOrObjectLiteralMethod(node, checkMode);
        return instantiateTypeWithSingleGenericCallSignature(node, uninstantiatedType, checkMode);
    }
    function instantiateTypeWithSingleGenericCallSignature(node, type, checkMode) {
        if (checkMode && checkMode & (2 /* CheckMode.Inferential */ | 8 /* CheckMode.SkipGenericFunctions */)) {
            var callSignature = getSingleSignature(type, 0 /* SignatureKind.Call */, /*allowMembers*/ true);
            var constructSignature = getSingleSignature(type, 1 /* SignatureKind.Construct */, /*allowMembers*/ true);
            var signature = callSignature || constructSignature;
            if (signature && signature.typeParameters) {
                var contextualType = getApparentTypeOfContextualType(node, 2 /* ContextFlags.NoConstraints */);
                if (contextualType) {
                    var contextualSignature = getSingleSignature(getNonNullableType(contextualType), callSignature ? 0 /* SignatureKind.Call */ : 1 /* SignatureKind.Construct */, /*allowMembers*/ false);
                    if (contextualSignature && !contextualSignature.typeParameters) {
                        if (checkMode & 8 /* CheckMode.SkipGenericFunctions */) {
                            skippedGenericFunction(node, checkMode);
                            return anyFunctionType;
                        }
                        var context = getInferenceContext(node);
                        // We have an expression that is an argument of a generic function for which we are performing
                        // type argument inference. The expression is of a function type with a single generic call
                        // signature and a contextual function type with a single non-generic call signature. Now check
                        // if the outer function returns a function type with a single non-generic call signature and
                        // if some of the outer function type parameters have no inferences so far. If so, we can
                        // potentially add inferred type parameters to the outer function return type.
                        var returnType = context.signature && getReturnTypeOfSignature(context.signature);
                        var returnSignature = returnType && getSingleCallOrConstructSignature(returnType);
                        if (returnSignature && !returnSignature.typeParameters && !(0, ts_1.every)(context.inferences, hasInferenceCandidates)) {
                            // Instantiate the signature with its own type parameters as type arguments, possibly
                            // renaming the type parameters to ensure they have unique names.
                            var uniqueTypeParameters = getUniqueTypeParameters(context, signature.typeParameters);
                            var instantiatedSignature = getSignatureInstantiationWithoutFillingInTypeArguments(signature, uniqueTypeParameters);
                            // Infer from the parameters of the instantiated signature to the parameters of the
                            // contextual signature starting with an empty set of inference candidates.
                            var inferences_3 = (0, ts_1.map)(context.inferences, function (info) { return createInferenceInfo(info.typeParameter); });
                            applyToParameterTypes(instantiatedSignature, contextualSignature, function (source, target) {
                                inferTypes(inferences_3, source, target, /*priority*/ 0, /*contravariant*/ true);
                            });
                            if ((0, ts_1.some)(inferences_3, hasInferenceCandidates)) {
                                // We have inference candidates, indicating that one or more type parameters are referenced
                                // in the parameter types of the contextual signature. Now also infer from the return type.
                                applyToReturnTypes(instantiatedSignature, contextualSignature, function (source, target) {
                                    inferTypes(inferences_3, source, target);
                                });
                                // If the type parameters for which we produced candidates do not have any inferences yet,
                                // we adopt the new inference candidates and add the type parameters of the expression type
                                // to the set of inferred type parameters for the outer function return type.
                                if (!hasOverlappingInferences(context.inferences, inferences_3)) {
                                    mergeInferences(context.inferences, inferences_3);
                                    context.inferredTypeParameters = (0, ts_1.concatenate)(context.inferredTypeParameters, uniqueTypeParameters);
                                    return getOrCreateTypeFromSignature(instantiatedSignature);
                                }
                            }
                        }
                        return getOrCreateTypeFromSignature(instantiateSignatureInContextOf(signature, contextualSignature, context));
                    }
                }
            }
        }
        return type;
    }
    function skippedGenericFunction(node, checkMode) {
        if (checkMode & 2 /* CheckMode.Inferential */) {
            // We have skipped a generic function during inferential typing. Obtain the inference context and
            // indicate this has occurred such that we know a second pass of inference is be needed.
            var context = getInferenceContext(node);
            context.flags |= 4 /* InferenceFlags.SkippedGenericFunction */;
        }
    }
    function hasInferenceCandidates(info) {
        return !!(info.candidates || info.contraCandidates);
    }
    function hasInferenceCandidatesOrDefault(info) {
        return !!(info.candidates || info.contraCandidates || hasTypeParameterDefault(info.typeParameter));
    }
    function hasOverlappingInferences(a, b) {
        for (var i = 0; i < a.length; i++) {
            if (hasInferenceCandidates(a[i]) && hasInferenceCandidates(b[i])) {
                return true;
            }
        }
        return false;
    }
    function mergeInferences(target, source) {
        for (var i = 0; i < target.length; i++) {
            if (!hasInferenceCandidates(target[i]) && hasInferenceCandidates(source[i])) {
                target[i] = source[i];
            }
        }
    }
    function getUniqueTypeParameters(context, typeParameters) {
        var result = [];
        var oldTypeParameters;
        var newTypeParameters;
        for (var _i = 0, typeParameters_3 = typeParameters; _i < typeParameters_3.length; _i++) {
            var tp = typeParameters_3[_i];
            var name_33 = tp.symbol.escapedName;
            if (hasTypeParameterByName(context.inferredTypeParameters, name_33) || hasTypeParameterByName(result, name_33)) {
                var newName = getUniqueTypeParameterName((0, ts_1.concatenate)(context.inferredTypeParameters, result), name_33);
                var symbol = createSymbol(262144 /* SymbolFlags.TypeParameter */, newName);
                var newTypeParameter = createTypeParameter(symbol);
                newTypeParameter.target = tp;
                oldTypeParameters = (0, ts_1.append)(oldTypeParameters, tp);
                newTypeParameters = (0, ts_1.append)(newTypeParameters, newTypeParameter);
                result.push(newTypeParameter);
            }
            else {
                result.push(tp);
            }
        }
        if (newTypeParameters) {
            var mapper = createTypeMapper(oldTypeParameters, newTypeParameters);
            for (var _a = 0, newTypeParameters_1 = newTypeParameters; _a < newTypeParameters_1.length; _a++) {
                var tp = newTypeParameters_1[_a];
                tp.mapper = mapper;
            }
        }
        return result;
    }
    function hasTypeParameterByName(typeParameters, name) {
        return (0, ts_1.some)(typeParameters, function (tp) { return tp.symbol.escapedName === name; });
    }
    function getUniqueTypeParameterName(typeParameters, baseName) {
        var len = baseName.length;
        while (len > 1 && baseName.charCodeAt(len - 1) >= 48 /* CharacterCodes._0 */ && baseName.charCodeAt(len - 1) <= 57 /* CharacterCodes._9 */)
            len--;
        var s = baseName.slice(0, len);
        for (var index = 1; true; index++) {
            var augmentedName = s + index;
            if (!hasTypeParameterByName(typeParameters, augmentedName)) {
                return augmentedName;
            }
        }
    }
    function getReturnTypeOfSingleNonGenericCallSignature(funcType) {
        var signature = getSingleCallSignature(funcType);
        if (signature && !signature.typeParameters) {
            return getReturnTypeOfSignature(signature);
        }
    }
    function getReturnTypeOfSingleNonGenericSignatureOfCallChain(expr) {
        var funcType = checkExpression(expr.expression);
        var nonOptionalType = getOptionalExpressionType(funcType, expr.expression);
        var returnType = getReturnTypeOfSingleNonGenericCallSignature(funcType);
        return returnType && propagateOptionalTypeMarker(returnType, expr, nonOptionalType !== funcType);
    }
    /**
     * Returns the type of an expression. Unlike checkExpression, this function is simply concerned
     * with computing the type and may not fully check all contained sub-expressions for errors.
     */
    function getTypeOfExpression(node) {
        // Don't bother caching types that require no flow analysis and are quick to compute.
        var quickType = getQuickTypeOfExpression(node);
        if (quickType) {
            return quickType;
        }
        // If a type has been cached for the node, return it.
        if (node.flags & 134217728 /* NodeFlags.TypeCached */ && flowTypeCache) {
            var cachedType = flowTypeCache[getNodeId(node)];
            if (cachedType) {
                return cachedType;
            }
        }
        var startInvocationCount = flowInvocationCount;
        var type = checkExpression(node, 128 /* CheckMode.TypeOnly */);
        // If control flow analysis was required to determine the type, it is worth caching.
        if (flowInvocationCount !== startInvocationCount) {
            var cache = flowTypeCache || (flowTypeCache = []);
            cache[getNodeId(node)] = type;
            (0, ts_1.setNodeFlags)(node, node.flags | 134217728 /* NodeFlags.TypeCached */);
        }
        return type;
    }
    function getQuickTypeOfExpression(node) {
        var expr = (0, ts_1.skipParentheses)(node, /*excludeJSDocTypeAssertions*/ true);
        if ((0, ts_1.isJSDocTypeAssertion)(expr)) {
            var type = (0, ts_1.getJSDocTypeAssertionType)(expr);
            if (!(0, ts_1.isConstTypeReference)(type)) {
                return getTypeFromTypeNode(type);
            }
        }
        expr = (0, ts_1.skipParentheses)(node);
        if ((0, ts_1.isAwaitExpression)(expr)) {
            var type = getQuickTypeOfExpression(expr.expression);
            return type ? getAwaitedType(type) : undefined;
        }
        // Optimize for the common case of a call to a function with a single non-generic call
        // signature where we can just fetch the return type without checking the arguments.
        if ((0, ts_1.isCallExpression)(expr) && expr.expression.kind !== 108 /* SyntaxKind.SuperKeyword */ && !(0, ts_1.isRequireCall)(expr, /*requireStringLiteralLikeArgument*/ true) && !isSymbolOrSymbolForCall(expr)) {
            return (0, ts_1.isCallChain)(expr) ? getReturnTypeOfSingleNonGenericSignatureOfCallChain(expr) :
                getReturnTypeOfSingleNonGenericCallSignature(checkNonNullExpression(expr.expression));
        }
        else if ((0, ts_1.isAssertionExpression)(expr) && !(0, ts_1.isConstTypeReference)(expr.type)) {
            return getTypeFromTypeNode(expr.type);
        }
        else if ((0, ts_1.isLiteralExpression)(node) || (0, ts_1.isBooleanLiteral)(node)) {
            return checkExpression(node);
        }
        return undefined;
    }
    /**
     * Returns the type of an expression. Unlike checkExpression, this function is simply concerned
     * with computing the type and may not fully check all contained sub-expressions for errors.
     * It is intended for uses where you know there is no contextual type,
     * and requesting the contextual type might cause a circularity or other bad behaviour.
     * It sets the contextual type of the node to any before calling getTypeOfExpression.
     */
    function getContextFreeTypeOfExpression(node) {
        var links = getNodeLinks(node);
        if (links.contextFreeType) {
            return links.contextFreeType;
        }
        pushContextualType(node, anyType, /*isCache*/ false);
        var type = links.contextFreeType = checkExpression(node, 4 /* CheckMode.SkipContextSensitive */);
        popContextualType();
        return type;
    }
    function checkExpression(node, checkMode, forceTuple) {
        ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.push("check" /* tracing.Phase.Check */, "checkExpression", { kind: node.kind, pos: node.pos, end: node.end, path: node.tracingPath });
        var saveCurrentNode = currentNode;
        currentNode = node;
        instantiationCount = 0;
        var uninstantiatedType = checkExpressionWorker(node, checkMode, forceTuple);
        var type = instantiateTypeWithSingleGenericCallSignature(node, uninstantiatedType, checkMode);
        if (isConstEnumObjectType(type)) {
            checkConstEnumAccess(node, type);
        }
        currentNode = saveCurrentNode;
        ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.pop();
        return type;
    }
    function checkConstEnumAccess(node, type) {
        // enum object type for const enums are only permitted in:
        // - 'left' in property access
        // - 'object' in indexed access
        // - target in rhs of import statement
        var ok = (node.parent.kind === 210 /* SyntaxKind.PropertyAccessExpression */ && node.parent.expression === node) ||
            (node.parent.kind === 211 /* SyntaxKind.ElementAccessExpression */ && node.parent.expression === node) ||
            ((node.kind === 80 /* SyntaxKind.Identifier */ || node.kind === 165 /* SyntaxKind.QualifiedName */) && isInRightSideOfImportOrExportAssignment(node) ||
                (node.parent.kind === 185 /* SyntaxKind.TypeQuery */ && node.parent.exprName === node)) ||
            (node.parent.kind === 280 /* SyntaxKind.ExportSpecifier */); // We allow reexporting const enums
        if (!ok) {
            error(node, ts_1.Diagnostics.const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_import_declaration_or_export_assignment_or_type_query);
        }
        if ((0, ts_1.getIsolatedModules)(compilerOptions)) {
            ts_1.Debug.assert(!!(type.symbol.flags & 128 /* SymbolFlags.ConstEnum */));
            var constEnumDeclaration = type.symbol.valueDeclaration;
            if (constEnumDeclaration.flags & 16777216 /* NodeFlags.Ambient */ && !(0, ts_1.isValidTypeOnlyAliasUseSite)(node)) {
                error(node, ts_1.Diagnostics.Cannot_access_ambient_const_enums_when_0_is_enabled, isolatedModulesLikeFlagName);
            }
        }
    }
    function checkParenthesizedExpression(node, checkMode) {
        if ((0, ts_1.hasJSDocNodes)(node)) {
            if ((0, ts_1.isJSDocSatisfiesExpression)(node)) {
                return checkSatisfiesExpressionWorker(node.expression, (0, ts_1.getJSDocSatisfiesExpressionType)(node), checkMode);
            }
            if ((0, ts_1.isJSDocTypeAssertion)(node)) {
                return checkAssertionWorker(node, checkMode);
            }
        }
        return checkExpression(node.expression, checkMode);
    }
    function checkExpressionWorker(node, checkMode, forceTuple) {
        var kind = node.kind;
        if (cancellationToken) {
            // Only bother checking on a few construct kinds.  We don't want to be excessively
            // hitting the cancellation token on every node we check.
            switch (kind) {
                case 230 /* SyntaxKind.ClassExpression */:
                case 217 /* SyntaxKind.FunctionExpression */:
                case 218 /* SyntaxKind.ArrowFunction */:
                    cancellationToken.throwIfCancellationRequested();
            }
        }
        switch (kind) {
            case 80 /* SyntaxKind.Identifier */:
                return checkIdentifier(node, checkMode);
            case 81 /* SyntaxKind.PrivateIdentifier */:
                return checkPrivateIdentifierExpression(node);
            case 110 /* SyntaxKind.ThisKeyword */:
                return checkThisExpression(node);
            case 108 /* SyntaxKind.SuperKeyword */:
                return checkSuperExpression(node);
            case 106 /* SyntaxKind.NullKeyword */:
                return nullWideningType;
            case 15 /* SyntaxKind.NoSubstitutionTemplateLiteral */:
            case 11 /* SyntaxKind.StringLiteral */:
                return hasSkipDirectInferenceFlag(node) ?
                    wildcardType :
                    getFreshTypeOfLiteralType(getStringLiteralType(node.text));
            case 9 /* SyntaxKind.NumericLiteral */:
                checkGrammarNumericLiteral(node);
                return getFreshTypeOfLiteralType(getNumberLiteralType(+node.text));
            case 10 /* SyntaxKind.BigIntLiteral */:
                checkGrammarBigIntLiteral(node);
                return getFreshTypeOfLiteralType(getBigIntLiteralType({
                    negative: false,
                    base10Value: (0, ts_1.parsePseudoBigInt)(node.text)
                }));
            case 112 /* SyntaxKind.TrueKeyword */:
                return trueType;
            case 97 /* SyntaxKind.FalseKeyword */:
                return falseType;
            case 227 /* SyntaxKind.TemplateExpression */:
                return checkTemplateExpression(node);
            case 14 /* SyntaxKind.RegularExpressionLiteral */:
                return globalRegExpType;
            case 208 /* SyntaxKind.ArrayLiteralExpression */:
                return checkArrayLiteral(node, checkMode, forceTuple);
            case 209 /* SyntaxKind.ObjectLiteralExpression */:
                return checkObjectLiteral(node, checkMode);
            case 210 /* SyntaxKind.PropertyAccessExpression */:
                return checkPropertyAccessExpression(node, checkMode);
            case 165 /* SyntaxKind.QualifiedName */:
                return checkQualifiedName(node, checkMode);
            case 211 /* SyntaxKind.ElementAccessExpression */:
                return checkIndexedAccess(node, checkMode);
            case 212 /* SyntaxKind.CallExpression */:
                if (node.expression.kind === 102 /* SyntaxKind.ImportKeyword */) {
                    return checkImportCallExpression(node);
                }
            // falls through
            case 213 /* SyntaxKind.NewExpression */:
                return checkCallExpression(node, checkMode);
            case 214 /* SyntaxKind.TaggedTemplateExpression */:
                return checkTaggedTemplateExpression(node);
            case 216 /* SyntaxKind.ParenthesizedExpression */:
                return checkParenthesizedExpression(node, checkMode);
            case 230 /* SyntaxKind.ClassExpression */:
                return checkClassExpression(node);
            case 217 /* SyntaxKind.FunctionExpression */:
            case 218 /* SyntaxKind.ArrowFunction */:
                return checkFunctionExpressionOrObjectLiteralMethod(node, checkMode);
            case 220 /* SyntaxKind.TypeOfExpression */:
                return checkTypeOfExpression(node);
            case 215 /* SyntaxKind.TypeAssertionExpression */:
            case 233 /* SyntaxKind.AsExpression */:
                return checkAssertion(node, checkMode);
            case 234 /* SyntaxKind.NonNullExpression */:
                return checkNonNullAssertion(node);
            case 232 /* SyntaxKind.ExpressionWithTypeArguments */:
                return checkExpressionWithTypeArguments(node);
            case 237 /* SyntaxKind.SatisfiesExpression */:
                return checkSatisfiesExpression(node);
            case 235 /* SyntaxKind.MetaProperty */:
                return checkMetaProperty(node);
            case 219 /* SyntaxKind.DeleteExpression */:
                return checkDeleteExpression(node);
            case 221 /* SyntaxKind.VoidExpression */:
                return checkVoidExpression(node);
            case 222 /* SyntaxKind.AwaitExpression */:
                return checkAwaitExpression(node);
            case 223 /* SyntaxKind.PrefixUnaryExpression */:
                return checkPrefixUnaryExpression(node);
            case 224 /* SyntaxKind.PostfixUnaryExpression */:
                return checkPostfixUnaryExpression(node);
            case 225 /* SyntaxKind.BinaryExpression */:
                return checkBinaryExpression(node, checkMode);
            case 226 /* SyntaxKind.ConditionalExpression */:
                return checkConditionalExpression(node, checkMode);
            case 229 /* SyntaxKind.SpreadElement */:
                return checkSpreadExpression(node, checkMode);
            case 231 /* SyntaxKind.OmittedExpression */:
                return undefinedWideningType;
            case 228 /* SyntaxKind.YieldExpression */:
                return checkYieldExpression(node);
            case 236 /* SyntaxKind.SyntheticExpression */:
                return checkSyntheticExpression(node);
            case 293 /* SyntaxKind.JsxExpression */:
                return checkJsxExpression(node, checkMode);
            case 283 /* SyntaxKind.JsxElement */:
                return checkJsxElement(node, checkMode);
            case 284 /* SyntaxKind.JsxSelfClosingElement */:
                return checkJsxSelfClosingElement(node, checkMode);
            case 287 /* SyntaxKind.JsxFragment */:
                return checkJsxFragment(node);
            case 291 /* SyntaxKind.JsxAttributes */:
                return checkJsxAttributes(node, checkMode);
            case 285 /* SyntaxKind.JsxOpeningElement */:
                ts_1.Debug.fail("Shouldn't ever directly check a JsxOpeningElement");
        }
        return errorType;
    }
    // DECLARATION AND STATEMENT TYPE CHECKING
    function checkTypeParameter(node) {
        // Grammar Checking
        checkGrammarModifiers(node);
        if (node.expression) {
            grammarErrorOnFirstToken(node.expression, ts_1.Diagnostics.Type_expected);
        }
        checkSourceElement(node.constraint);
        checkSourceElement(node.default);
        var typeParameter = getDeclaredTypeOfTypeParameter(getSymbolOfDeclaration(node));
        // Resolve base constraint to reveal circularity errors
        getBaseConstraintOfType(typeParameter);
        if (!hasNonCircularTypeParameterDefault(typeParameter)) {
            error(node.default, ts_1.Diagnostics.Type_parameter_0_has_a_circular_default, typeToString(typeParameter));
        }
        var constraintType = getConstraintOfTypeParameter(typeParameter);
        var defaultType = getDefaultFromTypeParameter(typeParameter);
        if (constraintType && defaultType) {
            checkTypeAssignableTo(defaultType, getTypeWithThisArgument(instantiateType(constraintType, makeUnaryTypeMapper(typeParameter, defaultType)), defaultType), node.default, ts_1.Diagnostics.Type_0_does_not_satisfy_the_constraint_1);
        }
        checkNodeDeferred(node);
        addLazyDiagnostic(function () { return checkTypeNameIsReserved(node.name, ts_1.Diagnostics.Type_parameter_name_cannot_be_0); });
    }
    function checkTypeParameterDeferred(node) {
        if ((0, ts_1.isInterfaceDeclaration)(node.parent) || (0, ts_1.isClassLike)(node.parent) || (0, ts_1.isTypeAliasDeclaration)(node.parent)) {
            var typeParameter = getDeclaredTypeOfTypeParameter(getSymbolOfDeclaration(node));
            var modifiers = getTypeParameterModifiers(typeParameter) & (32768 /* ModifierFlags.In */ | 65536 /* ModifierFlags.Out */);
            if (modifiers) {
                var symbol = getSymbolOfDeclaration(node.parent);
                if ((0, ts_1.isTypeAliasDeclaration)(node.parent) && !((0, ts_1.getObjectFlags)(getDeclaredTypeOfSymbol(symbol)) & (16 /* ObjectFlags.Anonymous */ | 32 /* ObjectFlags.Mapped */))) {
                    error(node, ts_1.Diagnostics.Variance_annotations_are_only_supported_in_type_aliases_for_object_function_constructor_and_mapped_types);
                }
                else if (modifiers === 32768 /* ModifierFlags.In */ || modifiers === 65536 /* ModifierFlags.Out */) {
                    ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.push("checkTypes" /* tracing.Phase.CheckTypes */, "checkTypeParameterDeferred", { parent: getTypeId(getDeclaredTypeOfSymbol(symbol)), id: getTypeId(typeParameter) });
                    var source = createMarkerType(symbol, typeParameter, modifiers === 65536 /* ModifierFlags.Out */ ? markerSubTypeForCheck : markerSuperTypeForCheck);
                    var target = createMarkerType(symbol, typeParameter, modifiers === 65536 /* ModifierFlags.Out */ ? markerSuperTypeForCheck : markerSubTypeForCheck);
                    var saveVarianceTypeParameter = typeParameter;
                    varianceTypeParameter = typeParameter;
                    checkTypeAssignableTo(source, target, node, ts_1.Diagnostics.Type_0_is_not_assignable_to_type_1_as_implied_by_variance_annotation);
                    varianceTypeParameter = saveVarianceTypeParameter;
                    ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.pop();
                }
            }
        }
    }
    function checkParameter(node) {
        // Grammar checking
        // It is a SyntaxError if the Identifier "eval" or the Identifier "arguments" occurs as the
        // Identifier in a PropertySetParameterList of a PropertyAssignment that is contained in strict code
        // or if its FunctionBody is strict code(11.1.5).
        checkGrammarModifiers(node);
        checkVariableLikeDeclaration(node);
        var func = (0, ts_1.getContainingFunction)(node);
        if ((0, ts_1.hasSyntacticModifier)(node, 16476 /* ModifierFlags.ParameterPropertyModifier */)) {
            if (!(func.kind === 175 /* SyntaxKind.Constructor */ && (0, ts_1.nodeIsPresent)(func.body))) {
                error(node, ts_1.Diagnostics.A_parameter_property_is_only_allowed_in_a_constructor_implementation);
            }
            if (func.kind === 175 /* SyntaxKind.Constructor */ && (0, ts_1.isIdentifier)(node.name) && node.name.escapedText === "constructor") {
                error(node.name, ts_1.Diagnostics.constructor_cannot_be_used_as_a_parameter_property_name);
            }
        }
        if (!node.initializer && (0, ts_1.isOptionalDeclaration)(node) && (0, ts_1.isBindingPattern)(node.name) && func.body) {
            error(node, ts_1.Diagnostics.A_binding_pattern_parameter_cannot_be_optional_in_an_implementation_signature);
        }
        if (node.name && (0, ts_1.isIdentifier)(node.name) && (node.name.escapedText === "this" || node.name.escapedText === "new")) {
            if (func.parameters.indexOf(node) !== 0) {
                error(node, ts_1.Diagnostics.A_0_parameter_must_be_the_first_parameter, node.name.escapedText);
            }
            if (func.kind === 175 /* SyntaxKind.Constructor */ || func.kind === 179 /* SyntaxKind.ConstructSignature */ || func.kind === 184 /* SyntaxKind.ConstructorType */) {
                error(node, ts_1.Diagnostics.A_constructor_cannot_have_a_this_parameter);
            }
            if (func.kind === 218 /* SyntaxKind.ArrowFunction */) {
                error(node, ts_1.Diagnostics.An_arrow_function_cannot_have_a_this_parameter);
            }
            if (func.kind === 176 /* SyntaxKind.GetAccessor */ || func.kind === 177 /* SyntaxKind.SetAccessor */) {
                error(node, ts_1.Diagnostics.get_and_set_accessors_cannot_declare_this_parameters);
            }
        }
        // Only check rest parameter type if it's not a binding pattern. Since binding patterns are
        // not allowed in a rest parameter, we already have an error from checkGrammarParameterList.
        if (node.dotDotDotToken && !(0, ts_1.isBindingPattern)(node.name) && !isTypeAssignableTo(getReducedType(getTypeOfSymbol(node.symbol)), anyReadonlyArrayType)) {
            error(node, ts_1.Diagnostics.A_rest_parameter_must_be_of_an_array_type);
        }
    }
    function checkTypePredicate(node) {
        var parent = getTypePredicateParent(node);
        if (!parent) {
            // The parent must not be valid.
            error(node, ts_1.Diagnostics.A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods);
            return;
        }
        var signature = getSignatureFromDeclaration(parent);
        var typePredicate = getTypePredicateOfSignature(signature);
        if (!typePredicate) {
            return;
        }
        checkSourceElement(node.type);
        var parameterName = node.parameterName;
        if (typePredicate.kind === 0 /* TypePredicateKind.This */ || typePredicate.kind === 2 /* TypePredicateKind.AssertsThis */) {
            getTypeFromThisTypeNode(parameterName);
        }
        else {
            if (typePredicate.parameterIndex >= 0) {
                if (signatureHasRestParameter(signature) && typePredicate.parameterIndex === signature.parameters.length - 1) {
                    error(parameterName, ts_1.Diagnostics.A_type_predicate_cannot_reference_a_rest_parameter);
                }
                else {
                    if (typePredicate.type) {
                        var leadingError = function () { return (0, ts_1.chainDiagnosticMessages)(/*details*/ undefined, ts_1.Diagnostics.A_type_predicate_s_type_must_be_assignable_to_its_parameter_s_type); };
                        checkTypeAssignableTo(typePredicate.type, getTypeOfSymbol(signature.parameters[typePredicate.parameterIndex]), node.type, 
                        /*headMessage*/ undefined, leadingError);
                    }
                }
            }
            else if (parameterName) {
                var hasReportedError = false;
                for (var _i = 0, _a = parent.parameters; _i < _a.length; _i++) {
                    var name_34 = _a[_i].name;
                    if ((0, ts_1.isBindingPattern)(name_34) &&
                        checkIfTypePredicateVariableIsDeclaredInBindingPattern(name_34, parameterName, typePredicate.parameterName)) {
                        hasReportedError = true;
                        break;
                    }
                }
                if (!hasReportedError) {
                    error(node.parameterName, ts_1.Diagnostics.Cannot_find_parameter_0, typePredicate.parameterName);
                }
            }
        }
    }
    function getTypePredicateParent(node) {
        switch (node.parent.kind) {
            case 218 /* SyntaxKind.ArrowFunction */:
            case 178 /* SyntaxKind.CallSignature */:
            case 261 /* SyntaxKind.FunctionDeclaration */:
            case 217 /* SyntaxKind.FunctionExpression */:
            case 183 /* SyntaxKind.FunctionType */:
            case 173 /* SyntaxKind.MethodDeclaration */:
            case 172 /* SyntaxKind.MethodSignature */:
                var parent_17 = node.parent;
                if (node === parent_17.type) {
                    return parent_17;
                }
        }
    }
    function checkIfTypePredicateVariableIsDeclaredInBindingPattern(pattern, predicateVariableNode, predicateVariableName) {
        for (var _i = 0, _a = pattern.elements; _i < _a.length; _i++) {
            var element = _a[_i];
            if ((0, ts_1.isOmittedExpression)(element)) {
                continue;
            }
            var name_35 = element.name;
            if (name_35.kind === 80 /* SyntaxKind.Identifier */ && name_35.escapedText === predicateVariableName) {
                error(predicateVariableNode, ts_1.Diagnostics.A_type_predicate_cannot_reference_element_0_in_a_binding_pattern, predicateVariableName);
                return true;
            }
            else if (name_35.kind === 206 /* SyntaxKind.ArrayBindingPattern */ || name_35.kind === 205 /* SyntaxKind.ObjectBindingPattern */) {
                if (checkIfTypePredicateVariableIsDeclaredInBindingPattern(name_35, predicateVariableNode, predicateVariableName)) {
                    return true;
                }
            }
        }
    }
    function checkSignatureDeclaration(node) {
        // Grammar checking
        if (node.kind === 180 /* SyntaxKind.IndexSignature */) {
            checkGrammarIndexSignature(node);
        }
        // TODO (yuisu): Remove this check in else-if when SyntaxKind.Construct is moved and ambient context is handled
        else if (node.kind === 183 /* SyntaxKind.FunctionType */ || node.kind === 261 /* SyntaxKind.FunctionDeclaration */ || node.kind === 184 /* SyntaxKind.ConstructorType */ ||
            node.kind === 178 /* SyntaxKind.CallSignature */ || node.kind === 175 /* SyntaxKind.Constructor */ ||
            node.kind === 179 /* SyntaxKind.ConstructSignature */) {
            checkGrammarFunctionLikeDeclaration(node);
        }
        var functionFlags = (0, ts_1.getFunctionFlags)(node);
        if (!(functionFlags & 4 /* FunctionFlags.Invalid */)) {
            // Async generators prior to ESNext require the __await and __asyncGenerator helpers
            if ((functionFlags & 3 /* FunctionFlags.AsyncGenerator */) === 3 /* FunctionFlags.AsyncGenerator */ && languageVersion < 99 /* ScriptTarget.ESNext */) {
                checkExternalEmitHelpers(node, 6144 /* ExternalEmitHelpers.AsyncGeneratorIncludes */);
            }
            // Async functions prior to ES2017 require the __awaiter helper
            if ((functionFlags & 3 /* FunctionFlags.AsyncGenerator */) === 2 /* FunctionFlags.Async */ && languageVersion < 4 /* ScriptTarget.ES2017 */) {
                checkExternalEmitHelpers(node, 64 /* ExternalEmitHelpers.Awaiter */);
            }
            // Generator functions, Async functions, and Async Generator functions prior to
            // ES2015 require the __generator helper
            if ((functionFlags & 3 /* FunctionFlags.AsyncGenerator */) !== 0 /* FunctionFlags.Normal */ && languageVersion < 2 /* ScriptTarget.ES2015 */) {
                checkExternalEmitHelpers(node, 128 /* ExternalEmitHelpers.Generator */);
            }
        }
        checkTypeParameters((0, ts_1.getEffectiveTypeParameterDeclarations)(node));
        checkUnmatchedJSDocParameters(node);
        (0, ts_1.forEach)(node.parameters, checkParameter);
        // TODO(rbuckton): Should we start checking JSDoc types?
        if (node.type) {
            checkSourceElement(node.type);
        }
        addLazyDiagnostic(checkSignatureDeclarationDiagnostics);
        function checkSignatureDeclarationDiagnostics() {
            checkCollisionWithArgumentsInGeneratedCode(node);
            var returnTypeNode = (0, ts_1.getEffectiveReturnTypeNode)(node);
            if (noImplicitAny && !returnTypeNode) {
                switch (node.kind) {
                    case 179 /* SyntaxKind.ConstructSignature */:
                        error(node, ts_1.Diagnostics.Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type);
                        break;
                    case 178 /* SyntaxKind.CallSignature */:
                        error(node, ts_1.Diagnostics.Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type);
                        break;
                }
            }
            if (returnTypeNode) {
                var functionFlags_1 = (0, ts_1.getFunctionFlags)(node);
                if ((functionFlags_1 & (4 /* FunctionFlags.Invalid */ | 1 /* FunctionFlags.Generator */)) === 1 /* FunctionFlags.Generator */) {
                    var returnType = getTypeFromTypeNode(returnTypeNode);
                    if (returnType === voidType) {
                        error(returnTypeNode, ts_1.Diagnostics.A_generator_cannot_have_a_void_type_annotation);
                    }
                    else {
                        // Naively, one could check that Generator<any, any, any> is assignable to the return type annotation.
                        // However, that would not catch the error in the following case.
                        //
                        //    interface BadGenerator extends Iterable<number>, Iterator<string> { }
                        //    function* g(): BadGenerator { } // Iterable and Iterator have different types!
                        //
                        var generatorYieldType = getIterationTypeOfGeneratorFunctionReturnType(0 /* IterationTypeKind.Yield */, returnType, (functionFlags_1 & 2 /* FunctionFlags.Async */) !== 0) || anyType;
                        var generatorReturnType = getIterationTypeOfGeneratorFunctionReturnType(1 /* IterationTypeKind.Return */, returnType, (functionFlags_1 & 2 /* FunctionFlags.Async */) !== 0) || generatorYieldType;
                        var generatorNextType = getIterationTypeOfGeneratorFunctionReturnType(2 /* IterationTypeKind.Next */, returnType, (functionFlags_1 & 2 /* FunctionFlags.Async */) !== 0) || unknownType;
                        var generatorInstantiation = createGeneratorReturnType(generatorYieldType, generatorReturnType, generatorNextType, !!(functionFlags_1 & 2 /* FunctionFlags.Async */));
                        checkTypeAssignableTo(generatorInstantiation, returnType, returnTypeNode);
                    }
                }
                else if ((functionFlags_1 & 3 /* FunctionFlags.AsyncGenerator */) === 2 /* FunctionFlags.Async */) {
                    checkAsyncFunctionReturnType(node, returnTypeNode);
                }
            }
            if (node.kind !== 180 /* SyntaxKind.IndexSignature */ && node.kind !== 323 /* SyntaxKind.JSDocFunctionType */) {
                registerForUnusedIdentifiersCheck(node);
            }
        }
    }
    function checkClassForDuplicateDeclarations(node) {
        var instanceNames = new Map();
        var staticNames = new Map();
        // instance and static private identifiers share the same scope
        var privateIdentifiers = new Map();
        for (var _i = 0, _a = node.members; _i < _a.length; _i++) {
            var member = _a[_i];
            if (member.kind === 175 /* SyntaxKind.Constructor */) {
                for (var _b = 0, _c = member.parameters; _b < _c.length; _b++) {
                    var param = _c[_b];
                    if ((0, ts_1.isParameterPropertyDeclaration)(param, member) && !(0, ts_1.isBindingPattern)(param.name)) {
                        addName(instanceNames, param.name, param.name.escapedText, 3 /* DeclarationMeaning.GetOrSetAccessor */);
                    }
                }
            }
            else {
                var isStaticMember = (0, ts_1.isStatic)(member);
                var name_36 = member.name;
                if (!name_36) {
                    continue;
                }
                var isPrivate = (0, ts_1.isPrivateIdentifier)(name_36);
                var privateStaticFlags = isPrivate && isStaticMember ? 16 /* DeclarationMeaning.PrivateStatic */ : 0;
                var names = isPrivate ? privateIdentifiers :
                    isStaticMember ? staticNames :
                        instanceNames;
                var memberName = name_36 && (0, ts_1.getPropertyNameForPropertyNameNode)(name_36);
                if (memberName) {
                    switch (member.kind) {
                        case 176 /* SyntaxKind.GetAccessor */:
                            addName(names, name_36, memberName, 1 /* DeclarationMeaning.GetAccessor */ | privateStaticFlags);
                            break;
                        case 177 /* SyntaxKind.SetAccessor */:
                            addName(names, name_36, memberName, 2 /* DeclarationMeaning.SetAccessor */ | privateStaticFlags);
                            break;
                        case 171 /* SyntaxKind.PropertyDeclaration */:
                            addName(names, name_36, memberName, 3 /* DeclarationMeaning.GetOrSetAccessor */ | privateStaticFlags);
                            break;
                        case 173 /* SyntaxKind.MethodDeclaration */:
                            addName(names, name_36, memberName, 8 /* DeclarationMeaning.Method */ | privateStaticFlags);
                            break;
                    }
                }
            }
        }
        function addName(names, location, name, meaning) {
            var prev = names.get(name);
            if (prev) {
                // For private identifiers, do not allow mixing of static and instance members with the same name
                if ((prev & 16 /* DeclarationMeaning.PrivateStatic */) !== (meaning & 16 /* DeclarationMeaning.PrivateStatic */)) {
                    error(location, ts_1.Diagnostics.Duplicate_identifier_0_Static_and_instance_elements_cannot_share_the_same_private_name, (0, ts_1.getTextOfNode)(location));
                }
                else {
                    var prevIsMethod = !!(prev & 8 /* DeclarationMeaning.Method */);
                    var isMethod = !!(meaning & 8 /* DeclarationMeaning.Method */);
                    if (prevIsMethod || isMethod) {
                        if (prevIsMethod !== isMethod) {
                            error(location, ts_1.Diagnostics.Duplicate_identifier_0, (0, ts_1.getTextOfNode)(location));
                        }
                        // If this is a method/method duplication is might be an overload, so this will be handled when overloads are considered
                    }
                    else if (prev & meaning & ~16 /* DeclarationMeaning.PrivateStatic */) {
                        error(location, ts_1.Diagnostics.Duplicate_identifier_0, (0, ts_1.getTextOfNode)(location));
                    }
                    else {
                        names.set(name, prev | meaning);
                    }
                }
            }
            else {
                names.set(name, meaning);
            }
        }
    }
    /**
     * Static members being set on a constructor function may conflict with built-in properties
     * of Function. Esp. in ECMAScript 5 there are non-configurable and non-writable
     * built-in properties. This check issues a transpile error when a class has a static
     * member with the same name as a non-writable built-in property.
     *
     * @see http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.3
     * @see http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.5
     * @see http://www.ecma-international.org/ecma-262/6.0/#sec-properties-of-the-function-constructor
     * @see http://www.ecma-international.org/ecma-262/6.0/#sec-function-instances
     */
    function checkClassForStaticPropertyNameConflicts(node) {
        for (var _i = 0, _a = node.members; _i < _a.length; _i++) {
            var member = _a[_i];
            var memberNameNode = member.name;
            var isStaticMember = (0, ts_1.isStatic)(member);
            if (isStaticMember && memberNameNode) {
                var memberName = (0, ts_1.getPropertyNameForPropertyNameNode)(memberNameNode);
                switch (memberName) {
                    case "name":
                    case "length":
                    case "caller":
                    case "arguments":
                        if (compilerOptions.useDefineForClassFields) {
                            break;
                        }
                    // fall through
                    case "prototype":
                        var message = ts_1.Diagnostics.Static_property_0_conflicts_with_built_in_property_Function_0_of_constructor_function_1;
                        var className = getNameOfSymbolAsWritten(getSymbolOfDeclaration(node));
                        error(memberNameNode, message, memberName, className);
                        break;
                }
            }
        }
    }
    function checkObjectTypeForDuplicateDeclarations(node) {
        var names = new Map();
        for (var _i = 0, _a = node.members; _i < _a.length; _i++) {
            var member = _a[_i];
            if (member.kind === 170 /* SyntaxKind.PropertySignature */) {
                var memberName = void 0;
                var name_37 = member.name;
                switch (name_37.kind) {
                    case 11 /* SyntaxKind.StringLiteral */:
                    case 9 /* SyntaxKind.NumericLiteral */:
                        memberName = name_37.text;
                        break;
                    case 80 /* SyntaxKind.Identifier */:
                        memberName = (0, ts_1.idText)(name_37);
                        break;
                    default:
                        continue;
                }
                if (names.get(memberName)) {
                    error((0, ts_1.getNameOfDeclaration)(member.symbol.valueDeclaration), ts_1.Diagnostics.Duplicate_identifier_0, memberName);
                    error(member.name, ts_1.Diagnostics.Duplicate_identifier_0, memberName);
                }
                else {
                    names.set(memberName, true);
                }
            }
        }
    }
    function checkTypeForDuplicateIndexSignatures(node) {
        if (node.kind === 263 /* SyntaxKind.InterfaceDeclaration */) {
            var nodeSymbol = getSymbolOfDeclaration(node);
            // in case of merging interface declaration it is possible that we'll enter this check procedure several times for every declaration
            // to prevent this run check only for the first declaration of a given kind
            if (nodeSymbol.declarations && nodeSymbol.declarations.length > 0 && nodeSymbol.declarations[0] !== node) {
                return;
            }
        }
        // TypeScript 1.0 spec (April 2014)
        // 3.7.4: An object type can contain at most one string index signature and one numeric index signature.
        // 8.5: A class declaration can have at most one string index member declaration and one numeric index member declaration
        var indexSymbol = getIndexSymbol(getSymbolOfDeclaration(node));
        if (indexSymbol === null || indexSymbol === void 0 ? void 0 : indexSymbol.declarations) {
            var indexSignatureMap_1 = new Map();
            var _loop_24 = function (declaration) {
                if (declaration.parameters.length === 1 && declaration.parameters[0].type) {
                    forEachType(getTypeFromTypeNode(declaration.parameters[0].type), function (type) {
                        var entry = indexSignatureMap_1.get(getTypeId(type));
                        if (entry) {
                            entry.declarations.push(declaration);
                        }
                        else {
                            indexSignatureMap_1.set(getTypeId(type), { type: type, declarations: [declaration] });
                        }
                    });
                }
            };
            for (var _i = 0, _a = indexSymbol.declarations; _i < _a.length; _i++) {
                var declaration = _a[_i];
                _loop_24(declaration);
            }
            indexSignatureMap_1.forEach(function (entry) {
                if (entry.declarations.length > 1) {
                    for (var _i = 0, _a = entry.declarations; _i < _a.length; _i++) {
                        var declaration = _a[_i];
                        error(declaration, ts_1.Diagnostics.Duplicate_index_signature_for_type_0, typeToString(entry.type));
                    }
                }
            });
        }
    }
    function checkPropertyDeclaration(node) {
        // Grammar checking
        if (!checkGrammarModifiers(node) && !checkGrammarProperty(node))
            checkGrammarComputedPropertyName(node.name);
        checkVariableLikeDeclaration(node);
        setNodeLinksForPrivateIdentifierScope(node);
        // property signatures already report "initializer not allowed in ambient context" elsewhere
        if ((0, ts_1.hasSyntacticModifier)(node, 256 /* ModifierFlags.Abstract */) && node.kind === 171 /* SyntaxKind.PropertyDeclaration */ && node.initializer) {
            error(node, ts_1.Diagnostics.Property_0_cannot_have_an_initializer_because_it_is_marked_abstract, (0, ts_1.declarationNameToString)(node.name));
        }
    }
    function checkPropertySignature(node) {
        if ((0, ts_1.isPrivateIdentifier)(node.name)) {
            error(node, ts_1.Diagnostics.Private_identifiers_are_not_allowed_outside_class_bodies);
        }
        return checkPropertyDeclaration(node);
    }
    function checkMethodDeclaration(node) {
        // Grammar checking
        if (!checkGrammarMethod(node))
            checkGrammarComputedPropertyName(node.name);
        if ((0, ts_1.isMethodDeclaration)(node) && node.asteriskToken && (0, ts_1.isIdentifier)(node.name) && (0, ts_1.idText)(node.name) === "constructor") {
            error(node.name, ts_1.Diagnostics.Class_constructor_may_not_be_a_generator);
        }
        // Grammar checking for modifiers is done inside the function checkGrammarFunctionLikeDeclaration
        checkFunctionOrMethodDeclaration(node);
        // method signatures already report "implementation not allowed in ambient context" elsewhere
        if ((0, ts_1.hasSyntacticModifier)(node, 256 /* ModifierFlags.Abstract */) && node.kind === 173 /* SyntaxKind.MethodDeclaration */ && node.body) {
            error(node, ts_1.Diagnostics.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract, (0, ts_1.declarationNameToString)(node.name));
        }
        // Private named methods are only allowed in class declarations
        if ((0, ts_1.isPrivateIdentifier)(node.name) && !(0, ts_1.getContainingClass)(node)) {
            error(node, ts_1.Diagnostics.Private_identifiers_are_not_allowed_outside_class_bodies);
        }
        setNodeLinksForPrivateIdentifierScope(node);
    }
    function setNodeLinksForPrivateIdentifierScope(node) {
        if ((0, ts_1.isPrivateIdentifier)(node.name) && languageVersion < 99 /* ScriptTarget.ESNext */) {
            for (var lexicalScope = (0, ts_1.getEnclosingBlockScopeContainer)(node); !!lexicalScope; lexicalScope = (0, ts_1.getEnclosingBlockScopeContainer)(lexicalScope)) {
                getNodeLinks(lexicalScope).flags |= 4194304 /* NodeCheckFlags.ContainsClassWithPrivateIdentifiers */;
            }
            // If this is a private element in a class expression inside the body of a loop,
            // then we must use a block-scoped binding to store the additional variables required
            // to transform private elements.
            if ((0, ts_1.isClassExpression)(node.parent)) {
                var enclosingIterationStatement = getEnclosingIterationStatement(node.parent);
                if (enclosingIterationStatement) {
                    getNodeLinks(node.name).flags |= 32768 /* NodeCheckFlags.BlockScopedBindingInLoop */;
                    getNodeLinks(enclosingIterationStatement).flags |= 4096 /* NodeCheckFlags.LoopWithCapturedBlockScopedBinding */;
                }
            }
        }
    }
    function checkClassStaticBlockDeclaration(node) {
        checkGrammarModifiers(node);
        (0, ts_1.forEachChild)(node, checkSourceElement);
    }
    function checkConstructorDeclaration(node) {
        // Grammar check on signature of constructor and modifier of the constructor is done in checkSignatureDeclaration function.
        checkSignatureDeclaration(node);
        // Grammar check for checking only related to constructorDeclaration
        if (!checkGrammarConstructorTypeParameters(node))
            checkGrammarConstructorTypeAnnotation(node);
        checkSourceElement(node.body);
        var symbol = getSymbolOfDeclaration(node);
        var firstDeclaration = (0, ts_1.getDeclarationOfKind)(symbol, node.kind);
        // Only type check the symbol once
        if (node === firstDeclaration) {
            checkFunctionOrConstructorSymbol(symbol);
        }
        // exit early in the case of signature - super checks are not relevant to them
        if ((0, ts_1.nodeIsMissing)(node.body)) {
            return;
        }
        addLazyDiagnostic(checkConstructorDeclarationDiagnostics);
        return;
        function isInstancePropertyWithInitializerOrPrivateIdentifierProperty(n) {
            if ((0, ts_1.isPrivateIdentifierClassElementDeclaration)(n)) {
                return true;
            }
            return n.kind === 171 /* SyntaxKind.PropertyDeclaration */ &&
                !(0, ts_1.isStatic)(n) &&
                !!n.initializer;
        }
        function checkConstructorDeclarationDiagnostics() {
            // TS 1.0 spec (April 2014): 8.3.2
            // Constructors of classes with no extends clause may not contain super calls, whereas
            // constructors of derived classes must contain at least one super call somewhere in their function body.
            var containingClassDecl = node.parent;
            if ((0, ts_1.getClassExtendsHeritageElement)(containingClassDecl)) {
                captureLexicalThis(node.parent, containingClassDecl);
                var classExtendsNull = classDeclarationExtendsNull(containingClassDecl);
                var superCall = findFirstSuperCall(node.body);
                if (superCall) {
                    if (classExtendsNull) {
                        error(superCall, ts_1.Diagnostics.A_constructor_cannot_contain_a_super_call_when_its_class_extends_null);
                    }
                    // A super call must be root-level in a constructor if both of the following are true:
                    // - The containing class is a derived class.
                    // - The constructor declares parameter properties
                    //   or the containing class declares instance member variables with initializers.
                    var superCallShouldBeRootLevel = ((0, ts_1.getEmitScriptTarget)(compilerOptions) !== 99 /* ScriptTarget.ESNext */ || !useDefineForClassFields) &&
                        ((0, ts_1.some)(node.parent.members, isInstancePropertyWithInitializerOrPrivateIdentifierProperty) ||
                            (0, ts_1.some)(node.parameters, function (p) { return (0, ts_1.hasSyntacticModifier)(p, 16476 /* ModifierFlags.ParameterPropertyModifier */); }));
                    if (superCallShouldBeRootLevel) {
                        // Until we have better flow analysis, it is an error to place the super call within any kind of block or conditional
                        // See GH #8277
                        if (!superCallIsRootLevelInConstructor(superCall, node.body)) {
                            error(superCall, ts_1.Diagnostics.A_super_call_must_be_a_root_level_statement_within_a_constructor_of_a_derived_class_that_contains_initialized_properties_parameter_properties_or_private_identifiers);
                        }
                        // Skip past any prologue directives to check statements for referring to 'super' or 'this' before a super call
                        else {
                            var superCallStatement = void 0;
                            for (var _i = 0, _a = node.body.statements; _i < _a.length; _i++) {
                                var statement = _a[_i];
                                if ((0, ts_1.isExpressionStatement)(statement) && (0, ts_1.isSuperCall)((0, ts_1.skipOuterExpressions)(statement.expression))) {
                                    superCallStatement = statement;
                                    break;
                                }
                                if (nodeImmediatelyReferencesSuperOrThis(statement)) {
                                    break;
                                }
                            }
                            // Until we have better flow analysis, it is an error to place the super call within any kind of block or conditional
                            // See GH #8277
                            if (superCallStatement === undefined) {
                                error(node, ts_1.Diagnostics.A_super_call_must_be_the_first_statement_in_the_constructor_to_refer_to_super_or_this_when_a_derived_class_contains_initialized_properties_parameter_properties_or_private_identifiers);
                            }
                        }
                    }
                }
                else if (!classExtendsNull) {
                    error(node, ts_1.Diagnostics.Constructors_for_derived_classes_must_contain_a_super_call);
                }
            }
        }
    }
    function superCallIsRootLevelInConstructor(superCall, body) {
        var superCallParent = (0, ts_1.walkUpParenthesizedExpressions)(superCall.parent);
        return (0, ts_1.isExpressionStatement)(superCallParent) && superCallParent.parent === body;
    }
    function nodeImmediatelyReferencesSuperOrThis(node) {
        if (node.kind === 108 /* SyntaxKind.SuperKeyword */ || node.kind === 110 /* SyntaxKind.ThisKeyword */) {
            return true;
        }
        if ((0, ts_1.isThisContainerOrFunctionBlock)(node)) {
            return false;
        }
        return !!(0, ts_1.forEachChild)(node, nodeImmediatelyReferencesSuperOrThis);
    }
    function checkAccessorDeclaration(node) {
        if ((0, ts_1.isIdentifier)(node.name) && (0, ts_1.idText)(node.name) === "constructor" && (0, ts_1.isClassLike)(node.parent)) {
            error(node.name, ts_1.Diagnostics.Class_constructor_may_not_be_an_accessor);
        }
        addLazyDiagnostic(checkAccessorDeclarationDiagnostics);
        checkSourceElement(node.body);
        setNodeLinksForPrivateIdentifierScope(node);
        function checkAccessorDeclarationDiagnostics() {
            // Grammar checking accessors
            if (!checkGrammarFunctionLikeDeclaration(node) && !checkGrammarAccessor(node))
                checkGrammarComputedPropertyName(node.name);
            checkDecorators(node);
            checkSignatureDeclaration(node);
            if (node.kind === 176 /* SyntaxKind.GetAccessor */) {
                if (!(node.flags & 16777216 /* NodeFlags.Ambient */) && (0, ts_1.nodeIsPresent)(node.body) && (node.flags & 256 /* NodeFlags.HasImplicitReturn */)) {
                    if (!(node.flags & 512 /* NodeFlags.HasExplicitReturn */)) {
                        error(node.name, ts_1.Diagnostics.A_get_accessor_must_return_a_value);
                    }
                }
            }
            // Do not use hasDynamicName here, because that returns false for well known symbols.
            // We want to perform checkComputedPropertyName for all computed properties, including
            // well known symbols.
            if (node.name.kind === 166 /* SyntaxKind.ComputedPropertyName */) {
                checkComputedPropertyName(node.name);
            }
            if (hasBindableName(node)) {
                // TypeScript 1.0 spec (April 2014): 8.4.3
                // Accessors for the same member name must specify the same accessibility.
                var symbol = getSymbolOfDeclaration(node);
                var getter = (0, ts_1.getDeclarationOfKind)(symbol, 176 /* SyntaxKind.GetAccessor */);
                var setter = (0, ts_1.getDeclarationOfKind)(symbol, 177 /* SyntaxKind.SetAccessor */);
                if (getter && setter && !(getNodeCheckFlags(getter) & 1 /* NodeCheckFlags.TypeChecked */)) {
                    getNodeLinks(getter).flags |= 1 /* NodeCheckFlags.TypeChecked */;
                    var getterFlags = (0, ts_1.getEffectiveModifierFlags)(getter);
                    var setterFlags = (0, ts_1.getEffectiveModifierFlags)(setter);
                    if ((getterFlags & 256 /* ModifierFlags.Abstract */) !== (setterFlags & 256 /* ModifierFlags.Abstract */)) {
                        error(getter.name, ts_1.Diagnostics.Accessors_must_both_be_abstract_or_non_abstract);
                        error(setter.name, ts_1.Diagnostics.Accessors_must_both_be_abstract_or_non_abstract);
                    }
                    if (((getterFlags & 16 /* ModifierFlags.Protected */) && !(setterFlags & (16 /* ModifierFlags.Protected */ | 8 /* ModifierFlags.Private */))) ||
                        ((getterFlags & 8 /* ModifierFlags.Private */) && !(setterFlags & 8 /* ModifierFlags.Private */))) {
                        error(getter.name, ts_1.Diagnostics.A_get_accessor_must_be_at_least_as_accessible_as_the_setter);
                        error(setter.name, ts_1.Diagnostics.A_get_accessor_must_be_at_least_as_accessible_as_the_setter);
                    }
                }
            }
            var returnType = getTypeOfAccessors(getSymbolOfDeclaration(node));
            if (node.kind === 176 /* SyntaxKind.GetAccessor */) {
                checkAllCodePathsInNonVoidFunctionReturnOrThrow(node, returnType);
            }
        }
    }
    function checkMissingDeclaration(node) {
        checkDecorators(node);
    }
    function getEffectiveTypeArgumentAtIndex(node, typeParameters, index) {
        if (node.typeArguments && index < node.typeArguments.length) {
            return getTypeFromTypeNode(node.typeArguments[index]);
        }
        return getEffectiveTypeArguments(node, typeParameters)[index];
    }
    function getEffectiveTypeArguments(node, typeParameters) {
        return fillMissingTypeArguments((0, ts_1.map)(node.typeArguments, getTypeFromTypeNode), typeParameters, getMinTypeArgumentCount(typeParameters), (0, ts_1.isInJSFile)(node));
    }
    function checkTypeArgumentConstraints(node, typeParameters) {
        var typeArguments;
        var mapper;
        var result = true;
        for (var i = 0; i < typeParameters.length; i++) {
            var constraint = getConstraintOfTypeParameter(typeParameters[i]);
            if (constraint) {
                if (!typeArguments) {
                    typeArguments = getEffectiveTypeArguments(node, typeParameters);
                    mapper = createTypeMapper(typeParameters, typeArguments);
                }
                result = result && checkTypeAssignableTo(typeArguments[i], instantiateType(constraint, mapper), node.typeArguments[i], ts_1.Diagnostics.Type_0_does_not_satisfy_the_constraint_1);
            }
        }
        return result;
    }
    function getTypeParametersForTypeAndSymbol(type, symbol) {
        if (!isErrorType(type)) {
            return symbol.flags & 524288 /* SymbolFlags.TypeAlias */ && getSymbolLinks(symbol).typeParameters ||
                ((0, ts_1.getObjectFlags)(type) & 4 /* ObjectFlags.Reference */ ? type.target.localTypeParameters : undefined);
        }
        return undefined;
    }
    function getTypeParametersForTypeReferenceOrImport(node) {
        var type = getTypeFromTypeNode(node);
        if (!isErrorType(type)) {
            var symbol = getNodeLinks(node).resolvedSymbol;
            if (symbol) {
                return getTypeParametersForTypeAndSymbol(type, symbol);
            }
        }
        return undefined;
    }
    function checkTypeReferenceNode(node) {
        checkGrammarTypeArguments(node, node.typeArguments);
        if (node.kind === 182 /* SyntaxKind.TypeReference */ && !(0, ts_1.isInJSFile)(node) && !(0, ts_1.isInJSDoc)(node) && node.typeArguments && node.typeName.end !== node.typeArguments.pos) {
            // If there was a token between the type name and the type arguments, check if it was a DotToken
            var sourceFile = (0, ts_1.getSourceFileOfNode)(node);
            if ((0, ts_1.scanTokenAtPosition)(sourceFile, node.typeName.end) === 25 /* SyntaxKind.DotToken */) {
                grammarErrorAtPos(node, (0, ts_1.skipTrivia)(sourceFile.text, node.typeName.end), 1, ts_1.Diagnostics.JSDoc_types_can_only_be_used_inside_documentation_comments);
            }
        }
        (0, ts_1.forEach)(node.typeArguments, checkSourceElement);
        checkTypeReferenceOrImport(node);
    }
    function checkTypeReferenceOrImport(node) {
        var type = getTypeFromTypeNode(node);
        if (!isErrorType(type)) {
            if (node.typeArguments) {
                addLazyDiagnostic(function () {
                    var typeParameters = getTypeParametersForTypeReferenceOrImport(node);
                    if (typeParameters) {
                        checkTypeArgumentConstraints(node, typeParameters);
                    }
                });
            }
            var symbol = getNodeLinks(node).resolvedSymbol;
            if (symbol) {
                if ((0, ts_1.some)(symbol.declarations, function (d) { return (0, ts_1.isTypeDeclaration)(d) && !!(d.flags & 268435456 /* NodeFlags.Deprecated */); })) {
                    addDeprecatedSuggestion(getDeprecatedSuggestionNode(node), symbol.declarations, symbol.escapedName);
                }
            }
        }
    }
    function getTypeArgumentConstraint(node) {
        var typeReferenceNode = (0, ts_1.tryCast)(node.parent, ts_1.isTypeReferenceType);
        if (!typeReferenceNode)
            return undefined;
        var typeParameters = getTypeParametersForTypeReferenceOrImport(typeReferenceNode);
        if (!typeParameters)
            return undefined;
        var constraint = getConstraintOfTypeParameter(typeParameters[typeReferenceNode.typeArguments.indexOf(node)]);
        return constraint && instantiateType(constraint, createTypeMapper(typeParameters, getEffectiveTypeArguments(typeReferenceNode, typeParameters)));
    }
    function checkTypeQuery(node) {
        getTypeFromTypeQueryNode(node);
    }
    function checkTypeLiteral(node) {
        (0, ts_1.forEach)(node.members, checkSourceElement);
        addLazyDiagnostic(checkTypeLiteralDiagnostics);
        function checkTypeLiteralDiagnostics() {
            var type = getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node);
            checkIndexConstraints(type, type.symbol);
            checkTypeForDuplicateIndexSignatures(node);
            checkObjectTypeForDuplicateDeclarations(node);
        }
    }
    function checkArrayType(node) {
        checkSourceElement(node.elementType);
    }
    function checkTupleType(node) {
        var elementTypes = node.elements;
        var seenOptionalElement = false;
        var seenRestElement = false;
        var hasNamedElement = (0, ts_1.some)(elementTypes, ts_1.isNamedTupleMember);
        for (var _i = 0, elementTypes_1 = elementTypes; _i < elementTypes_1.length; _i++) {
            var e = elementTypes_1[_i];
            if (e.kind !== 201 /* SyntaxKind.NamedTupleMember */ && hasNamedElement) {
                grammarErrorOnNode(e, ts_1.Diagnostics.Tuple_members_must_all_have_names_or_all_not_have_names);
                break;
            }
            var flags = getTupleElementFlags(e);
            if (flags & 8 /* ElementFlags.Variadic */) {
                var type = getTypeFromTypeNode(e.type);
                if (!isArrayLikeType(type)) {
                    error(e, ts_1.Diagnostics.A_rest_element_type_must_be_an_array_type);
                    break;
                }
                if (isArrayType(type) || isTupleType(type) && type.target.combinedFlags & 4 /* ElementFlags.Rest */) {
                    seenRestElement = true;
                }
            }
            else if (flags & 4 /* ElementFlags.Rest */) {
                if (seenRestElement) {
                    grammarErrorOnNode(e, ts_1.Diagnostics.A_rest_element_cannot_follow_another_rest_element);
                    break;
                }
                seenRestElement = true;
            }
            else if (flags & 2 /* ElementFlags.Optional */) {
                if (seenRestElement) {
                    grammarErrorOnNode(e, ts_1.Diagnostics.An_optional_element_cannot_follow_a_rest_element);
                    break;
                }
                seenOptionalElement = true;
            }
            else if (seenOptionalElement) {
                grammarErrorOnNode(e, ts_1.Diagnostics.A_required_element_cannot_follow_an_optional_element);
                break;
            }
        }
        (0, ts_1.forEach)(node.elements, checkSourceElement);
        getTypeFromTypeNode(node);
    }
    function checkUnionOrIntersectionType(node) {
        (0, ts_1.forEach)(node.types, checkSourceElement);
        getTypeFromTypeNode(node);
    }
    function checkIndexedAccessIndexType(type, accessNode) {
        if (!(type.flags & 8388608 /* TypeFlags.IndexedAccess */)) {
            return type;
        }
        // Check if the index type is assignable to 'keyof T' for the object type.
        var objectType = type.objectType;
        var indexType = type.indexType;
        if (isTypeAssignableTo(indexType, getIndexType(objectType, 0 /* IndexFlags.None */))) {
            if (accessNode.kind === 211 /* SyntaxKind.ElementAccessExpression */ && (0, ts_1.isAssignmentTarget)(accessNode) &&
                (0, ts_1.getObjectFlags)(objectType) & 32 /* ObjectFlags.Mapped */ && getMappedTypeModifiers(objectType) & 1 /* MappedTypeModifiers.IncludeReadonly */) {
                error(accessNode, ts_1.Diagnostics.Index_signature_in_type_0_only_permits_reading, typeToString(objectType));
            }
            return type;
        }
        // Check if we're indexing with a numeric type and if either object or index types
        // is a generic type with a constraint that has a numeric index signature.
        var apparentObjectType = getApparentType(objectType);
        if (getIndexInfoOfType(apparentObjectType, numberType) && isTypeAssignableToKind(indexType, 296 /* TypeFlags.NumberLike */)) {
            return type;
        }
        if (isGenericObjectType(objectType)) {
            var propertyName_1 = getPropertyNameFromIndex(indexType, accessNode);
            if (propertyName_1) {
                var propertySymbol = forEachType(apparentObjectType, function (t) { return getPropertyOfType(t, propertyName_1); });
                if (propertySymbol && (0, ts_1.getDeclarationModifierFlagsFromSymbol)(propertySymbol) & 24 /* ModifierFlags.NonPublicAccessibilityModifier */) {
                    error(accessNode, ts_1.Diagnostics.Private_or_protected_member_0_cannot_be_accessed_on_a_type_parameter, (0, ts_1.unescapeLeadingUnderscores)(propertyName_1));
                    return errorType;
                }
            }
        }
        error(accessNode, ts_1.Diagnostics.Type_0_cannot_be_used_to_index_type_1, typeToString(indexType), typeToString(objectType));
        return errorType;
    }
    function checkIndexedAccessType(node) {
        checkSourceElement(node.objectType);
        checkSourceElement(node.indexType);
        checkIndexedAccessIndexType(getTypeFromIndexedAccessTypeNode(node), node);
    }
    function checkMappedType(node) {
        checkGrammarMappedType(node);
        checkSourceElement(node.typeParameter);
        checkSourceElement(node.nameType);
        checkSourceElement(node.type);
        if (!node.type) {
            reportImplicitAny(node, anyType);
        }
        var type = getTypeFromMappedTypeNode(node);
        var nameType = getNameTypeFromMappedType(type);
        if (nameType) {
            checkTypeAssignableTo(nameType, keyofConstraintType, node.nameType);
        }
        else {
            var constraintType = getConstraintTypeFromMappedType(type);
            checkTypeAssignableTo(constraintType, keyofConstraintType, (0, ts_1.getEffectiveConstraintOfTypeParameter)(node.typeParameter));
        }
    }
    function checkGrammarMappedType(node) {
        var _a;
        if ((_a = node.members) === null || _a === void 0 ? void 0 : _a.length) {
            return grammarErrorOnNode(node.members[0], ts_1.Diagnostics.A_mapped_type_may_not_declare_properties_or_methods);
        }
    }
    function checkThisType(node) {
        getTypeFromThisTypeNode(node);
    }
    function checkTypeOperator(node) {
        checkGrammarTypeOperatorNode(node);
        checkSourceElement(node.type);
    }
    function checkConditionalType(node) {
        (0, ts_1.forEachChild)(node, checkSourceElement);
    }
    function checkInferType(node) {
        if (!(0, ts_1.findAncestor)(node, function (n) { return n.parent && n.parent.kind === 193 /* SyntaxKind.ConditionalType */ && n.parent.extendsType === n; })) {
            grammarErrorOnNode(node, ts_1.Diagnostics.infer_declarations_are_only_permitted_in_the_extends_clause_of_a_conditional_type);
        }
        checkSourceElement(node.typeParameter);
        var symbol = getSymbolOfDeclaration(node.typeParameter);
        if (symbol.declarations && symbol.declarations.length > 1) {
            var links = getSymbolLinks(symbol);
            if (!links.typeParametersChecked) {
                links.typeParametersChecked = true;
                var typeParameter = getDeclaredTypeOfTypeParameter(symbol);
                var declarations = (0, ts_1.getDeclarationsOfKind)(symbol, 167 /* SyntaxKind.TypeParameter */);
                if (!areTypeParametersIdentical(declarations, [typeParameter], function (decl) { return [decl]; })) {
                    // Report an error on every conflicting declaration.
                    var name_38 = symbolToString(symbol);
                    for (var _i = 0, declarations_3 = declarations; _i < declarations_3.length; _i++) {
                        var declaration = declarations_3[_i];
                        error(declaration.name, ts_1.Diagnostics.All_declarations_of_0_must_have_identical_constraints, name_38);
                    }
                }
            }
        }
        registerForUnusedIdentifiersCheck(node);
    }
    function checkTemplateLiteralType(node) {
        for (var _i = 0, _a = node.templateSpans; _i < _a.length; _i++) {
            var span = _a[_i];
            checkSourceElement(span.type);
            var type = getTypeFromTypeNode(span.type);
            checkTypeAssignableTo(type, templateConstraintType, span.type);
        }
        getTypeFromTypeNode(node);
    }
    function checkImportType(node) {
        checkSourceElement(node.argument);
        if (node.assertions) {
            var override = (0, ts_1.getResolutionModeOverrideForClause)(node.assertions.assertClause, grammarErrorOnNode);
            if (override) {
                if (!(0, ts_1.isNightly)()) {
                    grammarErrorOnNode(node.assertions.assertClause, ts_1.Diagnostics.resolution_mode_assertions_are_unstable_Use_nightly_TypeScript_to_silence_this_error_Try_updating_with_npm_install_D_typescript_next);
                }
                if ((0, ts_1.getEmitModuleResolutionKind)(compilerOptions) !== ts_1.ModuleResolutionKind.Node16 && (0, ts_1.getEmitModuleResolutionKind)(compilerOptions) !== ts_1.ModuleResolutionKind.NodeNext) {
                    grammarErrorOnNode(node.assertions.assertClause, ts_1.Diagnostics.resolution_mode_assertions_are_only_supported_when_moduleResolution_is_node16_or_nodenext);
                }
            }
        }
        checkTypeReferenceOrImport(node);
    }
    function checkNamedTupleMember(node) {
        if (node.dotDotDotToken && node.questionToken) {
            grammarErrorOnNode(node, ts_1.Diagnostics.A_tuple_member_cannot_be_both_optional_and_rest);
        }
        if (node.type.kind === 189 /* SyntaxKind.OptionalType */) {
            grammarErrorOnNode(node.type, ts_1.Diagnostics.A_labeled_tuple_element_is_declared_as_optional_with_a_question_mark_after_the_name_and_before_the_colon_rather_than_after_the_type);
        }
        if (node.type.kind === 190 /* SyntaxKind.RestType */) {
            grammarErrorOnNode(node.type, ts_1.Diagnostics.A_labeled_tuple_element_is_declared_as_rest_with_a_before_the_name_rather_than_before_the_type);
        }
        checkSourceElement(node.type);
        getTypeFromTypeNode(node);
    }
    function isPrivateWithinAmbient(node) {
        return ((0, ts_1.hasEffectiveModifier)(node, 8 /* ModifierFlags.Private */) || (0, ts_1.isPrivateIdentifierClassElementDeclaration)(node)) && !!(node.flags & 16777216 /* NodeFlags.Ambient */);
    }
    function getEffectiveDeclarationFlags(n, flagsToCheck) {
        var flags = (0, ts_1.getCombinedModifierFlags)(n);
        // children of classes (even ambient classes) should not be marked as ambient or export
        // because those flags have no useful semantics there.
        if (n.parent.kind !== 263 /* SyntaxKind.InterfaceDeclaration */ &&
            n.parent.kind !== 262 /* SyntaxKind.ClassDeclaration */ &&
            n.parent.kind !== 230 /* SyntaxKind.ClassExpression */ &&
            n.flags & 16777216 /* NodeFlags.Ambient */) {
            if (!(flags & 2 /* ModifierFlags.Ambient */) && !((0, ts_1.isModuleBlock)(n.parent) && (0, ts_1.isModuleDeclaration)(n.parent.parent) && (0, ts_1.isGlobalScopeAugmentation)(n.parent.parent))) {
                // It is nested in an ambient context, which means it is automatically exported
                flags |= 1 /* ModifierFlags.Export */;
            }
            flags |= 2 /* ModifierFlags.Ambient */;
        }
        return flags & flagsToCheck;
    }
    function checkFunctionOrConstructorSymbol(symbol) {
        addLazyDiagnostic(function () { return checkFunctionOrConstructorSymbolWorker(symbol); });
    }
    function checkFunctionOrConstructorSymbolWorker(symbol) {
        function getCanonicalOverload(overloads, implementation) {
            // Consider the canonical set of flags to be the flags of the bodyDeclaration or the first declaration
            // Error on all deviations from this canonical set of flags
            // The caveat is that if some overloads are defined in lib.d.ts, we don't want to
            // report the errors on those. To achieve this, we will say that the implementation is
            // the canonical signature only if it is in the same container as the first overload
            var implementationSharesContainerWithFirstOverload = implementation !== undefined && implementation.parent === overloads[0].parent;
            return implementationSharesContainerWithFirstOverload ? implementation : overloads[0];
        }
        function checkFlagAgreementBetweenOverloads(overloads, implementation, flagsToCheck, someOverloadFlags, allOverloadFlags) {
            // Error if some overloads have a flag that is not shared by all overloads. To find the
            // deviations, we XOR someOverloadFlags with allOverloadFlags
            var someButNotAllOverloadFlags = someOverloadFlags ^ allOverloadFlags;
            if (someButNotAllOverloadFlags !== 0) {
                var canonicalFlags_1 = getEffectiveDeclarationFlags(getCanonicalOverload(overloads, implementation), flagsToCheck);
                (0, ts_1.forEach)(overloads, function (o) {
                    var deviation = getEffectiveDeclarationFlags(o, flagsToCheck) ^ canonicalFlags_1;
                    if (deviation & 1 /* ModifierFlags.Export */) {
                        error((0, ts_1.getNameOfDeclaration)(o), ts_1.Diagnostics.Overload_signatures_must_all_be_exported_or_non_exported);
                    }
                    else if (deviation & 2 /* ModifierFlags.Ambient */) {
                        error((0, ts_1.getNameOfDeclaration)(o), ts_1.Diagnostics.Overload_signatures_must_all_be_ambient_or_non_ambient);
                    }
                    else if (deviation & (8 /* ModifierFlags.Private */ | 16 /* ModifierFlags.Protected */)) {
                        error((0, ts_1.getNameOfDeclaration)(o) || o, ts_1.Diagnostics.Overload_signatures_must_all_be_public_private_or_protected);
                    }
                    else if (deviation & 256 /* ModifierFlags.Abstract */) {
                        error((0, ts_1.getNameOfDeclaration)(o), ts_1.Diagnostics.Overload_signatures_must_all_be_abstract_or_non_abstract);
                    }
                });
            }
        }
        function checkQuestionTokenAgreementBetweenOverloads(overloads, implementation, someHaveQuestionToken, allHaveQuestionToken) {
            if (someHaveQuestionToken !== allHaveQuestionToken) {
                var canonicalHasQuestionToken_1 = (0, ts_1.hasQuestionToken)(getCanonicalOverload(overloads, implementation));
                (0, ts_1.forEach)(overloads, function (o) {
                    var deviation = (0, ts_1.hasQuestionToken)(o) !== canonicalHasQuestionToken_1;
                    if (deviation) {
                        error((0, ts_1.getNameOfDeclaration)(o), ts_1.Diagnostics.Overload_signatures_must_all_be_optional_or_required);
                    }
                });
            }
        }
        var flagsToCheck = 1 /* ModifierFlags.Export */ | 2 /* ModifierFlags.Ambient */ | 8 /* ModifierFlags.Private */ | 16 /* ModifierFlags.Protected */ | 256 /* ModifierFlags.Abstract */;
        var someNodeFlags = 0 /* ModifierFlags.None */;
        var allNodeFlags = flagsToCheck;
        var someHaveQuestionToken = false;
        var allHaveQuestionToken = true;
        var hasOverloads = false;
        var bodyDeclaration;
        var lastSeenNonAmbientDeclaration;
        var previousDeclaration;
        var declarations = symbol.declarations;
        var isConstructor = (symbol.flags & 16384 /* SymbolFlags.Constructor */) !== 0;
        function reportImplementationExpectedError(node) {
            if (node.name && (0, ts_1.nodeIsMissing)(node.name)) {
                return;
            }
            var seen = false;
            var subsequentNode = (0, ts_1.forEachChild)(node.parent, function (c) {
                if (seen) {
                    return c;
                }
                else {
                    seen = c === node;
                }
            });
            // We may be here because of some extra nodes between overloads that could not be parsed into a valid node.
            // In this case the subsequent node is not really consecutive (.pos !== node.end), and we must ignore it here.
            if (subsequentNode && subsequentNode.pos === node.end) {
                if (subsequentNode.kind === node.kind) {
                    var errorNode_1 = subsequentNode.name || subsequentNode;
                    var subsequentName = subsequentNode.name;
                    if (node.name && subsequentName && (
                    // both are private identifiers
                    (0, ts_1.isPrivateIdentifier)(node.name) && (0, ts_1.isPrivateIdentifier)(subsequentName) && node.name.escapedText === subsequentName.escapedText ||
                        // Both are computed property names
                        (0, ts_1.isComputedPropertyName)(node.name) && (0, ts_1.isComputedPropertyName)(subsequentName) && isTypeIdenticalTo(checkComputedPropertyName(node.name), checkComputedPropertyName(subsequentName)) ||
                        // Both are literal property names that are the same.
                        (0, ts_1.isPropertyNameLiteral)(node.name) && (0, ts_1.isPropertyNameLiteral)(subsequentName) &&
                            (0, ts_1.getEscapedTextOfIdentifierOrLiteral)(node.name) === (0, ts_1.getEscapedTextOfIdentifierOrLiteral)(subsequentName))) {
                        var reportError_1 = (node.kind === 173 /* SyntaxKind.MethodDeclaration */ || node.kind === 172 /* SyntaxKind.MethodSignature */) &&
                            (0, ts_1.isStatic)(node) !== (0, ts_1.isStatic)(subsequentNode);
                        // we can get here in two cases
                        // 1. mixed static and instance class members
                        // 2. something with the same name was defined before the set of overloads that prevents them from merging
                        // here we'll report error only for the first case since for second we should already report error in binder
                        if (reportError_1) {
                            var diagnostic = (0, ts_1.isStatic)(node) ? ts_1.Diagnostics.Function_overload_must_be_static : ts_1.Diagnostics.Function_overload_must_not_be_static;
                            error(errorNode_1, diagnostic);
                        }
                        return;
                    }
                    if ((0, ts_1.nodeIsPresent)(subsequentNode.body)) {
                        error(errorNode_1, ts_1.Diagnostics.Function_implementation_name_must_be_0, (0, ts_1.declarationNameToString)(node.name));
                        return;
                    }
                }
            }
            var errorNode = node.name || node;
            if (isConstructor) {
                error(errorNode, ts_1.Diagnostics.Constructor_implementation_is_missing);
            }
            else {
                // Report different errors regarding non-consecutive blocks of declarations depending on whether
                // the node in question is abstract.
                if ((0, ts_1.hasSyntacticModifier)(node, 256 /* ModifierFlags.Abstract */)) {
                    error(errorNode, ts_1.Diagnostics.All_declarations_of_an_abstract_method_must_be_consecutive);
                }
                else {
                    error(errorNode, ts_1.Diagnostics.Function_implementation_is_missing_or_not_immediately_following_the_declaration);
                }
            }
        }
        var duplicateFunctionDeclaration = false;
        var multipleConstructorImplementation = false;
        var hasNonAmbientClass = false;
        var functionDeclarations = [];
        if (declarations) {
            for (var _i = 0, declarations_4 = declarations; _i < declarations_4.length; _i++) {
                var current = declarations_4[_i];
                var node = current;
                var inAmbientContext = node.flags & 16777216 /* NodeFlags.Ambient */;
                var inAmbientContextOrInterface = node.parent && (node.parent.kind === 263 /* SyntaxKind.InterfaceDeclaration */ || node.parent.kind === 186 /* SyntaxKind.TypeLiteral */) || inAmbientContext;
                if (inAmbientContextOrInterface) {
                    // check if declarations are consecutive only if they are non-ambient
                    // 1. ambient declarations can be interleaved
                    // i.e. this is legal
                    //     declare function foo();
                    //     declare function bar();
                    //     declare function foo();
                    // 2. mixing ambient and non-ambient declarations is a separate error that will be reported - do not want to report an extra one
                    previousDeclaration = undefined;
                }
                if ((node.kind === 262 /* SyntaxKind.ClassDeclaration */ || node.kind === 230 /* SyntaxKind.ClassExpression */) && !inAmbientContext) {
                    hasNonAmbientClass = true;
                }
                if (node.kind === 261 /* SyntaxKind.FunctionDeclaration */ || node.kind === 173 /* SyntaxKind.MethodDeclaration */ || node.kind === 172 /* SyntaxKind.MethodSignature */ || node.kind === 175 /* SyntaxKind.Constructor */) {
                    functionDeclarations.push(node);
                    var currentNodeFlags = getEffectiveDeclarationFlags(node, flagsToCheck);
                    someNodeFlags |= currentNodeFlags;
                    allNodeFlags &= currentNodeFlags;
                    someHaveQuestionToken = someHaveQuestionToken || (0, ts_1.hasQuestionToken)(node);
                    allHaveQuestionToken = allHaveQuestionToken && (0, ts_1.hasQuestionToken)(node);
                    var bodyIsPresent = (0, ts_1.nodeIsPresent)(node.body);
                    if (bodyIsPresent && bodyDeclaration) {
                        if (isConstructor) {
                            multipleConstructorImplementation = true;
                        }
                        else {
                            duplicateFunctionDeclaration = true;
                        }
                    }
                    else if ((previousDeclaration === null || previousDeclaration === void 0 ? void 0 : previousDeclaration.parent) === node.parent && previousDeclaration.end !== node.pos) {
                        reportImplementationExpectedError(previousDeclaration);
                    }
                    if (bodyIsPresent) {
                        if (!bodyDeclaration) {
                            bodyDeclaration = node;
                        }
                    }
                    else {
                        hasOverloads = true;
                    }
                    previousDeclaration = node;
                    if (!inAmbientContextOrInterface) {
                        lastSeenNonAmbientDeclaration = node;
                    }
                }
                if ((0, ts_1.isInJSFile)(current) && (0, ts_1.isFunctionLike)(current) && current.jsDoc) {
                    for (var _a = 0, _b = current.jsDoc; _a < _b.length; _a++) {
                        var node_1 = _b[_a];
                        if (node_1.tags) {
                            for (var _c = 0, _d = node_1.tags; _c < _d.length; _c++) {
                                var tag = _d[_c];
                                if ((0, ts_1.isJSDocOverloadTag)(tag)) {
                                    hasOverloads = true;
                                }
                            }
                        }
                    }
                }
            }
        }
        if (multipleConstructorImplementation) {
            (0, ts_1.forEach)(functionDeclarations, function (declaration) {
                error(declaration, ts_1.Diagnostics.Multiple_constructor_implementations_are_not_allowed);
            });
        }
        if (duplicateFunctionDeclaration) {
            (0, ts_1.forEach)(functionDeclarations, function (declaration) {
                error((0, ts_1.getNameOfDeclaration)(declaration) || declaration, ts_1.Diagnostics.Duplicate_function_implementation);
            });
        }
        if (hasNonAmbientClass && !isConstructor && symbol.flags & 16 /* SymbolFlags.Function */ && declarations) {
            var relatedDiagnostics_1 = (0, ts_1.filter)(declarations, function (d) { return d.kind === 262 /* SyntaxKind.ClassDeclaration */; })
                .map(function (d) { return (0, ts_1.createDiagnosticForNode)(d, ts_1.Diagnostics.Consider_adding_a_declare_modifier_to_this_class); });
            (0, ts_1.forEach)(declarations, function (declaration) {
                var diagnostic = declaration.kind === 262 /* SyntaxKind.ClassDeclaration */
                    ? ts_1.Diagnostics.Class_declaration_cannot_implement_overload_list_for_0
                    : declaration.kind === 261 /* SyntaxKind.FunctionDeclaration */
                        ? ts_1.Diagnostics.Function_with_bodies_can_only_merge_with_classes_that_are_ambient
                        : undefined;
                if (diagnostic) {
                    ts_1.addRelatedInfo.apply(void 0, __spreadArray([error((0, ts_1.getNameOfDeclaration)(declaration) || declaration, diagnostic, (0, ts_1.symbolName)(symbol))], relatedDiagnostics_1, false));
                }
            });
        }
        // Abstract methods can't have an implementation -- in particular, they don't need one.
        if (lastSeenNonAmbientDeclaration && !lastSeenNonAmbientDeclaration.body &&
            !(0, ts_1.hasSyntacticModifier)(lastSeenNonAmbientDeclaration, 256 /* ModifierFlags.Abstract */) && !lastSeenNonAmbientDeclaration.questionToken) {
            reportImplementationExpectedError(lastSeenNonAmbientDeclaration);
        }
        if (hasOverloads) {
            if (declarations) {
                checkFlagAgreementBetweenOverloads(declarations, bodyDeclaration, flagsToCheck, someNodeFlags, allNodeFlags);
                checkQuestionTokenAgreementBetweenOverloads(declarations, bodyDeclaration, someHaveQuestionToken, allHaveQuestionToken);
            }
            if (bodyDeclaration) {
                var signatures = getSignaturesOfSymbol(symbol);
                var bodySignature = getSignatureFromDeclaration(bodyDeclaration);
                for (var _e = 0, signatures_10 = signatures; _e < signatures_10.length; _e++) {
                    var signature = signatures_10[_e];
                    if (!isImplementationCompatibleWithOverload(bodySignature, signature)) {
                        var errorNode = signature.declaration && (0, ts_1.isJSDocSignature)(signature.declaration)
                            ? signature.declaration.parent.tagName
                            : signature.declaration;
                        (0, ts_1.addRelatedInfo)(error(errorNode, ts_1.Diagnostics.This_overload_signature_is_not_compatible_with_its_implementation_signature), (0, ts_1.createDiagnosticForNode)(bodyDeclaration, ts_1.Diagnostics.The_implementation_signature_is_declared_here));
                        break;
                    }
                }
            }
        }
    }
    function checkExportsOnMergedDeclarations(node) {
        addLazyDiagnostic(function () { return checkExportsOnMergedDeclarationsWorker(node); });
    }
    function checkExportsOnMergedDeclarationsWorker(node) {
        // if localSymbol is defined on node then node itself is exported - check is required
        var symbol = node.localSymbol;
        if (!symbol) {
            // local symbol is undefined => this declaration is non-exported.
            // however symbol might contain other declarations that are exported
            symbol = getSymbolOfDeclaration(node);
            if (!symbol.exportSymbol) {
                // this is a pure local symbol (all declarations are non-exported) - no need to check anything
                return;
            }
        }
        // run the check only for the first declaration in the list
        if ((0, ts_1.getDeclarationOfKind)(symbol, node.kind) !== node) {
            return;
        }
        var exportedDeclarationSpaces = 0 /* DeclarationSpaces.None */;
        var nonExportedDeclarationSpaces = 0 /* DeclarationSpaces.None */;
        var defaultExportedDeclarationSpaces = 0 /* DeclarationSpaces.None */;
        for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {
            var d = _a[_i];
            var declarationSpaces = getDeclarationSpaces(d);
            var effectiveDeclarationFlags = getEffectiveDeclarationFlags(d, 1 /* ModifierFlags.Export */ | 1024 /* ModifierFlags.Default */);
            if (effectiveDeclarationFlags & 1 /* ModifierFlags.Export */) {
                if (effectiveDeclarationFlags & 1024 /* ModifierFlags.Default */) {
                    defaultExportedDeclarationSpaces |= declarationSpaces;
                }
                else {
                    exportedDeclarationSpaces |= declarationSpaces;
                }
            }
            else {
                nonExportedDeclarationSpaces |= declarationSpaces;
            }
        }
        // Spaces for anything not declared a 'default export'.
        var nonDefaultExportedDeclarationSpaces = exportedDeclarationSpaces | nonExportedDeclarationSpaces;
        var commonDeclarationSpacesForExportsAndLocals = exportedDeclarationSpaces & nonExportedDeclarationSpaces;
        var commonDeclarationSpacesForDefaultAndNonDefault = defaultExportedDeclarationSpaces & nonDefaultExportedDeclarationSpaces;
        if (commonDeclarationSpacesForExportsAndLocals || commonDeclarationSpacesForDefaultAndNonDefault) {
            // declaration spaces for exported and non-exported declarations intersect
            for (var _b = 0, _c = symbol.declarations; _b < _c.length; _b++) {
                var d = _c[_b];
                var declarationSpaces = getDeclarationSpaces(d);
                var name_39 = (0, ts_1.getNameOfDeclaration)(d);
                // Only error on the declarations that contributed to the intersecting spaces.
                if (declarationSpaces & commonDeclarationSpacesForDefaultAndNonDefault) {
                    error(name_39, ts_1.Diagnostics.Merged_declaration_0_cannot_include_a_default_export_declaration_Consider_adding_a_separate_export_default_0_declaration_instead, (0, ts_1.declarationNameToString)(name_39));
                }
                else if (declarationSpaces & commonDeclarationSpacesForExportsAndLocals) {
                    error(name_39, ts_1.Diagnostics.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local, (0, ts_1.declarationNameToString)(name_39));
                }
            }
        }
        function getDeclarationSpaces(decl) {
            var d = decl;
            switch (d.kind) {
                case 263 /* SyntaxKind.InterfaceDeclaration */:
                case 264 /* SyntaxKind.TypeAliasDeclaration */:
                // A jsdoc typedef and callback are, by definition, type aliases.
                // falls through
                case 352 /* SyntaxKind.JSDocTypedefTag */:
                case 344 /* SyntaxKind.JSDocCallbackTag */:
                case 346 /* SyntaxKind.JSDocEnumTag */:
                    return 2 /* DeclarationSpaces.ExportType */;
                case 266 /* SyntaxKind.ModuleDeclaration */:
                    return (0, ts_1.isAmbientModule)(d) || (0, ts_1.getModuleInstanceState)(d) !== 0 /* ModuleInstanceState.NonInstantiated */
                        ? 4 /* DeclarationSpaces.ExportNamespace */ | 1 /* DeclarationSpaces.ExportValue */
                        : 4 /* DeclarationSpaces.ExportNamespace */;
                case 262 /* SyntaxKind.ClassDeclaration */:
                case 265 /* SyntaxKind.EnumDeclaration */:
                case 305 /* SyntaxKind.EnumMember */:
                    return 2 /* DeclarationSpaces.ExportType */ | 1 /* DeclarationSpaces.ExportValue */;
                case 311 /* SyntaxKind.SourceFile */:
                    return 2 /* DeclarationSpaces.ExportType */ | 1 /* DeclarationSpaces.ExportValue */ | 4 /* DeclarationSpaces.ExportNamespace */;
                case 276 /* SyntaxKind.ExportAssignment */:
                case 225 /* SyntaxKind.BinaryExpression */:
                    var node_2 = d;
                    var expression = (0, ts_1.isExportAssignment)(node_2) ? node_2.expression : node_2.right;
                    // Export assigned entity name expressions act as aliases and should fall through, otherwise they export values
                    if (!(0, ts_1.isEntityNameExpression)(expression)) {
                        return 1 /* DeclarationSpaces.ExportValue */;
                    }
                    d = expression;
                // The below options all declare an Alias, which is allowed to merge with other values within the importing module.
                // falls through
                case 270 /* SyntaxKind.ImportEqualsDeclaration */:
                case 273 /* SyntaxKind.NamespaceImport */:
                case 272 /* SyntaxKind.ImportClause */:
                    var result_8 = 0 /* DeclarationSpaces.None */;
                    var target = resolveAlias(getSymbolOfDeclaration(d));
                    (0, ts_1.forEach)(target.declarations, function (d) {
                        result_8 |= getDeclarationSpaces(d);
                    });
                    return result_8;
                case 259 /* SyntaxKind.VariableDeclaration */:
                case 207 /* SyntaxKind.BindingElement */:
                case 261 /* SyntaxKind.FunctionDeclaration */:
                case 275 /* SyntaxKind.ImportSpecifier */: // https://github.com/Microsoft/TypeScript/pull/7591
                case 80 /* SyntaxKind.Identifier */: // https://github.com/microsoft/TypeScript/issues/36098
                    // Identifiers are used as declarations of assignment declarations whose parents may be
                    // SyntaxKind.CallExpression - `Object.defineProperty(thing, "aField", {value: 42});`
                    // SyntaxKind.ElementAccessExpression - `thing["aField"] = 42;` or `thing["aField"];` (with a doc comment on it)
                    // or SyntaxKind.PropertyAccessExpression - `thing.aField = 42;`
                    // all of which are pretty much always values, or at least imply a value meaning.
                    // It may be apprpriate to treat these as aliases in the future.
                    return 1 /* DeclarationSpaces.ExportValue */;
                case 172 /* SyntaxKind.MethodSignature */:
                case 170 /* SyntaxKind.PropertySignature */:
                    return 2 /* DeclarationSpaces.ExportType */;
                default:
                    return ts_1.Debug.failBadSyntaxKind(d);
            }
        }
    }
    function getAwaitedTypeOfPromise(type, errorNode, diagnosticMessage) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        var promisedType = getPromisedTypeOfPromise(type, errorNode);
        return promisedType && getAwaitedType.apply(void 0, __spreadArray([promisedType, errorNode, diagnosticMessage], args, false));
    }
    /**
     * Gets the "promised type" of a promise.
     * @param type The type of the promise.
     * @remarks The "promised type" of a type is the type of the "value" parameter of the "onfulfilled" callback.
     */
    function getPromisedTypeOfPromise(type, errorNode, thisTypeForErrorOut) {
        //
        //  { // type
        //      then( // thenFunction
        //          onfulfilled: ( // onfulfilledParameterType
        //              value: T // valueParameterType
        //          ) => any
        //      ): any;
        //  }
        //
        if (isTypeAny(type)) {
            return undefined;
        }
        var typeAsPromise = type;
        if (typeAsPromise.promisedTypeOfPromise) {
            return typeAsPromise.promisedTypeOfPromise;
        }
        if (isReferenceToType(type, getGlobalPromiseType(/*reportErrors*/ false))) {
            return typeAsPromise.promisedTypeOfPromise = getTypeArguments(type)[0];
        }
        // primitives with a `{ then() }` won't be unwrapped/adopted.
        if (allTypesAssignableToKind(getBaseConstraintOrType(type), 402784252 /* TypeFlags.Primitive */ | 131072 /* TypeFlags.Never */)) {
            return undefined;
        }
        var thenFunction = getTypeOfPropertyOfType(type, "then"); // TODO: GH#18217
        if (isTypeAny(thenFunction)) {
            return undefined;
        }
        var thenSignatures = thenFunction ? getSignaturesOfType(thenFunction, 0 /* SignatureKind.Call */) : ts_1.emptyArray;
        if (thenSignatures.length === 0) {
            if (errorNode) {
                error(errorNode, ts_1.Diagnostics.A_promise_must_have_a_then_method);
            }
            return undefined;
        }
        var thisTypeForError;
        var candidates;
        for (var _i = 0, thenSignatures_1 = thenSignatures; _i < thenSignatures_1.length; _i++) {
            var thenSignature = thenSignatures_1[_i];
            var thisType = getThisTypeOfSignature(thenSignature);
            if (thisType && thisType !== voidType && !isTypeRelatedTo(type, thisType, subtypeRelation)) {
                thisTypeForError = thisType;
            }
            else {
                candidates = (0, ts_1.append)(candidates, thenSignature);
            }
        }
        if (!candidates) {
            ts_1.Debug.assertIsDefined(thisTypeForError);
            if (thisTypeForErrorOut) {
                thisTypeForErrorOut.value = thisTypeForError;
            }
            if (errorNode) {
                error(errorNode, ts_1.Diagnostics.The_this_context_of_type_0_is_not_assignable_to_method_s_this_of_type_1, typeToString(type), typeToString(thisTypeForError));
            }
            return undefined;
        }
        var onfulfilledParameterType = getTypeWithFacts(getUnionType((0, ts_1.map)(candidates, getTypeOfFirstParameterOfSignature)), 2097152 /* TypeFacts.NEUndefinedOrNull */);
        if (isTypeAny(onfulfilledParameterType)) {
            return undefined;
        }
        var onfulfilledParameterSignatures = getSignaturesOfType(onfulfilledParameterType, 0 /* SignatureKind.Call */);
        if (onfulfilledParameterSignatures.length === 0) {
            if (errorNode) {
                error(errorNode, ts_1.Diagnostics.The_first_parameter_of_the_then_method_of_a_promise_must_be_a_callback);
            }
            return undefined;
        }
        return typeAsPromise.promisedTypeOfPromise = getUnionType((0, ts_1.map)(onfulfilledParameterSignatures, getTypeOfFirstParameterOfSignature), 2 /* UnionReduction.Subtype */);
    }
    /**
     * Gets the "awaited type" of a type.
     * @param type The type to await.
     * @param withAlias When `true`, wraps the "awaited type" in `Awaited<T>` if needed.
     * @remarks The "awaited type" of an expression is its "promised type" if the expression is a
     * Promise-like type; otherwise, it is the type of the expression. This is used to reflect
     * The runtime behavior of the `await` keyword.
     */
    function checkAwaitedType(type, withAlias, errorNode, diagnosticMessage) {
        var args = [];
        for (var _i = 4; _i < arguments.length; _i++) {
            args[_i - 4] = arguments[_i];
        }
        var awaitedType = withAlias ? getAwaitedType.apply(void 0, __spreadArray([type, errorNode, diagnosticMessage], args, false)) : getAwaitedTypeNoAlias.apply(void 0, __spreadArray([type, errorNode, diagnosticMessage], args, false));
        return awaitedType || errorType;
    }
    /**
     * Determines whether a type is an object with a callable `then` member.
     */
    function isThenableType(type) {
        if (allTypesAssignableToKind(getBaseConstraintOrType(type), 402784252 /* TypeFlags.Primitive */ | 131072 /* TypeFlags.Never */)) {
            // primitive types cannot be considered "thenable" since they are not objects.
            return false;
        }
        var thenFunction = getTypeOfPropertyOfType(type, "then");
        return !!thenFunction && getSignaturesOfType(getTypeWithFacts(thenFunction, 2097152 /* TypeFacts.NEUndefinedOrNull */), 0 /* SignatureKind.Call */).length > 0;
    }
    function isAwaitedTypeInstantiation(type) {
        var _a;
        if (type.flags & 16777216 /* TypeFlags.Conditional */) {
            var awaitedSymbol = getGlobalAwaitedSymbol(/*reportErrors*/ false);
            return !!awaitedSymbol && type.aliasSymbol === awaitedSymbol && ((_a = type.aliasTypeArguments) === null || _a === void 0 ? void 0 : _a.length) === 1;
        }
        return false;
    }
    /**
     * For a generic `Awaited<T>`, gets `T`.
     */
    function unwrapAwaitedType(type) {
        return type.flags & 1048576 /* TypeFlags.Union */ ? mapType(type, unwrapAwaitedType) :
            isAwaitedTypeInstantiation(type) ? type.aliasTypeArguments[0] :
                type;
    }
    function isAwaitedTypeNeeded(type) {
        // If this is already an `Awaited<T>`, we shouldn't wrap it. This helps to avoid `Awaited<Awaited<T>>` in higher-order.
        if (isTypeAny(type) || isAwaitedTypeInstantiation(type)) {
            return false;
        }
        // We only need `Awaited<T>` if `T` contains possibly non-primitive types.
        if (isGenericObjectType(type)) {
            var baseConstraint = getBaseConstraintOfType(type);
            // We only need `Awaited<T>` if `T` is a type variable that has no base constraint, or the base constraint of `T` is `any`, `unknown`, `{}`, `object`,
            // or is promise-like.
            if (baseConstraint ?
                baseConstraint.flags & 3 /* TypeFlags.AnyOrUnknown */ || isEmptyObjectType(baseConstraint) || someType(baseConstraint, isThenableType) :
                maybeTypeOfKind(type, 8650752 /* TypeFlags.TypeVariable */)) {
                return true;
            }
        }
        return false;
    }
    function tryCreateAwaitedType(type) {
        // Nothing to do if `Awaited<T>` doesn't exist
        var awaitedSymbol = getGlobalAwaitedSymbol(/*reportErrors*/ true);
        if (awaitedSymbol) {
            // Unwrap unions that may contain `Awaited<T>`, otherwise its possible to manufacture an `Awaited<Awaited<T> | U>` where
            // an `Awaited<T | U>` would suffice.
            return getTypeAliasInstantiation(awaitedSymbol, [unwrapAwaitedType(type)]);
        }
        return undefined;
    }
    function createAwaitedTypeIfNeeded(type) {
        // We wrap type `T` in `Awaited<T>` based on the following conditions:
        // - `T` is not already an `Awaited<U>`, and
        // - `T` is generic, and
        // - One of the following applies:
        //   - `T` has no base constraint, or
        //   - The base constraint of `T` is `any`, `unknown`, `object`, or `{}`, or
        //   - The base constraint of `T` is an object type with a callable `then` method.
        if (isAwaitedTypeNeeded(type)) {
            var awaitedType = tryCreateAwaitedType(type);
            if (awaitedType) {
                return awaitedType;
            }
        }
        ts_1.Debug.assert(isAwaitedTypeInstantiation(type) || getPromisedTypeOfPromise(type) === undefined, "type provided should not be a non-generic 'promise'-like.");
        return type;
    }
    /**
     * Gets the "awaited type" of a type.
     *
     * The "awaited type" of an expression is its "promised type" if the expression is a
     * Promise-like type; otherwise, it is the type of the expression. If the "promised
     * type" is itself a Promise-like, the "promised type" is recursively unwrapped until a
     * non-promise type is found.
     *
     * This is used to reflect the runtime behavior of the `await` keyword.
     */
    function getAwaitedType(type, errorNode, diagnosticMessage) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        var awaitedType = getAwaitedTypeNoAlias.apply(void 0, __spreadArray([type, errorNode, diagnosticMessage], args, false));
        return awaitedType && createAwaitedTypeIfNeeded(awaitedType);
    }
    /**
     * Gets the "awaited type" of a type without introducing an `Awaited<T>` wrapper.
     *
     * @see {@link getAwaitedType}
     */
    function getAwaitedTypeNoAlias(type, errorNode, diagnosticMessage) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        if (isTypeAny(type)) {
            return type;
        }
        // If this is already an `Awaited<T>`, just return it. This avoids `Awaited<Awaited<T>>` in higher-order
        if (isAwaitedTypeInstantiation(type)) {
            return type;
        }
        // If we've already cached an awaited type, return a possible `Awaited<T>` for it.
        var typeAsAwaitable = type;
        if (typeAsAwaitable.awaitedTypeOfType) {
            return typeAsAwaitable.awaitedTypeOfType;
        }
        // For a union, get a union of the awaited types of each constituent.
        if (type.flags & 1048576 /* TypeFlags.Union */) {
            if (awaitedTypeStack.lastIndexOf(type.id) >= 0) {
                if (errorNode) {
                    error(errorNode, ts_1.Diagnostics.Type_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method);
                }
                return undefined;
            }
            var mapper = errorNode ? function (constituentType) { return getAwaitedTypeNoAlias.apply(void 0, __spreadArray([constituentType, errorNode, diagnosticMessage], args, false)); } : getAwaitedTypeNoAlias;
            awaitedTypeStack.push(type.id);
            var mapped = mapType(type, mapper);
            awaitedTypeStack.pop();
            return typeAsAwaitable.awaitedTypeOfType = mapped;
        }
        // If `type` is generic and should be wrapped in `Awaited<T>`, return it.
        if (isAwaitedTypeNeeded(type)) {
            return typeAsAwaitable.awaitedTypeOfType = type;
        }
        var thisTypeForErrorOut = { value: undefined };
        var promisedType = getPromisedTypeOfPromise(type, /*errorNode*/ undefined, thisTypeForErrorOut);
        if (promisedType) {
            if (type.id === promisedType.id || awaitedTypeStack.lastIndexOf(promisedType.id) >= 0) {
                // Verify that we don't have a bad actor in the form of a promise whose
                // promised type is the same as the promise type, or a mutually recursive
                // promise. If so, we return undefined as we cannot guess the shape. If this
                // were the actual case in the JavaScript, this Promise would never resolve.
                //
                // An example of a bad actor with a singly-recursive promise type might
                // be:
                //
                //  interface BadPromise {
                //      then(
                //          onfulfilled: (value: BadPromise) => any,
                //          onrejected: (error: any) => any): BadPromise;
                //  }
                //
                // The above interface will pass the PromiseLike check, and return a
                // promised type of `BadPromise`. Since this is a self reference, we
                // don't want to keep recursing ad infinitum.
                //
                // An example of a bad actor in the form of a mutually-recursive
                // promise type might be:
                //
                //  interface BadPromiseA {
                //      then(
                //          onfulfilled: (value: BadPromiseB) => any,
                //          onrejected: (error: any) => any): BadPromiseB;
                //  }
                //
                //  interface BadPromiseB {
                //      then(
                //          onfulfilled: (value: BadPromiseA) => any,
                //          onrejected: (error: any) => any): BadPromiseA;
                //  }
                //
                if (errorNode) {
                    error(errorNode, ts_1.Diagnostics.Type_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method);
                }
                return undefined;
            }
            // Keep track of the type we're about to unwrap to avoid bad recursive promise types.
            // See the comments above for more information.
            awaitedTypeStack.push(type.id);
            var awaitedType = getAwaitedTypeNoAlias.apply(void 0, __spreadArray([promisedType, errorNode, diagnosticMessage], args, false));
            awaitedTypeStack.pop();
            if (!awaitedType) {
                return undefined;
            }
            return typeAsAwaitable.awaitedTypeOfType = awaitedType;
        }
        // The type was not a promise, so it could not be unwrapped any further.
        // As long as the type does not have a callable "then" property, it is
        // safe to return the type; otherwise, an error is reported and we return
        // undefined.
        //
        // An example of a non-promise "thenable" might be:
        //
        //  await { then(): void {} }
        //
        // The "thenable" does not match the minimal definition for a promise. When
        // a Promise/A+-compatible or ES6 promise tries to adopt this value, the promise
        // will never settle. We treat this as an error to help flag an early indicator
        // of a runtime problem. If the user wants to return this value from an async
        // function, they would need to wrap it in some other value. If they want it to
        // be treated as a promise, they can cast to <any>.
        if (isThenableType(type)) {
            if (errorNode) {
                ts_1.Debug.assertIsDefined(diagnosticMessage);
                var chain = void 0;
                if (thisTypeForErrorOut.value) {
                    chain = (0, ts_1.chainDiagnosticMessages)(chain, ts_1.Diagnostics.The_this_context_of_type_0_is_not_assignable_to_method_s_this_of_type_1, typeToString(type), typeToString(thisTypeForErrorOut.value));
                }
                chain = ts_1.chainDiagnosticMessages.apply(void 0, __spreadArray([chain, diagnosticMessage], args, false));
                diagnostics.add((0, ts_1.createDiagnosticForNodeFromMessageChain)((0, ts_1.getSourceFileOfNode)(errorNode), errorNode, chain));
            }
            return undefined;
        }
        return typeAsAwaitable.awaitedTypeOfType = type;
    }
    /**
     * Checks the return type of an async function to ensure it is a compatible
     * Promise implementation.
     *
     * This checks that an async function has a valid Promise-compatible return type.
     * An async function has a valid Promise-compatible return type if the resolved value
     * of the return type has a construct signature that takes in an `initializer` function
     * that in turn supplies a `resolve` function as one of its arguments and results in an
     * object with a callable `then` signature.
     *
     * @param node The signature to check
     */
    function checkAsyncFunctionReturnType(node, returnTypeNode) {
        // As part of our emit for an async function, we will need to emit the entity name of
        // the return type annotation as an expression. To meet the necessary runtime semantics
        // for __awaiter, we must also check that the type of the declaration (e.g. the static
        // side or "constructor" of the promise type) is compatible `PromiseConstructorLike`.
        //
        // An example might be (from lib.es6.d.ts):
        //
        //  interface Promise<T> { ... }
        //  interface PromiseConstructor {
        //      new <T>(...): Promise<T>;
        //  }
        //  declare var Promise: PromiseConstructor;
        //
        // When an async function declares a return type annotation of `Promise<T>`, we
        // need to get the type of the `Promise` variable declaration above, which would
        // be `PromiseConstructor`.
        //
        // The same case applies to a class:
        //
        //  declare class Promise<T> {
        //      constructor(...);
        //      then<U>(...): Promise<U>;
        //  }
        //
        var returnType = getTypeFromTypeNode(returnTypeNode);
        if (languageVersion >= 2 /* ScriptTarget.ES2015 */) {
            if (isErrorType(returnType)) {
                return;
            }
            var globalPromiseType = getGlobalPromiseType(/*reportErrors*/ true);
            if (globalPromiseType !== emptyGenericType && !isReferenceToType(returnType, globalPromiseType)) {
                // The promise type was not a valid type reference to the global promise type, so we
                // report an error and return the unknown type.
                error(returnTypeNode, ts_1.Diagnostics.The_return_type_of_an_async_function_or_method_must_be_the_global_Promise_T_type_Did_you_mean_to_write_Promise_0, typeToString(getAwaitedTypeNoAlias(returnType) || voidType));
                return;
            }
        }
        else {
            // Always mark the type node as referenced if it points to a value
            markTypeNodeAsReferenced(returnTypeNode);
            if (isErrorType(returnType)) {
                return;
            }
            var promiseConstructorName = (0, ts_1.getEntityNameFromTypeNode)(returnTypeNode);
            if (promiseConstructorName === undefined) {
                error(returnTypeNode, ts_1.Diagnostics.Type_0_is_not_a_valid_async_function_return_type_in_ES5_SlashES3_because_it_does_not_refer_to_a_Promise_compatible_constructor_value, typeToString(returnType));
                return;
            }
            var promiseConstructorSymbol = resolveEntityName(promiseConstructorName, 111551 /* SymbolFlags.Value */, /*ignoreErrors*/ true);
            var promiseConstructorType = promiseConstructorSymbol ? getTypeOfSymbol(promiseConstructorSymbol) : errorType;
            if (isErrorType(promiseConstructorType)) {
                if (promiseConstructorName.kind === 80 /* SyntaxKind.Identifier */ && promiseConstructorName.escapedText === "Promise" && getTargetType(returnType) === getGlobalPromiseType(/*reportErrors*/ false)) {
                    error(returnTypeNode, ts_1.Diagnostics.An_async_function_or_method_in_ES5_SlashES3_requires_the_Promise_constructor_Make_sure_you_have_a_declaration_for_the_Promise_constructor_or_include_ES2015_in_your_lib_option);
                }
                else {
                    error(returnTypeNode, ts_1.Diagnostics.Type_0_is_not_a_valid_async_function_return_type_in_ES5_SlashES3_because_it_does_not_refer_to_a_Promise_compatible_constructor_value, (0, ts_1.entityNameToString)(promiseConstructorName));
                }
                return;
            }
            var globalPromiseConstructorLikeType = getGlobalPromiseConstructorLikeType(/*reportErrors*/ true);
            if (globalPromiseConstructorLikeType === emptyObjectType) {
                // If we couldn't resolve the global PromiseConstructorLike type we cannot verify
                // compatibility with __awaiter.
                error(returnTypeNode, ts_1.Diagnostics.Type_0_is_not_a_valid_async_function_return_type_in_ES5_SlashES3_because_it_does_not_refer_to_a_Promise_compatible_constructor_value, (0, ts_1.entityNameToString)(promiseConstructorName));
                return;
            }
            if (!checkTypeAssignableTo(promiseConstructorType, globalPromiseConstructorLikeType, returnTypeNode, ts_1.Diagnostics.Type_0_is_not_a_valid_async_function_return_type_in_ES5_SlashES3_because_it_does_not_refer_to_a_Promise_compatible_constructor_value)) {
                return;
            }
            // Verify there is no local declaration that could collide with the promise constructor.
            var rootName = promiseConstructorName && (0, ts_1.getFirstIdentifier)(promiseConstructorName);
            var collidingSymbol = getSymbol(node.locals, rootName.escapedText, 111551 /* SymbolFlags.Value */);
            if (collidingSymbol) {
                error(collidingSymbol.valueDeclaration, ts_1.Diagnostics.Duplicate_identifier_0_Compiler_uses_declaration_1_to_support_async_functions, (0, ts_1.idText)(rootName), (0, ts_1.entityNameToString)(promiseConstructorName));
                return;
            }
        }
        checkAwaitedType(returnType, /*withAlias*/ false, node, ts_1.Diagnostics.The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member);
    }
    /** Check a decorator */
    function checkDecorator(node) {
        var signature = getResolvedSignature(node);
        checkDeprecatedSignature(signature, node);
        var returnType = getReturnTypeOfSignature(signature);
        if (returnType.flags & 1 /* TypeFlags.Any */) {
            return;
        }
        // if we fail to get a signature and return type here, we will have already reported a grammar error in `checkDecorators`.
        var decoratorSignature = getDecoratorCallSignature(node);
        if (!(decoratorSignature === null || decoratorSignature === void 0 ? void 0 : decoratorSignature.resolvedReturnType))
            return;
        var headMessage;
        var expectedReturnType = decoratorSignature.resolvedReturnType;
        switch (node.parent.kind) {
            case 262 /* SyntaxKind.ClassDeclaration */:
            case 230 /* SyntaxKind.ClassExpression */:
                headMessage = ts_1.Diagnostics.Decorator_function_return_type_0_is_not_assignable_to_type_1;
                break;
            case 171 /* SyntaxKind.PropertyDeclaration */:
                if (!legacyDecorators) {
                    headMessage = ts_1.Diagnostics.Decorator_function_return_type_0_is_not_assignable_to_type_1;
                    break;
                }
            // falls through
            case 168 /* SyntaxKind.Parameter */:
                headMessage = ts_1.Diagnostics.Decorator_function_return_type_is_0_but_is_expected_to_be_void_or_any;
                break;
            case 173 /* SyntaxKind.MethodDeclaration */:
            case 176 /* SyntaxKind.GetAccessor */:
            case 177 /* SyntaxKind.SetAccessor */:
                headMessage = ts_1.Diagnostics.Decorator_function_return_type_0_is_not_assignable_to_type_1;
                break;
            default:
                return ts_1.Debug.failBadSyntaxKind(node.parent);
        }
        checkTypeAssignableTo(returnType, expectedReturnType, node.expression, headMessage);
    }
    /**
     * Creates a synthetic `Signature` corresponding to a call signature.
     */
    function createCallSignature(typeParameters, thisParameter, parameters, returnType, typePredicate, minArgumentCount, flags) {
        if (minArgumentCount === void 0) { minArgumentCount = parameters.length; }
        if (flags === void 0) { flags = 0 /* SignatureFlags.None */; }
        var decl = ts_1.factory.createFunctionTypeNode(/*typeParameters*/ undefined, ts_1.emptyArray, ts_1.factory.createKeywordTypeNode(133 /* SyntaxKind.AnyKeyword */));
        return createSignature(decl, typeParameters, thisParameter, parameters, returnType, typePredicate, minArgumentCount, flags);
    }
    /**
     * Creates a synthetic `FunctionType`
     */
    function createFunctionType(typeParameters, thisParameter, parameters, returnType, typePredicate, minArgumentCount, flags) {
        var signature = createCallSignature(typeParameters, thisParameter, parameters, returnType, typePredicate, minArgumentCount, flags);
        return getOrCreateTypeFromSignature(signature);
    }
    function createGetterFunctionType(type) {
        return createFunctionType(/*typeParameters*/ undefined, /*thisParameter*/ undefined, ts_1.emptyArray, type);
    }
    function createSetterFunctionType(type) {
        var valueParam = createParameter("value", type);
        return createFunctionType(/*typeParameters*/ undefined, /*thisParameter*/ undefined, [valueParam], voidType);
    }
    /**
     * If a TypeNode can be resolved to a value symbol imported from an external module, it is
     * marked as referenced to prevent import elision.
     */
    function markTypeNodeAsReferenced(node) {
        markEntityNameOrEntityExpressionAsReference(node && (0, ts_1.getEntityNameFromTypeNode)(node), /*forDecoratorMetadata*/ false);
    }
    function markEntityNameOrEntityExpressionAsReference(typeName, forDecoratorMetadata) {
        if (!typeName)
            return;
        var rootName = (0, ts_1.getFirstIdentifier)(typeName);
        var meaning = (typeName.kind === 80 /* SyntaxKind.Identifier */ ? 788968 /* SymbolFlags.Type */ : 1920 /* SymbolFlags.Namespace */) | 2097152 /* SymbolFlags.Alias */;
        var rootSymbol = resolveName(rootName, rootName.escapedText, meaning, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ true);
        if (rootSymbol && rootSymbol.flags & 2097152 /* SymbolFlags.Alias */) {
            if (canCollectSymbolAliasAccessabilityData
                && symbolIsValue(rootSymbol)
                && !isConstEnumOrConstEnumOnlyModule(resolveAlias(rootSymbol))
                && !getTypeOnlyAliasDeclaration(rootSymbol)) {
                markAliasSymbolAsReferenced(rootSymbol);
            }
            else if (forDecoratorMetadata
                && (0, ts_1.getIsolatedModules)(compilerOptions)
                && (0, ts_1.getEmitModuleKind)(compilerOptions) >= ts_1.ModuleKind.ES2015
                && !symbolIsValue(rootSymbol)
                && !(0, ts_1.some)(rootSymbol.declarations, ts_1.isTypeOnlyImportOrExportDeclaration)) {
                var diag = error(typeName, ts_1.Diagnostics.A_type_referenced_in_a_decorated_signature_must_be_imported_with_import_type_or_a_namespace_import_when_isolatedModules_and_emitDecoratorMetadata_are_enabled);
                var aliasDeclaration = (0, ts_1.find)(rootSymbol.declarations || ts_1.emptyArray, isAliasSymbolDeclaration);
                if (aliasDeclaration) {
                    (0, ts_1.addRelatedInfo)(diag, (0, ts_1.createDiagnosticForNode)(aliasDeclaration, ts_1.Diagnostics._0_was_imported_here, (0, ts_1.idText)(rootName)));
                }
            }
        }
    }
    /**
     * This function marks the type used for metadata decorator as referenced if it is import
     * from external module.
     * This is different from markTypeNodeAsReferenced because it tries to simplify type nodes in
     * union and intersection type
     * @param node
     */
    function markDecoratorMedataDataTypeNodeAsReferenced(node) {
        var entityName = getEntityNameForDecoratorMetadata(node);
        if (entityName && (0, ts_1.isEntityName)(entityName)) {
            markEntityNameOrEntityExpressionAsReference(entityName, /*forDecoratorMetadata*/ true);
        }
    }
    function getEntityNameForDecoratorMetadata(node) {
        if (node) {
            switch (node.kind) {
                case 192 /* SyntaxKind.IntersectionType */:
                case 191 /* SyntaxKind.UnionType */:
                    return getEntityNameForDecoratorMetadataFromTypeList(node.types);
                case 193 /* SyntaxKind.ConditionalType */:
                    return getEntityNameForDecoratorMetadataFromTypeList([node.trueType, node.falseType]);
                case 195 /* SyntaxKind.ParenthesizedType */:
                case 201 /* SyntaxKind.NamedTupleMember */:
                    return getEntityNameForDecoratorMetadata(node.type);
                case 182 /* SyntaxKind.TypeReference */:
                    return node.typeName;
            }
        }
    }
    function getEntityNameForDecoratorMetadataFromTypeList(types) {
        var commonEntityName;
        for (var _i = 0, types_21 = types; _i < types_21.length; _i++) {
            var typeNode = types_21[_i];
            while (typeNode.kind === 195 /* SyntaxKind.ParenthesizedType */ || typeNode.kind === 201 /* SyntaxKind.NamedTupleMember */) {
                typeNode = typeNode.type; // Skip parens if need be
            }
            if (typeNode.kind === 146 /* SyntaxKind.NeverKeyword */) {
                continue; // Always elide `never` from the union/intersection if possible
            }
            if (!strictNullChecks && (typeNode.kind === 200 /* SyntaxKind.LiteralType */ && typeNode.literal.kind === 106 /* SyntaxKind.NullKeyword */ || typeNode.kind === 157 /* SyntaxKind.UndefinedKeyword */)) {
                continue; // Elide null and undefined from unions for metadata, just like what we did prior to the implementation of strict null checks
            }
            var individualEntityName = getEntityNameForDecoratorMetadata(typeNode);
            if (!individualEntityName) {
                // Individual is something like string number
                // So it would be serialized to either that type or object
                // Safe to return here
                return undefined;
            }
            if (commonEntityName) {
                // Note this is in sync with the transformation that happens for type node.
                // Keep this in sync with serializeUnionOrIntersectionType
                // Verify if they refer to same entity and is identifier
                // return undefined if they dont match because we would emit object
                if (!(0, ts_1.isIdentifier)(commonEntityName) ||
                    !(0, ts_1.isIdentifier)(individualEntityName) ||
                    commonEntityName.escapedText !== individualEntityName.escapedText) {
                    return undefined;
                }
            }
            else {
                commonEntityName = individualEntityName;
            }
        }
        return commonEntityName;
    }
    function getParameterTypeNodeForDecoratorCheck(node) {
        var typeNode = (0, ts_1.getEffectiveTypeAnnotationNode)(node);
        return (0, ts_1.isRestParameter)(node) ? (0, ts_1.getRestParameterElementType)(typeNode) : typeNode;
    }
    /** Check the decorators of a node */
    function checkDecorators(node) {
        // skip this check for nodes that cannot have decorators. These should have already had an error reported by
        // checkGrammarModifiers.
        if (!(0, ts_1.canHaveDecorators)(node) || !(0, ts_1.hasDecorators)(node) || !node.modifiers || !(0, ts_1.nodeCanBeDecorated)(legacyDecorators, node, node.parent, node.parent.parent)) {
            return;
        }
        var firstDecorator = (0, ts_1.find)(node.modifiers, ts_1.isDecorator);
        if (!firstDecorator) {
            return;
        }
        if (legacyDecorators) {
            checkExternalEmitHelpers(firstDecorator, 8 /* ExternalEmitHelpers.Decorate */);
            if (node.kind === 168 /* SyntaxKind.Parameter */) {
                checkExternalEmitHelpers(firstDecorator, 32 /* ExternalEmitHelpers.Param */);
            }
        }
        else if (languageVersion < 99 /* ScriptTarget.ESNext */) {
            checkExternalEmitHelpers(firstDecorator, 8 /* ExternalEmitHelpers.ESDecorateAndRunInitializers */);
            if ((0, ts_1.isClassDeclaration)(node)) {
                if (!node.name) {
                    checkExternalEmitHelpers(firstDecorator, 8388608 /* ExternalEmitHelpers.SetFunctionName */);
                }
                else {
                    var member = getFirstTransformableStaticClassElement(node);
                    if (member) {
                        checkExternalEmitHelpers(firstDecorator, 8388608 /* ExternalEmitHelpers.SetFunctionName */);
                    }
                }
            }
            else if (!(0, ts_1.isClassExpression)(node)) {
                if ((0, ts_1.isPrivateIdentifier)(node.name) && ((0, ts_1.isMethodDeclaration)(node) || (0, ts_1.isAccessor)(node) || (0, ts_1.isAutoAccessorPropertyDeclaration)(node))) {
                    checkExternalEmitHelpers(firstDecorator, 8388608 /* ExternalEmitHelpers.SetFunctionName */);
                }
                if ((0, ts_1.isComputedPropertyName)(node.name)) {
                    checkExternalEmitHelpers(firstDecorator, 16777216 /* ExternalEmitHelpers.PropKey */);
                }
            }
        }
        if (compilerOptions.emitDecoratorMetadata) {
            checkExternalEmitHelpers(firstDecorator, 16 /* ExternalEmitHelpers.Metadata */);
            // we only need to perform these checks if we are emitting serialized type metadata for the target of a decorator.
            switch (node.kind) {
                case 262 /* SyntaxKind.ClassDeclaration */:
                    var constructor = (0, ts_1.getFirstConstructorWithBody)(node);
                    if (constructor) {
                        for (var _i = 0, _a = constructor.parameters; _i < _a.length; _i++) {
                            var parameter = _a[_i];
                            markDecoratorMedataDataTypeNodeAsReferenced(getParameterTypeNodeForDecoratorCheck(parameter));
                        }
                    }
                    break;
                case 176 /* SyntaxKind.GetAccessor */:
                case 177 /* SyntaxKind.SetAccessor */:
                    var otherKind = node.kind === 176 /* SyntaxKind.GetAccessor */ ? 177 /* SyntaxKind.SetAccessor */ : 176 /* SyntaxKind.GetAccessor */;
                    var otherAccessor = (0, ts_1.getDeclarationOfKind)(getSymbolOfDeclaration(node), otherKind);
                    markDecoratorMedataDataTypeNodeAsReferenced(getAnnotatedAccessorTypeNode(node) || otherAccessor && getAnnotatedAccessorTypeNode(otherAccessor));
                    break;
                case 173 /* SyntaxKind.MethodDeclaration */:
                    for (var _b = 0, _c = node.parameters; _b < _c.length; _b++) {
                        var parameter = _c[_b];
                        markDecoratorMedataDataTypeNodeAsReferenced(getParameterTypeNodeForDecoratorCheck(parameter));
                    }
                    markDecoratorMedataDataTypeNodeAsReferenced((0, ts_1.getEffectiveReturnTypeNode)(node));
                    break;
                case 171 /* SyntaxKind.PropertyDeclaration */:
                    markDecoratorMedataDataTypeNodeAsReferenced((0, ts_1.getEffectiveTypeAnnotationNode)(node));
                    break;
                case 168 /* SyntaxKind.Parameter */:
                    markDecoratorMedataDataTypeNodeAsReferenced(getParameterTypeNodeForDecoratorCheck(node));
                    var containingSignature = node.parent;
                    for (var _d = 0, _e = containingSignature.parameters; _d < _e.length; _d++) {
                        var parameter = _e[_d];
                        markDecoratorMedataDataTypeNodeAsReferenced(getParameterTypeNodeForDecoratorCheck(parameter));
                    }
                    break;
            }
        }
        for (var _f = 0, _g = node.modifiers; _f < _g.length; _f++) {
            var modifier = _g[_f];
            if ((0, ts_1.isDecorator)(modifier)) {
                checkDecorator(modifier);
            }
        }
    }
    function checkFunctionDeclaration(node) {
        addLazyDiagnostic(checkFunctionDeclarationDiagnostics);
        function checkFunctionDeclarationDiagnostics() {
            checkFunctionOrMethodDeclaration(node);
            checkGrammarForGenerator(node);
            checkCollisionsForDeclarationName(node, node.name);
        }
    }
    function checkJSDocTypeAliasTag(node) {
        if (!node.typeExpression) {
            // If the node had `@property` tags, `typeExpression` would have been set to the first property tag.
            error(node.name, ts_1.Diagnostics.JSDoc_typedef_tag_should_either_have_a_type_annotation_or_be_followed_by_property_or_member_tags);
        }
        if (node.name) {
            checkTypeNameIsReserved(node.name, ts_1.Diagnostics.Type_alias_name_cannot_be_0);
        }
        checkSourceElement(node.typeExpression);
        checkTypeParameters((0, ts_1.getEffectiveTypeParameterDeclarations)(node));
    }
    function checkJSDocTemplateTag(node) {
        checkSourceElement(node.constraint);
        for (var _i = 0, _a = node.typeParameters; _i < _a.length; _i++) {
            var tp = _a[_i];
            checkSourceElement(tp);
        }
    }
    function checkJSDocTypeTag(node) {
        checkSourceElement(node.typeExpression);
    }
    function checkJSDocSatisfiesTag(node) {
        checkSourceElement(node.typeExpression);
        var host = (0, ts_1.getEffectiveJSDocHost)(node);
        if (host) {
            var tags = (0, ts_1.getAllJSDocTags)(host, ts_1.isJSDocSatisfiesTag);
            if ((0, ts_1.length)(tags) > 1) {
                for (var i = 1; i < (0, ts_1.length)(tags); i++) {
                    var tagName = tags[i].tagName;
                    error(tagName, ts_1.Diagnostics._0_tag_already_specified, (0, ts_1.idText)(tagName));
                }
            }
        }
    }
    function checkJSDocLinkLikeTag(node) {
        if (node.name) {
            resolveJSDocMemberName(node.name, /*ignoreErrors*/ true);
        }
    }
    function checkJSDocParameterTag(node) {
        checkSourceElement(node.typeExpression);
    }
    function checkJSDocPropertyTag(node) {
        checkSourceElement(node.typeExpression);
    }
    function checkJSDocFunctionType(node) {
        addLazyDiagnostic(checkJSDocFunctionTypeImplicitAny);
        checkSignatureDeclaration(node);
        function checkJSDocFunctionTypeImplicitAny() {
            if (!node.type && !(0, ts_1.isJSDocConstructSignature)(node)) {
                reportImplicitAny(node, anyType);
            }
        }
    }
    function checkJSDocImplementsTag(node) {
        var classLike = (0, ts_1.getEffectiveJSDocHost)(node);
        if (!classLike || !(0, ts_1.isClassDeclaration)(classLike) && !(0, ts_1.isClassExpression)(classLike)) {
            error(classLike, ts_1.Diagnostics.JSDoc_0_is_not_attached_to_a_class, (0, ts_1.idText)(node.tagName));
        }
    }
    function checkJSDocAugmentsTag(node) {
        var classLike = (0, ts_1.getEffectiveJSDocHost)(node);
        if (!classLike || !(0, ts_1.isClassDeclaration)(classLike) && !(0, ts_1.isClassExpression)(classLike)) {
            error(classLike, ts_1.Diagnostics.JSDoc_0_is_not_attached_to_a_class, (0, ts_1.idText)(node.tagName));
            return;
        }
        var augmentsTags = (0, ts_1.getJSDocTags)(classLike).filter(ts_1.isJSDocAugmentsTag);
        ts_1.Debug.assert(augmentsTags.length > 0);
        if (augmentsTags.length > 1) {
            error(augmentsTags[1], ts_1.Diagnostics.Class_declarations_cannot_have_more_than_one_augments_or_extends_tag);
        }
        var name = getIdentifierFromEntityNameExpression(node.class.expression);
        var extend = (0, ts_1.getClassExtendsHeritageElement)(classLike);
        if (extend) {
            var className = getIdentifierFromEntityNameExpression(extend.expression);
            if (className && name.escapedText !== className.escapedText) {
                error(name, ts_1.Diagnostics.JSDoc_0_1_does_not_match_the_extends_2_clause, (0, ts_1.idText)(node.tagName), (0, ts_1.idText)(name), (0, ts_1.idText)(className));
            }
        }
    }
    function checkJSDocAccessibilityModifiers(node) {
        var host = (0, ts_1.getJSDocHost)(node);
        if (host && (0, ts_1.isPrivateIdentifierClassElementDeclaration)(host)) {
            error(node, ts_1.Diagnostics.An_accessibility_modifier_cannot_be_used_with_a_private_identifier);
        }
    }
    function getIdentifierFromEntityNameExpression(node) {
        switch (node.kind) {
            case 80 /* SyntaxKind.Identifier */:
                return node;
            case 210 /* SyntaxKind.PropertyAccessExpression */:
                return node.name;
            default:
                return undefined;
        }
    }
    function checkFunctionOrMethodDeclaration(node) {
        var _a;
        checkDecorators(node);
        checkSignatureDeclaration(node);
        var functionFlags = (0, ts_1.getFunctionFlags)(node);
        // Do not use hasDynamicName here, because that returns false for well known symbols.
        // We want to perform checkComputedPropertyName for all computed properties, including
        // well known symbols.
        if (node.name && node.name.kind === 166 /* SyntaxKind.ComputedPropertyName */) {
            // This check will account for methods in class/interface declarations,
            // as well as accessors in classes/object literals
            checkComputedPropertyName(node.name);
        }
        if (hasBindableName(node)) {
            // first we want to check the local symbol that contain this declaration
            // - if node.localSymbol !== undefined - this is current declaration is exported and localSymbol points to the local symbol
            // - if node.localSymbol === undefined - this node is non-exported so we can just pick the result of getSymbolOfNode
            var symbol = getSymbolOfDeclaration(node);
            var localSymbol = node.localSymbol || symbol;
            // Since the javascript won't do semantic analysis like typescript,
            // if the javascript file comes before the typescript file and both contain same name functions,
            // checkFunctionOrConstructorSymbol wouldn't be called if we didnt ignore javascript function.
            var firstDeclaration = (_a = localSymbol.declarations) === null || _a === void 0 ? void 0 : _a.find(
            // Get first non javascript function declaration
            function (declaration) { return declaration.kind === node.kind && !(declaration.flags & 262144 /* NodeFlags.JavaScriptFile */); });
            // Only type check the symbol once
            if (node === firstDeclaration) {
                checkFunctionOrConstructorSymbol(localSymbol);
            }
            if (symbol.parent) {
                // run check on export symbol to check that modifiers agree across all exported declarations
                checkFunctionOrConstructorSymbol(symbol);
            }
        }
        var body = node.kind === 172 /* SyntaxKind.MethodSignature */ ? undefined : node.body;
        checkSourceElement(body);
        checkAllCodePathsInNonVoidFunctionReturnOrThrow(node, getReturnTypeFromAnnotation(node));
        addLazyDiagnostic(checkFunctionOrMethodDeclarationDiagnostics);
        // A js function declaration can have a @type tag instead of a return type node, but that type must have a call signature
        if ((0, ts_1.isInJSFile)(node)) {
            var typeTag = (0, ts_1.getJSDocTypeTag)(node);
            if (typeTag && typeTag.typeExpression && !getContextualCallSignature(getTypeFromTypeNode(typeTag.typeExpression), node)) {
                error(typeTag.typeExpression.type, ts_1.Diagnostics.The_type_of_a_function_declaration_must_match_the_function_s_signature);
            }
        }
        function checkFunctionOrMethodDeclarationDiagnostics() {
            if (!(0, ts_1.getEffectiveReturnTypeNode)(node)) {
                // Report an implicit any error if there is no body, no explicit return type, and node is not a private method
                // in an ambient context
                if ((0, ts_1.nodeIsMissing)(body) && !isPrivateWithinAmbient(node)) {
                    reportImplicitAny(node, anyType);
                }
                if (functionFlags & 1 /* FunctionFlags.Generator */ && (0, ts_1.nodeIsPresent)(body)) {
                    // A generator with a body and no type annotation can still cause errors. It can error if the
                    // yielded values have no common supertype, or it can give an implicit any error if it has no
                    // yielded values. The only way to trigger these errors is to try checking its return type.
                    getReturnTypeOfSignature(getSignatureFromDeclaration(node));
                }
            }
        }
    }
    function registerForUnusedIdentifiersCheck(node) {
        addLazyDiagnostic(registerForUnusedIdentifiersCheckDiagnostics);
        function registerForUnusedIdentifiersCheckDiagnostics() {
            // May be in a call such as getTypeOfNode that happened to call this. But potentiallyUnusedIdentifiers is only defined in the scope of `checkSourceFile`.
            var sourceFile = (0, ts_1.getSourceFileOfNode)(node);
            var potentiallyUnusedIdentifiers = allPotentiallyUnusedIdentifiers.get(sourceFile.path);
            if (!potentiallyUnusedIdentifiers) {
                potentiallyUnusedIdentifiers = [];
                allPotentiallyUnusedIdentifiers.set(sourceFile.path, potentiallyUnusedIdentifiers);
            }
            // TODO: GH#22580
            // Debug.assert(addToSeen(seenPotentiallyUnusedIdentifiers, getNodeId(node)), "Adding potentially-unused identifier twice");
            potentiallyUnusedIdentifiers.push(node);
        }
    }
    function checkUnusedIdentifiers(potentiallyUnusedIdentifiers, addDiagnostic) {
        for (var _i = 0, potentiallyUnusedIdentifiers_1 = potentiallyUnusedIdentifiers; _i < potentiallyUnusedIdentifiers_1.length; _i++) {
            var node = potentiallyUnusedIdentifiers_1[_i];
            switch (node.kind) {
                case 262 /* SyntaxKind.ClassDeclaration */:
                case 230 /* SyntaxKind.ClassExpression */:
                    checkUnusedClassMembers(node, addDiagnostic);
                    checkUnusedTypeParameters(node, addDiagnostic);
                    break;
                case 311 /* SyntaxKind.SourceFile */:
                case 266 /* SyntaxKind.ModuleDeclaration */:
                case 240 /* SyntaxKind.Block */:
                case 268 /* SyntaxKind.CaseBlock */:
                case 247 /* SyntaxKind.ForStatement */:
                case 248 /* SyntaxKind.ForInStatement */:
                case 249 /* SyntaxKind.ForOfStatement */:
                    checkUnusedLocalsAndParameters(node, addDiagnostic);
                    break;
                case 175 /* SyntaxKind.Constructor */:
                case 217 /* SyntaxKind.FunctionExpression */:
                case 261 /* SyntaxKind.FunctionDeclaration */:
                case 218 /* SyntaxKind.ArrowFunction */:
                case 173 /* SyntaxKind.MethodDeclaration */:
                case 176 /* SyntaxKind.GetAccessor */:
                case 177 /* SyntaxKind.SetAccessor */:
                    if (node.body) { // Don't report unused parameters in overloads
                        checkUnusedLocalsAndParameters(node, addDiagnostic);
                    }
                    checkUnusedTypeParameters(node, addDiagnostic);
                    break;
                case 172 /* SyntaxKind.MethodSignature */:
                case 178 /* SyntaxKind.CallSignature */:
                case 179 /* SyntaxKind.ConstructSignature */:
                case 183 /* SyntaxKind.FunctionType */:
                case 184 /* SyntaxKind.ConstructorType */:
                case 264 /* SyntaxKind.TypeAliasDeclaration */:
                case 263 /* SyntaxKind.InterfaceDeclaration */:
                    checkUnusedTypeParameters(node, addDiagnostic);
                    break;
                case 194 /* SyntaxKind.InferType */:
                    checkUnusedInferTypeParameter(node, addDiagnostic);
                    break;
                default:
                    ts_1.Debug.assertNever(node, "Node should not have been registered for unused identifiers check");
            }
        }
    }
    function errorUnusedLocal(declaration, name, addDiagnostic) {
        var node = (0, ts_1.getNameOfDeclaration)(declaration) || declaration;
        var message = (0, ts_1.isTypeDeclaration)(declaration) ? ts_1.Diagnostics._0_is_declared_but_never_used : ts_1.Diagnostics._0_is_declared_but_its_value_is_never_read;
        addDiagnostic(declaration, 0 /* UnusedKind.Local */, (0, ts_1.createDiagnosticForNode)(node, message, name));
    }
    function isIdentifierThatStartsWithUnderscore(node) {
        return (0, ts_1.isIdentifier)(node) && (0, ts_1.idText)(node).charCodeAt(0) === 95 /* CharacterCodes._ */;
    }
    function checkUnusedClassMembers(node, addDiagnostic) {
        for (var _i = 0, _a = node.members; _i < _a.length; _i++) {
            var member = _a[_i];
            switch (member.kind) {
                case 173 /* SyntaxKind.MethodDeclaration */:
                case 171 /* SyntaxKind.PropertyDeclaration */:
                case 176 /* SyntaxKind.GetAccessor */:
                case 177 /* SyntaxKind.SetAccessor */:
                    if (member.kind === 177 /* SyntaxKind.SetAccessor */ && member.symbol.flags & 32768 /* SymbolFlags.GetAccessor */) {
                        // Already would have reported an error on the getter.
                        break;
                    }
                    var symbol = getSymbolOfDeclaration(member);
                    if (!symbol.isReferenced
                        && ((0, ts_1.hasEffectiveModifier)(member, 8 /* ModifierFlags.Private */) || (0, ts_1.isNamedDeclaration)(member) && (0, ts_1.isPrivateIdentifier)(member.name))
                        && !(member.flags & 16777216 /* NodeFlags.Ambient */)) {
                        addDiagnostic(member, 0 /* UnusedKind.Local */, (0, ts_1.createDiagnosticForNode)(member.name, ts_1.Diagnostics._0_is_declared_but_its_value_is_never_read, symbolToString(symbol)));
                    }
                    break;
                case 175 /* SyntaxKind.Constructor */:
                    for (var _b = 0, _c = member.parameters; _b < _c.length; _b++) {
                        var parameter = _c[_b];
                        if (!parameter.symbol.isReferenced && (0, ts_1.hasSyntacticModifier)(parameter, 8 /* ModifierFlags.Private */)) {
                            addDiagnostic(parameter, 0 /* UnusedKind.Local */, (0, ts_1.createDiagnosticForNode)(parameter.name, ts_1.Diagnostics.Property_0_is_declared_but_its_value_is_never_read, (0, ts_1.symbolName)(parameter.symbol)));
                        }
                    }
                    break;
                case 180 /* SyntaxKind.IndexSignature */:
                case 239 /* SyntaxKind.SemicolonClassElement */:
                case 174 /* SyntaxKind.ClassStaticBlockDeclaration */:
                    // Can't be private
                    break;
                default:
                    ts_1.Debug.fail("Unexpected class member");
            }
        }
    }
    function checkUnusedInferTypeParameter(node, addDiagnostic) {
        var typeParameter = node.typeParameter;
        if (isTypeParameterUnused(typeParameter)) {
            addDiagnostic(node, 1 /* UnusedKind.Parameter */, (0, ts_1.createDiagnosticForNode)(node, ts_1.Diagnostics._0_is_declared_but_its_value_is_never_read, (0, ts_1.idText)(typeParameter.name)));
        }
    }
    function checkUnusedTypeParameters(node, addDiagnostic) {
        // Only report errors on the last declaration for the type parameter container;
        // this ensures that all uses have been accounted for.
        var declarations = getSymbolOfDeclaration(node).declarations;
        if (!declarations || (0, ts_1.last)(declarations) !== node)
            return;
        var typeParameters = (0, ts_1.getEffectiveTypeParameterDeclarations)(node);
        var seenParentsWithEveryUnused = new Set();
        for (var _i = 0, typeParameters_4 = typeParameters; _i < typeParameters_4.length; _i++) {
            var typeParameter = typeParameters_4[_i];
            if (!isTypeParameterUnused(typeParameter))
                continue;
            var name_40 = (0, ts_1.idText)(typeParameter.name);
            var parent_18 = typeParameter.parent;
            if (parent_18.kind !== 194 /* SyntaxKind.InferType */ && parent_18.typeParameters.every(isTypeParameterUnused)) {
                if ((0, ts_1.tryAddToSet)(seenParentsWithEveryUnused, parent_18)) {
                    var sourceFile = (0, ts_1.getSourceFileOfNode)(parent_18);
                    var range = (0, ts_1.isJSDocTemplateTag)(parent_18)
                        // Whole @template tag
                        ? (0, ts_1.rangeOfNode)(parent_18)
                        // Include the `<>` in the error message
                        : (0, ts_1.rangeOfTypeParameters)(sourceFile, parent_18.typeParameters);
                    var only = parent_18.typeParameters.length === 1;
                    //TODO: following line is possible reason for bug #41974, unusedTypeParameters_TemplateTag
                    var messageAndArg = only
                        ? [ts_1.Diagnostics._0_is_declared_but_its_value_is_never_read, name_40]
                        : [ts_1.Diagnostics.All_type_parameters_are_unused];
                    addDiagnostic(typeParameter, 1 /* UnusedKind.Parameter */, ts_1.createFileDiagnostic.apply(void 0, __spreadArray([sourceFile, range.pos, range.end - range.pos], messageAndArg, false)));
                }
            }
            else {
                //TODO: following line is possible reason for bug #41974, unusedTypeParameters_TemplateTag
                addDiagnostic(typeParameter, 1 /* UnusedKind.Parameter */, (0, ts_1.createDiagnosticForNode)(typeParameter, ts_1.Diagnostics._0_is_declared_but_its_value_is_never_read, name_40));
            }
        }
    }
    function isTypeParameterUnused(typeParameter) {
        return !(getMergedSymbol(typeParameter.symbol).isReferenced & 262144 /* SymbolFlags.TypeParameter */) && !isIdentifierThatStartsWithUnderscore(typeParameter.name);
    }
    function addToGroup(map, key, value, getKey) {
        var keyString = String(getKey(key));
        var group = map.get(keyString);
        if (group) {
            group[1].push(value);
        }
        else {
            map.set(keyString, [key, [value]]);
        }
    }
    function tryGetRootParameterDeclaration(node) {
        return (0, ts_1.tryCast)((0, ts_1.getRootDeclaration)(node), ts_1.isParameter);
    }
    function isValidUnusedLocalDeclaration(declaration) {
        if ((0, ts_1.isBindingElement)(declaration)) {
            if ((0, ts_1.isObjectBindingPattern)(declaration.parent)) {
                /**
                 * ignore starts with underscore names _
                 * const { a: _a } = { a: 1 }
                 */
                return !!(declaration.propertyName && isIdentifierThatStartsWithUnderscore(declaration.name));
            }
            return isIdentifierThatStartsWithUnderscore(declaration.name);
        }
        return (0, ts_1.isAmbientModule)(declaration) ||
            ((0, ts_1.isVariableDeclaration)(declaration) && (0, ts_1.isForInOrOfStatement)(declaration.parent.parent) || isImportedDeclaration(declaration)) && isIdentifierThatStartsWithUnderscore(declaration.name);
    }
    function checkUnusedLocalsAndParameters(nodeWithLocals, addDiagnostic) {
        // Ideally we could use the ImportClause directly as a key, but must wait until we have full ES6 maps. So must store key along with value.
        var unusedImports = new Map();
        var unusedDestructures = new Map();
        var unusedVariables = new Map();
        nodeWithLocals.locals.forEach(function (local) {
            // If it's purely a type parameter, ignore, will be checked in `checkUnusedTypeParameters`.
            // If it's a type parameter merged with a parameter, check if the parameter-side is used.
            if (local.flags & 262144 /* SymbolFlags.TypeParameter */ ? !(local.flags & 3 /* SymbolFlags.Variable */ && !(local.isReferenced & 3 /* SymbolFlags.Variable */)) : local.isReferenced || local.exportSymbol) {
                return;
            }
            if (local.declarations) {
                for (var _i = 0, _a = local.declarations; _i < _a.length; _i++) {
                    var declaration = _a[_i];
                    if (isValidUnusedLocalDeclaration(declaration)) {
                        continue;
                    }
                    if (isImportedDeclaration(declaration)) {
                        addToGroup(unusedImports, importClauseFromImported(declaration), declaration, getNodeId);
                    }
                    else if ((0, ts_1.isBindingElement)(declaration) && (0, ts_1.isObjectBindingPattern)(declaration.parent)) {
                        // In `{ a, ...b }, `a` is considered used since it removes a property from `b`. `b` may still be unused though.
                        var lastElement = (0, ts_1.last)(declaration.parent.elements);
                        if (declaration === lastElement || !(0, ts_1.last)(declaration.parent.elements).dotDotDotToken) {
                            addToGroup(unusedDestructures, declaration.parent, declaration, getNodeId);
                        }
                    }
                    else if ((0, ts_1.isVariableDeclaration)(declaration)) {
                        addToGroup(unusedVariables, declaration.parent, declaration, getNodeId);
                    }
                    else {
                        var parameter = local.valueDeclaration && tryGetRootParameterDeclaration(local.valueDeclaration);
                        var name_41 = local.valueDeclaration && (0, ts_1.getNameOfDeclaration)(local.valueDeclaration);
                        if (parameter && name_41) {
                            if (!(0, ts_1.isParameterPropertyDeclaration)(parameter, parameter.parent) && !(0, ts_1.parameterIsThisKeyword)(parameter) && !isIdentifierThatStartsWithUnderscore(name_41)) {
                                if ((0, ts_1.isBindingElement)(declaration) && (0, ts_1.isArrayBindingPattern)(declaration.parent)) {
                                    addToGroup(unusedDestructures, declaration.parent, declaration, getNodeId);
                                }
                                else {
                                    addDiagnostic(parameter, 1 /* UnusedKind.Parameter */, (0, ts_1.createDiagnosticForNode)(name_41, ts_1.Diagnostics._0_is_declared_but_its_value_is_never_read, (0, ts_1.symbolName)(local)));
                                }
                            }
                        }
                        else {
                            errorUnusedLocal(declaration, (0, ts_1.symbolName)(local), addDiagnostic);
                        }
                    }
                }
            }
        });
        unusedImports.forEach(function (_a) {
            var importClause = _a[0], unuseds = _a[1];
            var importDecl = importClause.parent;
            var nDeclarations = (importClause.name ? 1 : 0) +
                (importClause.namedBindings ?
                    (importClause.namedBindings.kind === 273 /* SyntaxKind.NamespaceImport */ ? 1 : importClause.namedBindings.elements.length)
                    : 0);
            if (nDeclarations === unuseds.length) {
                addDiagnostic(importDecl, 0 /* UnusedKind.Local */, unuseds.length === 1
                    ? (0, ts_1.createDiagnosticForNode)(importDecl, ts_1.Diagnostics._0_is_declared_but_its_value_is_never_read, (0, ts_1.idText)((0, ts_1.first)(unuseds).name))
                    : (0, ts_1.createDiagnosticForNode)(importDecl, ts_1.Diagnostics.All_imports_in_import_declaration_are_unused));
            }
            else {
                for (var _i = 0, unuseds_1 = unuseds; _i < unuseds_1.length; _i++) {
                    var unused = unuseds_1[_i];
                    errorUnusedLocal(unused, (0, ts_1.idText)(unused.name), addDiagnostic);
                }
            }
        });
        unusedDestructures.forEach(function (_a) {
            var bindingPattern = _a[0], bindingElements = _a[1];
            var kind = tryGetRootParameterDeclaration(bindingPattern.parent) ? 1 /* UnusedKind.Parameter */ : 0 /* UnusedKind.Local */;
            if (bindingPattern.elements.length === bindingElements.length) {
                if (bindingElements.length === 1 && bindingPattern.parent.kind === 259 /* SyntaxKind.VariableDeclaration */ && bindingPattern.parent.parent.kind === 260 /* SyntaxKind.VariableDeclarationList */) {
                    addToGroup(unusedVariables, bindingPattern.parent.parent, bindingPattern.parent, getNodeId);
                }
                else {
                    addDiagnostic(bindingPattern, kind, bindingElements.length === 1
                        ? (0, ts_1.createDiagnosticForNode)(bindingPattern, ts_1.Diagnostics._0_is_declared_but_its_value_is_never_read, bindingNameText((0, ts_1.first)(bindingElements).name))
                        : (0, ts_1.createDiagnosticForNode)(bindingPattern, ts_1.Diagnostics.All_destructured_elements_are_unused));
                }
            }
            else {
                for (var _i = 0, bindingElements_1 = bindingElements; _i < bindingElements_1.length; _i++) {
                    var e = bindingElements_1[_i];
                    addDiagnostic(e, kind, (0, ts_1.createDiagnosticForNode)(e, ts_1.Diagnostics._0_is_declared_but_its_value_is_never_read, bindingNameText(e.name)));
                }
            }
        });
        unusedVariables.forEach(function (_a) {
            var declarationList = _a[0], declarations = _a[1];
            if (declarationList.declarations.length === declarations.length) {
                addDiagnostic(declarationList, 0 /* UnusedKind.Local */, declarations.length === 1
                    ? (0, ts_1.createDiagnosticForNode)((0, ts_1.first)(declarations).name, ts_1.Diagnostics._0_is_declared_but_its_value_is_never_read, bindingNameText((0, ts_1.first)(declarations).name))
                    : (0, ts_1.createDiagnosticForNode)(declarationList.parent.kind === 242 /* SyntaxKind.VariableStatement */ ? declarationList.parent : declarationList, ts_1.Diagnostics.All_variables_are_unused));
            }
            else {
                for (var _i = 0, declarations_5 = declarations; _i < declarations_5.length; _i++) {
                    var decl = declarations_5[_i];
                    addDiagnostic(decl, 0 /* UnusedKind.Local */, (0, ts_1.createDiagnosticForNode)(decl, ts_1.Diagnostics._0_is_declared_but_its_value_is_never_read, bindingNameText(decl.name)));
                }
            }
        });
    }
    function checkPotentialUncheckedRenamedBindingElementsInTypes() {
        var _a;
        for (var _i = 0, potentialUnusedRenamedBindingElementsInTypes_1 = potentialUnusedRenamedBindingElementsInTypes; _i < potentialUnusedRenamedBindingElementsInTypes_1.length; _i++) {
            var node = potentialUnusedRenamedBindingElementsInTypes_1[_i];
            if (!((_a = getSymbolOfDeclaration(node)) === null || _a === void 0 ? void 0 : _a.isReferenced)) {
                var wrappingDeclaration = (0, ts_1.walkUpBindingElementsAndPatterns)(node);
                ts_1.Debug.assert((0, ts_1.isParameterDeclaration)(wrappingDeclaration), "Only parameter declaration should be checked here");
                var diagnostic = (0, ts_1.createDiagnosticForNode)(node.name, ts_1.Diagnostics._0_is_an_unused_renaming_of_1_Did_you_intend_to_use_it_as_a_type_annotation, (0, ts_1.declarationNameToString)(node.name), (0, ts_1.declarationNameToString)(node.propertyName));
                if (!wrappingDeclaration.type) {
                    // entire parameter does not have type annotation, suggest adding an annotation
                    (0, ts_1.addRelatedInfo)(diagnostic, (0, ts_1.createFileDiagnostic)((0, ts_1.getSourceFileOfNode)(wrappingDeclaration), wrappingDeclaration.end, 1, ts_1.Diagnostics.We_can_only_write_a_type_for_0_by_adding_a_type_for_the_entire_parameter_here, (0, ts_1.declarationNameToString)(node.propertyName)));
                }
                diagnostics.add(diagnostic);
            }
        }
    }
    function bindingNameText(name) {
        switch (name.kind) {
            case 80 /* SyntaxKind.Identifier */:
                return (0, ts_1.idText)(name);
            case 206 /* SyntaxKind.ArrayBindingPattern */:
            case 205 /* SyntaxKind.ObjectBindingPattern */:
                return bindingNameText((0, ts_1.cast)((0, ts_1.first)(name.elements), ts_1.isBindingElement).name);
            default:
                return ts_1.Debug.assertNever(name);
        }
    }
    function isImportedDeclaration(node) {
        return node.kind === 272 /* SyntaxKind.ImportClause */ || node.kind === 275 /* SyntaxKind.ImportSpecifier */ || node.kind === 273 /* SyntaxKind.NamespaceImport */;
    }
    function importClauseFromImported(decl) {
        return decl.kind === 272 /* SyntaxKind.ImportClause */ ? decl : decl.kind === 273 /* SyntaxKind.NamespaceImport */ ? decl.parent : decl.parent.parent;
    }
    function checkBlock(node) {
        // Grammar checking for SyntaxKind.Block
        if (node.kind === 240 /* SyntaxKind.Block */) {
            checkGrammarStatementInAmbientContext(node);
        }
        if ((0, ts_1.isFunctionOrModuleBlock)(node)) {
            var saveFlowAnalysisDisabled = flowAnalysisDisabled;
            (0, ts_1.forEach)(node.statements, checkSourceElement);
            flowAnalysisDisabled = saveFlowAnalysisDisabled;
        }
        else {
            (0, ts_1.forEach)(node.statements, checkSourceElement);
        }
        if (node.locals) {
            registerForUnusedIdentifiersCheck(node);
        }
    }
    function checkCollisionWithArgumentsInGeneratedCode(node) {
        // no rest parameters \ declaration context \ overload - no codegen impact
        if (languageVersion >= 2 /* ScriptTarget.ES2015 */ || !(0, ts_1.hasRestParameter)(node) || node.flags & 16777216 /* NodeFlags.Ambient */ || (0, ts_1.nodeIsMissing)(node.body)) {
            return;
        }
        (0, ts_1.forEach)(node.parameters, function (p) {
            if (p.name && !(0, ts_1.isBindingPattern)(p.name) && p.name.escapedText === argumentsSymbol.escapedName) {
                errorSkippedOn("noEmit", p, ts_1.Diagnostics.Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters);
            }
        });
    }
    /**
     * Checks whether an {@link Identifier}, in the context of another {@link Node}, would collide with a runtime value
     * of {@link name} in an outer scope. This is used to check for collisions for downlevel transformations that
     * require names like `Object`, `Promise`, `Reflect`, `require`, `exports`, etc.
     */
    function needCollisionCheckForIdentifier(node, identifier, name) {
        if ((identifier === null || identifier === void 0 ? void 0 : identifier.escapedText) !== name) {
            return false;
        }
        if (node.kind === 171 /* SyntaxKind.PropertyDeclaration */ ||
            node.kind === 170 /* SyntaxKind.PropertySignature */ ||
            node.kind === 173 /* SyntaxKind.MethodDeclaration */ ||
            node.kind === 172 /* SyntaxKind.MethodSignature */ ||
            node.kind === 176 /* SyntaxKind.GetAccessor */ ||
            node.kind === 177 /* SyntaxKind.SetAccessor */ ||
            node.kind === 302 /* SyntaxKind.PropertyAssignment */) {
            // it is ok to have member named '_super', '_this', `Promise`, etc. - member access is always qualified
            return false;
        }
        if (node.flags & 16777216 /* NodeFlags.Ambient */) {
            // ambient context - no codegen impact
            return false;
        }
        if ((0, ts_1.isImportClause)(node) || (0, ts_1.isImportEqualsDeclaration)(node) || (0, ts_1.isImportSpecifier)(node)) {
            // type-only imports do not require collision checks against runtime values.
            if ((0, ts_1.isTypeOnlyImportOrExportDeclaration)(node)) {
                return false;
            }
        }
        var root = (0, ts_1.getRootDeclaration)(node);
        if ((0, ts_1.isParameter)(root) && (0, ts_1.nodeIsMissing)(root.parent.body)) {
            // just an overload - no codegen impact
            return false;
        }
        return true;
    }
    // this function will run after checking the source file so 'CaptureThis' is correct for all nodes
    function checkIfThisIsCapturedInEnclosingScope(node) {
        (0, ts_1.findAncestor)(node, function (current) {
            if (getNodeCheckFlags(current) & 4 /* NodeCheckFlags.CaptureThis */) {
                var isDeclaration_1 = node.kind !== 80 /* SyntaxKind.Identifier */;
                if (isDeclaration_1) {
                    error((0, ts_1.getNameOfDeclaration)(node), ts_1.Diagnostics.Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference);
                }
                else {
                    error(node, ts_1.Diagnostics.Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference);
                }
                return true;
            }
            return false;
        });
    }
    function checkIfNewTargetIsCapturedInEnclosingScope(node) {
        (0, ts_1.findAncestor)(node, function (current) {
            if (getNodeCheckFlags(current) & 8 /* NodeCheckFlags.CaptureNewTarget */) {
                var isDeclaration_2 = node.kind !== 80 /* SyntaxKind.Identifier */;
                if (isDeclaration_2) {
                    error((0, ts_1.getNameOfDeclaration)(node), ts_1.Diagnostics.Duplicate_identifier_newTarget_Compiler_uses_variable_declaration_newTarget_to_capture_new_target_meta_property_reference);
                }
                else {
                    error(node, ts_1.Diagnostics.Expression_resolves_to_variable_declaration_newTarget_that_compiler_uses_to_capture_new_target_meta_property_reference);
                }
                return true;
            }
            return false;
        });
    }
    function checkCollisionWithRequireExportsInGeneratedCode(node, name) {
        // No need to check for require or exports for ES6 modules and later
        if (moduleKind >= ts_1.ModuleKind.ES2015 && !(moduleKind >= ts_1.ModuleKind.Node16 && (0, ts_1.getSourceFileOfNode)(node).impliedNodeFormat === ts_1.ModuleKind.CommonJS)) {
            return;
        }
        if (!name || !needCollisionCheckForIdentifier(node, name, "require") && !needCollisionCheckForIdentifier(node, name, "exports")) {
            return;
        }
        // Uninstantiated modules shouldnt do this check
        if ((0, ts_1.isModuleDeclaration)(node) && (0, ts_1.getModuleInstanceState)(node) !== 1 /* ModuleInstanceState.Instantiated */) {
            return;
        }
        // In case of variable declaration, node.parent is variable statement so look at the variable statement's parent
        var parent = getDeclarationContainer(node);
        if (parent.kind === 311 /* SyntaxKind.SourceFile */ && (0, ts_1.isExternalOrCommonJsModule)(parent)) {
            // If the declaration happens to be in external module, report error that require and exports are reserved keywords
            errorSkippedOn("noEmit", name, ts_1.Diagnostics.Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module, (0, ts_1.declarationNameToString)(name), (0, ts_1.declarationNameToString)(name));
        }
    }
    function checkCollisionWithGlobalPromiseInGeneratedCode(node, name) {
        if (!name || languageVersion >= 4 /* ScriptTarget.ES2017 */ || !needCollisionCheckForIdentifier(node, name, "Promise")) {
            return;
        }
        // Uninstantiated modules shouldnt do this check
        if ((0, ts_1.isModuleDeclaration)(node) && (0, ts_1.getModuleInstanceState)(node) !== 1 /* ModuleInstanceState.Instantiated */) {
            return;
        }
        // In case of variable declaration, node.parent is variable statement so look at the variable statement's parent
        var parent = getDeclarationContainer(node);
        if (parent.kind === 311 /* SyntaxKind.SourceFile */ && (0, ts_1.isExternalOrCommonJsModule)(parent) && parent.flags & 2048 /* NodeFlags.HasAsyncFunctions */) {
            // If the declaration happens to be in external module, report error that Promise is a reserved identifier.
            errorSkippedOn("noEmit", name, ts_1.Diagnostics.Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module_containing_async_functions, (0, ts_1.declarationNameToString)(name), (0, ts_1.declarationNameToString)(name));
        }
    }
    function recordPotentialCollisionWithWeakMapSetInGeneratedCode(node, name) {
        if (languageVersion <= 8 /* ScriptTarget.ES2021 */
            && (needCollisionCheckForIdentifier(node, name, "WeakMap") || needCollisionCheckForIdentifier(node, name, "WeakSet"))) {
            potentialWeakMapSetCollisions.push(node);
        }
    }
    function checkWeakMapSetCollision(node) {
        var enclosingBlockScope = (0, ts_1.getEnclosingBlockScopeContainer)(node);
        if (getNodeCheckFlags(enclosingBlockScope) & 4194304 /* NodeCheckFlags.ContainsClassWithPrivateIdentifiers */) {
            ts_1.Debug.assert((0, ts_1.isNamedDeclaration)(node) && (0, ts_1.isIdentifier)(node.name) && typeof node.name.escapedText === "string", "The target of a WeakMap/WeakSet collision check should be an identifier");
            errorSkippedOn("noEmit", node, ts_1.Diagnostics.Compiler_reserves_name_0_when_emitting_private_identifier_downlevel, node.name.escapedText);
        }
    }
    function recordPotentialCollisionWithReflectInGeneratedCode(node, name) {
        if (name && languageVersion >= 2 /* ScriptTarget.ES2015 */ && languageVersion <= 8 /* ScriptTarget.ES2021 */
            && needCollisionCheckForIdentifier(node, name, "Reflect")) {
            potentialReflectCollisions.push(node);
        }
    }
    function checkReflectCollision(node) {
        var hasCollision = false;
        if ((0, ts_1.isClassExpression)(node)) {
            // ClassExpression names don't contribute to their containers, but do matter for any of their block-scoped members.
            for (var _i = 0, _a = node.members; _i < _a.length; _i++) {
                var member = _a[_i];
                if (getNodeCheckFlags(member) & 8388608 /* NodeCheckFlags.ContainsSuperPropertyInStaticInitializer */) {
                    hasCollision = true;
                    break;
                }
            }
        }
        else if ((0, ts_1.isFunctionExpression)(node)) {
            // FunctionExpression names don't contribute to their containers, but do matter for their contents
            if (getNodeCheckFlags(node) & 8388608 /* NodeCheckFlags.ContainsSuperPropertyInStaticInitializer */) {
                hasCollision = true;
            }
        }
        else {
            var container = (0, ts_1.getEnclosingBlockScopeContainer)(node);
            if (container && getNodeCheckFlags(container) & 8388608 /* NodeCheckFlags.ContainsSuperPropertyInStaticInitializer */) {
                hasCollision = true;
            }
        }
        if (hasCollision) {
            ts_1.Debug.assert((0, ts_1.isNamedDeclaration)(node) && (0, ts_1.isIdentifier)(node.name), "The target of a Reflect collision check should be an identifier");
            errorSkippedOn("noEmit", node, ts_1.Diagnostics.Duplicate_identifier_0_Compiler_reserves_name_1_when_emitting_super_references_in_static_initializers, (0, ts_1.declarationNameToString)(node.name), "Reflect");
        }
    }
    function checkCollisionsForDeclarationName(node, name) {
        if (!name)
            return;
        checkCollisionWithRequireExportsInGeneratedCode(node, name);
        checkCollisionWithGlobalPromiseInGeneratedCode(node, name);
        recordPotentialCollisionWithWeakMapSetInGeneratedCode(node, name);
        recordPotentialCollisionWithReflectInGeneratedCode(node, name);
        if ((0, ts_1.isClassLike)(node)) {
            checkTypeNameIsReserved(name, ts_1.Diagnostics.Class_name_cannot_be_0);
            if (!(node.flags & 16777216 /* NodeFlags.Ambient */)) {
                checkClassNameCollisionWithObject(name);
            }
        }
        else if ((0, ts_1.isEnumDeclaration)(node)) {
            checkTypeNameIsReserved(name, ts_1.Diagnostics.Enum_name_cannot_be_0);
        }
    }
    function checkVarDeclaredNamesNotShadowed(node) {
        // - ScriptBody : StatementList
        // It is a Syntax Error if any element of the LexicallyDeclaredNames of StatementList
        // also occurs in the VarDeclaredNames of StatementList.
        // - Block : { StatementList }
        // It is a Syntax Error if any element of the LexicallyDeclaredNames of StatementList
        // also occurs in the VarDeclaredNames of StatementList.
        // Variable declarations are hoisted to the top of their function scope. They can shadow
        // block scoped declarations, which bind tighter. this will not be flagged as duplicate definition
        // by the binder as the declaration scope is different.
        // A non-initialized declaration is a no-op as the block declaration will resolve before the var
        // declaration. the problem is if the declaration has an initializer. this will act as a write to the
        // block declared value. this is fine for let, but not const.
        // Only consider declarations with initializers, uninitialized const declarations will not
        // step on a let/const variable.
        // Do not consider const and const declarations, as duplicate block-scoped declarations
        // are handled by the binder.
        // We are only looking for const declarations that step on let\const declarations from a
        // different scope. e.g.:
        //      {
        //          const x = 0; // localDeclarationSymbol obtained after name resolution will correspond to this declaration
        //          const x = 0; // symbol for this declaration will be 'symbol'
        //      }
        // skip block-scoped variables and parameters
        if (((0, ts_1.getCombinedNodeFlags)(node) & 3 /* NodeFlags.BlockScoped */) !== 0 || (0, ts_1.isParameterDeclaration)(node)) {
            return;
        }
        // skip variable declarations that don't have initializers
        // NOTE: in ES6 spec initializer is required in variable declarations where name is binding pattern
        // so we'll always treat binding elements as initialized
        if (node.kind === 259 /* SyntaxKind.VariableDeclaration */ && !node.initializer) {
            return;
        }
        var symbol = getSymbolOfDeclaration(node);
        if (symbol.flags & 1 /* SymbolFlags.FunctionScopedVariable */) {
            if (!(0, ts_1.isIdentifier)(node.name))
                return ts_1.Debug.fail();
            var localDeclarationSymbol = resolveName(node, node.name.escapedText, 3 /* SymbolFlags.Variable */, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ false);
            if (localDeclarationSymbol &&
                localDeclarationSymbol !== symbol &&
                localDeclarationSymbol.flags & 2 /* SymbolFlags.BlockScopedVariable */) {
                if (getDeclarationNodeFlagsFromSymbol(localDeclarationSymbol) & 3 /* NodeFlags.BlockScoped */) {
                    var varDeclList = (0, ts_1.getAncestor)(localDeclarationSymbol.valueDeclaration, 260 /* SyntaxKind.VariableDeclarationList */);
                    var container = varDeclList.parent.kind === 242 /* SyntaxKind.VariableStatement */ && varDeclList.parent.parent
                        ? varDeclList.parent.parent
                        : undefined;
                    // names of block-scoped and function scoped variables can collide only
                    // if block scoped variable is defined in the function\module\source file scope (because of variable hoisting)
                    var namesShareScope = container &&
                        (container.kind === 240 /* SyntaxKind.Block */ && (0, ts_1.isFunctionLike)(container.parent) ||
                            container.kind === 267 /* SyntaxKind.ModuleBlock */ ||
                            container.kind === 266 /* SyntaxKind.ModuleDeclaration */ ||
                            container.kind === 311 /* SyntaxKind.SourceFile */);
                    // here we know that function scoped variable is shadowed by block scoped one
                    // if they are defined in the same scope - binder has already reported redeclaration error
                    // otherwise if variable has an initializer - show error that initialization will fail
                    // since LHS will be block scoped name instead of function scoped
                    if (!namesShareScope) {
                        var name_42 = symbolToString(localDeclarationSymbol);
                        error(node, ts_1.Diagnostics.Cannot_initialize_outer_scoped_variable_0_in_the_same_scope_as_block_scoped_declaration_1, name_42, name_42);
                    }
                }
            }
        }
    }
    function convertAutoToAny(type) {
        return type === autoType ? anyType : type === autoArrayType ? anyArrayType : type;
    }
    // Check variable, parameter, or property declaration
    function checkVariableLikeDeclaration(node) {
        var _a;
        checkDecorators(node);
        if (!(0, ts_1.isBindingElement)(node)) {
            checkSourceElement(node.type);
        }
        // JSDoc `function(string, string): string` syntax results in parameters with no name
        if (!node.name) {
            return;
        }
        // For a computed property, just check the initializer and exit
        // Do not use hasDynamicName here, because that returns false for well known symbols.
        // We want to perform checkComputedPropertyName for all computed properties, including
        // well known symbols.
        if (node.name.kind === 166 /* SyntaxKind.ComputedPropertyName */) {
            checkComputedPropertyName(node.name);
            if ((0, ts_1.hasOnlyExpressionInitializer)(node) && node.initializer) {
                checkExpressionCached(node.initializer);
            }
        }
        if ((0, ts_1.isBindingElement)(node)) {
            if (node.propertyName &&
                (0, ts_1.isIdentifier)(node.name) &&
                (0, ts_1.isParameterDeclaration)(node) &&
                (0, ts_1.nodeIsMissing)((0, ts_1.getContainingFunction)(node).body)) {
                // type F = ({a: string}) => void;
                //               ^^^^^^
                // variable renaming in function type notation is confusing,
                // so we forbid it even if noUnusedLocals is not enabled
                potentialUnusedRenamedBindingElementsInTypes.push(node);
                return;
            }
            if ((0, ts_1.isObjectBindingPattern)(node.parent) && node.dotDotDotToken && languageVersion < 5 /* ScriptTarget.ES2018 */) {
                checkExternalEmitHelpers(node, 4 /* ExternalEmitHelpers.Rest */);
            }
            // check computed properties inside property names of binding elements
            if (node.propertyName && node.propertyName.kind === 166 /* SyntaxKind.ComputedPropertyName */) {
                checkComputedPropertyName(node.propertyName);
            }
            // check private/protected variable access
            var parent_19 = node.parent.parent;
            var parentCheckMode = node.dotDotDotToken ? 64 /* CheckMode.RestBindingElement */ : 0 /* CheckMode.Normal */;
            var parentType = getTypeForBindingElementParent(parent_19, parentCheckMode);
            var name_43 = node.propertyName || node.name;
            if (parentType && !(0, ts_1.isBindingPattern)(name_43)) {
                var exprType = getLiteralTypeFromPropertyName(name_43);
                if (isTypeUsableAsPropertyName(exprType)) {
                    var nameText = getPropertyNameFromType(exprType);
                    var property = getPropertyOfType(parentType, nameText);
                    if (property) {
                        markPropertyAsReferenced(property, /*nodeForCheckWriteOnly*/ undefined, /*isSelfTypeAccess*/ false); // A destructuring is never a write-only reference.
                        checkPropertyAccessibility(node, !!parent_19.initializer && parent_19.initializer.kind === 108 /* SyntaxKind.SuperKeyword */, /*writing*/ false, parentType, property);
                    }
                }
            }
        }
        // For a binding pattern, check contained binding elements
        if ((0, ts_1.isBindingPattern)(node.name)) {
            if (node.name.kind === 206 /* SyntaxKind.ArrayBindingPattern */ && languageVersion < 2 /* ScriptTarget.ES2015 */ && compilerOptions.downlevelIteration) {
                checkExternalEmitHelpers(node, 512 /* ExternalEmitHelpers.Read */);
            }
            (0, ts_1.forEach)(node.name.elements, checkSourceElement);
        }
        // For a parameter declaration with an initializer, error and exit if the containing function doesn't have a body
        if ((0, ts_1.isParameter)(node) && node.initializer && (0, ts_1.nodeIsMissing)((0, ts_1.getContainingFunction)(node).body)) {
            error(node, ts_1.Diagnostics.A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation);
            return;
        }
        // For a binding pattern, validate the initializer and exit
        if ((0, ts_1.isBindingPattern)(node.name)) {
            if (isInAmbientOrTypeNode(node)) {
                return;
            }
            var needCheckInitializer = (0, ts_1.hasOnlyExpressionInitializer)(node) && node.initializer && node.parent.parent.kind !== 248 /* SyntaxKind.ForInStatement */;
            var needCheckWidenedType = !(0, ts_1.some)(node.name.elements, (0, ts_1.not)(ts_1.isOmittedExpression));
            if (needCheckInitializer || needCheckWidenedType) {
                // Don't validate for-in initializer as it is already an error
                var widenedType = getWidenedTypeForVariableLikeDeclaration(node);
                if (needCheckInitializer) {
                    var initializerType = checkExpressionCached(node.initializer);
                    if (strictNullChecks && needCheckWidenedType) {
                        checkNonNullNonVoidType(initializerType, node);
                    }
                    else {
                        checkTypeAssignableToAndOptionallyElaborate(initializerType, getWidenedTypeForVariableLikeDeclaration(node), node, node.initializer);
                    }
                }
                // check the binding pattern with empty elements
                if (needCheckWidenedType) {
                    if ((0, ts_1.isArrayBindingPattern)(node.name)) {
                        checkIteratedTypeOrElementType(65 /* IterationUse.Destructuring */, widenedType, undefinedType, node);
                    }
                    else if (strictNullChecks) {
                        checkNonNullNonVoidType(widenedType, node);
                    }
                }
            }
            return;
        }
        // For a commonjs `const x = require`, validate the alias and exit
        var symbol = getSymbolOfDeclaration(node);
        if (symbol.flags & 2097152 /* SymbolFlags.Alias */ && ((0, ts_1.isVariableDeclarationInitializedToBareOrAccessedRequire)(node) || (0, ts_1.isBindingElementOfBareOrAccessedRequire)(node))) {
            checkAliasSymbol(node);
            return;
        }
        var type = convertAutoToAny(getTypeOfSymbol(symbol));
        if (node === symbol.valueDeclaration) {
            // Node is the primary declaration of the symbol, just validate the initializer
            // Don't validate for-in initializer as it is already an error
            var initializer = (0, ts_1.hasOnlyExpressionInitializer)(node) && (0, ts_1.getEffectiveInitializer)(node);
            if (initializer) {
                var isJSObjectLiteralInitializer = (0, ts_1.isInJSFile)(node) &&
                    (0, ts_1.isObjectLiteralExpression)(initializer) &&
                    (initializer.properties.length === 0 || (0, ts_1.isPrototypeAccess)(node.name)) &&
                    !!((_a = symbol.exports) === null || _a === void 0 ? void 0 : _a.size);
                if (!isJSObjectLiteralInitializer && node.parent.parent.kind !== 248 /* SyntaxKind.ForInStatement */) {
                    checkTypeAssignableToAndOptionallyElaborate(checkExpressionCached(initializer), type, node, initializer, /*headMessage*/ undefined);
                }
            }
            if (symbol.declarations && symbol.declarations.length > 1) {
                if ((0, ts_1.some)(symbol.declarations, function (d) { return d !== node && (0, ts_1.isVariableLike)(d) && !areDeclarationFlagsIdentical(d, node); })) {
                    error(node.name, ts_1.Diagnostics.All_declarations_of_0_must_have_identical_modifiers, (0, ts_1.declarationNameToString)(node.name));
                }
            }
        }
        else {
            // Node is a secondary declaration, check that type is identical to primary declaration and check that
            // initializer is consistent with type associated with the node
            var declarationType = convertAutoToAny(getWidenedTypeForVariableLikeDeclaration(node));
            if (!isErrorType(type) && !isErrorType(declarationType) &&
                !isTypeIdenticalTo(type, declarationType) &&
                !(symbol.flags & 67108864 /* SymbolFlags.Assignment */)) {
                errorNextVariableOrPropertyDeclarationMustHaveSameType(symbol.valueDeclaration, type, node, declarationType);
            }
            if ((0, ts_1.hasOnlyExpressionInitializer)(node) && node.initializer) {
                checkTypeAssignableToAndOptionallyElaborate(checkExpressionCached(node.initializer), declarationType, node, node.initializer, /*headMessage*/ undefined);
            }
            if (symbol.valueDeclaration && !areDeclarationFlagsIdentical(node, symbol.valueDeclaration)) {
                error(node.name, ts_1.Diagnostics.All_declarations_of_0_must_have_identical_modifiers, (0, ts_1.declarationNameToString)(node.name));
            }
        }
        if (node.kind !== 171 /* SyntaxKind.PropertyDeclaration */ && node.kind !== 170 /* SyntaxKind.PropertySignature */) {
            // We know we don't have a binding pattern or computed name here
            checkExportsOnMergedDeclarations(node);
            if (node.kind === 259 /* SyntaxKind.VariableDeclaration */ || node.kind === 207 /* SyntaxKind.BindingElement */) {
                checkVarDeclaredNamesNotShadowed(node);
            }
            checkCollisionsForDeclarationName(node, node.name);
        }
    }
    function errorNextVariableOrPropertyDeclarationMustHaveSameType(firstDeclaration, firstType, nextDeclaration, nextType) {
        var nextDeclarationName = (0, ts_1.getNameOfDeclaration)(nextDeclaration);
        var message = nextDeclaration.kind === 171 /* SyntaxKind.PropertyDeclaration */ || nextDeclaration.kind === 170 /* SyntaxKind.PropertySignature */
            ? ts_1.Diagnostics.Subsequent_property_declarations_must_have_the_same_type_Property_0_must_be_of_type_1_but_here_has_type_2
            : ts_1.Diagnostics.Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2;
        var declName = (0, ts_1.declarationNameToString)(nextDeclarationName);
        var err = error(nextDeclarationName, message, declName, typeToString(firstType), typeToString(nextType));
        if (firstDeclaration) {
            (0, ts_1.addRelatedInfo)(err, (0, ts_1.createDiagnosticForNode)(firstDeclaration, ts_1.Diagnostics._0_was_also_declared_here, declName));
        }
    }
    function areDeclarationFlagsIdentical(left, right) {
        if ((left.kind === 168 /* SyntaxKind.Parameter */ && right.kind === 259 /* SyntaxKind.VariableDeclaration */) ||
            (left.kind === 259 /* SyntaxKind.VariableDeclaration */ && right.kind === 168 /* SyntaxKind.Parameter */)) {
            // Differences in optionality between parameters and variables are allowed.
            return true;
        }
        if ((0, ts_1.hasQuestionToken)(left) !== (0, ts_1.hasQuestionToken)(right)) {
            return false;
        }
        var interestingFlags = 8 /* ModifierFlags.Private */ |
            16 /* ModifierFlags.Protected */ |
            512 /* ModifierFlags.Async */ |
            256 /* ModifierFlags.Abstract */ |
            64 /* ModifierFlags.Readonly */ |
            32 /* ModifierFlags.Static */;
        return (0, ts_1.getSelectedEffectiveModifierFlags)(left, interestingFlags) === (0, ts_1.getSelectedEffectiveModifierFlags)(right, interestingFlags);
    }
    function checkVariableDeclaration(node) {
        ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.push("check" /* tracing.Phase.Check */, "checkVariableDeclaration", { kind: node.kind, pos: node.pos, end: node.end, path: node.tracingPath });
        checkGrammarVariableDeclaration(node);
        checkVariableLikeDeclaration(node);
        ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.pop();
    }
    function checkBindingElement(node) {
        checkGrammarBindingElement(node);
        return checkVariableLikeDeclaration(node);
    }
    function checkVariableStatement(node) {
        // Grammar checking
        if (!checkGrammarModifiers(node) && !checkGrammarVariableDeclarationList(node.declarationList))
            checkGrammarForDisallowedLetOrConstStatement(node);
        (0, ts_1.forEach)(node.declarationList.declarations, checkSourceElement);
    }
    function checkExpressionStatement(node) {
        // Grammar checking
        checkGrammarStatementInAmbientContext(node);
        checkExpression(node.expression);
    }
    function checkIfStatement(node) {
        // Grammar checking
        checkGrammarStatementInAmbientContext(node);
        var type = checkTruthinessExpression(node.expression);
        checkTestingKnownTruthyCallableOrAwaitableType(node.expression, type, node.thenStatement);
        checkSourceElement(node.thenStatement);
        if (node.thenStatement.kind === 241 /* SyntaxKind.EmptyStatement */) {
            error(node.thenStatement, ts_1.Diagnostics.The_body_of_an_if_statement_cannot_be_the_empty_statement);
        }
        checkSourceElement(node.elseStatement);
    }
    function checkTestingKnownTruthyCallableOrAwaitableType(condExpr, condType, body) {
        if (!strictNullChecks)
            return;
        bothHelper(condExpr, body);
        function bothHelper(condExpr, body) {
            condExpr = (0, ts_1.skipParentheses)(condExpr);
            helper(condExpr, body);
            while ((0, ts_1.isBinaryExpression)(condExpr) && (condExpr.operatorToken.kind === 57 /* SyntaxKind.BarBarToken */ || condExpr.operatorToken.kind === 61 /* SyntaxKind.QuestionQuestionToken */)) {
                condExpr = (0, ts_1.skipParentheses)(condExpr.left);
                helper(condExpr, body);
            }
        }
        function helper(condExpr, body) {
            var location = (0, ts_1.isLogicalOrCoalescingBinaryExpression)(condExpr) ? (0, ts_1.skipParentheses)(condExpr.right) : condExpr;
            if ((0, ts_1.isModuleExportsAccessExpression)(location)) {
                return;
            }
            if ((0, ts_1.isLogicalOrCoalescingBinaryExpression)(location)) {
                bothHelper(location, body);
                return;
            }
            var type = location === condExpr ? condType : checkTruthinessExpression(location);
            var isPropertyExpressionCast = (0, ts_1.isPropertyAccessExpression)(location) && isTypeAssertion(location.expression);
            if (!(getTypeFacts(type) & 4194304 /* TypeFacts.Truthy */) || isPropertyExpressionCast)
                return;
            // While it technically should be invalid for any known-truthy value
            // to be tested, we de-scope to functions and Promises unreferenced in
            // the block as a heuristic to identify the most common bugs. There
            // are too many false positives for values sourced from type
            // definitions without strictNullChecks otherwise.
            var callSignatures = getSignaturesOfType(type, 0 /* SignatureKind.Call */);
            var isPromise = !!getAwaitedTypeOfPromise(type);
            if (callSignatures.length === 0 && !isPromise) {
                return;
            }
            var testedNode = (0, ts_1.isIdentifier)(location) ? location
                : (0, ts_1.isPropertyAccessExpression)(location) ? location.name
                    : undefined;
            var testedSymbol = testedNode && getSymbolAtLocation(testedNode);
            if (!testedSymbol && !isPromise) {
                return;
            }
            var isUsed = testedSymbol && (0, ts_1.isBinaryExpression)(condExpr.parent) && isSymbolUsedInBinaryExpressionChain(condExpr.parent, testedSymbol)
                || testedSymbol && body && isSymbolUsedInConditionBody(condExpr, body, testedNode, testedSymbol);
            if (!isUsed) {
                if (isPromise) {
                    errorAndMaybeSuggestAwait(location, 
                    /*maybeMissingAwait*/ true, ts_1.Diagnostics.This_condition_will_always_return_true_since_this_0_is_always_defined, getTypeNameForErrorDisplay(type));
                }
                else {
                    error(location, ts_1.Diagnostics.This_condition_will_always_return_true_since_this_function_is_always_defined_Did_you_mean_to_call_it_instead);
                }
            }
        }
    }
    function isSymbolUsedInConditionBody(expr, body, testedNode, testedSymbol) {
        return !!(0, ts_1.forEachChild)(body, function check(childNode) {
            if ((0, ts_1.isIdentifier)(childNode)) {
                var childSymbol = getSymbolAtLocation(childNode);
                if (childSymbol && childSymbol === testedSymbol) {
                    // If the test was a simple identifier, the above check is sufficient
                    if ((0, ts_1.isIdentifier)(expr) || (0, ts_1.isIdentifier)(testedNode) && (0, ts_1.isBinaryExpression)(testedNode.parent)) {
                        return true;
                    }
                    // Otherwise we need to ensure the symbol is called on the same target
                    var testedExpression = testedNode.parent;
                    var childExpression = childNode.parent;
                    while (testedExpression && childExpression) {
                        if ((0, ts_1.isIdentifier)(testedExpression) && (0, ts_1.isIdentifier)(childExpression) ||
                            testedExpression.kind === 110 /* SyntaxKind.ThisKeyword */ && childExpression.kind === 110 /* SyntaxKind.ThisKeyword */) {
                            return getSymbolAtLocation(testedExpression) === getSymbolAtLocation(childExpression);
                        }
                        else if ((0, ts_1.isPropertyAccessExpression)(testedExpression) && (0, ts_1.isPropertyAccessExpression)(childExpression)) {
                            if (getSymbolAtLocation(testedExpression.name) !== getSymbolAtLocation(childExpression.name)) {
                                return false;
                            }
                            childExpression = childExpression.expression;
                            testedExpression = testedExpression.expression;
                        }
                        else if ((0, ts_1.isCallExpression)(testedExpression) && (0, ts_1.isCallExpression)(childExpression)) {
                            childExpression = childExpression.expression;
                            testedExpression = testedExpression.expression;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return (0, ts_1.forEachChild)(childNode, check);
        });
    }
    function isSymbolUsedInBinaryExpressionChain(node, testedSymbol) {
        while ((0, ts_1.isBinaryExpression)(node) && node.operatorToken.kind === 56 /* SyntaxKind.AmpersandAmpersandToken */) {
            var isUsed = (0, ts_1.forEachChild)(node.right, function visit(child) {
                if ((0, ts_1.isIdentifier)(child)) {
                    var symbol = getSymbolAtLocation(child);
                    if (symbol && symbol === testedSymbol) {
                        return true;
                    }
                }
                return (0, ts_1.forEachChild)(child, visit);
            });
            if (isUsed) {
                return true;
            }
            node = node.parent;
        }
        return false;
    }
    function checkDoStatement(node) {
        // Grammar checking
        checkGrammarStatementInAmbientContext(node);
        checkSourceElement(node.statement);
        checkTruthinessExpression(node.expression);
    }
    function checkWhileStatement(node) {
        // Grammar checking
        checkGrammarStatementInAmbientContext(node);
        checkTruthinessExpression(node.expression);
        checkSourceElement(node.statement);
    }
    function checkTruthinessOfType(type, node) {
        if (type.flags & 16384 /* TypeFlags.Void */) {
            error(node, ts_1.Diagnostics.An_expression_of_type_void_cannot_be_tested_for_truthiness);
        }
        return type;
    }
    function checkTruthinessExpression(node, checkMode) {
        return checkTruthinessOfType(checkExpression(node, checkMode), node);
    }
    function checkForStatement(node) {
        // Grammar checking
        if (!checkGrammarStatementInAmbientContext(node)) {
            if (node.initializer && node.initializer.kind === 260 /* SyntaxKind.VariableDeclarationList */) {
                checkGrammarVariableDeclarationList(node.initializer);
            }
        }
        if (node.initializer) {
            if (node.initializer.kind === 260 /* SyntaxKind.VariableDeclarationList */) {
                (0, ts_1.forEach)(node.initializer.declarations, checkVariableDeclaration);
            }
            else {
                checkExpression(node.initializer);
            }
        }
        if (node.condition)
            checkTruthinessExpression(node.condition);
        if (node.incrementor)
            checkExpression(node.incrementor);
        checkSourceElement(node.statement);
        if (node.locals) {
            registerForUnusedIdentifiersCheck(node);
        }
    }
    function checkForOfStatement(node) {
        checkGrammarForInOrForOfStatement(node);
        var container = (0, ts_1.getContainingFunctionOrClassStaticBlock)(node);
        if (node.awaitModifier) {
            if (container && (0, ts_1.isClassStaticBlockDeclaration)(container)) {
                grammarErrorOnNode(node.awaitModifier, ts_1.Diagnostics.For_await_loops_cannot_be_used_inside_a_class_static_block);
            }
            else {
                var functionFlags = (0, ts_1.getFunctionFlags)(container);
                if ((functionFlags & (4 /* FunctionFlags.Invalid */ | 2 /* FunctionFlags.Async */)) === 2 /* FunctionFlags.Async */ && languageVersion < 99 /* ScriptTarget.ESNext */) {
                    // for..await..of in an async function or async generator function prior to ESNext requires the __asyncValues helper
                    checkExternalEmitHelpers(node, 16384 /* ExternalEmitHelpers.ForAwaitOfIncludes */);
                }
            }
        }
        else if (compilerOptions.downlevelIteration && languageVersion < 2 /* ScriptTarget.ES2015 */) {
            // for..of prior to ES2015 requires the __values helper when downlevelIteration is enabled
            checkExternalEmitHelpers(node, 256 /* ExternalEmitHelpers.ForOfIncludes */);
        }
        // Check the LHS and RHS
        // If the LHS is a declaration, just check it as a variable declaration, which will in turn check the RHS
        // via checkRightHandSideOfForOf.
        // If the LHS is an expression, check the LHS, as a destructuring assignment or as a reference.
        // Then check that the RHS is assignable to it.
        if (node.initializer.kind === 260 /* SyntaxKind.VariableDeclarationList */) {
            checkForInOrForOfVariableDeclaration(node);
        }
        else {
            var varExpr = node.initializer;
            var iteratedType = checkRightHandSideOfForOf(node);
            // There may be a destructuring assignment on the left side
            if (varExpr.kind === 208 /* SyntaxKind.ArrayLiteralExpression */ || varExpr.kind === 209 /* SyntaxKind.ObjectLiteralExpression */) {
                // iteratedType may be undefined. In this case, we still want to check the structure of
                // varExpr, in particular making sure it's a valid LeftHandSideExpression. But we'd like
                // to short circuit the type relation checking as much as possible, so we pass the unknownType.
                checkDestructuringAssignment(varExpr, iteratedType || errorType);
            }
            else {
                var leftType = checkExpression(varExpr);
                checkReferenceExpression(varExpr, ts_1.Diagnostics.The_left_hand_side_of_a_for_of_statement_must_be_a_variable_or_a_property_access, ts_1.Diagnostics.The_left_hand_side_of_a_for_of_statement_may_not_be_an_optional_property_access);
                // iteratedType will be undefined if the rightType was missing properties/signatures
                // required to get its iteratedType (like [Symbol.iterator] or next). This may be
                // because we accessed properties from anyType, or it may have led to an error inside
                // getElementTypeOfIterable.
                if (iteratedType) {
                    checkTypeAssignableToAndOptionallyElaborate(iteratedType, leftType, varExpr, node.expression);
                }
            }
        }
        checkSourceElement(node.statement);
        if (node.locals) {
            registerForUnusedIdentifiersCheck(node);
        }
    }
    function checkForInStatement(node) {
        // Grammar checking
        checkGrammarForInOrForOfStatement(node);
        var rightType = getNonNullableTypeIfNeeded(checkExpression(node.expression));
        // TypeScript 1.0 spec (April 2014): 5.4
        // In a 'for-in' statement of the form
        // for (let VarDecl in Expr) Statement
        //   VarDecl must be a variable declaration without a type annotation that declares a variable of type Any,
        //   and Expr must be an expression of type Any, an object type, or a type parameter type.
        if (node.initializer.kind === 260 /* SyntaxKind.VariableDeclarationList */) {
            var variable = node.initializer.declarations[0];
            if (variable && (0, ts_1.isBindingPattern)(variable.name)) {
                error(variable.name, ts_1.Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern);
            }
            checkForInOrForOfVariableDeclaration(node);
        }
        else {
            // In a 'for-in' statement of the form
            // for (Var in Expr) Statement
            //   Var must be an expression classified as a reference of type Any or the String primitive type,
            //   and Expr must be an expression of type Any, an object type, or a type parameter type.
            var varExpr = node.initializer;
            var leftType = checkExpression(varExpr);
            if (varExpr.kind === 208 /* SyntaxKind.ArrayLiteralExpression */ || varExpr.kind === 209 /* SyntaxKind.ObjectLiteralExpression */) {
                error(varExpr, ts_1.Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern);
            }
            else if (!isTypeAssignableTo(getIndexTypeOrString(rightType), leftType)) {
                error(varExpr, ts_1.Diagnostics.The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any);
            }
            else {
                // run check only former check succeeded to avoid cascading errors
                checkReferenceExpression(varExpr, ts_1.Diagnostics.The_left_hand_side_of_a_for_in_statement_must_be_a_variable_or_a_property_access, ts_1.Diagnostics.The_left_hand_side_of_a_for_in_statement_may_not_be_an_optional_property_access);
            }
        }
        // unknownType is returned i.e. if node.expression is identifier whose name cannot be resolved
        // in this case error about missing name is already reported - do not report extra one
        if (rightType === neverType || !isTypeAssignableToKind(rightType, 67108864 /* TypeFlags.NonPrimitive */ | 58982400 /* TypeFlags.InstantiableNonPrimitive */)) {
            error(node.expression, ts_1.Diagnostics.The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter_but_here_has_type_0, typeToString(rightType));
        }
        checkSourceElement(node.statement);
        if (node.locals) {
            registerForUnusedIdentifiersCheck(node);
        }
    }
    function checkForInOrForOfVariableDeclaration(iterationStatement) {
        var variableDeclarationList = iterationStatement.initializer;
        // checkGrammarForInOrForOfStatement will check that there is exactly one declaration.
        if (variableDeclarationList.declarations.length >= 1) {
            var decl = variableDeclarationList.declarations[0];
            checkVariableDeclaration(decl);
        }
    }
    function checkRightHandSideOfForOf(statement) {
        var use = statement.awaitModifier ? 15 /* IterationUse.ForAwaitOf */ : 13 /* IterationUse.ForOf */;
        return checkIteratedTypeOrElementType(use, checkNonNullExpression(statement.expression), undefinedType, statement.expression);
    }
    function checkIteratedTypeOrElementType(use, inputType, sentType, errorNode) {
        if (isTypeAny(inputType)) {
            return inputType;
        }
        return getIteratedTypeOrElementType(use, inputType, sentType, errorNode, /*checkAssignability*/ true) || anyType;
    }
    /**
     * When consuming an iterable type in a for..of, spread, or iterator destructuring assignment
     * we want to get the iterated type of an iterable for ES2015 or later, or the iterated type
     * of a iterable (if defined globally) or element type of an array like for ES2015 or earlier.
     */
    function getIteratedTypeOrElementType(use, inputType, sentType, errorNode, checkAssignability) {
        var allowAsyncIterables = (use & 2 /* IterationUse.AllowsAsyncIterablesFlag */) !== 0;
        if (inputType === neverType) {
            reportTypeNotIterableError(errorNode, inputType, allowAsyncIterables); // TODO: GH#18217
            return undefined;
        }
        var uplevelIteration = languageVersion >= 2 /* ScriptTarget.ES2015 */;
        var downlevelIteration = !uplevelIteration && compilerOptions.downlevelIteration;
        var possibleOutOfBounds = compilerOptions.noUncheckedIndexedAccess && !!(use & 128 /* IterationUse.PossiblyOutOfBounds */);
        // Get the iterated type of an `Iterable<T>` or `IterableIterator<T>` only in ES2015
        // or higher, when inside of an async generator or for-await-if, or when
        // downlevelIteration is requested.
        if (uplevelIteration || downlevelIteration || allowAsyncIterables) {
            // We only report errors for an invalid iterable type in ES2015 or higher.
            var iterationTypes = getIterationTypesOfIterable(inputType, use, uplevelIteration ? errorNode : undefined);
            if (checkAssignability) {
                if (iterationTypes) {
                    var diagnostic = use & 8 /* IterationUse.ForOfFlag */ ? ts_1.Diagnostics.Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_for_of_will_always_send_0 :
                        use & 32 /* IterationUse.SpreadFlag */ ? ts_1.Diagnostics.Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_array_spread_will_always_send_0 :
                            use & 64 /* IterationUse.DestructuringFlag */ ? ts_1.Diagnostics.Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_array_destructuring_will_always_send_0 :
                                use & 16 /* IterationUse.YieldStarFlag */ ? ts_1.Diagnostics.Cannot_delegate_iteration_to_value_because_the_next_method_of_its_iterator_expects_type_1_but_the_containing_generator_will_always_send_0 :
                                    undefined;
                    if (diagnostic) {
                        checkTypeAssignableTo(sentType, iterationTypes.nextType, errorNode, diagnostic);
                    }
                }
            }
            if (iterationTypes || uplevelIteration) {
                return possibleOutOfBounds ? includeUndefinedInIndexSignature(iterationTypes && iterationTypes.yieldType) : (iterationTypes && iterationTypes.yieldType);
            }
        }
        var arrayType = inputType;
        var reportedError = false;
        var hasStringConstituent = false;
        // If strings are permitted, remove any string-like constituents from the array type.
        // This allows us to find other non-string element types from an array unioned with
        // a string.
        if (use & 4 /* IterationUse.AllowsStringInputFlag */) {
            if (arrayType.flags & 1048576 /* TypeFlags.Union */) {
                // After we remove all types that are StringLike, we will know if there was a string constituent
                // based on whether the result of filter is a new array.
                var arrayTypes = inputType.types;
                var filteredTypes = (0, ts_1.filter)(arrayTypes, function (t) { return !(t.flags & 402653316 /* TypeFlags.StringLike */); });
                if (filteredTypes !== arrayTypes) {
                    arrayType = getUnionType(filteredTypes, 2 /* UnionReduction.Subtype */);
                }
            }
            else if (arrayType.flags & 402653316 /* TypeFlags.StringLike */) {
                arrayType = neverType;
            }
            hasStringConstituent = arrayType !== inputType;
            if (hasStringConstituent) {
                if (languageVersion < 1 /* ScriptTarget.ES5 */) {
                    if (errorNode) {
                        error(errorNode, ts_1.Diagnostics.Using_a_string_in_a_for_of_statement_is_only_supported_in_ECMAScript_5_and_higher);
                        reportedError = true;
                    }
                }
                // Now that we've removed all the StringLike types, if no constituents remain, then the entire
                // arrayOrStringType was a string.
                if (arrayType.flags & 131072 /* TypeFlags.Never */) {
                    return possibleOutOfBounds ? includeUndefinedInIndexSignature(stringType) : stringType;
                }
            }
        }
        if (!isArrayLikeType(arrayType)) {
            if (errorNode && !reportedError) {
                // Which error we report depends on whether we allow strings or if there was a
                // string constituent. For example, if the input type is number | string, we
                // want to say that number is not an array type. But if the input was just
                // number and string input is allowed, we want to say that number is not an
                // array type or a string type.
                var allowsStrings = !!(use & 4 /* IterationUse.AllowsStringInputFlag */) && !hasStringConstituent;
                var _a = getIterationDiagnosticDetails(allowsStrings, downlevelIteration), defaultDiagnostic = _a[0], maybeMissingAwait = _a[1];
                errorAndMaybeSuggestAwait(errorNode, maybeMissingAwait && !!getAwaitedTypeOfPromise(arrayType), defaultDiagnostic, typeToString(arrayType));
            }
            return hasStringConstituent ? possibleOutOfBounds ? includeUndefinedInIndexSignature(stringType) : stringType : undefined;
        }
        var arrayElementType = getIndexTypeOfType(arrayType, numberType);
        if (hasStringConstituent && arrayElementType) {
            // This is just an optimization for the case where arrayOrStringType is string | string[]
            if (arrayElementType.flags & 402653316 /* TypeFlags.StringLike */ && !compilerOptions.noUncheckedIndexedAccess) {
                return stringType;
            }
            return getUnionType(possibleOutOfBounds ? [arrayElementType, stringType, undefinedType] : [arrayElementType, stringType], 2 /* UnionReduction.Subtype */);
        }
        return (use & 128 /* IterationUse.PossiblyOutOfBounds */) ? includeUndefinedInIndexSignature(arrayElementType) : arrayElementType;
        function getIterationDiagnosticDetails(allowsStrings, downlevelIteration) {
            var _a;
            if (downlevelIteration) {
                return allowsStrings
                    ? [ts_1.Diagnostics.Type_0_is_not_an_array_type_or_a_string_type_or_does_not_have_a_Symbol_iterator_method_that_returns_an_iterator, true]
                    : [ts_1.Diagnostics.Type_0_is_not_an_array_type_or_does_not_have_a_Symbol_iterator_method_that_returns_an_iterator, true];
            }
            var yieldType = getIterationTypeOfIterable(use, 0 /* IterationTypeKind.Yield */, inputType, /*errorNode*/ undefined);
            if (yieldType) {
                return [ts_1.Diagnostics.Type_0_can_only_be_iterated_through_when_using_the_downlevelIteration_flag_or_with_a_target_of_es2015_or_higher, false];
            }
            if (isES2015OrLaterIterable((_a = inputType.symbol) === null || _a === void 0 ? void 0 : _a.escapedName)) {
                return [ts_1.Diagnostics.Type_0_can_only_be_iterated_through_when_using_the_downlevelIteration_flag_or_with_a_target_of_es2015_or_higher, true];
            }
            return allowsStrings
                ? [ts_1.Diagnostics.Type_0_is_not_an_array_type_or_a_string_type, true]
                : [ts_1.Diagnostics.Type_0_is_not_an_array_type, true];
        }
    }
    function isES2015OrLaterIterable(n) {
        switch (n) {
            case "Float32Array":
            case "Float64Array":
            case "Int16Array":
            case "Int32Array":
            case "Int8Array":
            case "NodeList":
            case "Uint16Array":
            case "Uint32Array":
            case "Uint8Array":
            case "Uint8ClampedArray":
                return true;
        }
        return false;
    }
    /**
     * Gets the requested "iteration type" from an `Iterable`-like or `AsyncIterable`-like type.
     */
    function getIterationTypeOfIterable(use, typeKind, inputType, errorNode) {
        if (isTypeAny(inputType)) {
            return undefined;
        }
        var iterationTypes = getIterationTypesOfIterable(inputType, use, errorNode);
        return iterationTypes && iterationTypes[getIterationTypesKeyFromIterationTypeKind(typeKind)];
    }
    function createIterationTypes(yieldType, returnType, nextType) {
        // `yieldType` and `returnType` are defaulted to `neverType` they each will be combined
        // via `getUnionType` when merging iteration types. `nextType` is defined as `unknownType`
        // as it is combined via `getIntersectionType` when merging iteration types.
        if (yieldType === void 0) { yieldType = neverType; }
        if (returnType === void 0) { returnType = neverType; }
        if (nextType === void 0) { nextType = unknownType; }
        // Use the cache only for intrinsic types to keep it small as they are likely to be
        // more frequently created (i.e. `Iterator<number, void, unknown>`). Iteration types
        // are also cached on the type they are requested for, so we shouldn't need to maintain
        // the cache for less-frequently used types.
        if (yieldType.flags & 67359327 /* TypeFlags.Intrinsic */ &&
            returnType.flags & (1 /* TypeFlags.Any */ | 131072 /* TypeFlags.Never */ | 2 /* TypeFlags.Unknown */ | 16384 /* TypeFlags.Void */ | 32768 /* TypeFlags.Undefined */) &&
            nextType.flags & (1 /* TypeFlags.Any */ | 131072 /* TypeFlags.Never */ | 2 /* TypeFlags.Unknown */ | 16384 /* TypeFlags.Void */ | 32768 /* TypeFlags.Undefined */)) {
            var id = getTypeListId([yieldType, returnType, nextType]);
            var iterationTypes = iterationTypesCache.get(id);
            if (!iterationTypes) {
                iterationTypes = { yieldType: yieldType, returnType: returnType, nextType: nextType };
                iterationTypesCache.set(id, iterationTypes);
            }
            return iterationTypes;
        }
        return { yieldType: yieldType, returnType: returnType, nextType: nextType };
    }
    /**
     * Combines multiple `IterationTypes` records.
     *
     * If `array` is empty or all elements are missing or are references to `noIterationTypes`,
     * then `noIterationTypes` is returned. Otherwise, an `IterationTypes` record is returned
     * for the combined iteration types.
     */
    function combineIterationTypes(array) {
        var yieldTypes;
        var returnTypes;
        var nextTypes;
        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
            var iterationTypes = array_1[_i];
            if (iterationTypes === undefined || iterationTypes === noIterationTypes) {
                continue;
            }
            if (iterationTypes === anyIterationTypes) {
                return anyIterationTypes;
            }
            yieldTypes = (0, ts_1.append)(yieldTypes, iterationTypes.yieldType);
            returnTypes = (0, ts_1.append)(returnTypes, iterationTypes.returnType);
            nextTypes = (0, ts_1.append)(nextTypes, iterationTypes.nextType);
        }
        if (yieldTypes || returnTypes || nextTypes) {
            return createIterationTypes(yieldTypes && getUnionType(yieldTypes), returnTypes && getUnionType(returnTypes), nextTypes && getIntersectionType(nextTypes));
        }
        return noIterationTypes;
    }
    function getCachedIterationTypes(type, cacheKey) {
        return type[cacheKey];
    }
    function setCachedIterationTypes(type, cacheKey, cachedTypes) {
        return type[cacheKey] = cachedTypes;
    }
    /**
     * Gets the *yield*, *return*, and *next* types from an `Iterable`-like or `AsyncIterable`-like type.
     *
     * At every level that involves analyzing return types of signatures, we union the return types of all the signatures.
     *
     * Another thing to note is that at any step of this process, we could run into a dead end,
     * meaning either the property is missing, or we run into the anyType. If either of these things
     * happens, we return `undefined` to signal that we could not find the iteration type. If a property
     * is missing, and the previous step did not result in `any`, then we also give an error if the
     * caller requested it. Then the caller can decide what to do in the case where there is no iterated
     * type.
     *
     * For a **for-of** statement, `yield*` (in a normal generator), spread, array
     * destructuring, or normal generator we will only ever look for a `[Symbol.iterator]()`
     * method.
     *
     * For an async generator we will only ever look at the `[Symbol.asyncIterator]()` method.
     *
     * For a **for-await-of** statement or a `yield*` in an async generator we will look for
     * the `[Symbol.asyncIterator]()` method first, and then the `[Symbol.iterator]()` method.
     */
    function getIterationTypesOfIterable(type, use, errorNode) {
        var _a, _b;
        if (isTypeAny(type)) {
            return anyIterationTypes;
        }
        if (!(type.flags & 1048576 /* TypeFlags.Union */)) {
            var errorOutputContainer = errorNode ? { errors: undefined } : undefined;
            var iterationTypes_1 = getIterationTypesOfIterableWorker(type, use, errorNode, errorOutputContainer);
            if (iterationTypes_1 === noIterationTypes) {
                if (errorNode) {
                    var rootDiag = reportTypeNotIterableError(errorNode, type, !!(use & 2 /* IterationUse.AllowsAsyncIterablesFlag */));
                    if (errorOutputContainer === null || errorOutputContainer === void 0 ? void 0 : errorOutputContainer.errors) {
                        ts_1.addRelatedInfo.apply(void 0, __spreadArray([rootDiag], errorOutputContainer.errors, false));
                    }
                }
                return undefined;
            }
            else if ((_a = errorOutputContainer === null || errorOutputContainer === void 0 ? void 0 : errorOutputContainer.errors) === null || _a === void 0 ? void 0 : _a.length) {
                for (var _i = 0, _c = errorOutputContainer.errors; _i < _c.length; _i++) {
                    var diag = _c[_i];
                    diagnostics.add(diag);
                }
            }
            return iterationTypes_1;
        }
        var cacheKey = use & 2 /* IterationUse.AllowsAsyncIterablesFlag */ ? "iterationTypesOfAsyncIterable" : "iterationTypesOfIterable";
        var cachedTypes = getCachedIterationTypes(type, cacheKey);
        if (cachedTypes)
            return cachedTypes === noIterationTypes ? undefined : cachedTypes;
        var allIterationTypes;
        for (var _d = 0, _e = type.types; _d < _e.length; _d++) {
            var constituent = _e[_d];
            var errorOutputContainer = errorNode ? { errors: undefined } : undefined;
            var iterationTypes_2 = getIterationTypesOfIterableWorker(constituent, use, errorNode, errorOutputContainer);
            if (iterationTypes_2 === noIterationTypes) {
                if (errorNode) {
                    var rootDiag = reportTypeNotIterableError(errorNode, type, !!(use & 2 /* IterationUse.AllowsAsyncIterablesFlag */));
                    if (errorOutputContainer === null || errorOutputContainer === void 0 ? void 0 : errorOutputContainer.errors) {
                        ts_1.addRelatedInfo.apply(void 0, __spreadArray([rootDiag], errorOutputContainer.errors, false));
                    }
                }
                setCachedIterationTypes(type, cacheKey, noIterationTypes);
                return undefined;
            }
            else if ((_b = errorOutputContainer === null || errorOutputContainer === void 0 ? void 0 : errorOutputContainer.errors) === null || _b === void 0 ? void 0 : _b.length) {
                for (var _f = 0, _g = errorOutputContainer.errors; _f < _g.length; _f++) {
                    var diag = _g[_f];
                    diagnostics.add(diag);
                }
            }
            allIterationTypes = (0, ts_1.append)(allIterationTypes, iterationTypes_2);
        }
        var iterationTypes = allIterationTypes ? combineIterationTypes(allIterationTypes) : noIterationTypes;
        setCachedIterationTypes(type, cacheKey, iterationTypes);
        return iterationTypes === noIterationTypes ? undefined : iterationTypes;
    }
    function getAsyncFromSyncIterationTypes(iterationTypes, errorNode) {
        if (iterationTypes === noIterationTypes)
            return noIterationTypes;
        if (iterationTypes === anyIterationTypes)
            return anyIterationTypes;
        var yieldType = iterationTypes.yieldType, returnType = iterationTypes.returnType, nextType = iterationTypes.nextType;
        // if we're requesting diagnostics, report errors for a missing `Awaited<T>`.
        if (errorNode) {
            getGlobalAwaitedSymbol(/*reportErrors*/ true);
        }
        return createIterationTypes(getAwaitedType(yieldType, errorNode) || anyType, getAwaitedType(returnType, errorNode) || anyType, nextType);
    }
    /**
     * Gets the *yield*, *return*, and *next* types from a non-union type.
     *
     * If we are unable to find the *yield*, *return*, and *next* types, `noIterationTypes` is
     * returned to indicate to the caller that it should report an error. Otherwise, an
     * `IterationTypes` record is returned.
     *
     * NOTE: You probably don't want to call this directly and should be calling
     * `getIterationTypesOfIterable` instead.
     */
    function getIterationTypesOfIterableWorker(type, use, errorNode, errorOutputContainer) {
        if (isTypeAny(type)) {
            return anyIterationTypes;
        }
        // If we are reporting errors and encounter a cached `noIterationTypes`, we should ignore the cached value and continue as if nothing was cached.
        // In addition, we should not cache any new results for this call.
        var noCache = false;
        if (use & 2 /* IterationUse.AllowsAsyncIterablesFlag */) {
            var iterationTypes = getIterationTypesOfIterableCached(type, asyncIterationTypesResolver) ||
                getIterationTypesOfIterableFast(type, asyncIterationTypesResolver);
            if (iterationTypes) {
                if (iterationTypes === noIterationTypes && errorNode) {
                    // ignore the cached value
                    noCache = true;
                }
                else {
                    return use & 8 /* IterationUse.ForOfFlag */ ?
                        getAsyncFromSyncIterationTypes(iterationTypes, errorNode) :
                        iterationTypes;
                }
            }
        }
        if (use & 1 /* IterationUse.AllowsSyncIterablesFlag */) {
            var iterationTypes = getIterationTypesOfIterableCached(type, syncIterationTypesResolver) ||
                getIterationTypesOfIterableFast(type, syncIterationTypesResolver);
            if (iterationTypes) {
                if (iterationTypes === noIterationTypes && errorNode) {
                    // ignore the cached value
                    noCache = true;
                }
                else {
                    if (use & 2 /* IterationUse.AllowsAsyncIterablesFlag */) {
                        // for a sync iterable in an async context, only use the cached types if they are valid.
                        if (iterationTypes !== noIterationTypes) {
                            iterationTypes = getAsyncFromSyncIterationTypes(iterationTypes, errorNode);
                            return noCache ? iterationTypes : setCachedIterationTypes(type, "iterationTypesOfAsyncIterable", iterationTypes);
                        }
                    }
                    else {
                        return iterationTypes;
                    }
                }
            }
        }
        if (use & 2 /* IterationUse.AllowsAsyncIterablesFlag */) {
            var iterationTypes = getIterationTypesOfIterableSlow(type, asyncIterationTypesResolver, errorNode, errorOutputContainer, noCache);
            if (iterationTypes !== noIterationTypes) {
                return iterationTypes;
            }
        }
        if (use & 1 /* IterationUse.AllowsSyncIterablesFlag */) {
            var iterationTypes = getIterationTypesOfIterableSlow(type, syncIterationTypesResolver, errorNode, errorOutputContainer, noCache);
            if (iterationTypes !== noIterationTypes) {
                if (use & 2 /* IterationUse.AllowsAsyncIterablesFlag */) {
                    iterationTypes = getAsyncFromSyncIterationTypes(iterationTypes, errorNode);
                    return noCache ? iterationTypes : setCachedIterationTypes(type, "iterationTypesOfAsyncIterable", iterationTypes);
                }
                else {
                    return iterationTypes;
                }
            }
        }
        return noIterationTypes;
    }
    /**
     * Gets the *yield*, *return*, and *next* types of an `Iterable`-like or
     * `AsyncIterable`-like type from the cache.
     *
     * NOTE: You probably don't want to call this directly and should be calling
     * `getIterationTypesOfIterable` instead.
     */
    function getIterationTypesOfIterableCached(type, resolver) {
        return getCachedIterationTypes(type, resolver.iterableCacheKey);
    }
    function getIterationTypesOfGlobalIterableType(globalType, resolver) {
        var globalIterationTypes = getIterationTypesOfIterableCached(globalType, resolver) ||
            getIterationTypesOfIterableSlow(globalType, resolver, /*errorNode*/ undefined, /*errorOutputContainer*/ undefined, /*noCache*/ false);
        return globalIterationTypes === noIterationTypes ? defaultIterationTypes : globalIterationTypes;
    }
    /**
     * Gets the *yield*, *return*, and *next* types of an `Iterable`-like or `AsyncIterable`-like
     * type from from common heuristics.
     *
     * If we previously analyzed this type and found no iteration types, `noIterationTypes` is
     * returned. If we found iteration types, an `IterationTypes` record is returned.
     * Otherwise, we return `undefined` to indicate to the caller it should perform a more
     * exhaustive analysis.
     *
     * NOTE: You probably don't want to call this directly and should be calling
     * `getIterationTypesOfIterable` instead.
     */
    function getIterationTypesOfIterableFast(type, resolver) {
        // As an optimization, if the type is an instantiation of one of the following global types, then
        // just grab its related type argument:
        // - `Iterable<T>` or `AsyncIterable<T>`
        // - `IterableIterator<T>` or `AsyncIterableIterator<T>`
        var globalType;
        if (isReferenceToType(type, globalType = resolver.getGlobalIterableType(/*reportErrors*/ false)) ||
            isReferenceToType(type, globalType = resolver.getGlobalIterableIteratorType(/*reportErrors*/ false))) {
            var yieldType = getTypeArguments(type)[0];
            // The "return" and "next" types of `Iterable` and `IterableIterator` are defined by the
            // iteration types of their `[Symbol.iterator]()` method. The same is true for their async cousins.
            // While we define these as `any` and `undefined` in our libs by default, a custom lib *could* use
            // different definitions.
            var _a = getIterationTypesOfGlobalIterableType(globalType, resolver), returnType = _a.returnType, nextType = _a.nextType;
            return setCachedIterationTypes(type, resolver.iterableCacheKey, createIterationTypes(resolver.resolveIterationType(yieldType, /*errorNode*/ undefined) || yieldType, resolver.resolveIterationType(returnType, /*errorNode*/ undefined) || returnType, nextType));
        }
        // As an optimization, if the type is an instantiation of the following global type, then
        // just grab its related type arguments:
        // - `Generator<T, TReturn, TNext>` or `AsyncGenerator<T, TReturn, TNext>`
        if (isReferenceToType(type, resolver.getGlobalGeneratorType(/*reportErrors*/ false))) {
            var _b = getTypeArguments(type), yieldType = _b[0], returnType = _b[1], nextType = _b[2];
            return setCachedIterationTypes(type, resolver.iterableCacheKey, createIterationTypes(resolver.resolveIterationType(yieldType, /*errorNode*/ undefined) || yieldType, resolver.resolveIterationType(returnType, /*errorNode*/ undefined) || returnType, nextType));
        }
    }
    function getPropertyNameForKnownSymbolName(symbolName) {
        var ctorType = getGlobalESSymbolConstructorSymbol(/*reportErrors*/ false);
        var uniqueType = ctorType && getTypeOfPropertyOfType(getTypeOfSymbol(ctorType), (0, ts_1.escapeLeadingUnderscores)(symbolName));
        return uniqueType && isTypeUsableAsPropertyName(uniqueType) ? getPropertyNameFromType(uniqueType) : "__@".concat(symbolName);
    }
    /**
     * Gets the *yield*, *return*, and *next* types of an `Iterable`-like or `AsyncIterable`-like
     * type from its members.
     *
     * If we successfully found the *yield*, *return*, and *next* types, an `IterationTypes`
     * record is returned. Otherwise, `noIterationTypes` is returned.
     *
     * NOTE: You probably don't want to call this directly and should be calling
     * `getIterationTypesOfIterable` instead.
     */
    function getIterationTypesOfIterableSlow(type, resolver, errorNode, errorOutputContainer, noCache) {
        var _a;
        var method = getPropertyOfType(type, getPropertyNameForKnownSymbolName(resolver.iteratorSymbolName));
        var methodType = method && !(method.flags & 16777216 /* SymbolFlags.Optional */) ? getTypeOfSymbol(method) : undefined;
        if (isTypeAny(methodType)) {
            return noCache ? anyIterationTypes : setCachedIterationTypes(type, resolver.iterableCacheKey, anyIterationTypes);
        }
        var signatures = methodType ? getSignaturesOfType(methodType, 0 /* SignatureKind.Call */) : undefined;
        if (!(0, ts_1.some)(signatures)) {
            return noCache ? noIterationTypes : setCachedIterationTypes(type, resolver.iterableCacheKey, noIterationTypes);
        }
        var iteratorType = getIntersectionType((0, ts_1.map)(signatures, getReturnTypeOfSignature));
        var iterationTypes = (_a = getIterationTypesOfIteratorWorker(iteratorType, resolver, errorNode, errorOutputContainer, noCache)) !== null && _a !== void 0 ? _a : noIterationTypes;
        return noCache ? iterationTypes : setCachedIterationTypes(type, resolver.iterableCacheKey, iterationTypes);
    }
    function reportTypeNotIterableError(errorNode, type, allowAsyncIterables) {
        var message = allowAsyncIterables
            ? ts_1.Diagnostics.Type_0_must_have_a_Symbol_asyncIterator_method_that_returns_an_async_iterator
            : ts_1.Diagnostics.Type_0_must_have_a_Symbol_iterator_method_that_returns_an_iterator;
        var suggestAwait = 
        // for (const x of Promise<...>) or [...Promise<...>]
        !!getAwaitedTypeOfPromise(type)
            // for (const x of AsyncIterable<...>)
            || (!allowAsyncIterables &&
                (0, ts_1.isForOfStatement)(errorNode.parent) &&
                errorNode.parent.expression === errorNode &&
                getGlobalAsyncIterableType(/*reportErrors*/ false) !== emptyGenericType &&
                isTypeAssignableTo(type, getGlobalAsyncIterableType(/*reportErrors*/ false)));
        return errorAndMaybeSuggestAwait(errorNode, suggestAwait, message, typeToString(type));
    }
    /**
     * Gets the *yield*, *return*, and *next* types from an `Iterator`-like or `AsyncIterator`-like type.
     *
     * If we successfully found the *yield*, *return*, and *next* types, an `IterationTypes`
     * record is returned. Otherwise, `undefined` is returned.
     */
    function getIterationTypesOfIterator(type, resolver, errorNode, errorOutputContainer) {
        return getIterationTypesOfIteratorWorker(type, resolver, errorNode, errorOutputContainer, /*noCache*/ false);
    }
    /**
     * Gets the *yield*, *return*, and *next* types from an `Iterator`-like or `AsyncIterator`-like type.
     *
     * If we successfully found the *yield*, *return*, and *next* types, an `IterationTypes`
     * record is returned. Otherwise, `undefined` is returned.
     *
     * NOTE: You probably don't want to call this directly and should be calling
     * `getIterationTypesOfIterator` instead.
     */
    function getIterationTypesOfIteratorWorker(type, resolver, errorNode, errorOutputContainer, noCache) {
        if (isTypeAny(type)) {
            return anyIterationTypes;
        }
        var iterationTypes = getIterationTypesOfIteratorCached(type, resolver) ||
            getIterationTypesOfIteratorFast(type, resolver);
        if (iterationTypes === noIterationTypes && errorNode) {
            iterationTypes = undefined;
            noCache = true;
        }
        iterationTypes !== null && iterationTypes !== void 0 ? iterationTypes : (iterationTypes = getIterationTypesOfIteratorSlow(type, resolver, errorNode, errorOutputContainer, noCache));
        return iterationTypes === noIterationTypes ? undefined : iterationTypes;
    }
    /**
     * Gets the iteration types of an `Iterator`-like or `AsyncIterator`-like type from the
     * cache.
     *
     * NOTE: You probably don't want to call this directly and should be calling
     * `getIterationTypesOfIterator` instead.
     */
    function getIterationTypesOfIteratorCached(type, resolver) {
        return getCachedIterationTypes(type, resolver.iteratorCacheKey);
    }
    /**
     * Gets the iteration types of an `Iterator`-like or `AsyncIterator`-like type from the
     * cache or from common heuristics.
     *
     * If we previously analyzed this type and found no iteration types, `noIterationTypes` is
     * returned. If we found iteration types, an `IterationTypes` record is returned.
     * Otherwise, we return `undefined` to indicate to the caller it should perform a more
     * exhaustive analysis.
     *
     * NOTE: You probably don't want to call this directly and should be calling
     * `getIterationTypesOfIterator` instead.
     */
    function getIterationTypesOfIteratorFast(type, resolver) {
        // As an optimization, if the type is an instantiation of one of the following global types,
        // then just grab its related type argument:
        // - `IterableIterator<T>` or `AsyncIterableIterator<T>`
        // - `Iterator<T, TReturn, TNext>` or `AsyncIterator<T, TReturn, TNext>`
        // - `Generator<T, TReturn, TNext>` or `AsyncGenerator<T, TReturn, TNext>`
        var globalType = resolver.getGlobalIterableIteratorType(/*reportErrors*/ false);
        if (isReferenceToType(type, globalType)) {
            var yieldType = getTypeArguments(type)[0];
            // The "return" and "next" types of `IterableIterator` and `AsyncIterableIterator` are defined by the
            // iteration types of their `next`, `return`, and `throw` methods. While we define these as `any`
            // and `undefined` in our libs by default, a custom lib *could* use different definitions.
            var globalIterationTypes = getIterationTypesOfIteratorCached(globalType, resolver) ||
                getIterationTypesOfIteratorSlow(globalType, resolver, /*errorNode*/ undefined, /*errorOutputContainer*/ undefined, /*noCache*/ false);
            var _a = globalIterationTypes === noIterationTypes ? defaultIterationTypes : globalIterationTypes, returnType = _a.returnType, nextType = _a.nextType;
            return setCachedIterationTypes(type, resolver.iteratorCacheKey, createIterationTypes(yieldType, returnType, nextType));
        }
        if (isReferenceToType(type, resolver.getGlobalIteratorType(/*reportErrors*/ false)) ||
            isReferenceToType(type, resolver.getGlobalGeneratorType(/*reportErrors*/ false))) {
            var _b = getTypeArguments(type), yieldType = _b[0], returnType = _b[1], nextType = _b[2];
            return setCachedIterationTypes(type, resolver.iteratorCacheKey, createIterationTypes(yieldType, returnType, nextType));
        }
    }
    function isIteratorResult(type, kind) {
        // From https://tc39.github.io/ecma262/#sec-iteratorresult-interface:
        // > [done] is the result status of an iterator `next` method call. If the end of the iterator was reached `done` is `true`.
        // > If the end was not reached `done` is `false` and a value is available.
        // > If a `done` property (either own or inherited) does not exist, it is consider to have the value `false`.
        var doneType = getTypeOfPropertyOfType(type, "done") || falseType;
        return isTypeAssignableTo(kind === 0 /* IterationTypeKind.Yield */ ? falseType : trueType, doneType);
    }
    function isYieldIteratorResult(type) {
        return isIteratorResult(type, 0 /* IterationTypeKind.Yield */);
    }
    function isReturnIteratorResult(type) {
        return isIteratorResult(type, 1 /* IterationTypeKind.Return */);
    }
    /**
     * Gets the *yield* and *return* types of an `IteratorResult`-like type.
     *
     * If we are unable to determine a *yield* or a *return* type, `noIterationTypes` is
     * returned to indicate to the caller that it should handle the error. Otherwise, an
     * `IterationTypes` record is returned.
     */
    function getIterationTypesOfIteratorResult(type) {
        if (isTypeAny(type)) {
            return anyIterationTypes;
        }
        var cachedTypes = getCachedIterationTypes(type, "iterationTypesOfIteratorResult");
        if (cachedTypes) {
            return cachedTypes;
        }
        // As an optimization, if the type is an instantiation of one of the global `IteratorYieldResult<T>`
        // or `IteratorReturnResult<TReturn>` types, then just grab its type argument.
        if (isReferenceToType(type, getGlobalIteratorYieldResultType(/*reportErrors*/ false))) {
            var yieldType_1 = getTypeArguments(type)[0];
            return setCachedIterationTypes(type, "iterationTypesOfIteratorResult", createIterationTypes(yieldType_1, /*returnType*/ undefined, /*nextType*/ undefined));
        }
        if (isReferenceToType(type, getGlobalIteratorReturnResultType(/*reportErrors*/ false))) {
            var returnType_2 = getTypeArguments(type)[0];
            return setCachedIterationTypes(type, "iterationTypesOfIteratorResult", createIterationTypes(/*yieldType*/ undefined, returnType_2, /*nextType*/ undefined));
        }
        // Choose any constituents that can produce the requested iteration type.
        var yieldIteratorResult = filterType(type, isYieldIteratorResult);
        var yieldType = yieldIteratorResult !== neverType ? getTypeOfPropertyOfType(yieldIteratorResult, "value") : undefined;
        var returnIteratorResult = filterType(type, isReturnIteratorResult);
        var returnType = returnIteratorResult !== neverType ? getTypeOfPropertyOfType(returnIteratorResult, "value") : undefined;
        if (!yieldType && !returnType) {
            return setCachedIterationTypes(type, "iterationTypesOfIteratorResult", noIterationTypes);
        }
        // From https://tc39.github.io/ecma262/#sec-iteratorresult-interface
        // > ... If the iterator does not have a return value, `value` is `undefined`. In that case, the
        // > `value` property may be absent from the conforming object if it does not inherit an explicit
        // > `value` property.
        return setCachedIterationTypes(type, "iterationTypesOfIteratorResult", createIterationTypes(yieldType, returnType || voidType, /*nextType*/ undefined));
    }
    /**
     * Gets the *yield*, *return*, and *next* types of a the `next()`, `return()`, or
     * `throw()` method of an `Iterator`-like or `AsyncIterator`-like type.
     *
     * If we successfully found the *yield*, *return*, and *next* types, an `IterationTypes`
     * record is returned. Otherwise, we return `undefined`.
     */
    function getIterationTypesOfMethod(type, resolver, methodName, errorNode, errorOutputContainer) {
        var _a, _b, _c, _d, _e, _f;
        var method = getPropertyOfType(type, methodName);
        // Ignore 'return' or 'throw' if they are missing.
        if (!method && methodName !== "next") {
            return undefined;
        }
        var methodType = method && !(methodName === "next" && (method.flags & 16777216 /* SymbolFlags.Optional */))
            ? methodName === "next" ? getTypeOfSymbol(method) : getTypeWithFacts(getTypeOfSymbol(method), 2097152 /* TypeFacts.NEUndefinedOrNull */)
            : undefined;
        if (isTypeAny(methodType)) {
            // `return()` and `throw()` don't provide a *next* type.
            return methodName === "next" ? anyIterationTypes : anyIterationTypesExceptNext;
        }
        // Both async and non-async iterators *must* have a `next` method.
        var methodSignatures = methodType ? getSignaturesOfType(methodType, 0 /* SignatureKind.Call */) : ts_1.emptyArray;
        if (methodSignatures.length === 0) {
            if (errorNode) {
                var diagnostic = methodName === "next"
                    ? resolver.mustHaveANextMethodDiagnostic
                    : resolver.mustBeAMethodDiagnostic;
                if (errorOutputContainer) {
                    (_a = errorOutputContainer.errors) !== null && _a !== void 0 ? _a : (errorOutputContainer.errors = []);
                    errorOutputContainer.errors.push((0, ts_1.createDiagnosticForNode)(errorNode, diagnostic, methodName));
                }
                else {
                    error(errorNode, diagnostic, methodName);
                }
            }
            return methodName === "next" ? noIterationTypes : undefined;
        }
        // If the method signature comes exclusively from the global iterator or generator type,
        // create iteration types from its type arguments like `getIterationTypesOfIteratorFast`
        // does (so as to remove `undefined` from the next and return types). We arrive here when
        // a contextual type for a generator was not a direct reference to one of those global types,
        // but looking up `methodType` referred to one of them (and nothing else). E.g., in
        // `interface SpecialIterator extends Iterator<number> {}`, `SpecialIterator` is not a
        // reference to `Iterator`, but its `next` member derives exclusively from `Iterator`.
        if ((methodType === null || methodType === void 0 ? void 0 : methodType.symbol) && methodSignatures.length === 1) {
            var globalGeneratorType = resolver.getGlobalGeneratorType(/*reportErrors*/ false);
            var globalIteratorType = resolver.getGlobalIteratorType(/*reportErrors*/ false);
            var isGeneratorMethod = ((_c = (_b = globalGeneratorType.symbol) === null || _b === void 0 ? void 0 : _b.members) === null || _c === void 0 ? void 0 : _c.get(methodName)) === methodType.symbol;
            var isIteratorMethod = !isGeneratorMethod && ((_e = (_d = globalIteratorType.symbol) === null || _d === void 0 ? void 0 : _d.members) === null || _e === void 0 ? void 0 : _e.get(methodName)) === methodType.symbol;
            if (isGeneratorMethod || isIteratorMethod) {
                var globalType = isGeneratorMethod ? globalGeneratorType : globalIteratorType;
                var mapper = methodType.mapper;
                return createIterationTypes(getMappedType(globalType.typeParameters[0], mapper), getMappedType(globalType.typeParameters[1], mapper), methodName === "next" ? getMappedType(globalType.typeParameters[2], mapper) : undefined);
            }
        }
        // Extract the first parameter and return type of each signature.
        var methodParameterTypes;
        var methodReturnTypes;
        for (var _i = 0, methodSignatures_1 = methodSignatures; _i < methodSignatures_1.length; _i++) {
            var signature = methodSignatures_1[_i];
            if (methodName !== "throw" && (0, ts_1.some)(signature.parameters)) {
                methodParameterTypes = (0, ts_1.append)(methodParameterTypes, getTypeAtPosition(signature, 0));
            }
            methodReturnTypes = (0, ts_1.append)(methodReturnTypes, getReturnTypeOfSignature(signature));
        }
        // Resolve the *next* or *return* type from the first parameter of a `next()` or
        // `return()` method, respectively.
        var returnTypes;
        var nextType;
        if (methodName !== "throw") {
            var methodParameterType = methodParameterTypes ? getUnionType(methodParameterTypes) : unknownType;
            if (methodName === "next") {
                // The value of `next(value)` is *not* awaited by async generators
                nextType = methodParameterType;
            }
            else if (methodName === "return") {
                // The value of `return(value)` *is* awaited by async generators
                var resolvedMethodParameterType = resolver.resolveIterationType(methodParameterType, errorNode) || anyType;
                returnTypes = (0, ts_1.append)(returnTypes, resolvedMethodParameterType);
            }
        }
        // Resolve the *yield* and *return* types from the return type of the method (i.e. `IteratorResult`)
        var yieldType;
        var methodReturnType = methodReturnTypes ? getIntersectionType(methodReturnTypes) : neverType;
        var resolvedMethodReturnType = resolver.resolveIterationType(methodReturnType, errorNode) || anyType;
        var iterationTypes = getIterationTypesOfIteratorResult(resolvedMethodReturnType);
        if (iterationTypes === noIterationTypes) {
            if (errorNode) {
                if (errorOutputContainer) {
                    (_f = errorOutputContainer.errors) !== null && _f !== void 0 ? _f : (errorOutputContainer.errors = []);
                    errorOutputContainer.errors.push((0, ts_1.createDiagnosticForNode)(errorNode, resolver.mustHaveAValueDiagnostic, methodName));
                }
                else {
                    error(errorNode, resolver.mustHaveAValueDiagnostic, methodName);
                }
            }
            yieldType = anyType;
            returnTypes = (0, ts_1.append)(returnTypes, anyType);
        }
        else {
            yieldType = iterationTypes.yieldType;
            returnTypes = (0, ts_1.append)(returnTypes, iterationTypes.returnType);
        }
        return createIterationTypes(yieldType, getUnionType(returnTypes), nextType);
    }
    /**
     * Gets the *yield*, *return*, and *next* types of an `Iterator`-like or `AsyncIterator`-like
     * type from its members.
     *
     * If we successfully found the *yield*, *return*, and *next* types, an `IterationTypes`
     * record is returned. Otherwise, `noIterationTypes` is returned.
     *
     * NOTE: You probably don't want to call this directly and should be calling
     * `getIterationTypesOfIterator` instead.
     */
    function getIterationTypesOfIteratorSlow(type, resolver, errorNode, errorOutputContainer, noCache) {
        var iterationTypes = combineIterationTypes([
            getIterationTypesOfMethod(type, resolver, "next", errorNode, errorOutputContainer),
            getIterationTypesOfMethod(type, resolver, "return", errorNode, errorOutputContainer),
            getIterationTypesOfMethod(type, resolver, "throw", errorNode, errorOutputContainer),
        ]);
        return noCache ? iterationTypes : setCachedIterationTypes(type, resolver.iteratorCacheKey, iterationTypes);
    }
    /**
     * Gets the requested "iteration type" from a type that is either `Iterable`-like, `Iterator`-like,
     * `IterableIterator`-like, or `Generator`-like (for a non-async generator); or `AsyncIterable`-like,
     * `AsyncIterator`-like, `AsyncIterableIterator`-like, or `AsyncGenerator`-like (for an async generator).
     */
    function getIterationTypeOfGeneratorFunctionReturnType(kind, returnType, isAsyncGenerator) {
        if (isTypeAny(returnType)) {
            return undefined;
        }
        var iterationTypes = getIterationTypesOfGeneratorFunctionReturnType(returnType, isAsyncGenerator);
        return iterationTypes && iterationTypes[getIterationTypesKeyFromIterationTypeKind(kind)];
    }
    function getIterationTypesOfGeneratorFunctionReturnType(type, isAsyncGenerator) {
        if (isTypeAny(type)) {
            return anyIterationTypes;
        }
        var use = isAsyncGenerator ? 2 /* IterationUse.AsyncGeneratorReturnType */ : 1 /* IterationUse.GeneratorReturnType */;
        var resolver = isAsyncGenerator ? asyncIterationTypesResolver : syncIterationTypesResolver;
        return getIterationTypesOfIterable(type, use, /*errorNode*/ undefined) ||
            getIterationTypesOfIterator(type, resolver, /*errorNode*/ undefined, /*errorOutputContainer*/ undefined);
    }
    function checkBreakOrContinueStatement(node) {
        // Grammar checking
        if (!checkGrammarStatementInAmbientContext(node))
            checkGrammarBreakOrContinueStatement(node);
        // TODO: Check that target label is valid
    }
    function unwrapReturnType(returnType, functionFlags) {
        var isGenerator = !!(functionFlags & 1 /* FunctionFlags.Generator */);
        var isAsync = !!(functionFlags & 2 /* FunctionFlags.Async */);
        if (isGenerator) {
            var returnIterationType = getIterationTypeOfGeneratorFunctionReturnType(1 /* IterationTypeKind.Return */, returnType, isAsync);
            if (!returnIterationType) {
                return errorType;
            }
            return isAsync ? getAwaitedTypeNoAlias(unwrapAwaitedType(returnIterationType)) : returnIterationType;
        }
        return isAsync ? getAwaitedTypeNoAlias(returnType) || errorType : returnType;
    }
    function isUnwrappedReturnTypeUndefinedVoidOrAny(func, returnType) {
        var type = unwrapReturnType(returnType, (0, ts_1.getFunctionFlags)(func));
        return !!(type && (maybeTypeOfKind(type, 16384 /* TypeFlags.Void */) || type.flags & (1 /* TypeFlags.Any */ | 32768 /* TypeFlags.Undefined */)));
    }
    function checkReturnStatement(node) {
        var _a;
        // Grammar checking
        if (checkGrammarStatementInAmbientContext(node)) {
            return;
        }
        var container = (0, ts_1.getContainingFunctionOrClassStaticBlock)(node);
        if (container && (0, ts_1.isClassStaticBlockDeclaration)(container)) {
            grammarErrorOnFirstToken(node, ts_1.Diagnostics.A_return_statement_cannot_be_used_inside_a_class_static_block);
            return;
        }
        if (!container) {
            grammarErrorOnFirstToken(node, ts_1.Diagnostics.A_return_statement_can_only_be_used_within_a_function_body);
            return;
        }
        var signature = getSignatureFromDeclaration(container);
        var returnType = getReturnTypeOfSignature(signature);
        var functionFlags = (0, ts_1.getFunctionFlags)(container);
        if (strictNullChecks || node.expression || returnType.flags & 131072 /* TypeFlags.Never */) {
            var exprType = node.expression ? checkExpressionCached(node.expression) : undefinedType;
            if (container.kind === 177 /* SyntaxKind.SetAccessor */) {
                if (node.expression) {
                    error(node, ts_1.Diagnostics.Setters_cannot_return_a_value);
                }
            }
            else if (container.kind === 175 /* SyntaxKind.Constructor */) {
                if (node.expression && !checkTypeAssignableToAndOptionallyElaborate(exprType, returnType, node, node.expression)) {
                    error(node, ts_1.Diagnostics.Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class);
                }
            }
            else if (getReturnTypeFromAnnotation(container)) {
                var unwrappedReturnType = (_a = unwrapReturnType(returnType, functionFlags)) !== null && _a !== void 0 ? _a : returnType;
                var unwrappedExprType = functionFlags & 2 /* FunctionFlags.Async */
                    ? checkAwaitedType(exprType, /*withAlias*/ false, node, ts_1.Diagnostics.The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member)
                    : exprType;
                if (unwrappedReturnType) {
                    // If the function has a return type, but promisedType is
                    // undefined, an error will be reported in checkAsyncFunctionReturnType
                    // so we don't need to report one here.
                    checkTypeAssignableToAndOptionallyElaborate(unwrappedExprType, unwrappedReturnType, node, node.expression);
                }
            }
        }
        else if (container.kind !== 175 /* SyntaxKind.Constructor */ && compilerOptions.noImplicitReturns && !isUnwrappedReturnTypeUndefinedVoidOrAny(container, returnType)) {
            // The function has a return type, but the return statement doesn't have an expression.
            error(node, ts_1.Diagnostics.Not_all_code_paths_return_a_value);
        }
    }
    function checkWithStatement(node) {
        // Grammar checking for withStatement
        if (!checkGrammarStatementInAmbientContext(node)) {
            if (node.flags & 32768 /* NodeFlags.AwaitContext */) {
                grammarErrorOnFirstToken(node, ts_1.Diagnostics.with_statements_are_not_allowed_in_an_async_function_block);
            }
        }
        checkExpression(node.expression);
        var sourceFile = (0, ts_1.getSourceFileOfNode)(node);
        if (!hasParseDiagnostics(sourceFile)) {
            var start = (0, ts_1.getSpanOfTokenAtPosition)(sourceFile, node.pos).start;
            var end = node.statement.pos;
            grammarErrorAtPos(sourceFile, start, end - start, ts_1.Diagnostics.The_with_statement_is_not_supported_All_symbols_in_a_with_block_will_have_type_any);
        }
    }
    function checkSwitchStatement(node) {
        // Grammar checking
        checkGrammarStatementInAmbientContext(node);
        var firstDefaultClause;
        var hasDuplicateDefaultClause = false;
        var expressionType = checkExpression(node.expression);
        (0, ts_1.forEach)(node.caseBlock.clauses, function (clause) {
            // Grammar check for duplicate default clauses, skip if we already report duplicate default clause
            if (clause.kind === 296 /* SyntaxKind.DefaultClause */ && !hasDuplicateDefaultClause) {
                if (firstDefaultClause === undefined) {
                    firstDefaultClause = clause;
                }
                else {
                    grammarErrorOnNode(clause, ts_1.Diagnostics.A_default_clause_cannot_appear_more_than_once_in_a_switch_statement);
                    hasDuplicateDefaultClause = true;
                }
            }
            if (clause.kind === 295 /* SyntaxKind.CaseClause */) {
                addLazyDiagnostic(createLazyCaseClauseDiagnostics(clause));
            }
            (0, ts_1.forEach)(clause.statements, checkSourceElement);
            if (compilerOptions.noFallthroughCasesInSwitch && clause.fallthroughFlowNode && isReachableFlowNode(clause.fallthroughFlowNode)) {
                error(clause, ts_1.Diagnostics.Fallthrough_case_in_switch);
            }
            function createLazyCaseClauseDiagnostics(clause) {
                return function () {
                    // TypeScript 1.0 spec (April 2014): 5.9
                    // In a 'switch' statement, each 'case' expression must be of a type that is comparable
                    // to or from the type of the 'switch' expression.
                    var caseType = checkExpression(clause.expression);
                    if (!isTypeEqualityComparableTo(expressionType, caseType)) {
                        // expressionType is not comparable to caseType, try the reversed check and report errors if it fails
                        checkTypeComparableTo(caseType, expressionType, clause.expression, /*headMessage*/ undefined);
                    }
                };
            }
        });
        if (node.caseBlock.locals) {
            registerForUnusedIdentifiersCheck(node.caseBlock);
        }
    }
    function checkLabeledStatement(node) {
        // Grammar checking
        if (!checkGrammarStatementInAmbientContext(node)) {
            (0, ts_1.findAncestor)(node.parent, function (current) {
                if ((0, ts_1.isFunctionLike)(current)) {
                    return "quit";
                }
                if (current.kind === 255 /* SyntaxKind.LabeledStatement */ && current.label.escapedText === node.label.escapedText) {
                    grammarErrorOnNode(node.label, ts_1.Diagnostics.Duplicate_label_0, (0, ts_1.getTextOfNode)(node.label));
                    return true;
                }
                return false;
            });
        }
        // ensure that label is unique
        checkSourceElement(node.statement);
    }
    function checkThrowStatement(node) {
        // Grammar checking
        if (!checkGrammarStatementInAmbientContext(node)) {
            if ((0, ts_1.isIdentifier)(node.expression) && !node.expression.escapedText) {
                grammarErrorAfterFirstToken(node, ts_1.Diagnostics.Line_break_not_permitted_here);
            }
        }
        if (node.expression) {
            checkExpression(node.expression);
        }
    }
    function checkTryStatement(node) {
        // Grammar checking
        checkGrammarStatementInAmbientContext(node);
        checkBlock(node.tryBlock);
        var catchClause = node.catchClause;
        if (catchClause) {
            // Grammar checking
            if (catchClause.variableDeclaration) {
                var declaration = catchClause.variableDeclaration;
                checkVariableLikeDeclaration(declaration);
                var typeNode = (0, ts_1.getEffectiveTypeAnnotationNode)(declaration);
                if (typeNode) {
                    var type = getTypeFromTypeNode(typeNode);
                    if (type && !(type.flags & 3 /* TypeFlags.AnyOrUnknown */)) {
                        grammarErrorOnFirstToken(typeNode, ts_1.Diagnostics.Catch_clause_variable_type_annotation_must_be_any_or_unknown_if_specified);
                    }
                }
                else if (declaration.initializer) {
                    grammarErrorOnFirstToken(declaration.initializer, ts_1.Diagnostics.Catch_clause_variable_cannot_have_an_initializer);
                }
                else {
                    var blockLocals_1 = catchClause.block.locals;
                    if (blockLocals_1) {
                        (0, ts_1.forEachKey)(catchClause.locals, function (caughtName) {
                            var blockLocal = blockLocals_1.get(caughtName);
                            if ((blockLocal === null || blockLocal === void 0 ? void 0 : blockLocal.valueDeclaration) && (blockLocal.flags & 2 /* SymbolFlags.BlockScopedVariable */) !== 0) {
                                grammarErrorOnNode(blockLocal.valueDeclaration, ts_1.Diagnostics.Cannot_redeclare_identifier_0_in_catch_clause, (0, ts_1.unescapeLeadingUnderscores)(caughtName));
                            }
                        });
                    }
                }
            }
            checkBlock(catchClause.block);
        }
        if (node.finallyBlock) {
            checkBlock(node.finallyBlock);
        }
    }
    function checkIndexConstraints(type, symbol, isStaticIndex) {
        var indexInfos = getIndexInfosOfType(type);
        if (indexInfos.length === 0) {
            return;
        }
        for (var _i = 0, _a = getPropertiesOfObjectType(type); _i < _a.length; _i++) {
            var prop = _a[_i];
            if (!(isStaticIndex && prop.flags & 4194304 /* SymbolFlags.Prototype */)) {
                checkIndexConstraintForProperty(type, prop, getLiteralTypeFromProperty(prop, 8576 /* TypeFlags.StringOrNumberLiteralOrUnique */, /*includeNonPublic*/ true), getNonMissingTypeOfSymbol(prop));
            }
        }
        var typeDeclaration = symbol.valueDeclaration;
        if (typeDeclaration && (0, ts_1.isClassLike)(typeDeclaration)) {
            for (var _b = 0, _c = typeDeclaration.members; _b < _c.length; _b++) {
                var member = _c[_b];
                // Only process instance properties with computed names here. Static properties cannot be in conflict with indexers,
                // and properties with literal names were already checked.
                if (!(0, ts_1.isStatic)(member) && !hasBindableName(member)) {
                    var symbol_3 = getSymbolOfDeclaration(member);
                    checkIndexConstraintForProperty(type, symbol_3, getTypeOfExpression(member.name.expression), getNonMissingTypeOfSymbol(symbol_3));
                }
            }
        }
        if (indexInfos.length > 1) {
            for (var _d = 0, indexInfos_8 = indexInfos; _d < indexInfos_8.length; _d++) {
                var info = indexInfos_8[_d];
                checkIndexConstraintForIndexSignature(type, info);
            }
        }
    }
    function checkIndexConstraintForProperty(type, prop, propNameType, propType) {
        var declaration = prop.valueDeclaration;
        var name = (0, ts_1.getNameOfDeclaration)(declaration);
        if (name && (0, ts_1.isPrivateIdentifier)(name)) {
            return;
        }
        var indexInfos = getApplicableIndexInfos(type, propNameType);
        var interfaceDeclaration = (0, ts_1.getObjectFlags)(type) & 2 /* ObjectFlags.Interface */ ? (0, ts_1.getDeclarationOfKind)(type.symbol, 263 /* SyntaxKind.InterfaceDeclaration */) : undefined;
        var propDeclaration = declaration && declaration.kind === 225 /* SyntaxKind.BinaryExpression */ ||
            name && name.kind === 166 /* SyntaxKind.ComputedPropertyName */ ? declaration : undefined;
        var localPropDeclaration = getParentOfSymbol(prop) === type.symbol ? declaration : undefined;
        var _loop_25 = function (info) {
            var localIndexDeclaration = info.declaration && getParentOfSymbol(getSymbolOfDeclaration(info.declaration)) === type.symbol ? info.declaration : undefined;
            // We check only when (a) the property is declared in the containing type, or (b) the applicable index signature is declared
            // in the containing type, or (c) the containing type is an interface and no base interface contains both the property and
            // the index signature (i.e. property and index signature are declared in separate inherited interfaces).
            var errorNode = localPropDeclaration || localIndexDeclaration ||
                (interfaceDeclaration && !(0, ts_1.some)(getBaseTypes(type), function (base) { return !!getPropertyOfObjectType(base, prop.escapedName) && !!getIndexTypeOfType(base, info.keyType); }) ? interfaceDeclaration : undefined);
            if (errorNode && !isTypeAssignableTo(propType, info.type)) {
                var diagnostic = createError(errorNode, ts_1.Diagnostics.Property_0_of_type_1_is_not_assignable_to_2_index_type_3, symbolToString(prop), typeToString(propType), typeToString(info.keyType), typeToString(info.type));
                if (propDeclaration && errorNode !== propDeclaration) {
                    (0, ts_1.addRelatedInfo)(diagnostic, (0, ts_1.createDiagnosticForNode)(propDeclaration, ts_1.Diagnostics._0_is_declared_here, symbolToString(prop)));
                }
                diagnostics.add(diagnostic);
            }
        };
        for (var _i = 0, indexInfos_9 = indexInfos; _i < indexInfos_9.length; _i++) {
            var info = indexInfos_9[_i];
            _loop_25(info);
        }
    }
    function checkIndexConstraintForIndexSignature(type, checkInfo) {
        var declaration = checkInfo.declaration;
        var indexInfos = getApplicableIndexInfos(type, checkInfo.keyType);
        var interfaceDeclaration = (0, ts_1.getObjectFlags)(type) & 2 /* ObjectFlags.Interface */ ? (0, ts_1.getDeclarationOfKind)(type.symbol, 263 /* SyntaxKind.InterfaceDeclaration */) : undefined;
        var localCheckDeclaration = declaration && getParentOfSymbol(getSymbolOfDeclaration(declaration)) === type.symbol ? declaration : undefined;
        var _loop_26 = function (info) {
            if (info === checkInfo)
                return "continue";
            var localIndexDeclaration = info.declaration && getParentOfSymbol(getSymbolOfDeclaration(info.declaration)) === type.symbol ? info.declaration : undefined;
            // We check only when (a) the check index signature is declared in the containing type, or (b) the applicable index
            // signature is declared in the containing type, or (c) the containing type is an interface and no base interface contains
            // both index signatures (i.e. the index signatures are declared in separate inherited interfaces).
            var errorNode = localCheckDeclaration || localIndexDeclaration ||
                (interfaceDeclaration && !(0, ts_1.some)(getBaseTypes(type), function (base) { return !!getIndexInfoOfType(base, checkInfo.keyType) && !!getIndexTypeOfType(base, info.keyType); }) ? interfaceDeclaration : undefined);
            if (errorNode && !isTypeAssignableTo(checkInfo.type, info.type)) {
                error(errorNode, ts_1.Diagnostics._0_index_type_1_is_not_assignable_to_2_index_type_3, typeToString(checkInfo.keyType), typeToString(checkInfo.type), typeToString(info.keyType), typeToString(info.type));
            }
        };
        for (var _i = 0, indexInfos_10 = indexInfos; _i < indexInfos_10.length; _i++) {
            var info = indexInfos_10[_i];
            _loop_26(info);
        }
    }
    function checkTypeNameIsReserved(name, message) {
        // TS 1.0 spec (April 2014): 3.6.1
        // The predefined type keywords are reserved and cannot be used as names of user defined types.
        switch (name.escapedText) {
            case "any":
            case "unknown":
            case "never":
            case "number":
            case "bigint":
            case "boolean":
            case "string":
            case "symbol":
            case "void":
            case "object":
                error(name, message, name.escapedText);
        }
    }
    /**
     * The name cannot be used as 'Object' of user defined types with special target.
     */
    function checkClassNameCollisionWithObject(name) {
        if (languageVersion >= 1 /* ScriptTarget.ES5 */ && name.escapedText === "Object"
            && (moduleKind < ts_1.ModuleKind.ES2015 || (0, ts_1.getSourceFileOfNode)(name).impliedNodeFormat === ts_1.ModuleKind.CommonJS)) {
            error(name, ts_1.Diagnostics.Class_name_cannot_be_Object_when_targeting_ES5_with_module_0, ts_1.ModuleKind[moduleKind]); // https://github.com/Microsoft/TypeScript/issues/17494
        }
    }
    function checkUnmatchedJSDocParameters(node) {
        var jsdocParameters = (0, ts_1.filter)((0, ts_1.getJSDocTags)(node), ts_1.isJSDocParameterTag);
        if (!(0, ts_1.length)(jsdocParameters))
            return;
        var isJs = (0, ts_1.isInJSFile)(node);
        var parameters = new Set();
        var excludedParameters = new Set();
        (0, ts_1.forEach)(node.parameters, function (_a, index) {
            var name = _a.name;
            if ((0, ts_1.isIdentifier)(name)) {
                parameters.add(name.escapedText);
            }
            if ((0, ts_1.isBindingPattern)(name)) {
                excludedParameters.add(index);
            }
        });
        var containsArguments = containsArgumentsReference(node);
        if (containsArguments) {
            var lastJSDocParamIndex = jsdocParameters.length - 1;
            var lastJSDocParam = jsdocParameters[lastJSDocParamIndex];
            if (isJs && lastJSDocParam && (0, ts_1.isIdentifier)(lastJSDocParam.name) && lastJSDocParam.typeExpression &&
                lastJSDocParam.typeExpression.type && !parameters.has(lastJSDocParam.name.escapedText) && !excludedParameters.has(lastJSDocParamIndex) && !isArrayType(getTypeFromTypeNode(lastJSDocParam.typeExpression.type))) {
                error(lastJSDocParam.name, ts_1.Diagnostics.JSDoc_param_tag_has_name_0_but_there_is_no_parameter_with_that_name_It_would_match_arguments_if_it_had_an_array_type, (0, ts_1.idText)(lastJSDocParam.name));
            }
        }
        else {
            (0, ts_1.forEach)(jsdocParameters, function (_a, index) {
                var name = _a.name, isNameFirst = _a.isNameFirst;
                if (excludedParameters.has(index) || (0, ts_1.isIdentifier)(name) && parameters.has(name.escapedText)) {
                    return;
                }
                if ((0, ts_1.isQualifiedName)(name)) {
                    if (isJs) {
                        error(name, ts_1.Diagnostics.Qualified_name_0_is_not_allowed_without_a_leading_param_object_1, (0, ts_1.entityNameToString)(name), (0, ts_1.entityNameToString)(name.left));
                    }
                }
                else {
                    if (!isNameFirst) {
                        errorOrSuggestion(isJs, name, ts_1.Diagnostics.JSDoc_param_tag_has_name_0_but_there_is_no_parameter_with_that_name, (0, ts_1.idText)(name));
                    }
                }
            });
        }
    }
    /**
     * Check each type parameter and check that type parameters have no duplicate type parameter declarations
     */
    function checkTypeParameters(typeParameterDeclarations) {
        var seenDefault = false;
        if (typeParameterDeclarations) {
            for (var i = 0; i < typeParameterDeclarations.length; i++) {
                var node = typeParameterDeclarations[i];
                checkTypeParameter(node);
                addLazyDiagnostic(createCheckTypeParameterDiagnostic(node, i));
            }
        }
        function createCheckTypeParameterDiagnostic(node, i) {
            return function () {
                if (node.default) {
                    seenDefault = true;
                    checkTypeParametersNotReferenced(node.default, typeParameterDeclarations, i);
                }
                else if (seenDefault) {
                    error(node, ts_1.Diagnostics.Required_type_parameters_may_not_follow_optional_type_parameters);
                }
                for (var j = 0; j < i; j++) {
                    if (typeParameterDeclarations[j].symbol === node.symbol) {
                        error(node.name, ts_1.Diagnostics.Duplicate_identifier_0, (0, ts_1.declarationNameToString)(node.name));
                    }
                }
            };
        }
    }
    /** Check that type parameter defaults only reference previously declared type parameters */
    function checkTypeParametersNotReferenced(root, typeParameters, index) {
        visit(root);
        function visit(node) {
            if (node.kind === 182 /* SyntaxKind.TypeReference */) {
                var type = getTypeFromTypeReference(node);
                if (type.flags & 262144 /* TypeFlags.TypeParameter */) {
                    for (var i = index; i < typeParameters.length; i++) {
                        if (type.symbol === getSymbolOfDeclaration(typeParameters[i])) {
                            error(node, ts_1.Diagnostics.Type_parameter_defaults_can_only_reference_previously_declared_type_parameters);
                        }
                    }
                }
            }
            (0, ts_1.forEachChild)(node, visit);
        }
    }
    /** Check that type parameter lists are identical across multiple declarations */
    function checkTypeParameterListsIdentical(symbol) {
        if (symbol.declarations && symbol.declarations.length === 1) {
            return;
        }
        var links = getSymbolLinks(symbol);
        if (!links.typeParametersChecked) {
            links.typeParametersChecked = true;
            var declarations = getClassOrInterfaceDeclarationsOfSymbol(symbol);
            if (!declarations || declarations.length <= 1) {
                return;
            }
            var type = getDeclaredTypeOfSymbol(symbol);
            if (!areTypeParametersIdentical(declarations, type.localTypeParameters, ts_1.getEffectiveTypeParameterDeclarations)) {
                // Report an error on every conflicting declaration.
                var name_44 = symbolToString(symbol);
                for (var _i = 0, declarations_6 = declarations; _i < declarations_6.length; _i++) {
                    var declaration = declarations_6[_i];
                    error(declaration.name, ts_1.Diagnostics.All_declarations_of_0_must_have_identical_type_parameters, name_44);
                }
            }
        }
    }
    function areTypeParametersIdentical(declarations, targetParameters, getTypeParameterDeclarations) {
        var maxTypeArgumentCount = (0, ts_1.length)(targetParameters);
        var minTypeArgumentCount = getMinTypeArgumentCount(targetParameters);
        for (var _i = 0, declarations_7 = declarations; _i < declarations_7.length; _i++) {
            var declaration = declarations_7[_i];
            // If this declaration has too few or too many type parameters, we report an error
            var sourceParameters = getTypeParameterDeclarations(declaration);
            var numTypeParameters = sourceParameters.length;
            if (numTypeParameters < minTypeArgumentCount || numTypeParameters > maxTypeArgumentCount) {
                return false;
            }
            for (var i = 0; i < numTypeParameters; i++) {
                var source = sourceParameters[i];
                var target = targetParameters[i];
                // If the type parameter node does not have the same as the resolved type
                // parameter at this position, we report an error.
                if (source.name.escapedText !== target.symbol.escapedName) {
                    return false;
                }
                // If the type parameter node does not have an identical constraint as the resolved
                // type parameter at this position, we report an error.
                var constraint = (0, ts_1.getEffectiveConstraintOfTypeParameter)(source);
                var sourceConstraint = constraint && getTypeFromTypeNode(constraint);
                var targetConstraint = getConstraintOfTypeParameter(target);
                // relax check if later interface augmentation has no constraint, it's more broad and is OK to merge with
                // a more constrained interface (this could be generalized to a full hierarchy check, but that's maybe overkill)
                if (sourceConstraint && targetConstraint && !isTypeIdenticalTo(sourceConstraint, targetConstraint)) {
                    return false;
                }
                // If the type parameter node has a default and it is not identical to the default
                // for the type parameter at this position, we report an error.
                var sourceDefault = source.default && getTypeFromTypeNode(source.default);
                var targetDefault = getDefaultFromTypeParameter(target);
                if (sourceDefault && targetDefault && !isTypeIdenticalTo(sourceDefault, targetDefault)) {
                    return false;
                }
            }
        }
        return true;
    }
    function getFirstTransformableStaticClassElement(node) {
        var _a;
        var willTransformStaticElementsOfDecoratedClass = !legacyDecorators && languageVersion < 99 /* ScriptTarget.ESNext */ &&
            (0, ts_1.classOrConstructorParameterIsDecorated)(/*useLegacyDecorators*/ false, node);
        var willTransformPrivateElementsOrClassStaticBlocks = languageVersion <= 9 /* ScriptTarget.ES2022 */;
        var willTransformInitializers = !useDefineForClassFields || languageVersion < 9 /* ScriptTarget.ES2022 */;
        if (willTransformStaticElementsOfDecoratedClass || willTransformPrivateElementsOrClassStaticBlocks) {
            for (var _i = 0, _b = node.members; _i < _b.length; _i++) {
                var member = _b[_i];
                if (willTransformStaticElementsOfDecoratedClass && (0, ts_1.classElementOrClassElementParameterIsDecorated)(/*useLegacyDecorators*/ false, member, node)) {
                    return (_a = (0, ts_1.firstOrUndefined)((0, ts_1.getDecorators)(node))) !== null && _a !== void 0 ? _a : node;
                }
                else if (willTransformPrivateElementsOrClassStaticBlocks) {
                    if ((0, ts_1.isClassStaticBlockDeclaration)(member)) {
                        return member;
                    }
                    else if ((0, ts_1.isStatic)(member)) {
                        if ((0, ts_1.isPrivateIdentifierClassElementDeclaration)(member) ||
                            willTransformInitializers && (0, ts_1.isInitializedProperty)(member)) {
                            return member;
                        }
                    }
                }
            }
        }
    }
    function checkClassExpressionExternalHelpers(node) {
        var _a;
        if (node.name)
            return;
        var parent = (0, ts_1.walkUpOuterExpressions)(node);
        if (!(0, ts_1.isNamedEvaluationSource)(parent))
            return;
        var willTransformESDecorators = !legacyDecorators && languageVersion < 99 /* ScriptTarget.ESNext */;
        var location;
        if (willTransformESDecorators && (0, ts_1.classOrConstructorParameterIsDecorated)(/*useLegacyDecorators*/ false, node)) {
            location = (_a = (0, ts_1.firstOrUndefined)((0, ts_1.getDecorators)(node))) !== null && _a !== void 0 ? _a : node;
        }
        else {
            location = getFirstTransformableStaticClassElement(node);
        }
        if (location) {
            checkExternalEmitHelpers(location, 8388608 /* ExternalEmitHelpers.SetFunctionName */);
            if (((0, ts_1.isPropertyAssignment)(parent) || (0, ts_1.isPropertyDeclaration)(parent) || (0, ts_1.isBindingElement)(parent)) && (0, ts_1.isComputedPropertyName)(parent.name)) {
                checkExternalEmitHelpers(location, 16777216 /* ExternalEmitHelpers.PropKey */);
            }
        }
    }
    function checkClassExpression(node) {
        checkClassLikeDeclaration(node);
        checkNodeDeferred(node);
        checkClassExpressionExternalHelpers(node);
        return getTypeOfSymbol(getSymbolOfDeclaration(node));
    }
    function checkClassExpressionDeferred(node) {
        (0, ts_1.forEach)(node.members, checkSourceElement);
        registerForUnusedIdentifiersCheck(node);
    }
    function checkClassDeclaration(node) {
        var firstDecorator = (0, ts_1.find)(node.modifiers, ts_1.isDecorator);
        if (legacyDecorators && firstDecorator && (0, ts_1.some)(node.members, function (p) { return (0, ts_1.hasStaticModifier)(p) && (0, ts_1.isPrivateIdentifierClassElementDeclaration)(p); })) {
            grammarErrorOnNode(firstDecorator, ts_1.Diagnostics.Class_decorators_can_t_be_used_with_static_private_identifier_Consider_removing_the_experimental_decorator);
        }
        if (!node.name && !(0, ts_1.hasSyntacticModifier)(node, 1024 /* ModifierFlags.Default */)) {
            grammarErrorOnFirstToken(node, ts_1.Diagnostics.A_class_declaration_without_the_default_modifier_must_have_a_name);
        }
        checkClassLikeDeclaration(node);
        (0, ts_1.forEach)(node.members, checkSourceElement);
        registerForUnusedIdentifiersCheck(node);
    }
    function checkClassLikeDeclaration(node) {
        checkGrammarClassLikeDeclaration(node);
        checkDecorators(node);
        checkCollisionsForDeclarationName(node, node.name);
        checkTypeParameters((0, ts_1.getEffectiveTypeParameterDeclarations)(node));
        checkExportsOnMergedDeclarations(node);
        var symbol = getSymbolOfDeclaration(node);
        var type = getDeclaredTypeOfSymbol(symbol);
        var typeWithThis = getTypeWithThisArgument(type);
        var staticType = getTypeOfSymbol(symbol);
        checkTypeParameterListsIdentical(symbol);
        checkFunctionOrConstructorSymbol(symbol);
        checkClassForDuplicateDeclarations(node);
        // Only check for reserved static identifiers on non-ambient context.
        var nodeInAmbientContext = !!(node.flags & 16777216 /* NodeFlags.Ambient */);
        if (!nodeInAmbientContext) {
            checkClassForStaticPropertyNameConflicts(node);
        }
        var baseTypeNode = (0, ts_1.getEffectiveBaseTypeNode)(node);
        if (baseTypeNode) {
            (0, ts_1.forEach)(baseTypeNode.typeArguments, checkSourceElement);
            if (languageVersion < 2 /* ScriptTarget.ES2015 */) {
                checkExternalEmitHelpers(baseTypeNode.parent, 1 /* ExternalEmitHelpers.Extends */);
            }
            // check both @extends and extends if both are specified.
            var extendsNode = (0, ts_1.getClassExtendsHeritageElement)(node);
            if (extendsNode && extendsNode !== baseTypeNode) {
                checkExpression(extendsNode.expression);
            }
            var baseTypes_2 = getBaseTypes(type);
            if (baseTypes_2.length) {
                addLazyDiagnostic(function () {
                    var baseType = baseTypes_2[0];
                    var baseConstructorType = getBaseConstructorTypeOfClass(type);
                    var staticBaseType = getApparentType(baseConstructorType);
                    checkBaseTypeAccessibility(staticBaseType, baseTypeNode);
                    checkSourceElement(baseTypeNode.expression);
                    if ((0, ts_1.some)(baseTypeNode.typeArguments)) {
                        (0, ts_1.forEach)(baseTypeNode.typeArguments, checkSourceElement);
                        for (var _i = 0, _a = getConstructorsForTypeArguments(staticBaseType, baseTypeNode.typeArguments, baseTypeNode); _i < _a.length; _i++) {
                            var constructor = _a[_i];
                            if (!checkTypeArgumentConstraints(baseTypeNode, constructor.typeParameters)) {
                                break;
                            }
                        }
                    }
                    var baseWithThis = getTypeWithThisArgument(baseType, type.thisType);
                    if (!checkTypeAssignableTo(typeWithThis, baseWithThis, /*errorNode*/ undefined)) {
                        issueMemberSpecificError(node, typeWithThis, baseWithThis, ts_1.Diagnostics.Class_0_incorrectly_extends_base_class_1);
                    }
                    else {
                        // Report static side error only when instance type is assignable
                        checkTypeAssignableTo(staticType, getTypeWithoutSignatures(staticBaseType), node.name || node, ts_1.Diagnostics.Class_static_side_0_incorrectly_extends_base_class_static_side_1);
                    }
                    if (baseConstructorType.flags & 8650752 /* TypeFlags.TypeVariable */) {
                        if (!isMixinConstructorType(staticType)) {
                            error(node.name || node, ts_1.Diagnostics.A_mixin_class_must_have_a_constructor_with_a_single_rest_parameter_of_type_any);
                        }
                        else {
                            var constructSignatures = getSignaturesOfType(baseConstructorType, 1 /* SignatureKind.Construct */);
                            if (constructSignatures.some(function (signature) { return signature.flags & 4 /* SignatureFlags.Abstract */; }) && !(0, ts_1.hasSyntacticModifier)(node, 256 /* ModifierFlags.Abstract */)) {
                                error(node.name || node, ts_1.Diagnostics.A_mixin_class_that_extends_from_a_type_variable_containing_an_abstract_construct_signature_must_also_be_declared_abstract);
                            }
                        }
                    }
                    if (!(staticBaseType.symbol && staticBaseType.symbol.flags & 32 /* SymbolFlags.Class */) && !(baseConstructorType.flags & 8650752 /* TypeFlags.TypeVariable */)) {
                        // When the static base type is a "class-like" constructor function (but not actually a class), we verify
                        // that all instantiated base constructor signatures return the same type.
                        var constructors = getInstantiatedConstructorsForTypeArguments(staticBaseType, baseTypeNode.typeArguments, baseTypeNode);
                        if ((0, ts_1.forEach)(constructors, function (sig) { return !isJSConstructor(sig.declaration) && !isTypeIdenticalTo(getReturnTypeOfSignature(sig), baseType); })) {
                            error(baseTypeNode.expression, ts_1.Diagnostics.Base_constructors_must_all_have_the_same_return_type);
                        }
                    }
                    checkKindsOfPropertyMemberOverrides(type, baseType);
                });
            }
        }
        checkMembersForOverrideModifier(node, type, typeWithThis, staticType);
        var implementedTypeNodes = (0, ts_1.getEffectiveImplementsTypeNodes)(node);
        if (implementedTypeNodes) {
            for (var _i = 0, implementedTypeNodes_1 = implementedTypeNodes; _i < implementedTypeNodes_1.length; _i++) {
                var typeRefNode = implementedTypeNodes_1[_i];
                if (!(0, ts_1.isEntityNameExpression)(typeRefNode.expression) || (0, ts_1.isOptionalChain)(typeRefNode.expression)) {
                    error(typeRefNode.expression, ts_1.Diagnostics.A_class_can_only_implement_an_identifier_Slashqualified_name_with_optional_type_arguments);
                }
                checkTypeReferenceNode(typeRefNode);
                addLazyDiagnostic(createImplementsDiagnostics(typeRefNode));
            }
        }
        addLazyDiagnostic(function () {
            checkIndexConstraints(type, symbol);
            checkIndexConstraints(staticType, symbol, /*isStaticIndex*/ true);
            checkTypeForDuplicateIndexSignatures(node);
            checkPropertyInitialization(node);
        });
        function createImplementsDiagnostics(typeRefNode) {
            return function () {
                var t = getReducedType(getTypeFromTypeNode(typeRefNode));
                if (!isErrorType(t)) {
                    if (isValidBaseType(t)) {
                        var genericDiag = t.symbol && t.symbol.flags & 32 /* SymbolFlags.Class */ ?
                            ts_1.Diagnostics.Class_0_incorrectly_implements_class_1_Did_you_mean_to_extend_1_and_inherit_its_members_as_a_subclass :
                            ts_1.Diagnostics.Class_0_incorrectly_implements_interface_1;
                        var baseWithThis = getTypeWithThisArgument(t, type.thisType);
                        if (!checkTypeAssignableTo(typeWithThis, baseWithThis, /*errorNode*/ undefined)) {
                            issueMemberSpecificError(node, typeWithThis, baseWithThis, genericDiag);
                        }
                    }
                    else {
                        error(typeRefNode, ts_1.Diagnostics.A_class_can_only_implement_an_object_type_or_intersection_of_object_types_with_statically_known_members);
                    }
                }
            };
        }
    }
    function checkMembersForOverrideModifier(node, type, typeWithThis, staticType) {
        var baseTypeNode = (0, ts_1.getEffectiveBaseTypeNode)(node);
        var baseTypes = baseTypeNode && getBaseTypes(type);
        var baseWithThis = (baseTypes === null || baseTypes === void 0 ? void 0 : baseTypes.length) ? getTypeWithThisArgument((0, ts_1.first)(baseTypes), type.thisType) : undefined;
        var baseStaticType = getBaseConstructorTypeOfClass(type);
        var _loop_27 = function (member) {
            if ((0, ts_1.hasAmbientModifier)(member)) {
                return "continue";
            }
            if ((0, ts_1.isConstructorDeclaration)(member)) {
                (0, ts_1.forEach)(member.parameters, function (param) {
                    if ((0, ts_1.isParameterPropertyDeclaration)(param, member)) {
                        checkExistingMemberForOverrideModifier(node, staticType, baseStaticType, baseWithThis, type, typeWithThis, param, 
                        /*memberIsParameterProperty*/ true);
                    }
                });
            }
            checkExistingMemberForOverrideModifier(node, staticType, baseStaticType, baseWithThis, type, typeWithThis, member, 
            /*memberIsParameterProperty*/ false);
        };
        for (var _i = 0, _a = node.members; _i < _a.length; _i++) {
            var member = _a[_i];
            _loop_27(member);
        }
    }
    /**
     * @param member Existing member node to be checked.
     * Note: `member` cannot be a synthetic node.
     */
    function checkExistingMemberForOverrideModifier(node, staticType, baseStaticType, baseWithThis, type, typeWithThis, member, memberIsParameterProperty, reportErrors) {
        if (reportErrors === void 0) { reportErrors = true; }
        var declaredProp = member.name
            && getSymbolAtLocation(member.name)
            || getSymbolAtLocation(member);
        if (!declaredProp) {
            return 0 /* MemberOverrideStatus.Ok */;
        }
        return checkMemberForOverrideModifier(node, staticType, baseStaticType, baseWithThis, type, typeWithThis, (0, ts_1.hasOverrideModifier)(member), (0, ts_1.hasAbstractModifier)(member), (0, ts_1.isStatic)(member), memberIsParameterProperty, (0, ts_1.symbolName)(declaredProp), reportErrors ? member : undefined);
    }
    /**
     * Checks a class member declaration for either a missing or an invalid `override` modifier.
     * Note: this function can be used for speculative checking,
     * i.e. checking a member that does not yet exist in the program.
     * An example of that would be to call this function in a completions scenario,
     * when offering a method declaration as completion.
     * @param errorNode The node where we should report an error, or undefined if we should not report errors.
     */
    function checkMemberForOverrideModifier(node, staticType, baseStaticType, baseWithThis, type, typeWithThis, memberHasOverrideModifier, memberHasAbstractModifier, memberIsStatic, memberIsParameterProperty, memberName, errorNode) {
        var isJs = (0, ts_1.isInJSFile)(node);
        var nodeInAmbientContext = !!(node.flags & 16777216 /* NodeFlags.Ambient */);
        if (baseWithThis && (memberHasOverrideModifier || compilerOptions.noImplicitOverride)) {
            var memberEscapedName = (0, ts_1.escapeLeadingUnderscores)(memberName);
            var thisType = memberIsStatic ? staticType : typeWithThis;
            var baseType = memberIsStatic ? baseStaticType : baseWithThis;
            var prop = getPropertyOfType(thisType, memberEscapedName);
            var baseProp = getPropertyOfType(baseType, memberEscapedName);
            var baseClassName = typeToString(baseWithThis);
            if (prop && !baseProp && memberHasOverrideModifier) {
                if (errorNode) {
                    var suggestion = getSuggestedSymbolForNonexistentClassMember(memberName, baseType); // Again, using symbol name: note that's different from `symbol.escapedName`
                    suggestion ?
                        error(errorNode, isJs ?
                            ts_1.Diagnostics.This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_it_is_not_declared_in_the_base_class_0_Did_you_mean_1 :
                            ts_1.Diagnostics.This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0_Did_you_mean_1, baseClassName, symbolToString(suggestion)) :
                        error(errorNode, isJs ?
                            ts_1.Diagnostics.This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_it_is_not_declared_in_the_base_class_0 :
                            ts_1.Diagnostics.This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0, baseClassName);
                }
                return 2 /* MemberOverrideStatus.HasInvalidOverride */;
            }
            else if (prop && (baseProp === null || baseProp === void 0 ? void 0 : baseProp.declarations) && compilerOptions.noImplicitOverride && !nodeInAmbientContext) {
                var baseHasAbstract = (0, ts_1.some)(baseProp.declarations, ts_1.hasAbstractModifier);
                if (memberHasOverrideModifier) {
                    return 0 /* MemberOverrideStatus.Ok */;
                }
                if (!baseHasAbstract) {
                    if (errorNode) {
                        var diag = memberIsParameterProperty ?
                            isJs ?
                                ts_1.Diagnostics.This_parameter_property_must_have_a_JSDoc_comment_with_an_override_tag_because_it_overrides_a_member_in_the_base_class_0 :
                                ts_1.Diagnostics.This_parameter_property_must_have_an_override_modifier_because_it_overrides_a_member_in_base_class_0 :
                            isJs ?
                                ts_1.Diagnostics.This_member_must_have_a_JSDoc_comment_with_an_override_tag_because_it_overrides_a_member_in_the_base_class_0 :
                                ts_1.Diagnostics.This_member_must_have_an_override_modifier_because_it_overrides_a_member_in_the_base_class_0;
                        error(errorNode, diag, baseClassName);
                    }
                    return 1 /* MemberOverrideStatus.NeedsOverride */;
                }
                else if (memberHasAbstractModifier && baseHasAbstract) {
                    if (errorNode) {
                        error(errorNode, ts_1.Diagnostics.This_member_must_have_an_override_modifier_because_it_overrides_an_abstract_method_that_is_declared_in_the_base_class_0, baseClassName);
                    }
                    return 1 /* MemberOverrideStatus.NeedsOverride */;
                }
            }
        }
        else if (memberHasOverrideModifier) {
            if (errorNode) {
                var className = typeToString(type);
                error(errorNode, isJs ?
                    ts_1.Diagnostics.This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_its_containing_class_0_does_not_extend_another_class :
                    ts_1.Diagnostics.This_member_cannot_have_an_override_modifier_because_its_containing_class_0_does_not_extend_another_class, className);
            }
            return 2 /* MemberOverrideStatus.HasInvalidOverride */;
        }
        return 0 /* MemberOverrideStatus.Ok */;
    }
    function issueMemberSpecificError(node, typeWithThis, baseWithThis, broadDiag) {
        // iterate over all implemented properties and issue errors on each one which isn't compatible, rather than the class as a whole, if possible
        var issuedMemberError = false;
        var _loop_28 = function (member) {
            if ((0, ts_1.isStatic)(member)) {
                return "continue";
            }
            var declaredProp = member.name && getSymbolAtLocation(member.name) || getSymbolAtLocation(member);
            if (declaredProp) {
                var prop = getPropertyOfType(typeWithThis, declaredProp.escapedName);
                var baseProp = getPropertyOfType(baseWithThis, declaredProp.escapedName);
                if (prop && baseProp) {
                    var rootChain = function () { return (0, ts_1.chainDiagnosticMessages)(
                    /*details*/ undefined, ts_1.Diagnostics.Property_0_in_type_1_is_not_assignable_to_the_same_property_in_base_type_2, symbolToString(declaredProp), typeToString(typeWithThis), typeToString(baseWithThis)); };
                    if (!checkTypeAssignableTo(getTypeOfSymbol(prop), getTypeOfSymbol(baseProp), member.name || member, /*headMessage*/ undefined, rootChain)) {
                        issuedMemberError = true;
                    }
                }
            }
        };
        for (var _i = 0, _a = node.members; _i < _a.length; _i++) {
            var member = _a[_i];
            _loop_28(member);
        }
        if (!issuedMemberError) {
            // check again with diagnostics to generate a less-specific error
            checkTypeAssignableTo(typeWithThis, baseWithThis, node.name || node, broadDiag);
        }
    }
    function checkBaseTypeAccessibility(type, node) {
        var signatures = getSignaturesOfType(type, 1 /* SignatureKind.Construct */);
        if (signatures.length) {
            var declaration = signatures[0].declaration;
            if (declaration && (0, ts_1.hasEffectiveModifier)(declaration, 8 /* ModifierFlags.Private */)) {
                var typeClassDeclaration = (0, ts_1.getClassLikeDeclarationOfSymbol)(type.symbol);
                if (!isNodeWithinClass(node, typeClassDeclaration)) {
                    error(node, ts_1.Diagnostics.Cannot_extend_a_class_0_Class_constructor_is_marked_as_private, getFullyQualifiedName(type.symbol));
                }
            }
        }
    }
    /**
     * Checks a member declaration node to see if has a missing or invalid `override` modifier.
     * @param node Class-like node where the member is declared.
     * @param member Member declaration node.
     * @param memberSymbol Member symbol.
     * Note: `member` can be a synthetic node without a parent.
     */
    function getMemberOverrideModifierStatus(node, member, memberSymbol) {
        if (!member.name) {
            return 0 /* MemberOverrideStatus.Ok */;
        }
        var classSymbol = getSymbolOfDeclaration(node);
        var type = getDeclaredTypeOfSymbol(classSymbol);
        var typeWithThis = getTypeWithThisArgument(type);
        var staticType = getTypeOfSymbol(classSymbol);
        var baseTypeNode = (0, ts_1.getEffectiveBaseTypeNode)(node);
        var baseTypes = baseTypeNode && getBaseTypes(type);
        var baseWithThis = (baseTypes === null || baseTypes === void 0 ? void 0 : baseTypes.length) ? getTypeWithThisArgument((0, ts_1.first)(baseTypes), type.thisType) : undefined;
        var baseStaticType = getBaseConstructorTypeOfClass(type);
        var memberHasOverrideModifier = member.parent
            ? (0, ts_1.hasOverrideModifier)(member)
            : (0, ts_1.hasSyntacticModifier)(member, 16384 /* ModifierFlags.Override */);
        return checkMemberForOverrideModifier(node, staticType, baseStaticType, baseWithThis, type, typeWithThis, memberHasOverrideModifier, (0, ts_1.hasAbstractModifier)(member), (0, ts_1.isStatic)(member), 
        /*memberIsParameterProperty*/ false, (0, ts_1.symbolName)(memberSymbol));
    }
    function getTargetSymbol(s) {
        // if symbol is instantiated its flags are not copied from the 'target'
        // so we'll need to get back original 'target' symbol to work with correct set of flags
        // NOTE: cast to TransientSymbol should be safe because only TransientSymbols have CheckFlags.Instantiated
        return (0, ts_1.getCheckFlags)(s) & 1 /* CheckFlags.Instantiated */ ? s.links.target : s;
    }
    function getClassOrInterfaceDeclarationsOfSymbol(symbol) {
        return (0, ts_1.filter)(symbol.declarations, function (d) {
            return d.kind === 262 /* SyntaxKind.ClassDeclaration */ || d.kind === 263 /* SyntaxKind.InterfaceDeclaration */;
        });
    }
    function checkKindsOfPropertyMemberOverrides(type, baseType) {
        // TypeScript 1.0 spec (April 2014): 8.2.3
        // A derived class inherits all members from its base class it doesn't override.
        // Inheritance means that a derived class implicitly contains all non - overridden members of the base class.
        // Both public and private property members are inherited, but only public property members can be overridden.
        // A property member in a derived class is said to override a property member in a base class
        // when the derived class property member has the same name and kind(instance or static)
        // as the base class property member.
        // The type of an overriding property member must be assignable(section 3.8.4)
        // to the type of the overridden property member, or otherwise a compile - time error occurs.
        // Base class instance member functions can be overridden by derived class instance member functions,
        // but not by other kinds of members.
        // Base class instance member variables and accessors can be overridden by
        // derived class instance member variables and accessors, but not by other kinds of members.
        var _a, _b, _c, _d, _e, _f, _g, _h;
        // NOTE: assignability is checked in checkClassDeclaration
        var baseProperties = getPropertiesOfType(baseType);
        var inheritedAbstractMemberNotImplementedError;
        var _loop_29 = function (baseProperty) {
            var base = getTargetSymbol(baseProperty);
            if (base.flags & 4194304 /* SymbolFlags.Prototype */) {
                return "continue";
            }
            var baseSymbol = getPropertyOfObjectType(type, base.escapedName);
            if (!baseSymbol) {
                return "continue";
            }
            var derived = getTargetSymbol(baseSymbol);
            var baseDeclarationFlags = (0, ts_1.getDeclarationModifierFlagsFromSymbol)(base);
            ts_1.Debug.assert(!!derived, "derived should point to something, even if it is the base class' declaration.");
            // In order to resolve whether the inherited method was overridden in the base class or not,
            // we compare the Symbols obtained. Since getTargetSymbol returns the symbol on the *uninstantiated*
            // type declaration, derived and base resolve to the same symbol even in the case of generic classes.
            if (derived === base) {
                // derived class inherits base without override/redeclaration
                var derivedClassDecl = (0, ts_1.getClassLikeDeclarationOfSymbol)(type.symbol);
                // It is an error to inherit an abstract member without implementing it or being declared abstract.
                // If there is no declaration for the derived class (as in the case of class expressions),
                // then the class cannot be declared abstract.
                if (baseDeclarationFlags & 256 /* ModifierFlags.Abstract */ && (!derivedClassDecl || !(0, ts_1.hasSyntacticModifier)(derivedClassDecl, 256 /* ModifierFlags.Abstract */))) {
                    // Searches other base types for a declaration that would satisfy the inherited abstract member.
                    // (The class may have more than one base type via declaration merging with an interface with the
                    // same name.)
                    for (var _j = 0, _k = getBaseTypes(type); _j < _k.length; _j++) {
                        var otherBaseType = _k[_j];
                        if (otherBaseType === baseType)
                            continue;
                        var baseSymbol_1 = getPropertyOfObjectType(otherBaseType, base.escapedName);
                        var derivedElsewhere = baseSymbol_1 && getTargetSymbol(baseSymbol_1);
                        if (derivedElsewhere && derivedElsewhere !== base) {
                            return "continue-basePropertyCheck";
                        }
                    }
                    if (!inheritedAbstractMemberNotImplementedError) {
                        inheritedAbstractMemberNotImplementedError = error(derivedClassDecl, ts_1.Diagnostics.Non_abstract_class_0_does_not_implement_all_abstract_members_of_1, typeToString(type), typeToString(baseType));
                    }
                    if (derivedClassDecl.kind === 230 /* SyntaxKind.ClassExpression */) {
                        (0, ts_1.addRelatedInfo)(inheritedAbstractMemberNotImplementedError, (0, ts_1.createDiagnosticForNode)((_b = (_a = baseProperty.valueDeclaration) !== null && _a !== void 0 ? _a : (baseProperty.declarations && (0, ts_1.first)(baseProperty.declarations))) !== null && _b !== void 0 ? _b : derivedClassDecl, ts_1.Diagnostics.Non_abstract_class_expression_does_not_implement_inherited_abstract_member_0_from_class_1, symbolToString(baseProperty), typeToString(baseType)));
                    }
                    else {
                        (0, ts_1.addRelatedInfo)(inheritedAbstractMemberNotImplementedError, (0, ts_1.createDiagnosticForNode)((_d = (_c = baseProperty.valueDeclaration) !== null && _c !== void 0 ? _c : (baseProperty.declarations && (0, ts_1.first)(baseProperty.declarations))) !== null && _d !== void 0 ? _d : derivedClassDecl, ts_1.Diagnostics.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_class_2, typeToString(type), symbolToString(baseProperty), typeToString(baseType)));
                    }
                }
            }
            else {
                // derived overrides base.
                var derivedDeclarationFlags = (0, ts_1.getDeclarationModifierFlagsFromSymbol)(derived);
                if (baseDeclarationFlags & 8 /* ModifierFlags.Private */ || derivedDeclarationFlags & 8 /* ModifierFlags.Private */) {
                    return "continue";
                }
                var errorMessage = void 0;
                var basePropertyFlags = base.flags & 98308 /* SymbolFlags.PropertyOrAccessor */;
                var derivedPropertyFlags = derived.flags & 98308 /* SymbolFlags.PropertyOrAccessor */;
                if (basePropertyFlags && derivedPropertyFlags) {
                    // property/accessor is overridden with property/accessor
                    if (((0, ts_1.getCheckFlags)(base) & 6 /* CheckFlags.Synthetic */
                        ? (_e = base.declarations) === null || _e === void 0 ? void 0 : _e.some(function (d) { return isPropertyAbstractOrInterface(d, baseDeclarationFlags); })
                        : (_f = base.declarations) === null || _f === void 0 ? void 0 : _f.every(function (d) { return isPropertyAbstractOrInterface(d, baseDeclarationFlags); }))
                        || (0, ts_1.getCheckFlags)(base) & 262144 /* CheckFlags.Mapped */
                        || derived.valueDeclaration && (0, ts_1.isBinaryExpression)(derived.valueDeclaration)) {
                        return "continue";
                    }
                    var overriddenInstanceProperty = basePropertyFlags !== 4 /* SymbolFlags.Property */ && derivedPropertyFlags === 4 /* SymbolFlags.Property */;
                    var overriddenInstanceAccessor = basePropertyFlags === 4 /* SymbolFlags.Property */ && derivedPropertyFlags !== 4 /* SymbolFlags.Property */;
                    if (overriddenInstanceProperty || overriddenInstanceAccessor) {
                        var errorMessage_1 = overriddenInstanceProperty ?
                            ts_1.Diagnostics._0_is_defined_as_an_accessor_in_class_1_but_is_overridden_here_in_2_as_an_instance_property :
                            ts_1.Diagnostics._0_is_defined_as_a_property_in_class_1_but_is_overridden_here_in_2_as_an_accessor;
                        error((0, ts_1.getNameOfDeclaration)(derived.valueDeclaration) || derived.valueDeclaration, errorMessage_1, symbolToString(base), typeToString(baseType), typeToString(type));
                    }
                    else if (useDefineForClassFields) {
                        var uninitialized = (_g = derived.declarations) === null || _g === void 0 ? void 0 : _g.find(function (d) { return d.kind === 171 /* SyntaxKind.PropertyDeclaration */ && !d.initializer; });
                        if (uninitialized
                            && !(derived.flags & 33554432 /* SymbolFlags.Transient */)
                            && !(baseDeclarationFlags & 256 /* ModifierFlags.Abstract */)
                            && !(derivedDeclarationFlags & 256 /* ModifierFlags.Abstract */)
                            && !((_h = derived.declarations) === null || _h === void 0 ? void 0 : _h.some(function (d) { return !!(d.flags & 16777216 /* NodeFlags.Ambient */); }))) {
                            var constructor = findConstructorDeclaration((0, ts_1.getClassLikeDeclarationOfSymbol)(type.symbol));
                            var propName = uninitialized.name;
                            if (uninitialized.exclamationToken
                                || !constructor
                                || !(0, ts_1.isIdentifier)(propName)
                                || !strictNullChecks
                                || !isPropertyInitializedInConstructor(propName, type, constructor)) {
                                var errorMessage_2 = ts_1.Diagnostics.Property_0_will_overwrite_the_base_property_in_1_If_this_is_intentional_add_an_initializer_Otherwise_add_a_declare_modifier_or_remove_the_redundant_declaration;
                                error((0, ts_1.getNameOfDeclaration)(derived.valueDeclaration) || derived.valueDeclaration, errorMessage_2, symbolToString(base), typeToString(baseType));
                            }
                        }
                    }
                    return "continue";
                }
                else if (isPrototypeProperty(base)) {
                    if (isPrototypeProperty(derived) || derived.flags & 4 /* SymbolFlags.Property */) {
                        return "continue";
                    }
                    else {
                        ts_1.Debug.assert(!!(derived.flags & 98304 /* SymbolFlags.Accessor */));
                        errorMessage = ts_1.Diagnostics.Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor;
                    }
                }
                else if (base.flags & 98304 /* SymbolFlags.Accessor */) {
                    errorMessage = ts_1.Diagnostics.Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function;
                }
                else {
                    errorMessage = ts_1.Diagnostics.Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function;
                }
                error((0, ts_1.getNameOfDeclaration)(derived.valueDeclaration) || derived.valueDeclaration, errorMessage, typeToString(baseType), symbolToString(base), typeToString(type));
            }
        };
        basePropertyCheck: for (var _i = 0, baseProperties_1 = baseProperties; _i < baseProperties_1.length; _i++) {
            var baseProperty = baseProperties_1[_i];
            var state_10 = _loop_29(baseProperty);
            switch (state_10) {
                case "continue-basePropertyCheck": continue basePropertyCheck;
            }
        }
    }
    function isPropertyAbstractOrInterface(declaration, baseDeclarationFlags) {
        return baseDeclarationFlags & 256 /* ModifierFlags.Abstract */ && (!(0, ts_1.isPropertyDeclaration)(declaration) || !declaration.initializer)
            || (0, ts_1.isInterfaceDeclaration)(declaration.parent);
    }
    function getNonInheritedProperties(type, baseTypes, properties) {
        if (!(0, ts_1.length)(baseTypes)) {
            return properties;
        }
        var seen = new Map();
        (0, ts_1.forEach)(properties, function (p) {
            seen.set(p.escapedName, p);
        });
        for (var _i = 0, baseTypes_3 = baseTypes; _i < baseTypes_3.length; _i++) {
            var base = baseTypes_3[_i];
            var properties_5 = getPropertiesOfType(getTypeWithThisArgument(base, type.thisType));
            for (var _a = 0, properties_4 = properties_5; _a < properties_4.length; _a++) {
                var prop = properties_4[_a];
                var existing = seen.get(prop.escapedName);
                if (existing && prop.parent === existing.parent) {
                    seen.delete(prop.escapedName);
                }
            }
        }
        return (0, ts_1.arrayFrom)(seen.values());
    }
    function checkInheritedPropertiesAreIdentical(type, typeNode) {
        var baseTypes = getBaseTypes(type);
        if (baseTypes.length < 2) {
            return true;
        }
        var seen = new Map();
        (0, ts_1.forEach)(resolveDeclaredMembers(type).declaredProperties, function (p) {
            seen.set(p.escapedName, { prop: p, containingType: type });
        });
        var ok = true;
        for (var _i = 0, baseTypes_4 = baseTypes; _i < baseTypes_4.length; _i++) {
            var base = baseTypes_4[_i];
            var properties = getPropertiesOfType(getTypeWithThisArgument(base, type.thisType));
            for (var _a = 0, properties_6 = properties; _a < properties_6.length; _a++) {
                var prop = properties_6[_a];
                var existing = seen.get(prop.escapedName);
                if (!existing) {
                    seen.set(prop.escapedName, { prop: prop, containingType: base });
                }
                else {
                    var isInheritedProperty = existing.containingType !== type;
                    if (isInheritedProperty && !isPropertyIdenticalTo(existing.prop, prop)) {
                        ok = false;
                        var typeName1 = typeToString(existing.containingType);
                        var typeName2 = typeToString(base);
                        var errorInfo = (0, ts_1.chainDiagnosticMessages)(/*details*/ undefined, ts_1.Diagnostics.Named_property_0_of_types_1_and_2_are_not_identical, symbolToString(prop), typeName1, typeName2);
                        errorInfo = (0, ts_1.chainDiagnosticMessages)(errorInfo, ts_1.Diagnostics.Interface_0_cannot_simultaneously_extend_types_1_and_2, typeToString(type), typeName1, typeName2);
                        diagnostics.add((0, ts_1.createDiagnosticForNodeFromMessageChain)((0, ts_1.getSourceFileOfNode)(typeNode), typeNode, errorInfo));
                    }
                }
            }
        }
        return ok;
    }
    function checkPropertyInitialization(node) {
        if (!strictNullChecks || !strictPropertyInitialization || node.flags & 16777216 /* NodeFlags.Ambient */) {
            return;
        }
        var constructor = findConstructorDeclaration(node);
        for (var _i = 0, _a = node.members; _i < _a.length; _i++) {
            var member = _a[_i];
            if ((0, ts_1.getEffectiveModifierFlags)(member) & 2 /* ModifierFlags.Ambient */) {
                continue;
            }
            if (!(0, ts_1.isStatic)(member) && isPropertyWithoutInitializer(member)) {
                var propName = member.name;
                if ((0, ts_1.isIdentifier)(propName) || (0, ts_1.isPrivateIdentifier)(propName) || (0, ts_1.isComputedPropertyName)(propName)) {
                    var type = getTypeOfSymbol(getSymbolOfDeclaration(member));
                    if (!(type.flags & 3 /* TypeFlags.AnyOrUnknown */ || containsUndefinedType(type))) {
                        if (!constructor || !isPropertyInitializedInConstructor(propName, type, constructor)) {
                            error(member.name, ts_1.Diagnostics.Property_0_has_no_initializer_and_is_not_definitely_assigned_in_the_constructor, (0, ts_1.declarationNameToString)(propName));
                        }
                    }
                }
            }
        }
    }
    function isPropertyWithoutInitializer(node) {
        return node.kind === 171 /* SyntaxKind.PropertyDeclaration */ &&
            !(0, ts_1.hasAbstractModifier)(node) &&
            !node.exclamationToken &&
            !node.initializer;
    }
    function isPropertyInitializedInStaticBlocks(propName, propType, staticBlocks, startPos, endPos) {
        for (var _i = 0, staticBlocks_2 = staticBlocks; _i < staticBlocks_2.length; _i++) {
            var staticBlock = staticBlocks_2[_i];
            // static block must be within the provided range as they are evaluated in document order (unlike constructors)
            if (staticBlock.pos >= startPos && staticBlock.pos <= endPos) {
                var reference = ts_1.factory.createPropertyAccessExpression(ts_1.factory.createThis(), propName);
                (0, ts_1.setParent)(reference.expression, reference);
                (0, ts_1.setParent)(reference, staticBlock);
                reference.flowNode = staticBlock.returnFlowNode;
                var flowType = getFlowTypeOfReference(reference, propType, getOptionalType(propType));
                if (!containsUndefinedType(flowType)) {
                    return true;
                }
            }
        }
        return false;
    }
    function isPropertyInitializedInConstructor(propName, propType, constructor) {
        var reference = (0, ts_1.isComputedPropertyName)(propName)
            ? ts_1.factory.createElementAccessExpression(ts_1.factory.createThis(), propName.expression)
            : ts_1.factory.createPropertyAccessExpression(ts_1.factory.createThis(), propName);
        (0, ts_1.setParent)(reference.expression, reference);
        (0, ts_1.setParent)(reference, constructor);
        reference.flowNode = constructor.returnFlowNode;
        var flowType = getFlowTypeOfReference(reference, propType, getOptionalType(propType));
        return !containsUndefinedType(flowType);
    }
    function checkInterfaceDeclaration(node) {
        // Grammar checking
        if (!checkGrammarModifiers(node))
            checkGrammarInterfaceDeclaration(node);
        checkTypeParameters(node.typeParameters);
        addLazyDiagnostic(function () {
            checkTypeNameIsReserved(node.name, ts_1.Diagnostics.Interface_name_cannot_be_0);
            checkExportsOnMergedDeclarations(node);
            var symbol = getSymbolOfDeclaration(node);
            checkTypeParameterListsIdentical(symbol);
            // Only check this symbol once
            var firstInterfaceDecl = (0, ts_1.getDeclarationOfKind)(symbol, 263 /* SyntaxKind.InterfaceDeclaration */);
            if (node === firstInterfaceDecl) {
                var type = getDeclaredTypeOfSymbol(symbol);
                var typeWithThis = getTypeWithThisArgument(type);
                // run subsequent checks only if first set succeeded
                if (checkInheritedPropertiesAreIdentical(type, node.name)) {
                    for (var _i = 0, _a = getBaseTypes(type); _i < _a.length; _i++) {
                        var baseType = _a[_i];
                        checkTypeAssignableTo(typeWithThis, getTypeWithThisArgument(baseType, type.thisType), node.name, ts_1.Diagnostics.Interface_0_incorrectly_extends_interface_1);
                    }
                    checkIndexConstraints(type, symbol);
                }
            }
            checkObjectTypeForDuplicateDeclarations(node);
        });
        (0, ts_1.forEach)((0, ts_1.getInterfaceBaseTypeNodes)(node), function (heritageElement) {
            if (!(0, ts_1.isEntityNameExpression)(heritageElement.expression) || (0, ts_1.isOptionalChain)(heritageElement.expression)) {
                error(heritageElement.expression, ts_1.Diagnostics.An_interface_can_only_extend_an_identifier_Slashqualified_name_with_optional_type_arguments);
            }
            checkTypeReferenceNode(heritageElement);
        });
        (0, ts_1.forEach)(node.members, checkSourceElement);
        addLazyDiagnostic(function () {
            checkTypeForDuplicateIndexSignatures(node);
            registerForUnusedIdentifiersCheck(node);
        });
    }
    function checkTypeAliasDeclaration(node) {
        // Grammar checking
        checkGrammarModifiers(node);
        checkTypeNameIsReserved(node.name, ts_1.Diagnostics.Type_alias_name_cannot_be_0);
        checkExportsOnMergedDeclarations(node);
        checkTypeParameters(node.typeParameters);
        if (node.type.kind === 141 /* SyntaxKind.IntrinsicKeyword */) {
            if (!intrinsicTypeKinds.has(node.name.escapedText) || (0, ts_1.length)(node.typeParameters) !== 1) {
                error(node.type, ts_1.Diagnostics.The_intrinsic_keyword_can_only_be_used_to_declare_compiler_provided_intrinsic_types);
            }
        }
        else {
            checkSourceElement(node.type);
            registerForUnusedIdentifiersCheck(node);
        }
    }
    function computeEnumMemberValues(node) {
        var nodeLinks = getNodeLinks(node);
        if (!(nodeLinks.flags & 1024 /* NodeCheckFlags.EnumValuesComputed */)) {
            nodeLinks.flags |= 1024 /* NodeCheckFlags.EnumValuesComputed */;
            var autoValue = 0;
            for (var _i = 0, _a = node.members; _i < _a.length; _i++) {
                var member = _a[_i];
                var value = computeMemberValue(member, autoValue);
                getNodeLinks(member).enumMemberValue = value;
                autoValue = typeof value === "number" ? value + 1 : undefined;
            }
        }
    }
    function computeMemberValue(member, autoValue) {
        if ((0, ts_1.isComputedNonLiteralName)(member.name)) {
            error(member.name, ts_1.Diagnostics.Computed_property_names_are_not_allowed_in_enums);
        }
        else {
            var text = (0, ts_1.getTextOfPropertyName)(member.name);
            if ((0, ts_1.isNumericLiteralName)(text) && !(0, ts_1.isInfinityOrNaNString)(text)) {
                error(member.name, ts_1.Diagnostics.An_enum_member_cannot_have_a_numeric_name);
            }
        }
        if (member.initializer) {
            return computeConstantValue(member);
        }
        // In ambient non-const numeric enum declarations, enum members without initializers are
        // considered computed members (as opposed to having auto-incremented values).
        if (member.parent.flags & 16777216 /* NodeFlags.Ambient */ && !(0, ts_1.isEnumConst)(member.parent)) {
            return undefined;
        }
        // If the member declaration specifies no value, the member is considered a constant enum member.
        // If the member is the first member in the enum declaration, it is assigned the value zero.
        // Otherwise, it is assigned the value of the immediately preceding member plus one, and an error
        // occurs if the immediately preceding member is not a constant enum member.
        if (autoValue !== undefined) {
            return autoValue;
        }
        error(member.name, ts_1.Diagnostics.Enum_member_must_have_initializer);
        return undefined;
    }
    function computeConstantValue(member) {
        var isConstEnum = (0, ts_1.isEnumConst)(member.parent);
        var initializer = member.initializer;
        var value = evaluate(initializer, member);
        if (value !== undefined) {
            if (isConstEnum && typeof value === "number" && !isFinite(value)) {
                error(initializer, isNaN(value) ?
                    ts_1.Diagnostics.const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN :
                    ts_1.Diagnostics.const_enum_member_initializer_was_evaluated_to_a_non_finite_value);
            }
        }
        else if (isConstEnum) {
            error(initializer, ts_1.Diagnostics.const_enum_member_initializers_must_be_constant_expressions);
        }
        else if (member.parent.flags & 16777216 /* NodeFlags.Ambient */) {
            error(initializer, ts_1.Diagnostics.In_ambient_enum_declarations_member_initializer_must_be_constant_expression);
        }
        else {
            checkTypeAssignableTo(checkExpression(initializer), numberType, initializer, ts_1.Diagnostics.Type_0_is_not_assignable_to_type_1_as_required_for_computed_enum_member_values);
        }
        return value;
    }
    function evaluate(expr, location) {
        switch (expr.kind) {
            case 223 /* SyntaxKind.PrefixUnaryExpression */:
                var value = evaluate(expr.operand, location);
                if (typeof value === "number") {
                    switch (expr.operator) {
                        case 40 /* SyntaxKind.PlusToken */: return value;
                        case 41 /* SyntaxKind.MinusToken */: return -value;
                        case 55 /* SyntaxKind.TildeToken */: return ~value;
                    }
                }
                break;
            case 225 /* SyntaxKind.BinaryExpression */:
                var left = evaluate(expr.left, location);
                var right = evaluate(expr.right, location);
                if (typeof left === "number" && typeof right === "number") {
                    switch (expr.operatorToken.kind) {
                        case 52 /* SyntaxKind.BarToken */: return left | right;
                        case 51 /* SyntaxKind.AmpersandToken */: return left & right;
                        case 49 /* SyntaxKind.GreaterThanGreaterThanToken */: return left >> right;
                        case 50 /* SyntaxKind.GreaterThanGreaterThanGreaterThanToken */: return left >>> right;
                        case 48 /* SyntaxKind.LessThanLessThanToken */: return left << right;
                        case 53 /* SyntaxKind.CaretToken */: return left ^ right;
                        case 42 /* SyntaxKind.AsteriskToken */: return left * right;
                        case 44 /* SyntaxKind.SlashToken */: return left / right;
                        case 40 /* SyntaxKind.PlusToken */: return left + right;
                        case 41 /* SyntaxKind.MinusToken */: return left - right;
                        case 45 /* SyntaxKind.PercentToken */: return left % right;
                        case 43 /* SyntaxKind.AsteriskAsteriskToken */: return Math.pow(left, right);
                    }
                }
                else if ((typeof left === "string" || typeof left === "number") &&
                    (typeof right === "string" || typeof right === "number") &&
                    expr.operatorToken.kind === 40 /* SyntaxKind.PlusToken */) {
                    return "" + left + right;
                }
                break;
            case 11 /* SyntaxKind.StringLiteral */:
            case 15 /* SyntaxKind.NoSubstitutionTemplateLiteral */:
                return expr.text;
            case 227 /* SyntaxKind.TemplateExpression */:
                return evaluateTemplateExpression(expr, location);
            case 9 /* SyntaxKind.NumericLiteral */:
                checkGrammarNumericLiteral(expr);
                return +expr.text;
            case 216 /* SyntaxKind.ParenthesizedExpression */:
                return evaluate(expr.expression, location);
            case 80 /* SyntaxKind.Identifier */:
                if ((0, ts_1.isInfinityOrNaNString)(expr.escapedText)) {
                    return +(expr.escapedText);
                }
            // falls through
            case 210 /* SyntaxKind.PropertyAccessExpression */:
                if ((0, ts_1.isEntityNameExpression)(expr)) {
                    var symbol = resolveEntityName(expr, 111551 /* SymbolFlags.Value */, /*ignoreErrors*/ true);
                    if (symbol) {
                        if (symbol.flags & 8 /* SymbolFlags.EnumMember */) {
                            return location ? evaluateEnumMember(expr, symbol, location) : getEnumMemberValue(symbol.valueDeclaration);
                        }
                        if (isConstVariable(symbol)) {
                            var declaration = symbol.valueDeclaration;
                            if (declaration && !declaration.type && declaration.initializer && (!location || declaration !== location && isBlockScopedNameDeclaredBeforeUse(declaration, location))) {
                                return evaluate(declaration.initializer, declaration);
                            }
                        }
                    }
                }
                break;
            case 211 /* SyntaxKind.ElementAccessExpression */:
                var root = expr.expression;
                if ((0, ts_1.isEntityNameExpression)(root) && (0, ts_1.isStringLiteralLike)(expr.argumentExpression)) {
                    var rootSymbol = resolveEntityName(root, 111551 /* SymbolFlags.Value */, /*ignoreErrors*/ true);
                    if (rootSymbol && rootSymbol.flags & 384 /* SymbolFlags.Enum */) {
                        var name_45 = (0, ts_1.escapeLeadingUnderscores)(expr.argumentExpression.text);
                        var member = rootSymbol.exports.get(name_45);
                        if (member) {
                            return location ? evaluateEnumMember(expr, member, location) : getEnumMemberValue(member.valueDeclaration);
                        }
                    }
                }
                break;
        }
        return undefined;
    }
    function evaluateEnumMember(expr, symbol, location) {
        var declaration = symbol.valueDeclaration;
        if (!declaration || declaration === location) {
            error(expr, ts_1.Diagnostics.Property_0_is_used_before_being_assigned, symbolToString(symbol));
            return undefined;
        }
        if (!isBlockScopedNameDeclaredBeforeUse(declaration, location)) {
            error(expr, ts_1.Diagnostics.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums);
            return 0;
        }
        return getEnumMemberValue(declaration);
    }
    function evaluateTemplateExpression(expr, location) {
        var result = expr.head.text;
        for (var _i = 0, _a = expr.templateSpans; _i < _a.length; _i++) {
            var span = _a[_i];
            var value = evaluate(span.expression, location);
            if (value === undefined) {
                return undefined;
            }
            result += value;
            result += span.literal.text;
        }
        return result;
    }
    function checkEnumDeclaration(node) {
        addLazyDiagnostic(function () { return checkEnumDeclarationWorker(node); });
    }
    function checkEnumDeclarationWorker(node) {
        // Grammar checking
        checkGrammarModifiers(node);
        checkCollisionsForDeclarationName(node, node.name);
        checkExportsOnMergedDeclarations(node);
        node.members.forEach(checkEnumMember);
        computeEnumMemberValues(node);
        // Spec 2014 - Section 9.3:
        // It isn't possible for one enum declaration to continue the automatic numbering sequence of another,
        // and when an enum type has multiple declarations, only one declaration is permitted to omit a value
        // for the first member.
        //
        // Only perform this check once per symbol
        var enumSymbol = getSymbolOfDeclaration(node);
        var firstDeclaration = (0, ts_1.getDeclarationOfKind)(enumSymbol, node.kind);
        if (node === firstDeclaration) {
            if (enumSymbol.declarations && enumSymbol.declarations.length > 1) {
                var enumIsConst_1 = (0, ts_1.isEnumConst)(node);
                // check that const is placed\omitted on all enum declarations
                (0, ts_1.forEach)(enumSymbol.declarations, function (decl) {
                    if ((0, ts_1.isEnumDeclaration)(decl) && (0, ts_1.isEnumConst)(decl) !== enumIsConst_1) {
                        error((0, ts_1.getNameOfDeclaration)(decl), ts_1.Diagnostics.Enum_declarations_must_all_be_const_or_non_const);
                    }
                });
            }
            var seenEnumMissingInitialInitializer_1 = false;
            (0, ts_1.forEach)(enumSymbol.declarations, function (declaration) {
                // return true if we hit a violation of the rule, false otherwise
                if (declaration.kind !== 265 /* SyntaxKind.EnumDeclaration */) {
                    return false;
                }
                var enumDeclaration = declaration;
                if (!enumDeclaration.members.length) {
                    return false;
                }
                var firstEnumMember = enumDeclaration.members[0];
                if (!firstEnumMember.initializer) {
                    if (seenEnumMissingInitialInitializer_1) {
                        error(firstEnumMember.name, ts_1.Diagnostics.In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enum_element);
                    }
                    else {
                        seenEnumMissingInitialInitializer_1 = true;
                    }
                }
            });
        }
    }
    function checkEnumMember(node) {
        if ((0, ts_1.isPrivateIdentifier)(node.name)) {
            error(node, ts_1.Diagnostics.An_enum_member_cannot_be_named_with_a_private_identifier);
        }
        if (node.initializer) {
            checkExpression(node.initializer);
        }
    }
    function getFirstNonAmbientClassOrFunctionDeclaration(symbol) {
        var declarations = symbol.declarations;
        if (declarations) {
            for (var _i = 0, declarations_8 = declarations; _i < declarations_8.length; _i++) {
                var declaration = declarations_8[_i];
                if ((declaration.kind === 262 /* SyntaxKind.ClassDeclaration */ ||
                    (declaration.kind === 261 /* SyntaxKind.FunctionDeclaration */ && (0, ts_1.nodeIsPresent)(declaration.body))) &&
                    !(declaration.flags & 16777216 /* NodeFlags.Ambient */)) {
                    return declaration;
                }
            }
        }
        return undefined;
    }
    function inSameLexicalScope(node1, node2) {
        var container1 = (0, ts_1.getEnclosingBlockScopeContainer)(node1);
        var container2 = (0, ts_1.getEnclosingBlockScopeContainer)(node2);
        if (isGlobalSourceFile(container1)) {
            return isGlobalSourceFile(container2);
        }
        else if (isGlobalSourceFile(container2)) {
            return false;
        }
        else {
            return container1 === container2;
        }
    }
    function checkModuleDeclaration(node) {
        if (node.body) {
            checkSourceElement(node.body);
            if (!(0, ts_1.isGlobalScopeAugmentation)(node)) {
                registerForUnusedIdentifiersCheck(node);
            }
        }
        addLazyDiagnostic(checkModuleDeclarationDiagnostics);
        function checkModuleDeclarationDiagnostics() {
            var _a, _b;
            // Grammar checking
            var isGlobalAugmentation = (0, ts_1.isGlobalScopeAugmentation)(node);
            var inAmbientContext = node.flags & 16777216 /* NodeFlags.Ambient */;
            if (isGlobalAugmentation && !inAmbientContext) {
                error(node.name, ts_1.Diagnostics.Augmentations_for_the_global_scope_should_have_declare_modifier_unless_they_appear_in_already_ambient_context);
            }
            var isAmbientExternalModule = (0, ts_1.isAmbientModule)(node);
            var contextErrorMessage = isAmbientExternalModule
                ? ts_1.Diagnostics.An_ambient_module_declaration_is_only_allowed_at_the_top_level_in_a_file
                : ts_1.Diagnostics.A_namespace_declaration_is_only_allowed_at_the_top_level_of_a_namespace_or_module;
            if (checkGrammarModuleElementContext(node, contextErrorMessage)) {
                // If we hit a module declaration in an illegal context, just bail out to avoid cascading errors.
                return;
            }
            if (!checkGrammarModifiers(node)) {
                if (!inAmbientContext && node.name.kind === 11 /* SyntaxKind.StringLiteral */) {
                    grammarErrorOnNode(node.name, ts_1.Diagnostics.Only_ambient_modules_can_use_quoted_names);
                }
            }
            if ((0, ts_1.isIdentifier)(node.name)) {
                checkCollisionsForDeclarationName(node, node.name);
            }
            checkExportsOnMergedDeclarations(node);
            var symbol = getSymbolOfDeclaration(node);
            // The following checks only apply on a non-ambient instantiated module declaration.
            if (symbol.flags & 512 /* SymbolFlags.ValueModule */
                && !inAmbientContext
                && isInstantiatedModule(node, (0, ts_1.shouldPreserveConstEnums)(compilerOptions))) {
                if ((0, ts_1.getIsolatedModules)(compilerOptions) && !(0, ts_1.getSourceFileOfNode)(node).externalModuleIndicator) {
                    // This could be loosened a little if needed. The only problem we are trying to avoid is unqualified
                    // references to namespace members declared in other files. But use of namespaces is discouraged anyway,
                    // so for now we will just not allow them in scripts, which is the only place they can merge cross-file.
                    error(node.name, ts_1.Diagnostics.Namespaces_are_not_allowed_in_global_script_files_when_0_is_enabled_If_this_file_is_not_intended_to_be_a_global_script_set_moduleDetection_to_force_or_add_an_empty_export_statement, isolatedModulesLikeFlagName);
                }
                if (((_a = symbol.declarations) === null || _a === void 0 ? void 0 : _a.length) > 1) {
                    var firstNonAmbientClassOrFunc = getFirstNonAmbientClassOrFunctionDeclaration(symbol);
                    if (firstNonAmbientClassOrFunc) {
                        if ((0, ts_1.getSourceFileOfNode)(node) !== (0, ts_1.getSourceFileOfNode)(firstNonAmbientClassOrFunc)) {
                            error(node.name, ts_1.Diagnostics.A_namespace_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merged);
                        }
                        else if (node.pos < firstNonAmbientClassOrFunc.pos) {
                            error(node.name, ts_1.Diagnostics.A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged);
                        }
                    }
                    // if the module merges with a class declaration in the same lexical scope,
                    // we need to track this to ensure the correct emit.
                    var mergedClass = (0, ts_1.getDeclarationOfKind)(symbol, 262 /* SyntaxKind.ClassDeclaration */);
                    if (mergedClass &&
                        inSameLexicalScope(node, mergedClass)) {
                        getNodeLinks(node).flags |= 2048 /* NodeCheckFlags.LexicalModuleMergesWithClass */;
                    }
                }
                if (compilerOptions.verbatimModuleSyntax &&
                    node.parent.kind === 311 /* SyntaxKind.SourceFile */ &&
                    (moduleKind === ts_1.ModuleKind.CommonJS || node.parent.impliedNodeFormat === ts_1.ModuleKind.CommonJS)) {
                    var exportModifier = (_b = node.modifiers) === null || _b === void 0 ? void 0 : _b.find(function (m) { return m.kind === 95 /* SyntaxKind.ExportKeyword */; });
                    if (exportModifier) {
                        error(exportModifier, ts_1.Diagnostics.A_top_level_export_modifier_cannot_be_used_on_value_declarations_in_a_CommonJS_module_when_verbatimModuleSyntax_is_enabled);
                    }
                }
            }
            if (isAmbientExternalModule) {
                if ((0, ts_1.isExternalModuleAugmentation)(node)) {
                    // body of the augmentation should be checked for consistency only if augmentation was applied to its target (either global scope or module)
                    // otherwise we'll be swamped in cascading errors.
                    // We can detect if augmentation was applied using following rules:
                    // - augmentation for a global scope is always applied
                    // - augmentation for some external module is applied if symbol for augmentation is merged (it was combined with target module).
                    var checkBody = isGlobalAugmentation || (getSymbolOfDeclaration(node).flags & 33554432 /* SymbolFlags.Transient */);
                    if (checkBody && node.body) {
                        for (var _i = 0, _c = node.body.statements; _i < _c.length; _i++) {
                            var statement = _c[_i];
                            checkModuleAugmentationElement(statement, isGlobalAugmentation);
                        }
                    }
                }
                else if (isGlobalSourceFile(node.parent)) {
                    if (isGlobalAugmentation) {
                        error(node.name, ts_1.Diagnostics.Augmentations_for_the_global_scope_can_only_be_directly_nested_in_external_modules_or_ambient_module_declarations);
                    }
                    else if ((0, ts_1.isExternalModuleNameRelative)((0, ts_1.getTextOfIdentifierOrLiteral)(node.name))) {
                        error(node.name, ts_1.Diagnostics.Ambient_module_declaration_cannot_specify_relative_module_name);
                    }
                }
                else {
                    if (isGlobalAugmentation) {
                        error(node.name, ts_1.Diagnostics.Augmentations_for_the_global_scope_can_only_be_directly_nested_in_external_modules_or_ambient_module_declarations);
                    }
                    else {
                        // Node is not an augmentation and is not located on the script level.
                        // This means that this is declaration of ambient module that is located in other module or namespace which is prohibited.
                        error(node.name, ts_1.Diagnostics.Ambient_modules_cannot_be_nested_in_other_modules_or_namespaces);
                    }
                }
            }
        }
    }
    function checkModuleAugmentationElement(node, isGlobalAugmentation) {
        switch (node.kind) {
            case 242 /* SyntaxKind.VariableStatement */:
                // error each individual name in variable statement instead of marking the entire variable statement
                for (var _i = 0, _a = node.declarationList.declarations; _i < _a.length; _i++) {
                    var decl = _a[_i];
                    checkModuleAugmentationElement(decl, isGlobalAugmentation);
                }
                break;
            case 276 /* SyntaxKind.ExportAssignment */:
            case 277 /* SyntaxKind.ExportDeclaration */:
                grammarErrorOnFirstToken(node, ts_1.Diagnostics.Exports_and_export_assignments_are_not_permitted_in_module_augmentations);
                break;
            case 270 /* SyntaxKind.ImportEqualsDeclaration */:
            case 271 /* SyntaxKind.ImportDeclaration */:
                grammarErrorOnFirstToken(node, ts_1.Diagnostics.Imports_are_not_permitted_in_module_augmentations_Consider_moving_them_to_the_enclosing_external_module);
                break;
            case 207 /* SyntaxKind.BindingElement */:
            case 259 /* SyntaxKind.VariableDeclaration */:
                var name_46 = node.name;
                if ((0, ts_1.isBindingPattern)(name_46)) {
                    for (var _b = 0, _c = name_46.elements; _b < _c.length; _b++) {
                        var el = _c[_b];
                        // mark individual names in binding pattern
                        checkModuleAugmentationElement(el, isGlobalAugmentation);
                    }
                    break;
                }
            // falls through
            case 262 /* SyntaxKind.ClassDeclaration */:
            case 265 /* SyntaxKind.EnumDeclaration */:
            case 261 /* SyntaxKind.FunctionDeclaration */:
            case 263 /* SyntaxKind.InterfaceDeclaration */:
            case 266 /* SyntaxKind.ModuleDeclaration */:
            case 264 /* SyntaxKind.TypeAliasDeclaration */:
                if (isGlobalAugmentation) {
                    return;
                }
                break;
        }
    }
    function getFirstNonModuleExportsIdentifier(node) {
        switch (node.kind) {
            case 80 /* SyntaxKind.Identifier */:
                return node;
            case 165 /* SyntaxKind.QualifiedName */:
                do {
                    node = node.left;
                } while (node.kind !== 80 /* SyntaxKind.Identifier */);
                return node;
            case 210 /* SyntaxKind.PropertyAccessExpression */:
                do {
                    if ((0, ts_1.isModuleExportsAccessExpression)(node.expression) && !(0, ts_1.isPrivateIdentifier)(node.name)) {
                        return node.name;
                    }
                    node = node.expression;
                } while (node.kind !== 80 /* SyntaxKind.Identifier */);
                return node;
        }
    }
    function checkExternalImportOrExportDeclaration(node) {
        var moduleName = (0, ts_1.getExternalModuleName)(node);
        if (!moduleName || (0, ts_1.nodeIsMissing)(moduleName)) {
            // Should be a parse error.
            return false;
        }
        if (!(0, ts_1.isStringLiteral)(moduleName)) {
            error(moduleName, ts_1.Diagnostics.String_literal_expected);
            return false;
        }
        var inAmbientExternalModule = node.parent.kind === 267 /* SyntaxKind.ModuleBlock */ && (0, ts_1.isAmbientModule)(node.parent.parent);
        if (node.parent.kind !== 311 /* SyntaxKind.SourceFile */ && !inAmbientExternalModule) {
            error(moduleName, node.kind === 277 /* SyntaxKind.ExportDeclaration */ ?
                ts_1.Diagnostics.Export_declarations_are_not_permitted_in_a_namespace :
                ts_1.Diagnostics.Import_declarations_in_a_namespace_cannot_reference_a_module);
            return false;
        }
        if (inAmbientExternalModule && (0, ts_1.isExternalModuleNameRelative)(moduleName.text)) {
            // we have already reported errors on top level imports/exports in external module augmentations in checkModuleDeclaration
            // no need to do this again.
            if (!isTopLevelInExternalModuleAugmentation(node)) {
                // TypeScript 1.0 spec (April 2013): 12.1.6
                // An ExternalImportDeclaration in an AmbientExternalModuleDeclaration may reference
                // other external modules only through top - level external module names.
                // Relative external module names are not permitted.
                error(node, ts_1.Diagnostics.Import_or_export_declaration_in_an_ambient_module_declaration_cannot_reference_module_through_relative_module_name);
                return false;
            }
        }
        if (!(0, ts_1.isImportEqualsDeclaration)(node) && node.assertClause) {
            var hasError = false;
            for (var _i = 0, _a = node.assertClause.elements; _i < _a.length; _i++) {
                var clause = _a[_i];
                if (!(0, ts_1.isStringLiteral)(clause.value)) {
                    hasError = true;
                    error(clause.value, ts_1.Diagnostics.Import_assertion_values_must_be_string_literal_expressions);
                }
            }
            return !hasError;
        }
        return true;
    }
    function checkAliasSymbol(node) {
        var _a, _b, _c, _d, _e;
        var symbol = getSymbolOfDeclaration(node);
        var target = resolveAlias(symbol);
        if (target !== unknownSymbol) {
            // For external modules, `symbol` represents the local symbol for an alias.
            // This local symbol will merge any other local declarations (excluding other aliases)
            // and symbol.flags will contains combined representation for all merged declaration.
            // Based on symbol.flags we can compute a set of excluded meanings (meaning that resolved alias should not have,
            // otherwise it will conflict with some local declaration). Note that in addition to normal flags we include matching SymbolFlags.Export*
            // in order to prevent collisions with declarations that were exported from the current module (they still contribute to local names).
            symbol = getMergedSymbol(symbol.exportSymbol || symbol);
            // A type-only import/export will already have a grammar error in a JS file, so no need to issue more errors within
            if ((0, ts_1.isInJSFile)(node) && !(target.flags & 111551 /* SymbolFlags.Value */) && !(0, ts_1.isTypeOnlyImportOrExportDeclaration)(node)) {
                var errorNode = (0, ts_1.isImportOrExportSpecifier)(node) ? node.propertyName || node.name :
                    (0, ts_1.isNamedDeclaration)(node) ? node.name :
                        node;
                ts_1.Debug.assert(node.kind !== 279 /* SyntaxKind.NamespaceExport */);
                if (node.kind === 280 /* SyntaxKind.ExportSpecifier */) {
                    var diag = error(errorNode, ts_1.Diagnostics.Types_cannot_appear_in_export_declarations_in_JavaScript_files);
                    var alreadyExportedSymbol = (_b = (_a = (0, ts_1.getSourceFileOfNode)(node).symbol) === null || _a === void 0 ? void 0 : _a.exports) === null || _b === void 0 ? void 0 : _b.get((node.propertyName || node.name).escapedText);
                    if (alreadyExportedSymbol === target) {
                        var exportingDeclaration = (_c = alreadyExportedSymbol.declarations) === null || _c === void 0 ? void 0 : _c.find(ts_1.isJSDocNode);
                        if (exportingDeclaration) {
                            (0, ts_1.addRelatedInfo)(diag, (0, ts_1.createDiagnosticForNode)(exportingDeclaration, ts_1.Diagnostics._0_is_automatically_exported_here, (0, ts_1.unescapeLeadingUnderscores)(alreadyExportedSymbol.escapedName)));
                        }
                    }
                }
                else {
                    ts_1.Debug.assert(node.kind !== 259 /* SyntaxKind.VariableDeclaration */);
                    var importDeclaration = (0, ts_1.findAncestor)(node, (0, ts_1.or)(ts_1.isImportDeclaration, ts_1.isImportEqualsDeclaration));
                    var moduleSpecifier = (_e = (importDeclaration && ((_d = (0, ts_1.tryGetModuleSpecifierFromDeclaration)(importDeclaration)) === null || _d === void 0 ? void 0 : _d.text))) !== null && _e !== void 0 ? _e : "...";
                    var importedIdentifier = (0, ts_1.unescapeLeadingUnderscores)((0, ts_1.isIdentifier)(errorNode) ? errorNode.escapedText : symbol.escapedName);
                    error(errorNode, ts_1.Diagnostics._0_is_a_type_and_cannot_be_imported_in_JavaScript_files_Use_1_in_a_JSDoc_type_annotation, importedIdentifier, "import(\"".concat(moduleSpecifier, "\").").concat(importedIdentifier));
                }
                return;
            }
            var targetFlags = getAllSymbolFlags(target);
            var excludedMeanings = (symbol.flags & (111551 /* SymbolFlags.Value */ | 1048576 /* SymbolFlags.ExportValue */) ? 111551 /* SymbolFlags.Value */ : 0) |
                (symbol.flags & 788968 /* SymbolFlags.Type */ ? 788968 /* SymbolFlags.Type */ : 0) |
                (symbol.flags & 1920 /* SymbolFlags.Namespace */ ? 1920 /* SymbolFlags.Namespace */ : 0);
            if (targetFlags & excludedMeanings) {
                var message = node.kind === 280 /* SyntaxKind.ExportSpecifier */ ?
                    ts_1.Diagnostics.Export_declaration_conflicts_with_exported_declaration_of_0 :
                    ts_1.Diagnostics.Import_declaration_conflicts_with_local_declaration_of_0;
                error(node, message, symbolToString(symbol));
            }
            if ((0, ts_1.getIsolatedModules)(compilerOptions)
                && !(0, ts_1.isTypeOnlyImportOrExportDeclaration)(node)
                && !(node.flags & 16777216 /* NodeFlags.Ambient */)) {
                var typeOnlyAlias = getTypeOnlyAliasDeclaration(symbol);
                var isType = !(targetFlags & 111551 /* SymbolFlags.Value */);
                if (isType || typeOnlyAlias) {
                    switch (node.kind) {
                        case 272 /* SyntaxKind.ImportClause */:
                        case 275 /* SyntaxKind.ImportSpecifier */:
                        case 270 /* SyntaxKind.ImportEqualsDeclaration */: {
                            if (compilerOptions.preserveValueImports || compilerOptions.verbatimModuleSyntax) {
                                ts_1.Debug.assertIsDefined(node.name, "An ImportClause with a symbol should have a name");
                                var message = compilerOptions.verbatimModuleSyntax && (0, ts_1.isInternalModuleImportEqualsDeclaration)(node)
                                    ? ts_1.Diagnostics.An_import_alias_cannot_resolve_to_a_type_or_type_only_declaration_when_verbatimModuleSyntax_is_enabled
                                    : isType
                                        ? compilerOptions.verbatimModuleSyntax
                                            ? ts_1.Diagnostics._0_is_a_type_and_must_be_imported_using_a_type_only_import_when_verbatimModuleSyntax_is_enabled
                                            : ts_1.Diagnostics._0_is_a_type_and_must_be_imported_using_a_type_only_import_when_preserveValueImports_and_isolatedModules_are_both_enabled
                                        : compilerOptions.verbatimModuleSyntax
                                            ? ts_1.Diagnostics._0_resolves_to_a_type_only_declaration_and_must_be_imported_using_a_type_only_import_when_verbatimModuleSyntax_is_enabled
                                            : ts_1.Diagnostics._0_resolves_to_a_type_only_declaration_and_must_be_imported_using_a_type_only_import_when_preserveValueImports_and_isolatedModules_are_both_enabled;
                                var name_47 = (0, ts_1.idText)(node.kind === 275 /* SyntaxKind.ImportSpecifier */ ? node.propertyName || node.name : node.name);
                                addTypeOnlyDeclarationRelatedInfo(error(node, message, name_47), isType ? undefined : typeOnlyAlias, name_47);
                            }
                            if (isType && node.kind === 270 /* SyntaxKind.ImportEqualsDeclaration */ && (0, ts_1.hasEffectiveModifier)(node, 1 /* ModifierFlags.Export */)) {
                                error(node, ts_1.Diagnostics.Cannot_use_export_import_on_a_type_or_type_only_namespace_when_0_is_enabled, isolatedModulesLikeFlagName);
                            }
                            break;
                        }
                        case 280 /* SyntaxKind.ExportSpecifier */: {
                            // Don't allow re-exporting an export that will be elided when `--isolatedModules` is set.
                            // The exception is that `import type { A } from './a'; export { A }` is allowed
                            // because single-file analysis can determine that the export should be dropped.
                            if (compilerOptions.verbatimModuleSyntax || (0, ts_1.getSourceFileOfNode)(typeOnlyAlias) !== (0, ts_1.getSourceFileOfNode)(node)) {
                                var name_48 = (0, ts_1.idText)(node.propertyName || node.name);
                                var diagnostic = isType
                                    ? error(node, ts_1.Diagnostics.Re_exporting_a_type_when_0_is_enabled_requires_using_export_type, isolatedModulesLikeFlagName)
                                    : error(node, ts_1.Diagnostics._0_resolves_to_a_type_only_declaration_and_must_be_re_exported_using_a_type_only_re_export_when_1_is_enabled, name_48, isolatedModulesLikeFlagName);
                                addTypeOnlyDeclarationRelatedInfo(diagnostic, isType ? undefined : typeOnlyAlias, name_48);
                                break;
                            }
                        }
                    }
                }
                if (compilerOptions.verbatimModuleSyntax &&
                    node.kind !== 270 /* SyntaxKind.ImportEqualsDeclaration */ &&
                    !(0, ts_1.isInJSFile)(node) &&
                    (moduleKind === ts_1.ModuleKind.CommonJS || (0, ts_1.getSourceFileOfNode)(node).impliedNodeFormat === ts_1.ModuleKind.CommonJS)) {
                    error(node, ts_1.Diagnostics.ESM_syntax_is_not_allowed_in_a_CommonJS_module_when_verbatimModuleSyntax_is_enabled);
                }
            }
            if ((0, ts_1.isImportSpecifier)(node)) {
                var targetSymbol = resolveAliasWithDeprecationCheck(symbol, node);
                if (isDeprecatedSymbol(targetSymbol) && targetSymbol.declarations) {
                    addDeprecatedSuggestion(node, targetSymbol.declarations, targetSymbol.escapedName);
                }
            }
        }
    }
    function resolveAliasWithDeprecationCheck(symbol, location) {
        if (!(symbol.flags & 2097152 /* SymbolFlags.Alias */) || isDeprecatedSymbol(symbol) || !getDeclarationOfAliasSymbol(symbol)) {
            return symbol;
        }
        var targetSymbol = resolveAlias(symbol);
        if (targetSymbol === unknownSymbol)
            return targetSymbol;
        while (symbol.flags & 2097152 /* SymbolFlags.Alias */) {
            var target = getImmediateAliasedSymbol(symbol);
            if (target) {
                if (target === targetSymbol)
                    break;
                if (target.declarations && (0, ts_1.length)(target.declarations)) {
                    if (isDeprecatedSymbol(target)) {
                        addDeprecatedSuggestion(location, target.declarations, target.escapedName);
                        break;
                    }
                    else {
                        if (symbol === targetSymbol)
                            break;
                        symbol = target;
                    }
                }
            }
            else {
                break;
            }
        }
        return targetSymbol;
    }
    function checkImportBinding(node) {
        checkCollisionsForDeclarationName(node, node.name);
        checkAliasSymbol(node);
        if (node.kind === 275 /* SyntaxKind.ImportSpecifier */ &&
            (0, ts_1.idText)(node.propertyName || node.name) === "default" &&
            (0, ts_1.getESModuleInterop)(compilerOptions) &&
            moduleKind !== ts_1.ModuleKind.System && (moduleKind < ts_1.ModuleKind.ES2015 || (0, ts_1.getSourceFileOfNode)(node).impliedNodeFormat === ts_1.ModuleKind.CommonJS)) {
            checkExternalEmitHelpers(node, 131072 /* ExternalEmitHelpers.ImportDefault */);
        }
    }
    function checkAssertClause(declaration) {
        var _a;
        if (declaration.assertClause) {
            var validForTypeAssertions = (0, ts_1.isExclusivelyTypeOnlyImportOrExport)(declaration);
            var override = (0, ts_1.getResolutionModeOverrideForClause)(declaration.assertClause, validForTypeAssertions ? grammarErrorOnNode : undefined);
            if (validForTypeAssertions && override) {
                if (!(0, ts_1.isNightly)()) {
                    grammarErrorOnNode(declaration.assertClause, ts_1.Diagnostics.resolution_mode_assertions_are_unstable_Use_nightly_TypeScript_to_silence_this_error_Try_updating_with_npm_install_D_typescript_next);
                }
                if ((0, ts_1.getEmitModuleResolutionKind)(compilerOptions) !== ts_1.ModuleResolutionKind.Node16 && (0, ts_1.getEmitModuleResolutionKind)(compilerOptions) !== ts_1.ModuleResolutionKind.NodeNext) {
                    return grammarErrorOnNode(declaration.assertClause, ts_1.Diagnostics.resolution_mode_assertions_are_only_supported_when_moduleResolution_is_node16_or_nodenext);
                }
                return; // Other grammar checks do not apply to type-only imports with resolution mode assertions
            }
            var mode = (moduleKind === ts_1.ModuleKind.NodeNext) && declaration.moduleSpecifier && getUsageModeForExpression(declaration.moduleSpecifier);
            if (mode !== ts_1.ModuleKind.ESNext && moduleKind !== ts_1.ModuleKind.ESNext) {
                return grammarErrorOnNode(declaration.assertClause, moduleKind === ts_1.ModuleKind.NodeNext
                    ? ts_1.Diagnostics.Import_assertions_are_not_allowed_on_statements_that_transpile_to_commonjs_require_calls
                    : ts_1.Diagnostics.Import_assertions_are_only_supported_when_the_module_option_is_set_to_esnext_or_nodenext);
            }
            if ((0, ts_1.isImportDeclaration)(declaration) ? (_a = declaration.importClause) === null || _a === void 0 ? void 0 : _a.isTypeOnly : declaration.isTypeOnly) {
                return grammarErrorOnNode(declaration.assertClause, ts_1.Diagnostics.Import_assertions_cannot_be_used_with_type_only_imports_or_exports);
            }
            if (override) {
                return grammarErrorOnNode(declaration.assertClause, ts_1.Diagnostics.resolution_mode_can_only_be_set_for_type_only_imports);
            }
        }
    }
    function checkImportDeclaration(node) {
        if (checkGrammarModuleElementContext(node, (0, ts_1.isInJSFile)(node) ? ts_1.Diagnostics.An_import_declaration_can_only_be_used_at_the_top_level_of_a_module : ts_1.Diagnostics.An_import_declaration_can_only_be_used_at_the_top_level_of_a_namespace_or_module)) {
            // If we hit an import declaration in an illegal context, just bail out to avoid cascading errors.
            return;
        }
        if (!checkGrammarModifiers(node) && (0, ts_1.hasEffectiveModifiers)(node)) {
            grammarErrorOnFirstToken(node, ts_1.Diagnostics.An_import_declaration_cannot_have_modifiers);
        }
        if (checkExternalImportOrExportDeclaration(node)) {
            var importClause = node.importClause;
            if (importClause && !checkGrammarImportClause(importClause)) {
                if (importClause.name) {
                    checkImportBinding(importClause);
                }
                if (importClause.namedBindings) {
                    if (importClause.namedBindings.kind === 273 /* SyntaxKind.NamespaceImport */) {
                        checkImportBinding(importClause.namedBindings);
                        if (moduleKind !== ts_1.ModuleKind.System && (moduleKind < ts_1.ModuleKind.ES2015 || (0, ts_1.getSourceFileOfNode)(node).impliedNodeFormat === ts_1.ModuleKind.CommonJS) && (0, ts_1.getESModuleInterop)(compilerOptions)) {
                            // import * as ns from "foo";
                            checkExternalEmitHelpers(node, 65536 /* ExternalEmitHelpers.ImportStar */);
                        }
                    }
                    else {
                        var moduleExisted = resolveExternalModuleName(node, node.moduleSpecifier);
                        if (moduleExisted) {
                            (0, ts_1.forEach)(importClause.namedBindings.elements, checkImportBinding);
                        }
                    }
                }
            }
        }
        checkAssertClause(node);
    }
    function checkImportEqualsDeclaration(node) {
        if (checkGrammarModuleElementContext(node, (0, ts_1.isInJSFile)(node) ? ts_1.Diagnostics.An_import_declaration_can_only_be_used_at_the_top_level_of_a_module : ts_1.Diagnostics.An_import_declaration_can_only_be_used_at_the_top_level_of_a_namespace_or_module)) {
            // If we hit an import declaration in an illegal context, just bail out to avoid cascading errors.
            return;
        }
        checkGrammarModifiers(node);
        if ((0, ts_1.isInternalModuleImportEqualsDeclaration)(node) || checkExternalImportOrExportDeclaration(node)) {
            checkImportBinding(node);
            if ((0, ts_1.hasSyntacticModifier)(node, 1 /* ModifierFlags.Export */)) {
                markExportAsReferenced(node);
            }
            if (node.moduleReference.kind !== 282 /* SyntaxKind.ExternalModuleReference */) {
                var target = resolveAlias(getSymbolOfDeclaration(node));
                if (target !== unknownSymbol) {
                    var targetFlags = getAllSymbolFlags(target);
                    if (targetFlags & 111551 /* SymbolFlags.Value */) {
                        // Target is a value symbol, check that it is not hidden by a local declaration with the same name
                        var moduleName = (0, ts_1.getFirstIdentifier)(node.moduleReference);
                        if (!(resolveEntityName(moduleName, 111551 /* SymbolFlags.Value */ | 1920 /* SymbolFlags.Namespace */).flags & 1920 /* SymbolFlags.Namespace */)) {
                            error(moduleName, ts_1.Diagnostics.Module_0_is_hidden_by_a_local_declaration_with_the_same_name, (0, ts_1.declarationNameToString)(moduleName));
                        }
                    }
                    if (targetFlags & 788968 /* SymbolFlags.Type */) {
                        checkTypeNameIsReserved(node.name, ts_1.Diagnostics.Import_name_cannot_be_0);
                    }
                }
                if (node.isTypeOnly) {
                    grammarErrorOnNode(node, ts_1.Diagnostics.An_import_alias_cannot_use_import_type);
                }
            }
            else {
                if (moduleKind >= ts_1.ModuleKind.ES2015 && (0, ts_1.getSourceFileOfNode)(node).impliedNodeFormat === undefined && !node.isTypeOnly && !(node.flags & 16777216 /* NodeFlags.Ambient */)) {
                    // Import equals declaration is deprecated in es6 or above
                    grammarErrorOnNode(node, ts_1.Diagnostics.Import_assignment_cannot_be_used_when_targeting_ECMAScript_modules_Consider_using_import_Asterisk_as_ns_from_mod_import_a_from_mod_import_d_from_mod_or_another_module_format_instead);
                }
            }
        }
    }
    function checkExportDeclaration(node) {
        if (checkGrammarModuleElementContext(node, (0, ts_1.isInJSFile)(node) ? ts_1.Diagnostics.An_export_declaration_can_only_be_used_at_the_top_level_of_a_module : ts_1.Diagnostics.An_export_declaration_can_only_be_used_at_the_top_level_of_a_namespace_or_module)) {
            // If we hit an export in an illegal context, just bail out to avoid cascading errors.
            return;
        }
        if (!checkGrammarModifiers(node) && (0, ts_1.hasSyntacticModifiers)(node)) {
            grammarErrorOnFirstToken(node, ts_1.Diagnostics.An_export_declaration_cannot_have_modifiers);
        }
        if (node.moduleSpecifier && node.exportClause && (0, ts_1.isNamedExports)(node.exportClause) && (0, ts_1.length)(node.exportClause.elements) && languageVersion === 0 /* ScriptTarget.ES3 */) {
            checkExternalEmitHelpers(node, 4194304 /* ExternalEmitHelpers.CreateBinding */);
        }
        checkGrammarExportDeclaration(node);
        if (!node.moduleSpecifier || checkExternalImportOrExportDeclaration(node)) {
            if (node.exportClause && !(0, ts_1.isNamespaceExport)(node.exportClause)) {
                // export { x, y }
                // export { x, y } from "foo"
                (0, ts_1.forEach)(node.exportClause.elements, checkExportSpecifier);
                var inAmbientExternalModule = node.parent.kind === 267 /* SyntaxKind.ModuleBlock */ && (0, ts_1.isAmbientModule)(node.parent.parent);
                var inAmbientNamespaceDeclaration = !inAmbientExternalModule && node.parent.kind === 267 /* SyntaxKind.ModuleBlock */ &&
                    !node.moduleSpecifier && node.flags & 16777216 /* NodeFlags.Ambient */;
                if (node.parent.kind !== 311 /* SyntaxKind.SourceFile */ && !inAmbientExternalModule && !inAmbientNamespaceDeclaration) {
                    error(node, ts_1.Diagnostics.Export_declarations_are_not_permitted_in_a_namespace);
                }
            }
            else {
                // export * from "foo"
                // export * as ns from "foo";
                var moduleSymbol = resolveExternalModuleName(node, node.moduleSpecifier);
                if (moduleSymbol && hasExportAssignmentSymbol(moduleSymbol)) {
                    error(node.moduleSpecifier, ts_1.Diagnostics.Module_0_uses_export_and_cannot_be_used_with_export_Asterisk, symbolToString(moduleSymbol));
                }
                else if (node.exportClause) {
                    checkAliasSymbol(node.exportClause);
                }
                if (moduleKind !== ts_1.ModuleKind.System && (moduleKind < ts_1.ModuleKind.ES2015 || (0, ts_1.getSourceFileOfNode)(node).impliedNodeFormat === ts_1.ModuleKind.CommonJS)) {
                    if (node.exportClause) {
                        // export * as ns from "foo";
                        // For ES2015 modules, we emit it as a pair of `import * as a_1 ...; export { a_1 as ns }` and don't need the helper.
                        // We only use the helper here when in esModuleInterop
                        if ((0, ts_1.getESModuleInterop)(compilerOptions)) {
                            checkExternalEmitHelpers(node, 65536 /* ExternalEmitHelpers.ImportStar */);
                        }
                    }
                    else {
                        // export * from "foo"
                        checkExternalEmitHelpers(node, 32768 /* ExternalEmitHelpers.ExportStar */);
                    }
                }
            }
        }
        checkAssertClause(node);
    }
    function checkGrammarExportDeclaration(node) {
        var _a;
        if (node.isTypeOnly && ((_a = node.exportClause) === null || _a === void 0 ? void 0 : _a.kind) === 278 /* SyntaxKind.NamedExports */) {
            return checkGrammarNamedImportsOrExports(node.exportClause);
        }
        return false;
    }
    function checkGrammarModuleElementContext(node, errorMessage) {
        var isInAppropriateContext = node.parent.kind === 311 /* SyntaxKind.SourceFile */ || node.parent.kind === 267 /* SyntaxKind.ModuleBlock */ || node.parent.kind === 266 /* SyntaxKind.ModuleDeclaration */;
        if (!isInAppropriateContext) {
            grammarErrorOnFirstToken(node, errorMessage);
        }
        return !isInAppropriateContext;
    }
    function importClauseContainsReferencedImport(importClause) {
        return (0, ts_1.forEachImportClauseDeclaration)(importClause, function (declaration) {
            return !!getSymbolOfDeclaration(declaration).isReferenced;
        });
    }
    function importClauseContainsConstEnumUsedAsValue(importClause) {
        return (0, ts_1.forEachImportClauseDeclaration)(importClause, function (declaration) {
            return !!getSymbolLinks(getSymbolOfDeclaration(declaration)).constEnumReferenced;
        });
    }
    function canConvertImportDeclarationToTypeOnly(statement) {
        return (0, ts_1.isImportDeclaration)(statement) &&
            statement.importClause &&
            !statement.importClause.isTypeOnly &&
            importClauseContainsReferencedImport(statement.importClause) &&
            !isReferencedAliasDeclaration(statement.importClause, /*checkChildren*/ true) &&
            !importClauseContainsConstEnumUsedAsValue(statement.importClause);
    }
    function canConvertImportEqualsDeclarationToTypeOnly(statement) {
        return (0, ts_1.isImportEqualsDeclaration)(statement) &&
            (0, ts_1.isExternalModuleReference)(statement.moduleReference) &&
            !statement.isTypeOnly &&
            getSymbolOfDeclaration(statement).isReferenced &&
            !isReferencedAliasDeclaration(statement, /*checkChildren*/ false) &&
            !getSymbolLinks(getSymbolOfDeclaration(statement)).constEnumReferenced;
    }
    function checkImportsForTypeOnlyConversion(sourceFile) {
        if (!canCollectSymbolAliasAccessabilityData) {
            return;
        }
        for (var _i = 0, _a = sourceFile.statements; _i < _a.length; _i++) {
            var statement = _a[_i];
            if (canConvertImportDeclarationToTypeOnly(statement) || canConvertImportEqualsDeclarationToTypeOnly(statement)) {
                error(statement, ts_1.Diagnostics.This_import_is_never_used_as_a_value_and_must_use_import_type_because_importsNotUsedAsValues_is_set_to_error);
            }
        }
    }
    function checkExportSpecifier(node) {
        checkAliasSymbol(node);
        if ((0, ts_1.getEmitDeclarations)(compilerOptions)) {
            collectLinkedAliases(node.propertyName || node.name, /*setVisibility*/ true);
        }
        if (!node.parent.parent.moduleSpecifier) {
            var exportedName = node.propertyName || node.name;
            // find immediate value referenced by exported name (SymbolFlags.Alias is set so we don't chase down aliases)
            var symbol = resolveName(exportedName, exportedName.escapedText, 111551 /* SymbolFlags.Value */ | 788968 /* SymbolFlags.Type */ | 1920 /* SymbolFlags.Namespace */ | 2097152 /* SymbolFlags.Alias */, 
            /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ true);
            if (symbol && (symbol === undefinedSymbol || symbol === globalThisSymbol || symbol.declarations && isGlobalSourceFile(getDeclarationContainer(symbol.declarations[0])))) {
                error(exportedName, ts_1.Diagnostics.Cannot_export_0_Only_local_declarations_can_be_exported_from_a_module, (0, ts_1.idText)(exportedName));
            }
            else {
                if (!node.isTypeOnly && !node.parent.parent.isTypeOnly) {
                    markExportAsReferenced(node);
                }
                var target = symbol && (symbol.flags & 2097152 /* SymbolFlags.Alias */ ? resolveAlias(symbol) : symbol);
                if (!target || getAllSymbolFlags(target) & 111551 /* SymbolFlags.Value */) {
                    checkExpressionCached(node.propertyName || node.name);
                }
            }
        }
        else {
            if ((0, ts_1.getESModuleInterop)(compilerOptions) &&
                moduleKind !== ts_1.ModuleKind.System &&
                (moduleKind < ts_1.ModuleKind.ES2015 || (0, ts_1.getSourceFileOfNode)(node).impliedNodeFormat === ts_1.ModuleKind.CommonJS) &&
                (0, ts_1.idText)(node.propertyName || node.name) === "default") {
                checkExternalEmitHelpers(node, 131072 /* ExternalEmitHelpers.ImportDefault */);
            }
        }
    }
    function checkExportAssignment(node) {
        var illegalContextMessage = node.isExportEquals
            ? ts_1.Diagnostics.An_export_assignment_must_be_at_the_top_level_of_a_file_or_module_declaration
            : ts_1.Diagnostics.A_default_export_must_be_at_the_top_level_of_a_file_or_module_declaration;
        if (checkGrammarModuleElementContext(node, illegalContextMessage)) {
            // If we hit an export assignment in an illegal context, just bail out to avoid cascading errors.
            return;
        }
        var container = node.parent.kind === 311 /* SyntaxKind.SourceFile */ ? node.parent : node.parent.parent;
        if (container.kind === 266 /* SyntaxKind.ModuleDeclaration */ && !(0, ts_1.isAmbientModule)(container)) {
            if (node.isExportEquals) {
                error(node, ts_1.Diagnostics.An_export_assignment_cannot_be_used_in_a_namespace);
            }
            else {
                error(node, ts_1.Diagnostics.A_default_export_can_only_be_used_in_an_ECMAScript_style_module);
            }
            return;
        }
        // Grammar checking
        if (!checkGrammarModifiers(node) && (0, ts_1.hasEffectiveModifiers)(node)) {
            grammarErrorOnFirstToken(node, ts_1.Diagnostics.An_export_assignment_cannot_have_modifiers);
        }
        var typeAnnotationNode = (0, ts_1.getEffectiveTypeAnnotationNode)(node);
        if (typeAnnotationNode) {
            checkTypeAssignableTo(checkExpressionCached(node.expression), getTypeFromTypeNode(typeAnnotationNode), node.expression);
        }
        var isIllegalExportDefaultInCJS = !node.isExportEquals &&
            !(node.flags & 16777216 /* NodeFlags.Ambient */) &&
            compilerOptions.verbatimModuleSyntax &&
            (moduleKind === ts_1.ModuleKind.CommonJS || (0, ts_1.getSourceFileOfNode)(node).impliedNodeFormat === ts_1.ModuleKind.CommonJS);
        if (node.expression.kind === 80 /* SyntaxKind.Identifier */) {
            var id = node.expression;
            var sym = getExportSymbolOfValueSymbolIfExported(resolveEntityName(id, 67108863 /* SymbolFlags.All */, /*ignoreErrors*/ true, /*dontResolveAlias*/ true, node));
            if (sym) {
                markAliasReferenced(sym, id);
                // If not a value, we're interpreting the identifier as a type export, along the lines of (`export { Id as default }`)
                if (getAllSymbolFlags(sym) & 111551 /* SymbolFlags.Value */) {
                    // However if it is a value, we need to check it's being used correctly
                    checkExpressionCached(id);
                    if (!isIllegalExportDefaultInCJS && !(node.flags & 16777216 /* NodeFlags.Ambient */) && compilerOptions.verbatimModuleSyntax && getTypeOnlyAliasDeclaration(sym, 111551 /* SymbolFlags.Value */)) {
                        error(id, node.isExportEquals
                            ? ts_1.Diagnostics.An_export_declaration_must_reference_a_real_value_when_verbatimModuleSyntax_is_enabled_but_0_resolves_to_a_type_only_declaration
                            : ts_1.Diagnostics.An_export_default_must_reference_a_real_value_when_verbatimModuleSyntax_is_enabled_but_0_resolves_to_a_type_only_declaration, (0, ts_1.idText)(id));
                    }
                }
                else if (!isIllegalExportDefaultInCJS && !(node.flags & 16777216 /* NodeFlags.Ambient */) && compilerOptions.verbatimModuleSyntax) {
                    error(id, node.isExportEquals
                        ? ts_1.Diagnostics.An_export_declaration_must_reference_a_value_when_verbatimModuleSyntax_is_enabled_but_0_only_refers_to_a_type
                        : ts_1.Diagnostics.An_export_default_must_reference_a_value_when_verbatimModuleSyntax_is_enabled_but_0_only_refers_to_a_type, (0, ts_1.idText)(id));
                }
            }
            else {
                checkExpressionCached(id); // doesn't resolve, check as expression to mark as error
            }
            if ((0, ts_1.getEmitDeclarations)(compilerOptions)) {
                collectLinkedAliases(id, /*setVisibility*/ true);
            }
        }
        else {
            checkExpressionCached(node.expression);
        }
        if (isIllegalExportDefaultInCJS) {
            error(node, ts_1.Diagnostics.ESM_syntax_is_not_allowed_in_a_CommonJS_module_when_verbatimModuleSyntax_is_enabled);
        }
        checkExternalModuleExports(container);
        if ((node.flags & 16777216 /* NodeFlags.Ambient */) && !(0, ts_1.isEntityNameExpression)(node.expression)) {
            grammarErrorOnNode(node.expression, ts_1.Diagnostics.The_expression_of_an_export_assignment_must_be_an_identifier_or_qualified_name_in_an_ambient_context);
        }
        if (node.isExportEquals) {
            // Forbid export= in esm implementation files, and esm mode declaration files
            if (moduleKind >= ts_1.ModuleKind.ES2015 &&
                ((node.flags & 16777216 /* NodeFlags.Ambient */ && (0, ts_1.getSourceFileOfNode)(node).impliedNodeFormat === ts_1.ModuleKind.ESNext) ||
                    (!(node.flags & 16777216 /* NodeFlags.Ambient */) && (0, ts_1.getSourceFileOfNode)(node).impliedNodeFormat !== ts_1.ModuleKind.CommonJS))) {
                // export assignment is not supported in es6 modules
                grammarErrorOnNode(node, ts_1.Diagnostics.Export_assignment_cannot_be_used_when_targeting_ECMAScript_modules_Consider_using_export_default_or_another_module_format_instead);
            }
            else if (moduleKind === ts_1.ModuleKind.System && !(node.flags & 16777216 /* NodeFlags.Ambient */)) {
                // system modules does not support export assignment
                grammarErrorOnNode(node, ts_1.Diagnostics.Export_assignment_is_not_supported_when_module_flag_is_system);
            }
        }
    }
    function hasExportedMembers(moduleSymbol) {
        return (0, ts_1.forEachEntry)(moduleSymbol.exports, function (_, id) { return id !== "export="; });
    }
    function checkExternalModuleExports(node) {
        var moduleSymbol = getSymbolOfDeclaration(node);
        var links = getSymbolLinks(moduleSymbol);
        if (!links.exportsChecked) {
            var exportEqualsSymbol = moduleSymbol.exports.get("export=");
            if (exportEqualsSymbol && hasExportedMembers(moduleSymbol)) {
                var declaration = getDeclarationOfAliasSymbol(exportEqualsSymbol) || exportEqualsSymbol.valueDeclaration;
                if (declaration && !isTopLevelInExternalModuleAugmentation(declaration) && !(0, ts_1.isInJSFile)(declaration)) {
                    error(declaration, ts_1.Diagnostics.An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements);
                }
            }
            // Checks for export * conflicts
            var exports = getExportsOfModule(moduleSymbol);
            if (exports) {
                exports.forEach(function (_a, id) {
                    var declarations = _a.declarations, flags = _a.flags;
                    if (id === "__export") {
                        return;
                    }
                    // ECMA262: 15.2.1.1 It is a Syntax Error if the ExportedNames of ModuleItemList contains any duplicate entries.
                    // (TS Exceptions: namespaces, function overloads, enums, and interfaces)
                    if (flags & (1920 /* SymbolFlags.Namespace */ | 384 /* SymbolFlags.Enum */)) {
                        return;
                    }
                    var exportedDeclarationsCount = (0, ts_1.countWhere)(declarations, (0, ts_1.and)(isNotOverloadAndNotAccessor, (0, ts_1.not)(ts_1.isInterfaceDeclaration)));
                    if (flags & 524288 /* SymbolFlags.TypeAlias */ && exportedDeclarationsCount <= 2) {
                        // it is legal to merge type alias with other values
                        // so count should be either 1 (just type alias) or 2 (type alias + merged value)
                        return;
                    }
                    if (exportedDeclarationsCount > 1) {
                        if (!isDuplicatedCommonJSExport(declarations)) {
                            for (var _i = 0, _b = declarations; _i < _b.length; _i++) {
                                var declaration = _b[_i];
                                if (isNotOverload(declaration)) {
                                    diagnostics.add((0, ts_1.createDiagnosticForNode)(declaration, ts_1.Diagnostics.Cannot_redeclare_exported_variable_0, (0, ts_1.unescapeLeadingUnderscores)(id)));
                                }
                            }
                        }
                    }
                });
            }
            links.exportsChecked = true;
        }
    }
    function isDuplicatedCommonJSExport(declarations) {
        return declarations
            && declarations.length > 1
            && declarations.every(function (d) { return (0, ts_1.isInJSFile)(d) && (0, ts_1.isAccessExpression)(d) && ((0, ts_1.isExportsIdentifier)(d.expression) || (0, ts_1.isModuleExportsAccessExpression)(d.expression)); });
    }
    function checkSourceElement(node) {
        if (node) {
            var saveCurrentNode = currentNode;
            currentNode = node;
            instantiationCount = 0;
            checkSourceElementWorker(node);
            currentNode = saveCurrentNode;
        }
    }
    function checkSourceElementWorker(node) {
        if ((0, ts_1.canHaveJSDoc)(node)) {
            (0, ts_1.forEach)(node.jsDoc, function (_a) {
                var comment = _a.comment, tags = _a.tags;
                checkJSDocCommentWorker(comment);
                (0, ts_1.forEach)(tags, function (tag) {
                    checkJSDocCommentWorker(tag.comment);
                    if ((0, ts_1.isInJSFile)(node)) {
                        checkSourceElement(tag);
                    }
                });
            });
        }
        var kind = node.kind;
        if (cancellationToken) {
            // Only bother checking on a few construct kinds.  We don't want to be excessively
            // hitting the cancellation token on every node we check.
            switch (kind) {
                case 266 /* SyntaxKind.ModuleDeclaration */:
                case 262 /* SyntaxKind.ClassDeclaration */:
                case 263 /* SyntaxKind.InterfaceDeclaration */:
                case 261 /* SyntaxKind.FunctionDeclaration */:
                    cancellationToken.throwIfCancellationRequested();
            }
        }
        if (kind >= 242 /* SyntaxKind.FirstStatement */ && kind <= 258 /* SyntaxKind.LastStatement */ && (0, ts_1.canHaveFlowNode)(node) && node.flowNode && !isReachableFlowNode(node.flowNode)) {
            errorOrSuggestion(compilerOptions.allowUnreachableCode === false, node, ts_1.Diagnostics.Unreachable_code_detected);
        }
        switch (kind) {
            case 167 /* SyntaxKind.TypeParameter */:
                return checkTypeParameter(node);
            case 168 /* SyntaxKind.Parameter */:
                return checkParameter(node);
            case 171 /* SyntaxKind.PropertyDeclaration */:
                return checkPropertyDeclaration(node);
            case 170 /* SyntaxKind.PropertySignature */:
                return checkPropertySignature(node);
            case 184 /* SyntaxKind.ConstructorType */:
            case 183 /* SyntaxKind.FunctionType */:
            case 178 /* SyntaxKind.CallSignature */:
            case 179 /* SyntaxKind.ConstructSignature */:
            case 180 /* SyntaxKind.IndexSignature */:
                return checkSignatureDeclaration(node);
            case 173 /* SyntaxKind.MethodDeclaration */:
            case 172 /* SyntaxKind.MethodSignature */:
                return checkMethodDeclaration(node);
            case 174 /* SyntaxKind.ClassStaticBlockDeclaration */:
                return checkClassStaticBlockDeclaration(node);
            case 175 /* SyntaxKind.Constructor */:
                return checkConstructorDeclaration(node);
            case 176 /* SyntaxKind.GetAccessor */:
            case 177 /* SyntaxKind.SetAccessor */:
                return checkAccessorDeclaration(node);
            case 182 /* SyntaxKind.TypeReference */:
                return checkTypeReferenceNode(node);
            case 181 /* SyntaxKind.TypePredicate */:
                return checkTypePredicate(node);
            case 185 /* SyntaxKind.TypeQuery */:
                return checkTypeQuery(node);
            case 186 /* SyntaxKind.TypeLiteral */:
                return checkTypeLiteral(node);
            case 187 /* SyntaxKind.ArrayType */:
                return checkArrayType(node);
            case 188 /* SyntaxKind.TupleType */:
                return checkTupleType(node);
            case 191 /* SyntaxKind.UnionType */:
            case 192 /* SyntaxKind.IntersectionType */:
                return checkUnionOrIntersectionType(node);
            case 195 /* SyntaxKind.ParenthesizedType */:
            case 189 /* SyntaxKind.OptionalType */:
            case 190 /* SyntaxKind.RestType */:
                return checkSourceElement(node.type);
            case 196 /* SyntaxKind.ThisType */:
                return checkThisType(node);
            case 197 /* SyntaxKind.TypeOperator */:
                return checkTypeOperator(node);
            case 193 /* SyntaxKind.ConditionalType */:
                return checkConditionalType(node);
            case 194 /* SyntaxKind.InferType */:
                return checkInferType(node);
            case 202 /* SyntaxKind.TemplateLiteralType */:
                return checkTemplateLiteralType(node);
            case 204 /* SyntaxKind.ImportType */:
                return checkImportType(node);
            case 201 /* SyntaxKind.NamedTupleMember */:
                return checkNamedTupleMember(node);
            case 334 /* SyntaxKind.JSDocAugmentsTag */:
                return checkJSDocAugmentsTag(node);
            case 335 /* SyntaxKind.JSDocImplementsTag */:
                return checkJSDocImplementsTag(node);
            case 352 /* SyntaxKind.JSDocTypedefTag */:
            case 344 /* SyntaxKind.JSDocCallbackTag */:
            case 346 /* SyntaxKind.JSDocEnumTag */:
                return checkJSDocTypeAliasTag(node);
            case 351 /* SyntaxKind.JSDocTemplateTag */:
                return checkJSDocTemplateTag(node);
            case 350 /* SyntaxKind.JSDocTypeTag */:
                return checkJSDocTypeTag(node);
            case 330 /* SyntaxKind.JSDocLink */:
            case 331 /* SyntaxKind.JSDocLinkCode */:
            case 332 /* SyntaxKind.JSDocLinkPlain */:
                return checkJSDocLinkLikeTag(node);
            case 347 /* SyntaxKind.JSDocParameterTag */:
                return checkJSDocParameterTag(node);
            case 354 /* SyntaxKind.JSDocPropertyTag */:
                return checkJSDocPropertyTag(node);
            case 323 /* SyntaxKind.JSDocFunctionType */:
                checkJSDocFunctionType(node);
            // falls through
            case 321 /* SyntaxKind.JSDocNonNullableType */:
            case 320 /* SyntaxKind.JSDocNullableType */:
            case 318 /* SyntaxKind.JSDocAllType */:
            case 319 /* SyntaxKind.JSDocUnknownType */:
            case 328 /* SyntaxKind.JSDocTypeLiteral */:
                checkJSDocTypeIsInJsFile(node);
                (0, ts_1.forEachChild)(node, checkSourceElement);
                return;
            case 324 /* SyntaxKind.JSDocVariadicType */:
                checkJSDocVariadicType(node);
                return;
            case 315 /* SyntaxKind.JSDocTypeExpression */:
                return checkSourceElement(node.type);
            case 339 /* SyntaxKind.JSDocPublicTag */:
            case 341 /* SyntaxKind.JSDocProtectedTag */:
            case 340 /* SyntaxKind.JSDocPrivateTag */:
                return checkJSDocAccessibilityModifiers(node);
            case 356 /* SyntaxKind.JSDocSatisfiesTag */:
                return checkJSDocSatisfiesTag(node);
            case 198 /* SyntaxKind.IndexedAccessType */:
                return checkIndexedAccessType(node);
            case 199 /* SyntaxKind.MappedType */:
                return checkMappedType(node);
            case 261 /* SyntaxKind.FunctionDeclaration */:
                return checkFunctionDeclaration(node);
            case 240 /* SyntaxKind.Block */:
            case 267 /* SyntaxKind.ModuleBlock */:
                return checkBlock(node);
            case 242 /* SyntaxKind.VariableStatement */:
                return checkVariableStatement(node);
            case 243 /* SyntaxKind.ExpressionStatement */:
                return checkExpressionStatement(node);
            case 244 /* SyntaxKind.IfStatement */:
                return checkIfStatement(node);
            case 245 /* SyntaxKind.DoStatement */:
                return checkDoStatement(node);
            case 246 /* SyntaxKind.WhileStatement */:
                return checkWhileStatement(node);
            case 247 /* SyntaxKind.ForStatement */:
                return checkForStatement(node);
            case 248 /* SyntaxKind.ForInStatement */:
                return checkForInStatement(node);
            case 249 /* SyntaxKind.ForOfStatement */:
                return checkForOfStatement(node);
            case 250 /* SyntaxKind.ContinueStatement */:
            case 251 /* SyntaxKind.BreakStatement */:
                return checkBreakOrContinueStatement(node);
            case 252 /* SyntaxKind.ReturnStatement */:
                return checkReturnStatement(node);
            case 253 /* SyntaxKind.WithStatement */:
                return checkWithStatement(node);
            case 254 /* SyntaxKind.SwitchStatement */:
                return checkSwitchStatement(node);
            case 255 /* SyntaxKind.LabeledStatement */:
                return checkLabeledStatement(node);
            case 256 /* SyntaxKind.ThrowStatement */:
                return checkThrowStatement(node);
            case 257 /* SyntaxKind.TryStatement */:
                return checkTryStatement(node);
            case 259 /* SyntaxKind.VariableDeclaration */:
                return checkVariableDeclaration(node);
            case 207 /* SyntaxKind.BindingElement */:
                return checkBindingElement(node);
            case 262 /* SyntaxKind.ClassDeclaration */:
                return checkClassDeclaration(node);
            case 263 /* SyntaxKind.InterfaceDeclaration */:
                return checkInterfaceDeclaration(node);
            case 264 /* SyntaxKind.TypeAliasDeclaration */:
                return checkTypeAliasDeclaration(node);
            case 265 /* SyntaxKind.EnumDeclaration */:
                return checkEnumDeclaration(node);
            case 266 /* SyntaxKind.ModuleDeclaration */:
                return checkModuleDeclaration(node);
            case 271 /* SyntaxKind.ImportDeclaration */:
                return checkImportDeclaration(node);
            case 270 /* SyntaxKind.ImportEqualsDeclaration */:
                return checkImportEqualsDeclaration(node);
            case 277 /* SyntaxKind.ExportDeclaration */:
                return checkExportDeclaration(node);
            case 276 /* SyntaxKind.ExportAssignment */:
                return checkExportAssignment(node);
            case 241 /* SyntaxKind.EmptyStatement */:
            case 258 /* SyntaxKind.DebuggerStatement */:
                checkGrammarStatementInAmbientContext(node);
                return;
            case 281 /* SyntaxKind.MissingDeclaration */:
                return checkMissingDeclaration(node);
        }
    }
    function checkJSDocCommentWorker(node) {
        if ((0, ts_1.isArray)(node)) {
            (0, ts_1.forEach)(node, function (tag) {
                if ((0, ts_1.isJSDocLinkLike)(tag)) {
                    checkSourceElement(tag);
                }
            });
        }
    }
    function checkJSDocTypeIsInJsFile(node) {
        if (!(0, ts_1.isInJSFile)(node)) {
            if ((0, ts_1.isJSDocNonNullableType)(node) || (0, ts_1.isJSDocNullableType)(node)) {
                var token = (0, ts_1.tokenToString)((0, ts_1.isJSDocNonNullableType)(node) ? 54 /* SyntaxKind.ExclamationToken */ : 58 /* SyntaxKind.QuestionToken */);
                var diagnostic = node.postfix
                    ? ts_1.Diagnostics._0_at_the_end_of_a_type_is_not_valid_TypeScript_syntax_Did_you_mean_to_write_1
                    : ts_1.Diagnostics._0_at_the_start_of_a_type_is_not_valid_TypeScript_syntax_Did_you_mean_to_write_1;
                var typeNode = node.type;
                var type = getTypeFromTypeNode(typeNode);
                grammarErrorOnNode(node, diagnostic, token, typeToString((0, ts_1.isJSDocNullableType)(node) && !(type === neverType || type === voidType)
                    ? getUnionType((0, ts_1.append)([type, undefinedType], node.postfix ? undefined : nullType)) : type));
            }
            else {
                grammarErrorOnNode(node, ts_1.Diagnostics.JSDoc_types_can_only_be_used_inside_documentation_comments);
            }
        }
    }
    function checkJSDocVariadicType(node) {
        checkJSDocTypeIsInJsFile(node);
        checkSourceElement(node.type);
        // Only legal location is in the *last* parameter tag or last parameter of a JSDoc function.
        var parent = node.parent;
        if ((0, ts_1.isParameter)(parent) && (0, ts_1.isJSDocFunctionType)(parent.parent)) {
            if ((0, ts_1.last)(parent.parent.parameters) !== parent) {
                error(node, ts_1.Diagnostics.A_rest_parameter_must_be_last_in_a_parameter_list);
            }
            return;
        }
        if (!(0, ts_1.isJSDocTypeExpression)(parent)) {
            error(node, ts_1.Diagnostics.JSDoc_may_only_appear_in_the_last_parameter_of_a_signature);
        }
        var paramTag = node.parent.parent;
        if (!(0, ts_1.isJSDocParameterTag)(paramTag)) {
            error(node, ts_1.Diagnostics.JSDoc_may_only_appear_in_the_last_parameter_of_a_signature);
            return;
        }
        var param = (0, ts_1.getParameterSymbolFromJSDoc)(paramTag);
        if (!param) {
            // We will error in `checkJSDocParameterTag`.
            return;
        }
        var host = (0, ts_1.getHostSignatureFromJSDoc)(paramTag);
        if (!host || (0, ts_1.last)(host.parameters).symbol !== param) {
            error(node, ts_1.Diagnostics.A_rest_parameter_must_be_last_in_a_parameter_list);
        }
    }
    function getTypeFromJSDocVariadicType(node) {
        var type = getTypeFromTypeNode(node.type);
        var parent = node.parent;
        var paramTag = node.parent.parent;
        if ((0, ts_1.isJSDocTypeExpression)(node.parent) && (0, ts_1.isJSDocParameterTag)(paramTag)) {
            // Else we will add a diagnostic, see `checkJSDocVariadicType`.
            var host_1 = (0, ts_1.getHostSignatureFromJSDoc)(paramTag);
            var isCallbackTag = (0, ts_1.isJSDocCallbackTag)(paramTag.parent.parent);
            if (host_1 || isCallbackTag) {
                /*
                Only return an array type if the corresponding parameter is marked as a rest parameter, or if there are no parameters.
                So in the following situation we will not create an array type:
                    /** @param {...number} a * /
                    function f(a) {}
                Because `a` will just be of type `number | undefined`. A synthetic `...args` will also be added, which *will* get an array type.
                */
                var lastParamDeclaration = isCallbackTag
                    ? (0, ts_1.lastOrUndefined)(paramTag.parent.parent.typeExpression.parameters)
                    : (0, ts_1.lastOrUndefined)(host_1.parameters);
                var symbol = (0, ts_1.getParameterSymbolFromJSDoc)(paramTag);
                if (!lastParamDeclaration ||
                    symbol && lastParamDeclaration.symbol === symbol && (0, ts_1.isRestParameter)(lastParamDeclaration)) {
                    return createArrayType(type);
                }
            }
        }
        if ((0, ts_1.isParameter)(parent) && (0, ts_1.isJSDocFunctionType)(parent.parent)) {
            return createArrayType(type);
        }
        return addOptionality(type);
    }
    // Function and class expression bodies are checked after all statements in the enclosing body. This is
    // to ensure constructs like the following are permitted:
    //     const foo = function () {
    //        const s = foo();
    //        return "hello";
    //     }
    // Here, performing a full type check of the body of the function expression whilst in the process of
    // determining the type of foo would cause foo to be given type any because of the recursive reference.
    // Delaying the type check of the body ensures foo has been assigned a type.
    function checkNodeDeferred(node) {
        var enclosingFile = (0, ts_1.getSourceFileOfNode)(node);
        var links = getNodeLinks(enclosingFile);
        if (!(links.flags & 1 /* NodeCheckFlags.TypeChecked */)) {
            links.deferredNodes || (links.deferredNodes = new Set());
            links.deferredNodes.add(node);
        }
        else {
            ts_1.Debug.assert(!links.deferredNodes, "A type-checked file should have no deferred nodes.");
        }
    }
    function checkDeferredNodes(context) {
        var links = getNodeLinks(context);
        if (links.deferredNodes) {
            links.deferredNodes.forEach(checkDeferredNode);
        }
        links.deferredNodes = undefined;
    }
    function checkDeferredNode(node) {
        ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.push("check" /* tracing.Phase.Check */, "checkDeferredNode", { kind: node.kind, pos: node.pos, end: node.end, path: node.tracingPath });
        var saveCurrentNode = currentNode;
        currentNode = node;
        instantiationCount = 0;
        switch (node.kind) {
            case 212 /* SyntaxKind.CallExpression */:
            case 213 /* SyntaxKind.NewExpression */:
            case 214 /* SyntaxKind.TaggedTemplateExpression */:
            case 169 /* SyntaxKind.Decorator */:
            case 285 /* SyntaxKind.JsxOpeningElement */:
                // These node kinds are deferred checked when overload resolution fails
                // To save on work, we ensure the arguments are checked just once, in
                // a deferred way
                resolveUntypedCall(node);
                break;
            case 217 /* SyntaxKind.FunctionExpression */:
            case 218 /* SyntaxKind.ArrowFunction */:
            case 173 /* SyntaxKind.MethodDeclaration */:
            case 172 /* SyntaxKind.MethodSignature */:
                checkFunctionExpressionOrObjectLiteralMethodDeferred(node);
                break;
            case 176 /* SyntaxKind.GetAccessor */:
            case 177 /* SyntaxKind.SetAccessor */:
                checkAccessorDeclaration(node);
                break;
            case 230 /* SyntaxKind.ClassExpression */:
                checkClassExpressionDeferred(node);
                break;
            case 167 /* SyntaxKind.TypeParameter */:
                checkTypeParameterDeferred(node);
                break;
            case 284 /* SyntaxKind.JsxSelfClosingElement */:
                checkJsxSelfClosingElementDeferred(node);
                break;
            case 283 /* SyntaxKind.JsxElement */:
                checkJsxElementDeferred(node);
                break;
            case 215 /* SyntaxKind.TypeAssertionExpression */:
            case 233 /* SyntaxKind.AsExpression */:
            case 216 /* SyntaxKind.ParenthesizedExpression */:
                checkAssertionDeferred(node);
        }
        currentNode = saveCurrentNode;
        ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.pop();
    }
    function checkSourceFile(node) {
        ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.push("check" /* tracing.Phase.Check */, "checkSourceFile", { path: node.path }, /*separateBeginAndEnd*/ true);
        performance.mark("beforeCheck");
        checkSourceFileWorker(node);
        performance.mark("afterCheck");
        performance.measure("Check", "beforeCheck", "afterCheck");
        ts_1.tracing === null || ts_1.tracing === void 0 ? void 0 : ts_1.tracing.pop();
    }
    function unusedIsError(kind, isAmbient) {
        if (isAmbient) {
            return false;
        }
        switch (kind) {
            case 0 /* UnusedKind.Local */:
                return !!compilerOptions.noUnusedLocals;
            case 1 /* UnusedKind.Parameter */:
                return !!compilerOptions.noUnusedParameters;
            default:
                return ts_1.Debug.assertNever(kind);
        }
    }
    function getPotentiallyUnusedIdentifiers(sourceFile) {
        return allPotentiallyUnusedIdentifiers.get(sourceFile.path) || ts_1.emptyArray;
    }
    // Fully type check a source file and collect the relevant diagnostics.
    function checkSourceFileWorker(node) {
        var links = getNodeLinks(node);
        if (!(links.flags & 1 /* NodeCheckFlags.TypeChecked */)) {
            if ((0, ts_1.skipTypeChecking)(node, compilerOptions, host)) {
                return;
            }
            // Grammar checking
            checkGrammarSourceFile(node);
            (0, ts_1.clear)(potentialThisCollisions);
            (0, ts_1.clear)(potentialNewTargetCollisions);
            (0, ts_1.clear)(potentialWeakMapSetCollisions);
            (0, ts_1.clear)(potentialReflectCollisions);
            (0, ts_1.clear)(potentialUnusedRenamedBindingElementsInTypes);
            (0, ts_1.forEach)(node.statements, checkSourceElement);
            checkSourceElement(node.endOfFileToken);
            checkDeferredNodes(node);
            if ((0, ts_1.isExternalOrCommonJsModule)(node)) {
                registerForUnusedIdentifiersCheck(node);
            }
            addLazyDiagnostic(function () {
                // This relies on the results of other lazy diagnostics, so must be computed after them
                if (!node.isDeclarationFile && (compilerOptions.noUnusedLocals || compilerOptions.noUnusedParameters)) {
                    checkUnusedIdentifiers(getPotentiallyUnusedIdentifiers(node), function (containingNode, kind, diag) {
                        if (!(0, ts_1.containsParseError)(containingNode) && unusedIsError(kind, !!(containingNode.flags & 16777216 /* NodeFlags.Ambient */))) {
                            diagnostics.add(diag);
                        }
                    });
                }
                if (!node.isDeclarationFile) {
                    checkPotentialUncheckedRenamedBindingElementsInTypes();
                }
            });
            if (compilerOptions.importsNotUsedAsValues === 2 /* ImportsNotUsedAsValues.Error */ &&
                !node.isDeclarationFile &&
                (0, ts_1.isExternalModule)(node)) {
                checkImportsForTypeOnlyConversion(node);
            }
            if ((0, ts_1.isExternalOrCommonJsModule)(node)) {
                checkExternalModuleExports(node);
            }
            if (potentialThisCollisions.length) {
                (0, ts_1.forEach)(potentialThisCollisions, checkIfThisIsCapturedInEnclosingScope);
                (0, ts_1.clear)(potentialThisCollisions);
            }
            if (potentialNewTargetCollisions.length) {
                (0, ts_1.forEach)(potentialNewTargetCollisions, checkIfNewTargetIsCapturedInEnclosingScope);
                (0, ts_1.clear)(potentialNewTargetCollisions);
            }
            if (potentialWeakMapSetCollisions.length) {
                (0, ts_1.forEach)(potentialWeakMapSetCollisions, checkWeakMapSetCollision);
                (0, ts_1.clear)(potentialWeakMapSetCollisions);
            }
            if (potentialReflectCollisions.length) {
                (0, ts_1.forEach)(potentialReflectCollisions, checkReflectCollision);
                (0, ts_1.clear)(potentialReflectCollisions);
            }
            links.flags |= 1 /* NodeCheckFlags.TypeChecked */;
        }
    }
    function getDiagnostics(sourceFile, ct) {
        try {
            // Record the cancellation token so it can be checked later on during checkSourceElement.
            // Do this in a finally block so we can ensure that it gets reset back to nothing after
            // this call is done.
            cancellationToken = ct;
            return getDiagnosticsWorker(sourceFile);
        }
        finally {
            cancellationToken = undefined;
        }
    }
    function ensurePendingDiagnosticWorkComplete() {
        // Invoke any existing lazy diagnostics to add them, clear the backlog of diagnostics
        for (var _i = 0, deferredDiagnosticsCallbacks_1 = deferredDiagnosticsCallbacks; _i < deferredDiagnosticsCallbacks_1.length; _i++) {
            var cb = deferredDiagnosticsCallbacks_1[_i];
            cb();
        }
        deferredDiagnosticsCallbacks = [];
    }
    function checkSourceFileWithEagerDiagnostics(sourceFile) {
        ensurePendingDiagnosticWorkComplete();
        // then setup diagnostics for immediate invocation (as we are about to collect them, and
        // this avoids the overhead of longer-lived callbacks we don't need to allocate)
        // This also serves to make the shift to possibly lazy diagnostics transparent to serial command-line scenarios
        // (as in those cases, all the diagnostics will still be computed as the appropriate place in the tree,
        // thus much more likely retaining the same union ordering as before we had lazy diagnostics)
        var oldAddLazyDiagnostics = addLazyDiagnostic;
        addLazyDiagnostic = function (cb) { return cb(); };
        checkSourceFile(sourceFile);
        addLazyDiagnostic = oldAddLazyDiagnostics;
    }
    function getDiagnosticsWorker(sourceFile) {
        if (sourceFile) {
            ensurePendingDiagnosticWorkComplete();
            // Some global diagnostics are deferred until they are needed and
            // may not be reported in the first call to getGlobalDiagnostics.
            // We should catch these changes and report them.
            var previousGlobalDiagnostics = diagnostics.getGlobalDiagnostics();
            var previousGlobalDiagnosticsSize = previousGlobalDiagnostics.length;
            checkSourceFileWithEagerDiagnostics(sourceFile);
            var semanticDiagnostics = diagnostics.getDiagnostics(sourceFile.fileName);
            var currentGlobalDiagnostics = diagnostics.getGlobalDiagnostics();
            if (currentGlobalDiagnostics !== previousGlobalDiagnostics) {
                // If the arrays are not the same reference, new diagnostics were added.
                var deferredGlobalDiagnostics = (0, ts_1.relativeComplement)(previousGlobalDiagnostics, currentGlobalDiagnostics, ts_1.compareDiagnostics);
                return (0, ts_1.concatenate)(deferredGlobalDiagnostics, semanticDiagnostics);
            }
            else if (previousGlobalDiagnosticsSize === 0 && currentGlobalDiagnostics.length > 0) {
                // If the arrays are the same reference, but the length has changed, a single
                // new diagnostic was added as DiagnosticCollection attempts to reuse the
                // same array.
                return (0, ts_1.concatenate)(currentGlobalDiagnostics, semanticDiagnostics);
            }
            return semanticDiagnostics;
        }
        // Global diagnostics are always added when a file is not provided to
        // getDiagnostics
        (0, ts_1.forEach)(host.getSourceFiles(), checkSourceFileWithEagerDiagnostics);
        return diagnostics.getDiagnostics();
    }
    function getGlobalDiagnostics() {
        ensurePendingDiagnosticWorkComplete();
        return diagnostics.getGlobalDiagnostics();
    }
    // Language service support
    function getSymbolsInScope(location, meaning) {
        if (location.flags & 33554432 /* NodeFlags.InWithStatement */) {
            // We cannot answer semantic questions within a with block, do not proceed any further
            return [];
        }
        var symbols = (0, ts_1.createSymbolTable)();
        var isStaticSymbol = false;
        populateSymbols();
        symbols.delete("this" /* InternalSymbolName.This */); // Not a symbol, a keyword
        return symbolsToArray(symbols);
        function populateSymbols() {
            while (location) {
                if ((0, ts_1.canHaveLocals)(location) && location.locals && !isGlobalSourceFile(location)) {
                    copySymbols(location.locals, meaning);
                }
                switch (location.kind) {
                    case 311 /* SyntaxKind.SourceFile */:
                        if (!(0, ts_1.isExternalModule)(location))
                            break;
                    // falls through
                    case 266 /* SyntaxKind.ModuleDeclaration */:
                        copyLocallyVisibleExportSymbols(getSymbolOfDeclaration(location).exports, meaning & 2623475 /* SymbolFlags.ModuleMember */);
                        break;
                    case 265 /* SyntaxKind.EnumDeclaration */:
                        copySymbols(getSymbolOfDeclaration(location).exports, meaning & 8 /* SymbolFlags.EnumMember */);
                        break;
                    case 230 /* SyntaxKind.ClassExpression */:
                        var className = location.name;
                        if (className) {
                            copySymbol(location.symbol, meaning);
                        }
                    // this fall-through is necessary because we would like to handle
                    // type parameter inside class expression similar to how we handle it in classDeclaration and interface Declaration.
                    // falls through
                    case 262 /* SyntaxKind.ClassDeclaration */:
                    case 263 /* SyntaxKind.InterfaceDeclaration */:
                        // If we didn't come from static member of class or interface,
                        // add the type parameters into the symbol table
                        // (type parameters of classDeclaration/classExpression and interface are in member property of the symbol.
                        // Note: that the memberFlags come from previous iteration.
                        if (!isStaticSymbol) {
                            copySymbols(getMembersOfSymbol(getSymbolOfDeclaration(location)), meaning & 788968 /* SymbolFlags.Type */);
                        }
                        break;
                    case 217 /* SyntaxKind.FunctionExpression */:
                        var funcName = location.name;
                        if (funcName) {
                            copySymbol(location.symbol, meaning);
                        }
                        break;
                }
                if ((0, ts_1.introducesArgumentsExoticObject)(location)) {
                    copySymbol(argumentsSymbol, meaning);
                }
                isStaticSymbol = (0, ts_1.isStatic)(location);
                location = location.parent;
            }
            copySymbols(globals, meaning);
        }
        /**
         * Copy the given symbol into symbol tables if the symbol has the given meaning
         * and it doesn't already existed in the symbol table
         * @param key a key for storing in symbol table; if undefined, use symbol.name
         * @param symbol the symbol to be added into symbol table
         * @param meaning meaning of symbol to filter by before adding to symbol table
         */
        function copySymbol(symbol, meaning) {
            if ((0, ts_1.getCombinedLocalAndExportSymbolFlags)(symbol) & meaning) {
                var id = symbol.escapedName;
                // We will copy all symbol regardless of its reserved name because
                // symbolsToArray will check whether the key is a reserved name and
                // it will not copy symbol with reserved name to the array
                if (!symbols.has(id)) {
                    symbols.set(id, symbol);
                }
            }
        }
        function copySymbols(source, meaning) {
            if (meaning) {
                source.forEach(function (symbol) {
                    copySymbol(symbol, meaning);
                });
            }
        }
        function copyLocallyVisibleExportSymbols(source, meaning) {
            if (meaning) {
                source.forEach(function (symbol) {
                    // Similar condition as in `resolveNameHelper`
                    if (!(0, ts_1.getDeclarationOfKind)(symbol, 280 /* SyntaxKind.ExportSpecifier */) && !(0, ts_1.getDeclarationOfKind)(symbol, 279 /* SyntaxKind.NamespaceExport */)) {
                        copySymbol(symbol, meaning);
                    }
                });
            }
        }
    }
    function isTypeDeclarationName(name) {
        return name.kind === 80 /* SyntaxKind.Identifier */ &&
            (0, ts_1.isTypeDeclaration)(name.parent) &&
            (0, ts_1.getNameOfDeclaration)(name.parent) === name;
    }
    // True if the given identifier is part of a type reference
    function isTypeReferenceIdentifier(node) {
        while (node.parent.kind === 165 /* SyntaxKind.QualifiedName */) {
            node = node.parent;
        }
        return node.parent.kind === 182 /* SyntaxKind.TypeReference */;
    }
    function isInNameOfExpressionWithTypeArguments(node) {
        while (node.parent.kind === 210 /* SyntaxKind.PropertyAccessExpression */) {
            node = node.parent;
        }
        return node.parent.kind === 232 /* SyntaxKind.ExpressionWithTypeArguments */;
    }
    function forEachEnclosingClass(node, callback) {
        var result;
        var containingClass = (0, ts_1.getContainingClass)(node);
        while (containingClass) {
            if (result = callback(containingClass))
                break;
            containingClass = (0, ts_1.getContainingClass)(containingClass);
        }
        return result;
    }
    function isNodeUsedDuringClassInitialization(node) {
        return !!(0, ts_1.findAncestor)(node, function (element) {
            if ((0, ts_1.isConstructorDeclaration)(element) && (0, ts_1.nodeIsPresent)(element.body) || (0, ts_1.isPropertyDeclaration)(element)) {
                return true;
            }
            else if ((0, ts_1.isClassLike)(element) || (0, ts_1.isFunctionLikeDeclaration)(element)) {
                return "quit";
            }
            return false;
        });
    }
    function isNodeWithinClass(node, classDeclaration) {
        return !!forEachEnclosingClass(node, function (n) { return n === classDeclaration; });
    }
    function getLeftSideOfImportEqualsOrExportAssignment(nodeOnRightSide) {
        while (nodeOnRightSide.parent.kind === 165 /* SyntaxKind.QualifiedName */) {
            nodeOnRightSide = nodeOnRightSide.parent;
        }
        if (nodeOnRightSide.parent.kind === 270 /* SyntaxKind.ImportEqualsDeclaration */) {
            return nodeOnRightSide.parent.moduleReference === nodeOnRightSide ? nodeOnRightSide.parent : undefined;
        }
        if (nodeOnRightSide.parent.kind === 276 /* SyntaxKind.ExportAssignment */) {
            return nodeOnRightSide.parent.expression === nodeOnRightSide ? nodeOnRightSide.parent : undefined;
        }
        return undefined;
    }
    function isInRightSideOfImportOrExportAssignment(node) {
        return getLeftSideOfImportEqualsOrExportAssignment(node) !== undefined;
    }
    function getSpecialPropertyAssignmentSymbolFromEntityName(entityName) {
        var specialPropertyAssignmentKind = (0, ts_1.getAssignmentDeclarationKind)(entityName.parent.parent);
        switch (specialPropertyAssignmentKind) {
            case 1 /* AssignmentDeclarationKind.ExportsProperty */:
            case 3 /* AssignmentDeclarationKind.PrototypeProperty */:
                return getSymbolOfNode(entityName.parent);
            case 4 /* AssignmentDeclarationKind.ThisProperty */:
            case 2 /* AssignmentDeclarationKind.ModuleExports */:
            case 5 /* AssignmentDeclarationKind.Property */:
                return getSymbolOfDeclaration(entityName.parent.parent);
        }
    }
    function isImportTypeQualifierPart(node) {
        var parent = node.parent;
        while ((0, ts_1.isQualifiedName)(parent)) {
            node = parent;
            parent = parent.parent;
        }
        if (parent && parent.kind === 204 /* SyntaxKind.ImportType */ && parent.qualifier === node) {
            return parent;
        }
        return undefined;
    }
    function isThisPropertyAndThisTyped(node) {
        if (node.expression.kind === 110 /* SyntaxKind.ThisKeyword */) {
            var container = (0, ts_1.getThisContainer)(node, /*includeArrowFunctions*/ false, /*includeClassComputedPropertyName*/ false);
            if ((0, ts_1.isFunctionLike)(container)) {
                var containingLiteral = getContainingObjectLiteral(container);
                if (containingLiteral) {
                    var contextualType = getApparentTypeOfContextualType(containingLiteral, /*contextFlags*/ undefined);
                    var type = getThisTypeOfObjectLiteralFromContextualType(containingLiteral, contextualType);
                    return type && !isTypeAny(type);
                }
            }
        }
    }
    function getSymbolOfNameOrPropertyAccessExpression(name) {
        if ((0, ts_1.isDeclarationName)(name)) {
            return getSymbolOfNode(name.parent);
        }
        if ((0, ts_1.isInJSFile)(name) &&
            name.parent.kind === 210 /* SyntaxKind.PropertyAccessExpression */ &&
            name.parent === name.parent.parent.left) {
            // Check if this is a special property assignment
            if (!(0, ts_1.isPrivateIdentifier)(name) && !(0, ts_1.isJSDocMemberName)(name) && !isThisPropertyAndThisTyped(name.parent)) {
                var specialPropertyAssignmentSymbol = getSpecialPropertyAssignmentSymbolFromEntityName(name);
                if (specialPropertyAssignmentSymbol) {
                    return specialPropertyAssignmentSymbol;
                }
            }
        }
        if (name.parent.kind === 276 /* SyntaxKind.ExportAssignment */ && (0, ts_1.isEntityNameExpression)(name)) {
            // Even an entity name expression that doesn't resolve as an entityname may still typecheck as a property access expression
            var success = resolveEntityName(name, 
            /*all meanings*/ 111551 /* SymbolFlags.Value */ | 788968 /* SymbolFlags.Type */ | 1920 /* SymbolFlags.Namespace */ | 2097152 /* SymbolFlags.Alias */, /*ignoreErrors*/ true);
            if (success && success !== unknownSymbol) {
                return success;
            }
        }
        else if ((0, ts_1.isEntityName)(name) && isInRightSideOfImportOrExportAssignment(name)) {
            // Since we already checked for ExportAssignment, this really could only be an Import
            var importEqualsDeclaration = (0, ts_1.getAncestor)(name, 270 /* SyntaxKind.ImportEqualsDeclaration */);
            ts_1.Debug.assert(importEqualsDeclaration !== undefined);
            return getSymbolOfPartOfRightHandSideOfImportEquals(name, /*dontResolveAlias*/ true);
        }
        if ((0, ts_1.isEntityName)(name)) {
            var possibleImportNode = isImportTypeQualifierPart(name);
            if (possibleImportNode) {
                getTypeFromTypeNode(possibleImportNode);
                var sym = getNodeLinks(name).resolvedSymbol;
                return sym === unknownSymbol ? undefined : sym;
            }
        }
        while ((0, ts_1.isRightSideOfQualifiedNameOrPropertyAccessOrJSDocMemberName)(name)) {
            name = name.parent;
        }
        if (isInNameOfExpressionWithTypeArguments(name)) {
            var meaning = 0 /* SymbolFlags.None */;
            if (name.parent.kind === 232 /* SyntaxKind.ExpressionWithTypeArguments */) {
                // An 'ExpressionWithTypeArguments' may appear in type space (interface Foo extends Bar<T>),
                // value space (return foo<T>), or both(class Foo extends Bar<T>); ensure the meaning matches.
                meaning = (0, ts_1.isPartOfTypeNode)(name) ? 788968 /* SymbolFlags.Type */ : 111551 /* SymbolFlags.Value */;
                // In a class 'extends' clause we are also looking for a value.
                if ((0, ts_1.isExpressionWithTypeArgumentsInClassExtendsClause)(name.parent)) {
                    meaning |= 111551 /* SymbolFlags.Value */;
                }
            }
            else {
                meaning = 1920 /* SymbolFlags.Namespace */;
            }
            meaning |= 2097152 /* SymbolFlags.Alias */;
            var entityNameSymbol = (0, ts_1.isEntityNameExpression)(name) ? resolveEntityName(name, meaning, /*ignoreErrors*/ true) : undefined;
            if (entityNameSymbol) {
                return entityNameSymbol;
            }
        }
        if (name.parent.kind === 347 /* SyntaxKind.JSDocParameterTag */) {
            return (0, ts_1.getParameterSymbolFromJSDoc)(name.parent);
        }
        if (name.parent.kind === 167 /* SyntaxKind.TypeParameter */ && name.parent.parent.kind === 351 /* SyntaxKind.JSDocTemplateTag */) {
            ts_1.Debug.assert(!(0, ts_1.isInJSFile)(name)); // Otherwise `isDeclarationName` would have been true.
            var typeParameter = (0, ts_1.getTypeParameterFromJsDoc)(name.parent);
            return typeParameter && typeParameter.symbol;
        }
        if ((0, ts_1.isExpressionNode)(name)) {
            if ((0, ts_1.nodeIsMissing)(name)) {
                // Missing entity name.
                return undefined;
            }
            var isJSDoc = (0, ts_1.findAncestor)(name, (0, ts_1.or)(ts_1.isJSDocLinkLike, ts_1.isJSDocNameReference, ts_1.isJSDocMemberName));
            var meaning = isJSDoc ? 788968 /* SymbolFlags.Type */ | 1920 /* SymbolFlags.Namespace */ | 111551 /* SymbolFlags.Value */ : 111551 /* SymbolFlags.Value */;
            if (name.kind === 80 /* SyntaxKind.Identifier */) {
                if ((0, ts_1.isJSXTagName)(name) && isJsxIntrinsicTagName(name)) {
                    var symbol = getIntrinsicTagSymbol(name.parent);
                    return symbol === unknownSymbol ? undefined : symbol;
                }
                var result = resolveEntityName(name, meaning, /*ignoreErrors*/ true, /*dontResolveAlias*/ true, (0, ts_1.getHostSignatureFromJSDoc)(name));
                if (!result && isJSDoc) {
                    var container = (0, ts_1.findAncestor)(name, (0, ts_1.or)(ts_1.isClassLike, ts_1.isInterfaceDeclaration));
                    if (container) {
                        return resolveJSDocMemberName(name, /*ignoreErrors*/ true, getSymbolOfDeclaration(container));
                    }
                }
                if (result && isJSDoc) {
                    var container = (0, ts_1.getJSDocHost)(name);
                    if (container && (0, ts_1.isEnumMember)(container) && container === result.valueDeclaration) {
                        return resolveEntityName(name, meaning, /*ignoreErrors*/ true, /*dontResolveAlias*/ true, (0, ts_1.getSourceFileOfNode)(container)) || result;
                    }
                }
                return result;
            }
            else if ((0, ts_1.isPrivateIdentifier)(name)) {
                return getSymbolForPrivateIdentifierExpression(name);
            }
            else if (name.kind === 210 /* SyntaxKind.PropertyAccessExpression */ || name.kind === 165 /* SyntaxKind.QualifiedName */) {
                var links = getNodeLinks(name);
                if (links.resolvedSymbol) {
                    return links.resolvedSymbol;
                }
                if (name.kind === 210 /* SyntaxKind.PropertyAccessExpression */) {
                    checkPropertyAccessExpression(name, 0 /* CheckMode.Normal */);
                    if (!links.resolvedSymbol) {
                        var expressionType = checkExpressionCached(name.expression);
                        var infos = getApplicableIndexInfos(expressionType, getLiteralTypeFromPropertyName(name.name));
                        if (infos.length && expressionType.members) {
                            var resolved = resolveStructuredTypeMembers(expressionType);
                            var symbol = resolved.members.get("__index" /* InternalSymbolName.Index */);
                            if (infos === getIndexInfosOfType(expressionType)) {
                                links.resolvedSymbol = symbol;
                            }
                            else if (symbol) {
                                var symbolLinks_1 = getSymbolLinks(symbol);
                                var declarationList = (0, ts_1.mapDefined)(infos, function (i) { return i.declaration; });
                                var nodeListId = (0, ts_1.map)(declarationList, getNodeId).join(",");
                                if (!symbolLinks_1.filteredIndexSymbolCache) {
                                    symbolLinks_1.filteredIndexSymbolCache = new Map();
                                }
                                if (symbolLinks_1.filteredIndexSymbolCache.has(nodeListId)) {
                                    links.resolvedSymbol = symbolLinks_1.filteredIndexSymbolCache.get(nodeListId);
                                }
                                else {
                                    var copy = createSymbol(131072 /* SymbolFlags.Signature */, "__index" /* InternalSymbolName.Index */);
                                    copy.declarations = (0, ts_1.mapDefined)(infos, function (i) { return i.declaration; });
                                    copy.parent = expressionType.aliasSymbol ? expressionType.aliasSymbol : expressionType.symbol ? expressionType.symbol : getSymbolAtLocation(copy.declarations[0].parent);
                                    symbolLinks_1.filteredIndexSymbolCache.set(nodeListId, copy);
                                    links.resolvedSymbol = symbolLinks_1.filteredIndexSymbolCache.get(nodeListId);
                                }
                            }
                        }
                    }
                }
                else {
                    checkQualifiedName(name, 0 /* CheckMode.Normal */);
                }
                if (!links.resolvedSymbol && isJSDoc && (0, ts_1.isQualifiedName)(name)) {
                    return resolveJSDocMemberName(name);
                }
                return links.resolvedSymbol;
            }
            else if ((0, ts_1.isJSDocMemberName)(name)) {
                return resolveJSDocMemberName(name);
            }
        }
        else if (isTypeReferenceIdentifier(name)) {
            var meaning = name.parent.kind === 182 /* SyntaxKind.TypeReference */ ? 788968 /* SymbolFlags.Type */ : 1920 /* SymbolFlags.Namespace */;
            var symbol = resolveEntityName(name, meaning, /*ignoreErrors*/ false, /*dontResolveAlias*/ true);
            return symbol && symbol !== unknownSymbol ? symbol : getUnresolvedSymbolForEntityName(name);
        }
        if (name.parent.kind === 181 /* SyntaxKind.TypePredicate */) {
            return resolveEntityName(name, /*meaning*/ 1 /* SymbolFlags.FunctionScopedVariable */);
        }
        return undefined;
    }
    /**
     * Recursively resolve entity names and jsdoc instance references:
     * 1. K#m as K.prototype.m for a class (or other value) K
     * 2. K.m as K.prototype.m
     * 3. I.m as I.m for a type I, or any other I.m that fails to resolve in (1) or (2)
     *
     * For unqualified names, a container K may be provided as a second argument.
     */
    function resolveJSDocMemberName(name, ignoreErrors, container) {
        if ((0, ts_1.isEntityName)(name)) {
            // resolve static values first
            var meaning = 788968 /* SymbolFlags.Type */ | 1920 /* SymbolFlags.Namespace */ | 111551 /* SymbolFlags.Value */;
            var symbol = resolveEntityName(name, meaning, ignoreErrors, /*dontResolveAlias*/ true, (0, ts_1.getHostSignatureFromJSDoc)(name));
            if (!symbol && (0, ts_1.isIdentifier)(name) && container) {
                symbol = getMergedSymbol(getSymbol(getExportsOfSymbol(container), name.escapedText, meaning));
            }
            if (symbol) {
                return symbol;
            }
        }
        var left = (0, ts_1.isIdentifier)(name) ? container : resolveJSDocMemberName(name.left, ignoreErrors, container);
        var right = (0, ts_1.isIdentifier)(name) ? name.escapedText : name.right.escapedText;
        if (left) {
            var proto = left.flags & 111551 /* SymbolFlags.Value */ && getPropertyOfType(getTypeOfSymbol(left), "prototype");
            var t = proto ? getTypeOfSymbol(proto) : getDeclaredTypeOfSymbol(left);
            return getPropertyOfType(t, right);
        }
    }
    function getSymbolAtLocation(node, ignoreErrors) {
        if ((0, ts_1.isSourceFile)(node)) {
            return (0, ts_1.isExternalModule)(node) ? getMergedSymbol(node.symbol) : undefined;
        }
        var parent = node.parent;
        var grandParent = parent.parent;
        if (node.flags & 33554432 /* NodeFlags.InWithStatement */) {
            // We cannot answer semantic questions within a with block, do not proceed any further
            return undefined;
        }
        if (isDeclarationNameOrImportPropertyName(node)) {
            // This is a declaration, call getSymbolOfNode
            var parentSymbol = getSymbolOfDeclaration(parent);
            return (0, ts_1.isImportOrExportSpecifier)(node.parent) && node.parent.propertyName === node
                ? getImmediateAliasedSymbol(parentSymbol)
                : parentSymbol;
        }
        else if ((0, ts_1.isLiteralComputedPropertyDeclarationName)(node)) {
            return getSymbolOfDeclaration(parent.parent);
        }
        if (node.kind === 80 /* SyntaxKind.Identifier */) {
            if (isInRightSideOfImportOrExportAssignment(node)) {
                return getSymbolOfNameOrPropertyAccessExpression(node);
            }
            else if (parent.kind === 207 /* SyntaxKind.BindingElement */ &&
                grandParent.kind === 205 /* SyntaxKind.ObjectBindingPattern */ &&
                node === parent.propertyName) {
                var typeOfPattern = getTypeOfNode(grandParent);
                var propertyDeclaration = getPropertyOfType(typeOfPattern, node.escapedText);
                if (propertyDeclaration) {
                    return propertyDeclaration;
                }
            }
            else if ((0, ts_1.isMetaProperty)(parent) && parent.name === node) {
                if (parent.keywordToken === 105 /* SyntaxKind.NewKeyword */ && (0, ts_1.idText)(node) === "target") {
                    // `target` in `new.target`
                    return checkNewTargetMetaProperty(parent).symbol;
                }
                // The `meta` in `import.meta` could be given `getTypeOfNode(parent).symbol` (the `ImportMeta` interface symbol), but
                // we have a fake expression type made for other reasons already, whose transient `meta`
                // member should more exactly be the kind of (declarationless) symbol we want.
                // (See #44364 and #45031 for relevant implementation PRs)
                if (parent.keywordToken === 102 /* SyntaxKind.ImportKeyword */ && (0, ts_1.idText)(node) === "meta") {
                    return getGlobalImportMetaExpressionType().members.get("meta");
                }
                // no other meta properties are valid syntax, thus no others should have symbols
                return undefined;
            }
        }
        switch (node.kind) {
            case 80 /* SyntaxKind.Identifier */:
            case 81 /* SyntaxKind.PrivateIdentifier */:
            case 210 /* SyntaxKind.PropertyAccessExpression */:
            case 165 /* SyntaxKind.QualifiedName */:
                if (!(0, ts_1.isThisInTypeQuery)(node)) {
                    return getSymbolOfNameOrPropertyAccessExpression(node);
                }
            // falls through
            case 110 /* SyntaxKind.ThisKeyword */:
                var container = (0, ts_1.getThisContainer)(node, /*includeArrowFunctions*/ false, /*includeClassComputedPropertyName*/ false);
                if ((0, ts_1.isFunctionLike)(container)) {
                    var sig = getSignatureFromDeclaration(container);
                    if (sig.thisParameter) {
                        return sig.thisParameter;
                    }
                }
                if ((0, ts_1.isInExpressionContext)(node)) {
                    return checkExpression(node).symbol;
                }
            // falls through
            case 196 /* SyntaxKind.ThisType */:
                return getTypeFromThisTypeNode(node).symbol;
            case 108 /* SyntaxKind.SuperKeyword */:
                return checkExpression(node).symbol;
            case 137 /* SyntaxKind.ConstructorKeyword */:
                // constructor keyword for an overload, should take us to the definition if it exist
                var constructorDeclaration = node.parent;
                if (constructorDeclaration && constructorDeclaration.kind === 175 /* SyntaxKind.Constructor */) {
                    return constructorDeclaration.parent.symbol;
                }
                return undefined;
            case 11 /* SyntaxKind.StringLiteral */:
            case 15 /* SyntaxKind.NoSubstitutionTemplateLiteral */:
                // 1). import x = require("./mo/*gotToDefinitionHere*/d")
                // 2). External module name in an import declaration
                // 3). Dynamic import call or require in javascript
                // 4). type A = import("./f/*gotToDefinitionHere*/oo")
                if (((0, ts_1.isExternalModuleImportEqualsDeclaration)(node.parent.parent) && (0, ts_1.getExternalModuleImportEqualsDeclarationExpression)(node.parent.parent) === node) ||
                    ((node.parent.kind === 271 /* SyntaxKind.ImportDeclaration */ || node.parent.kind === 277 /* SyntaxKind.ExportDeclaration */) && node.parent.moduleSpecifier === node) ||
                    (((0, ts_1.isInJSFile)(node) && (0, ts_1.getEmitModuleResolutionKind)(compilerOptions) !== ts_1.ModuleResolutionKind.Bundler && (0, ts_1.isRequireCall)(node.parent, /*requireStringLiteralLikeArgument*/ false)) || (0, ts_1.isImportCall)(node.parent)) ||
                    ((0, ts_1.isLiteralTypeNode)(node.parent) && (0, ts_1.isLiteralImportTypeNode)(node.parent.parent) && node.parent.parent.argument === node.parent)) {
                    return resolveExternalModuleName(node, node, ignoreErrors);
                }
                if ((0, ts_1.isCallExpression)(parent) && (0, ts_1.isBindableObjectDefinePropertyCall)(parent) && parent.arguments[1] === node) {
                    return getSymbolOfDeclaration(parent);
                }
            // falls through
            case 9 /* SyntaxKind.NumericLiteral */:
                // index access
                var objectType = (0, ts_1.isElementAccessExpression)(parent)
                    ? parent.argumentExpression === node ? getTypeOfExpression(parent.expression) : undefined
                    : (0, ts_1.isLiteralTypeNode)(parent) && (0, ts_1.isIndexedAccessTypeNode)(grandParent)
                        ? getTypeFromTypeNode(grandParent.objectType)
                        : undefined;
                return objectType && getPropertyOfType(objectType, (0, ts_1.escapeLeadingUnderscores)(node.text));
            case 90 /* SyntaxKind.DefaultKeyword */:
            case 100 /* SyntaxKind.FunctionKeyword */:
            case 39 /* SyntaxKind.EqualsGreaterThanToken */:
            case 86 /* SyntaxKind.ClassKeyword */:
                return getSymbolOfNode(node.parent);
            case 204 /* SyntaxKind.ImportType */:
                return (0, ts_1.isLiteralImportTypeNode)(node) ? getSymbolAtLocation(node.argument.literal, ignoreErrors) : undefined;
            case 95 /* SyntaxKind.ExportKeyword */:
                return (0, ts_1.isExportAssignment)(node.parent) ? ts_1.Debug.checkDefined(node.parent.symbol) : undefined;
            case 102 /* SyntaxKind.ImportKeyword */:
            case 105 /* SyntaxKind.NewKeyword */:
                return (0, ts_1.isMetaProperty)(node.parent) ? checkMetaPropertyKeyword(node.parent).symbol : undefined;
            case 235 /* SyntaxKind.MetaProperty */:
                return checkExpression(node).symbol;
            case 294 /* SyntaxKind.JsxNamespacedName */:
                if ((0, ts_1.isJSXTagName)(node) && isJsxIntrinsicTagName(node)) {
                    var symbol = getIntrinsicTagSymbol(node.parent);
                    return symbol === unknownSymbol ? undefined : symbol;
                }
            // falls through
            default:
                return undefined;
        }
    }
    function getIndexInfosAtLocation(node) {
        if ((0, ts_1.isIdentifier)(node) && (0, ts_1.isPropertyAccessExpression)(node.parent) && node.parent.name === node) {
            var keyType_1 = getLiteralTypeFromPropertyName(node);
            var objectType = getTypeOfExpression(node.parent.expression);
            var objectTypes = objectType.flags & 1048576 /* TypeFlags.Union */ ? objectType.types : [objectType];
            return (0, ts_1.flatMap)(objectTypes, function (t) { return (0, ts_1.filter)(getIndexInfosOfType(t), function (info) { return isApplicableIndexType(keyType_1, info.keyType); }); });
        }
        return undefined;
    }
    function getShorthandAssignmentValueSymbol(location) {
        if (location && location.kind === 303 /* SyntaxKind.ShorthandPropertyAssignment */) {
            return resolveEntityName(location.name, 111551 /* SymbolFlags.Value */ | 2097152 /* SymbolFlags.Alias */);
        }
        return undefined;
    }
    /** Returns the target of an export specifier without following aliases */
    function getExportSpecifierLocalTargetSymbol(node) {
        if ((0, ts_1.isExportSpecifier)(node)) {
            return node.parent.parent.moduleSpecifier ?
                getExternalModuleMember(node.parent.parent, node) :
                resolveEntityName(node.propertyName || node.name, 111551 /* SymbolFlags.Value */ | 788968 /* SymbolFlags.Type */ | 1920 /* SymbolFlags.Namespace */ | 2097152 /* SymbolFlags.Alias */);
        }
        else {
            return resolveEntityName(node, 111551 /* SymbolFlags.Value */ | 788968 /* SymbolFlags.Type */ | 1920 /* SymbolFlags.Namespace */ | 2097152 /* SymbolFlags.Alias */);
        }
    }
    function getTypeOfNode(node) {
        if ((0, ts_1.isSourceFile)(node) && !(0, ts_1.isExternalModule)(node)) {
            return errorType;
        }
        if (node.flags & 33554432 /* NodeFlags.InWithStatement */) {
            // We cannot answer semantic questions within a with block, do not proceed any further
            return errorType;
        }
        var classDecl = (0, ts_1.tryGetClassImplementingOrExtendingExpressionWithTypeArguments)(node);
        var classType = classDecl && getDeclaredTypeOfClassOrInterface(getSymbolOfDeclaration(classDecl.class));
        if ((0, ts_1.isPartOfTypeNode)(node)) {
            var typeFromTypeNode = getTypeFromTypeNode(node);
            return classType ? getTypeWithThisArgument(typeFromTypeNode, classType.thisType) : typeFromTypeNode;
        }
        if ((0, ts_1.isExpressionNode)(node)) {
            return getRegularTypeOfExpression(node);
        }
        if (classType && !classDecl.isImplements) {
            // A SyntaxKind.ExpressionWithTypeArguments is considered a type node, except when it occurs in the
            // extends clause of a class. We handle that case here.
            var baseType = (0, ts_1.firstOrUndefined)(getBaseTypes(classType));
            return baseType ? getTypeWithThisArgument(baseType, classType.thisType) : errorType;
        }
        if ((0, ts_1.isTypeDeclaration)(node)) {
            // In this case, we call getSymbolOfNode instead of getSymbolAtLocation because it is a declaration
            var symbol = getSymbolOfDeclaration(node);
            return getDeclaredTypeOfSymbol(symbol);
        }
        if (isTypeDeclarationName(node)) {
            var symbol = getSymbolAtLocation(node);
            return symbol ? getDeclaredTypeOfSymbol(symbol) : errorType;
        }
        if ((0, ts_1.isBindingElement)(node)) {
            return getTypeForVariableLikeDeclaration(node, /*includeOptionality*/ true, 0 /* CheckMode.Normal */) || errorType;
        }
        if ((0, ts_1.isDeclaration)(node)) {
            // In this case, we call getSymbolOfNode instead of getSymbolAtLocation because it is a declaration
            var symbol = getSymbolOfDeclaration(node);
            return symbol ? getTypeOfSymbol(symbol) : errorType;
        }
        if (isDeclarationNameOrImportPropertyName(node)) {
            var symbol = getSymbolAtLocation(node);
            if (symbol) {
                return getTypeOfSymbol(symbol);
            }
            return errorType;
        }
        if ((0, ts_1.isBindingPattern)(node)) {
            return getTypeForVariableLikeDeclaration(node.parent, /*includeOptionality*/ true, 0 /* CheckMode.Normal */) || errorType;
        }
        if (isInRightSideOfImportOrExportAssignment(node)) {
            var symbol = getSymbolAtLocation(node);
            if (symbol) {
                var declaredType = getDeclaredTypeOfSymbol(symbol);
                return !isErrorType(declaredType) ? declaredType : getTypeOfSymbol(symbol);
            }
        }
        if ((0, ts_1.isMetaProperty)(node.parent) && node.parent.keywordToken === node.kind) {
            return checkMetaPropertyKeyword(node.parent);
        }
        return errorType;
    }
    // Gets the type of object literal or array literal of destructuring assignment.
    // { a } from
    //     for ( { a } of elems) {
    //     }
    // [ a ] from
    //     [a] = [ some array ...]
    function getTypeOfAssignmentPattern(expr) {
        ts_1.Debug.assert(expr.kind === 209 /* SyntaxKind.ObjectLiteralExpression */ || expr.kind === 208 /* SyntaxKind.ArrayLiteralExpression */);
        // If this is from "for of"
        //     for ( { a } of elems) {
        //     }
        if (expr.parent.kind === 249 /* SyntaxKind.ForOfStatement */) {
            var iteratedType = checkRightHandSideOfForOf(expr.parent);
            return checkDestructuringAssignment(expr, iteratedType || errorType);
        }
        // If this is from "for" initializer
        //     for ({a } = elems[0];.....) { }
        if (expr.parent.kind === 225 /* SyntaxKind.BinaryExpression */) {
            var iteratedType = getTypeOfExpression(expr.parent.right);
            return checkDestructuringAssignment(expr, iteratedType || errorType);
        }
        // If this is from nested object binding pattern
        //     for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
        if (expr.parent.kind === 302 /* SyntaxKind.PropertyAssignment */) {
            var node_3 = (0, ts_1.cast)(expr.parent.parent, ts_1.isObjectLiteralExpression);
            var typeOfParentObjectLiteral = getTypeOfAssignmentPattern(node_3) || errorType;
            var propertyIndex = (0, ts_1.indexOfNode)(node_3.properties, expr.parent);
            return checkObjectLiteralDestructuringPropertyAssignment(node_3, typeOfParentObjectLiteral, propertyIndex);
        }
        // Array literal assignment - array destructuring pattern
        var node = (0, ts_1.cast)(expr.parent, ts_1.isArrayLiteralExpression);
        //    [{ property1: p1, property2 }] = elems;
        var typeOfArrayLiteral = getTypeOfAssignmentPattern(node) || errorType;
        var elementType = checkIteratedTypeOrElementType(65 /* IterationUse.Destructuring */, typeOfArrayLiteral, undefinedType, expr.parent) || errorType;
        return checkArrayLiteralDestructuringElementAssignment(node, typeOfArrayLiteral, node.elements.indexOf(expr), elementType);
    }
    // Gets the property symbol corresponding to the property in destructuring assignment
    // 'property1' from
    //     for ( { property1: a } of elems) {
    //     }
    // 'property1' at location 'a' from:
    //     [a] = [ property1, property2 ]
    function getPropertySymbolOfDestructuringAssignment(location) {
        // Get the type of the object or array literal and then look for property of given name in the type
        var typeOfObjectLiteral = getTypeOfAssignmentPattern((0, ts_1.cast)(location.parent.parent, ts_1.isAssignmentPattern));
        return typeOfObjectLiteral && getPropertyOfType(typeOfObjectLiteral, location.escapedText);
    }
    function getRegularTypeOfExpression(expr) {
        if ((0, ts_1.isRightSideOfQualifiedNameOrPropertyAccess)(expr)) {
            expr = expr.parent;
        }
        return getRegularTypeOfLiteralType(getTypeOfExpression(expr));
    }
    /**
     * Gets either the static or instance type of a class element, based on
     * whether the element is declared as "static".
     */
    function getParentTypeOfClassElement(node) {
        var classSymbol = getSymbolOfNode(node.parent);
        return (0, ts_1.isStatic)(node)
            ? getTypeOfSymbol(classSymbol)
            : getDeclaredTypeOfSymbol(classSymbol);
    }
    function getClassElementPropertyKeyType(element) {
        var name = element.name;
        switch (name.kind) {
            case 80 /* SyntaxKind.Identifier */:
                return getStringLiteralType((0, ts_1.idText)(name));
            case 9 /* SyntaxKind.NumericLiteral */:
            case 11 /* SyntaxKind.StringLiteral */:
                return getStringLiteralType(name.text);
            case 166 /* SyntaxKind.ComputedPropertyName */:
                var nameType = checkComputedPropertyName(name);
                return isTypeAssignableToKind(nameType, 12288 /* TypeFlags.ESSymbolLike */) ? nameType : stringType;
            default:
                return ts_1.Debug.fail("Unsupported property name.");
        }
    }
    // Return the list of properties of the given type, augmented with properties from Function
    // if the type has call or construct signatures
    function getAugmentedPropertiesOfType(type) {
        type = getApparentType(type);
        var propsByName = (0, ts_1.createSymbolTable)(getPropertiesOfType(type));
        var functionType = getSignaturesOfType(type, 0 /* SignatureKind.Call */).length ? globalCallableFunctionType :
            getSignaturesOfType(type, 1 /* SignatureKind.Construct */).length ? globalNewableFunctionType :
                undefined;
        if (functionType) {
            (0, ts_1.forEach)(getPropertiesOfType(functionType), function (p) {
                if (!propsByName.has(p.escapedName)) {
                    propsByName.set(p.escapedName, p);
                }
            });
        }
        return getNamedMembers(propsByName);
    }
    function typeHasCallOrConstructSignatures(type) {
        return getSignaturesOfType(type, 0 /* SignatureKind.Call */).length !== 0 || getSignaturesOfType(type, 1 /* SignatureKind.Construct */).length !== 0;
    }
    function getRootSymbols(symbol) {
        var roots = getImmediateRootSymbols(symbol);
        return roots ? (0, ts_1.flatMap)(roots, getRootSymbols) : [symbol];
    }
    function getImmediateRootSymbols(symbol) {
        if ((0, ts_1.getCheckFlags)(symbol) & 6 /* CheckFlags.Synthetic */) {
            return (0, ts_1.mapDefined)(getSymbolLinks(symbol).containingType.types, function (type) { return getPropertyOfType(type, symbol.escapedName); });
        }
        else if (symbol.flags & 33554432 /* SymbolFlags.Transient */) {
            var _a = symbol.links, leftSpread = _a.leftSpread, rightSpread = _a.rightSpread, syntheticOrigin = _a.syntheticOrigin;
            return leftSpread ? [leftSpread, rightSpread]
                : syntheticOrigin ? [syntheticOrigin]
                    : (0, ts_1.singleElementArray)(tryGetTarget(symbol));
        }
        return undefined;
    }
    function tryGetTarget(symbol) {
        var target;
        var next = symbol;
        while (next = getSymbolLinks(next).target) {
            target = next;
        }
        return target;
    }
    // Emitter support
    function isArgumentsLocalBinding(nodeIn) {
        // Note: does not handle isShorthandPropertyAssignment (and probably a few more)
        if ((0, ts_1.isGeneratedIdentifier)(nodeIn))
            return false;
        var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isIdentifier);
        if (!node)
            return false;
        var parent = node.parent;
        if (!parent)
            return false;
        var isPropertyName = (((0, ts_1.isPropertyAccessExpression)(parent)
            || (0, ts_1.isPropertyAssignment)(parent))
            && parent.name === node);
        return !isPropertyName && getReferencedValueSymbol(node) === argumentsSymbol;
    }
    function moduleExportsSomeValue(moduleReferenceExpression) {
        var moduleSymbol = resolveExternalModuleName(moduleReferenceExpression.parent, moduleReferenceExpression);
        if (!moduleSymbol || (0, ts_1.isShorthandAmbientModuleSymbol)(moduleSymbol)) {
            // If the module is not found or is shorthand, assume that it may export a value.
            return true;
        }
        var hasExportAssignment = hasExportAssignmentSymbol(moduleSymbol);
        // if module has export assignment then 'resolveExternalModuleSymbol' will return resolved symbol for export assignment
        // otherwise it will return moduleSymbol itself
        moduleSymbol = resolveExternalModuleSymbol(moduleSymbol);
        var symbolLinks = getSymbolLinks(moduleSymbol);
        if (symbolLinks.exportsSomeValue === undefined) {
            // for export assignments - check if resolved symbol for RHS is itself a value
            // otherwise - check if at least one export is value
            symbolLinks.exportsSomeValue = hasExportAssignment
                ? !!(moduleSymbol.flags & 111551 /* SymbolFlags.Value */)
                : (0, ts_1.forEachEntry)(getExportsOfModule(moduleSymbol), isValue);
        }
        return symbolLinks.exportsSomeValue;
        function isValue(s) {
            s = resolveSymbol(s);
            return s && !!(getAllSymbolFlags(s) & 111551 /* SymbolFlags.Value */);
        }
    }
    function isNameOfModuleOrEnumDeclaration(node) {
        return (0, ts_1.isModuleOrEnumDeclaration)(node.parent) && node === node.parent.name;
    }
    // When resolved as an expression identifier, if the given node references an exported entity, return the declaration
    // node of the exported entity's container. Otherwise, return undefined.
    function getReferencedExportContainer(nodeIn, prefixLocals) {
        var _a;
        var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isIdentifier);
        if (node) {
            // When resolving the export container for the name of a module or enum
            // declaration, we need to start resolution at the declaration's container.
            // Otherwise, we could incorrectly resolve the export container as the
            // declaration if it contains an exported member with the same name.
            var symbol = getReferencedValueSymbol(node, /*startInDeclarationContainer*/ isNameOfModuleOrEnumDeclaration(node));
            if (symbol) {
                if (symbol.flags & 1048576 /* SymbolFlags.ExportValue */) {
                    // If we reference an exported entity within the same module declaration, then whether
                    // we prefix depends on the kind of entity. SymbolFlags.ExportHasLocal encompasses all the
                    // kinds that we do NOT prefix.
                    var exportSymbol = getMergedSymbol(symbol.exportSymbol);
                    if (!prefixLocals && exportSymbol.flags & 944 /* SymbolFlags.ExportHasLocal */ && !(exportSymbol.flags & 3 /* SymbolFlags.Variable */)) {
                        return undefined;
                    }
                    symbol = exportSymbol;
                }
                var parentSymbol_1 = getParentOfSymbol(symbol);
                if (parentSymbol_1) {
                    if (parentSymbol_1.flags & 512 /* SymbolFlags.ValueModule */ && ((_a = parentSymbol_1.valueDeclaration) === null || _a === void 0 ? void 0 : _a.kind) === 311 /* SyntaxKind.SourceFile */) {
                        var symbolFile = parentSymbol_1.valueDeclaration;
                        var referenceFile = (0, ts_1.getSourceFileOfNode)(node);
                        // If `node` accesses an export and that export isn't in the same file, then symbol is a namespace export, so return undefined.
                        var symbolIsUmdExport = symbolFile !== referenceFile;
                        return symbolIsUmdExport ? undefined : symbolFile;
                    }
                    return (0, ts_1.findAncestor)(node.parent, function (n) { return (0, ts_1.isModuleOrEnumDeclaration)(n) && getSymbolOfDeclaration(n) === parentSymbol_1; });
                }
            }
        }
    }
    // When resolved as an expression identifier, if the given node references an import, return the declaration of
    // that import. Otherwise, return undefined.
    function getReferencedImportDeclaration(nodeIn) {
        var specifier = (0, ts_1.getIdentifierGeneratedImportReference)(nodeIn);
        if (specifier) {
            return specifier;
        }
        var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isIdentifier);
        if (node) {
            var symbol = getReferencedValueOrAliasSymbol(node);
            // We should only get the declaration of an alias if there isn't a local value
            // declaration for the symbol
            if (isNonLocalAlias(symbol, /*excludes*/ 111551 /* SymbolFlags.Value */) && !getTypeOnlyAliasDeclaration(symbol, 111551 /* SymbolFlags.Value */)) {
                return getDeclarationOfAliasSymbol(symbol);
            }
        }
        return undefined;
    }
    function isSymbolOfDestructuredElementOfCatchBinding(symbol) {
        return symbol.valueDeclaration
            && (0, ts_1.isBindingElement)(symbol.valueDeclaration)
            && (0, ts_1.walkUpBindingElementsAndPatterns)(symbol.valueDeclaration).parent.kind === 298 /* SyntaxKind.CatchClause */;
    }
    function isSymbolOfDeclarationWithCollidingName(symbol) {
        if (symbol.flags & 418 /* SymbolFlags.BlockScoped */ && symbol.valueDeclaration && !(0, ts_1.isSourceFile)(symbol.valueDeclaration)) {
            var links = getSymbolLinks(symbol);
            if (links.isDeclarationWithCollidingName === undefined) {
                var container = (0, ts_1.getEnclosingBlockScopeContainer)(symbol.valueDeclaration);
                if ((0, ts_1.isStatementWithLocals)(container) || isSymbolOfDestructuredElementOfCatchBinding(symbol)) {
                    var nodeLinks_1 = getNodeLinks(symbol.valueDeclaration);
                    if (resolveName(container.parent, symbol.escapedName, 111551 /* SymbolFlags.Value */, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ false)) {
                        // redeclaration - always should be renamed
                        links.isDeclarationWithCollidingName = true;
                    }
                    else if (nodeLinks_1.flags & 16384 /* NodeCheckFlags.CapturedBlockScopedBinding */) {
                        // binding is captured in the function
                        // should be renamed if:
                        // - binding is not top level - top level bindings never collide with anything
                        // AND
                        //   - binding is not declared in loop, should be renamed to avoid name reuse across siblings
                        //     let a, b
                        //     { let x = 1; a = () => x; }
                        //     { let x = 100; b = () => x; }
                        //     console.log(a()); // should print '1'
                        //     console.log(b()); // should print '100'
                        //     OR
                        //   - binding is declared inside loop but not in inside initializer of iteration statement or directly inside loop body
                        //     * variables from initializer are passed to rewritten loop body as parameters so they are not captured directly
                        //     * variables that are declared immediately in loop body will become top level variable after loop is rewritten and thus
                        //       they will not collide with anything
                        var isDeclaredInLoop = nodeLinks_1.flags & 32768 /* NodeCheckFlags.BlockScopedBindingInLoop */;
                        var inLoopInitializer = (0, ts_1.isIterationStatement)(container, /*lookInLabeledStatements*/ false);
                        var inLoopBodyBlock = container.kind === 240 /* SyntaxKind.Block */ && (0, ts_1.isIterationStatement)(container.parent, /*lookInLabeledStatements*/ false);
                        links.isDeclarationWithCollidingName = !(0, ts_1.isBlockScopedContainerTopLevel)(container) && (!isDeclaredInLoop || (!inLoopInitializer && !inLoopBodyBlock));
                    }
                    else {
                        links.isDeclarationWithCollidingName = false;
                    }
                }
            }
            return links.isDeclarationWithCollidingName;
        }
        return false;
    }
    // When resolved as an expression identifier, if the given node references a nested block scoped entity with
    // a name that either hides an existing name or might hide it when compiled downlevel,
    // return the declaration of that entity. Otherwise, return undefined.
    function getReferencedDeclarationWithCollidingName(nodeIn) {
        if (!(0, ts_1.isGeneratedIdentifier)(nodeIn)) {
            var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isIdentifier);
            if (node) {
                var symbol = getReferencedValueSymbol(node);
                if (symbol && isSymbolOfDeclarationWithCollidingName(symbol)) {
                    return symbol.valueDeclaration;
                }
            }
        }
        return undefined;
    }
    // Return true if the given node is a declaration of a nested block scoped entity with a name that either hides an
    // existing name or might hide a name when compiled downlevel
    function isDeclarationWithCollidingName(nodeIn) {
        var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isDeclaration);
        if (node) {
            var symbol = getSymbolOfDeclaration(node);
            if (symbol) {
                return isSymbolOfDeclarationWithCollidingName(symbol);
            }
        }
        return false;
    }
    function isValueAliasDeclaration(node) {
        ts_1.Debug.assert(canCollectSymbolAliasAccessabilityData);
        switch (node.kind) {
            case 270 /* SyntaxKind.ImportEqualsDeclaration */:
                return isAliasResolvedToValue(getSymbolOfDeclaration(node));
            case 272 /* SyntaxKind.ImportClause */:
            case 273 /* SyntaxKind.NamespaceImport */:
            case 275 /* SyntaxKind.ImportSpecifier */:
            case 280 /* SyntaxKind.ExportSpecifier */:
                var symbol = getSymbolOfDeclaration(node);
                return !!symbol && isAliasResolvedToValue(symbol) && !getTypeOnlyAliasDeclaration(symbol, 111551 /* SymbolFlags.Value */);
            case 277 /* SyntaxKind.ExportDeclaration */:
                var exportClause = node.exportClause;
                return !!exportClause && ((0, ts_1.isNamespaceExport)(exportClause) ||
                    (0, ts_1.some)(exportClause.elements, isValueAliasDeclaration));
            case 276 /* SyntaxKind.ExportAssignment */:
                return node.expression && node.expression.kind === 80 /* SyntaxKind.Identifier */ ?
                    isAliasResolvedToValue(getSymbolOfDeclaration(node)) :
                    true;
        }
        return false;
    }
    function isTopLevelValueImportEqualsWithEntityName(nodeIn) {
        var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isImportEqualsDeclaration);
        if (node === undefined || node.parent.kind !== 311 /* SyntaxKind.SourceFile */ || !(0, ts_1.isInternalModuleImportEqualsDeclaration)(node)) {
            // parent is not source file or it is not reference to internal module
            return false;
        }
        var isValue = isAliasResolvedToValue(getSymbolOfDeclaration(node));
        return isValue && node.moduleReference && !(0, ts_1.nodeIsMissing)(node.moduleReference);
    }
    function isAliasResolvedToValue(symbol) {
        var _a;
        if (!symbol) {
            return false;
        }
        var target = getExportSymbolOfValueSymbolIfExported(resolveAlias(symbol));
        if (target === unknownSymbol) {
            return true;
        }
        // const enums and modules that contain only const enums are not considered values from the emit perspective
        // unless 'preserveConstEnums' option is set to true
        return !!(((_a = getAllSymbolFlags(target)) !== null && _a !== void 0 ? _a : -1) & 111551 /* SymbolFlags.Value */) &&
            ((0, ts_1.shouldPreserveConstEnums)(compilerOptions) || !isConstEnumOrConstEnumOnlyModule(target));
    }
    function isConstEnumOrConstEnumOnlyModule(s) {
        return isConstEnumSymbol(s) || !!s.constEnumOnlyModule;
    }
    function isReferencedAliasDeclaration(node, checkChildren) {
        ts_1.Debug.assert(canCollectSymbolAliasAccessabilityData);
        if (isAliasSymbolDeclaration(node)) {
            var symbol = getSymbolOfDeclaration(node);
            var links = symbol && getSymbolLinks(symbol);
            if (links === null || links === void 0 ? void 0 : links.referenced) {
                return true;
            }
            var target = getSymbolLinks(symbol).aliasTarget;
            if (target && (0, ts_1.getEffectiveModifierFlags)(node) & 1 /* ModifierFlags.Export */ &&
                getAllSymbolFlags(target) & 111551 /* SymbolFlags.Value */ &&
                ((0, ts_1.shouldPreserveConstEnums)(compilerOptions) || !isConstEnumOrConstEnumOnlyModule(target))) {
                // An `export import ... =` of a value symbol is always considered referenced
                return true;
            }
        }
        if (checkChildren) {
            return !!(0, ts_1.forEachChild)(node, function (node) { return isReferencedAliasDeclaration(node, checkChildren); });
        }
        return false;
    }
    function isImplementationOfOverload(node) {
        if ((0, ts_1.nodeIsPresent)(node.body)) {
            if ((0, ts_1.isGetAccessor)(node) || (0, ts_1.isSetAccessor)(node))
                return false; // Get or set accessors can never be overload implementations, but can have up to 2 signatures
            var symbol = getSymbolOfDeclaration(node);
            var signaturesOfSymbol = getSignaturesOfSymbol(symbol);
            // If this function body corresponds to function with multiple signature, it is implementation of overload
            // e.g.: function foo(a: string): string;
            //       function foo(a: number): number;
            //       function foo(a: any) { // This is implementation of the overloads
            //           return a;
            //       }
            return signaturesOfSymbol.length > 1 ||
                // If there is single signature for the symbol, it is overload if that signature isn't coming from the node
                // e.g.: function foo(a: string): string;
                //       function foo(a: any) { // This is implementation of the overloads
                //           return a;
                //       }
                (signaturesOfSymbol.length === 1 && signaturesOfSymbol[0].declaration !== node);
        }
        return false;
    }
    function isRequiredInitializedParameter(parameter) {
        return !!strictNullChecks &&
            !isOptionalParameter(parameter) &&
            !(0, ts_1.isJSDocParameterTag)(parameter) &&
            !!parameter.initializer &&
            !(0, ts_1.hasSyntacticModifier)(parameter, 16476 /* ModifierFlags.ParameterPropertyModifier */);
    }
    function isOptionalUninitializedParameterProperty(parameter) {
        return strictNullChecks &&
            isOptionalParameter(parameter) &&
            !parameter.initializer &&
            (0, ts_1.hasSyntacticModifier)(parameter, 16476 /* ModifierFlags.ParameterPropertyModifier */);
    }
    function isExpandoFunctionDeclaration(node) {
        var declaration = (0, ts_1.getParseTreeNode)(node, ts_1.isFunctionDeclaration);
        if (!declaration) {
            return false;
        }
        var symbol = getSymbolOfDeclaration(declaration);
        if (!symbol || !(symbol.flags & 16 /* SymbolFlags.Function */)) {
            return false;
        }
        return !!(0, ts_1.forEachEntry)(getExportsOfSymbol(symbol), function (p) { return p.flags & 111551 /* SymbolFlags.Value */ && p.valueDeclaration && (0, ts_1.isPropertyAccessExpression)(p.valueDeclaration); });
    }
    function getPropertiesOfContainerFunction(node) {
        var declaration = (0, ts_1.getParseTreeNode)(node, ts_1.isFunctionDeclaration);
        if (!declaration) {
            return ts_1.emptyArray;
        }
        var symbol = getSymbolOfDeclaration(declaration);
        return symbol && getPropertiesOfType(getTypeOfSymbol(symbol)) || ts_1.emptyArray;
    }
    function getNodeCheckFlags(node) {
        var _a;
        var nodeId = node.id || 0;
        if (nodeId < 0 || nodeId >= nodeLinks.length)
            return 0;
        return ((_a = nodeLinks[nodeId]) === null || _a === void 0 ? void 0 : _a.flags) || 0;
    }
    function getEnumMemberValue(node) {
        computeEnumMemberValues(node.parent);
        return getNodeLinks(node).enumMemberValue;
    }
    function canHaveConstantValue(node) {
        switch (node.kind) {
            case 305 /* SyntaxKind.EnumMember */:
            case 210 /* SyntaxKind.PropertyAccessExpression */:
            case 211 /* SyntaxKind.ElementAccessExpression */:
                return true;
        }
        return false;
    }
    function getConstantValue(node) {
        if (node.kind === 305 /* SyntaxKind.EnumMember */) {
            return getEnumMemberValue(node);
        }
        var symbol = getNodeLinks(node).resolvedSymbol;
        if (symbol && (symbol.flags & 8 /* SymbolFlags.EnumMember */)) {
            // inline property\index accesses only for const enums
            var member = symbol.valueDeclaration;
            if ((0, ts_1.isEnumConst)(member.parent)) {
                return getEnumMemberValue(member);
            }
        }
        return undefined;
    }
    function isFunctionType(type) {
        return !!(type.flags & 524288 /* TypeFlags.Object */) && getSignaturesOfType(type, 0 /* SignatureKind.Call */).length > 0;
    }
    function getTypeReferenceSerializationKind(typeNameIn, location) {
        var _a;
        // ensure both `typeName` and `location` are parse tree nodes.
        var typeName = (0, ts_1.getParseTreeNode)(typeNameIn, ts_1.isEntityName);
        if (!typeName)
            return ts_1.TypeReferenceSerializationKind.Unknown;
        if (location) {
            location = (0, ts_1.getParseTreeNode)(location);
            if (!location)
                return ts_1.TypeReferenceSerializationKind.Unknown;
        }
        // Resolve the symbol as a value to ensure the type can be reached at runtime during emit.
        var isTypeOnly = false;
        if ((0, ts_1.isQualifiedName)(typeName)) {
            var rootValueSymbol = resolveEntityName((0, ts_1.getFirstIdentifier)(typeName), 111551 /* SymbolFlags.Value */, /*ignoreErrors*/ true, /*dontResolveAlias*/ true, location);
            isTypeOnly = !!((_a = rootValueSymbol === null || rootValueSymbol === void 0 ? void 0 : rootValueSymbol.declarations) === null || _a === void 0 ? void 0 : _a.every(ts_1.isTypeOnlyImportOrExportDeclaration));
        }
        var valueSymbol = resolveEntityName(typeName, 111551 /* SymbolFlags.Value */, /*ignoreErrors*/ true, /*dontResolveAlias*/ true, location);
        var resolvedSymbol = valueSymbol && valueSymbol.flags & 2097152 /* SymbolFlags.Alias */ ? resolveAlias(valueSymbol) : valueSymbol;
        isTypeOnly || (isTypeOnly = !!(valueSymbol && getTypeOnlyAliasDeclaration(valueSymbol, 111551 /* SymbolFlags.Value */)));
        // Resolve the symbol as a type so that we can provide a more useful hint for the type serializer.
        var typeSymbol = resolveEntityName(typeName, 788968 /* SymbolFlags.Type */, /*ignoreErrors*/ true, /*dontResolveAlias*/ false, location);
        if (resolvedSymbol && resolvedSymbol === typeSymbol) {
            var globalPromiseSymbol = getGlobalPromiseConstructorSymbol(/*reportErrors*/ false);
            if (globalPromiseSymbol && resolvedSymbol === globalPromiseSymbol) {
                return ts_1.TypeReferenceSerializationKind.Promise;
            }
            var constructorType = getTypeOfSymbol(resolvedSymbol);
            if (constructorType && isConstructorType(constructorType)) {
                return isTypeOnly ? ts_1.TypeReferenceSerializationKind.TypeWithCallSignature : ts_1.TypeReferenceSerializationKind.TypeWithConstructSignatureAndValue;
            }
        }
        // We might not be able to resolve type symbol so use unknown type in that case (eg error case)
        if (!typeSymbol) {
            return isTypeOnly ? ts_1.TypeReferenceSerializationKind.ObjectType : ts_1.TypeReferenceSerializationKind.Unknown;
        }
        var type = getDeclaredTypeOfSymbol(typeSymbol);
        if (isErrorType(type)) {
            return isTypeOnly ? ts_1.TypeReferenceSerializationKind.ObjectType : ts_1.TypeReferenceSerializationKind.Unknown;
        }
        else if (type.flags & 3 /* TypeFlags.AnyOrUnknown */) {
            return ts_1.TypeReferenceSerializationKind.ObjectType;
        }
        else if (isTypeAssignableToKind(type, 16384 /* TypeFlags.Void */ | 98304 /* TypeFlags.Nullable */ | 131072 /* TypeFlags.Never */)) {
            return ts_1.TypeReferenceSerializationKind.VoidNullableOrNeverType;
        }
        else if (isTypeAssignableToKind(type, 528 /* TypeFlags.BooleanLike */)) {
            return ts_1.TypeReferenceSerializationKind.BooleanType;
        }
        else if (isTypeAssignableToKind(type, 296 /* TypeFlags.NumberLike */)) {
            return ts_1.TypeReferenceSerializationKind.NumberLikeType;
        }
        else if (isTypeAssignableToKind(type, 2112 /* TypeFlags.BigIntLike */)) {
            return ts_1.TypeReferenceSerializationKind.BigIntLikeType;
        }
        else if (isTypeAssignableToKind(type, 402653316 /* TypeFlags.StringLike */)) {
            return ts_1.TypeReferenceSerializationKind.StringLikeType;
        }
        else if (isTupleType(type)) {
            return ts_1.TypeReferenceSerializationKind.ArrayLikeType;
        }
        else if (isTypeAssignableToKind(type, 12288 /* TypeFlags.ESSymbolLike */)) {
            return ts_1.TypeReferenceSerializationKind.ESSymbolType;
        }
        else if (isFunctionType(type)) {
            return ts_1.TypeReferenceSerializationKind.TypeWithCallSignature;
        }
        else if (isArrayType(type)) {
            return ts_1.TypeReferenceSerializationKind.ArrayLikeType;
        }
        else {
            return ts_1.TypeReferenceSerializationKind.ObjectType;
        }
    }
    function createTypeOfDeclaration(declarationIn, enclosingDeclaration, flags, tracker, addUndefined) {
        var declaration = (0, ts_1.getParseTreeNode)(declarationIn, ts_1.isVariableLikeOrAccessor);
        if (!declaration) {
            return ts_1.factory.createToken(133 /* SyntaxKind.AnyKeyword */);
        }
        // Get type of the symbol if this is the valid symbol otherwise get type at location
        var symbol = getSymbolOfDeclaration(declaration);
        var type = symbol && !(symbol.flags & (2048 /* SymbolFlags.TypeLiteral */ | 131072 /* SymbolFlags.Signature */))
            ? getWidenedLiteralType(getTypeOfSymbol(symbol))
            : errorType;
        if (type.flags & 8192 /* TypeFlags.UniqueESSymbol */ &&
            type.symbol === symbol) {
            flags |= 1048576 /* NodeBuilderFlags.AllowUniqueESSymbolType */;
        }
        if (addUndefined) {
            type = getOptionalType(type);
        }
        return nodeBuilder.typeToTypeNode(type, enclosingDeclaration, flags | 1024 /* NodeBuilderFlags.MultilineObjectLiterals */, tracker);
    }
    function createReturnTypeOfSignatureDeclaration(signatureDeclarationIn, enclosingDeclaration, flags, tracker) {
        var signatureDeclaration = (0, ts_1.getParseTreeNode)(signatureDeclarationIn, ts_1.isFunctionLike);
        if (!signatureDeclaration) {
            return ts_1.factory.createToken(133 /* SyntaxKind.AnyKeyword */);
        }
        var signature = getSignatureFromDeclaration(signatureDeclaration);
        return nodeBuilder.typeToTypeNode(getReturnTypeOfSignature(signature), enclosingDeclaration, flags | 1024 /* NodeBuilderFlags.MultilineObjectLiterals */, tracker);
    }
    function createTypeOfExpression(exprIn, enclosingDeclaration, flags, tracker) {
        var expr = (0, ts_1.getParseTreeNode)(exprIn, ts_1.isExpression);
        if (!expr) {
            return ts_1.factory.createToken(133 /* SyntaxKind.AnyKeyword */);
        }
        var type = getWidenedType(getRegularTypeOfExpression(expr));
        return nodeBuilder.typeToTypeNode(type, enclosingDeclaration, flags | 1024 /* NodeBuilderFlags.MultilineObjectLiterals */, tracker);
    }
    function hasGlobalName(name) {
        return globals.has((0, ts_1.escapeLeadingUnderscores)(name));
    }
    function getReferencedValueSymbol(reference, startInDeclarationContainer) {
        var resolvedSymbol = getNodeLinks(reference).resolvedSymbol;
        if (resolvedSymbol) {
            return resolvedSymbol;
        }
        var location = reference;
        if (startInDeclarationContainer) {
            // When resolving the name of a declaration as a value, we need to start resolution
            // at a point outside of the declaration.
            var parent_20 = reference.parent;
            if ((0, ts_1.isDeclaration)(parent_20) && reference === parent_20.name) {
                location = getDeclarationContainer(parent_20);
            }
        }
        return resolveName(location, reference.escapedText, 111551 /* SymbolFlags.Value */ | 1048576 /* SymbolFlags.ExportValue */ | 2097152 /* SymbolFlags.Alias */, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ true);
    }
    /**
     * Get either a value-meaning symbol or an alias symbol.
     * Unlike `getReferencedValueSymbol`, if the cached resolved symbol is the unknown symbol,
     * we call `resolveName` to find a symbol.
     * This is because when caching the resolved symbol, we only consider value symbols, but here
     * we want to also get an alias symbol if one exists.
     */
    function getReferencedValueOrAliasSymbol(reference) {
        var resolvedSymbol = getNodeLinks(reference).resolvedSymbol;
        if (resolvedSymbol && resolvedSymbol !== unknownSymbol) {
            return resolvedSymbol;
        }
        return resolveName(reference, reference.escapedText, 111551 /* SymbolFlags.Value */ | 1048576 /* SymbolFlags.ExportValue */ | 2097152 /* SymbolFlags.Alias */, 
        /*nameNotFoundMessage*/ undefined, 
        /*nameArg*/ undefined, 
        /*isUse*/ true, 
        /*excludeGlobals*/ undefined, 
        /*getSpellingSuggestions*/ undefined);
    }
    function getReferencedValueDeclaration(referenceIn) {
        if (!(0, ts_1.isGeneratedIdentifier)(referenceIn)) {
            var reference = (0, ts_1.getParseTreeNode)(referenceIn, ts_1.isIdentifier);
            if (reference) {
                var symbol = getReferencedValueSymbol(reference);
                if (symbol) {
                    return getExportSymbolOfValueSymbolIfExported(symbol).valueDeclaration;
                }
            }
        }
        return undefined;
    }
    function getReferencedValueDeclarations(referenceIn) {
        if (!(0, ts_1.isGeneratedIdentifier)(referenceIn)) {
            var reference = (0, ts_1.getParseTreeNode)(referenceIn, ts_1.isIdentifier);
            if (reference) {
                var symbol = getReferencedValueSymbol(reference);
                if (symbol) {
                    return (0, ts_1.filter)(getExportSymbolOfValueSymbolIfExported(symbol).declarations, function (declaration) {
                        switch (declaration.kind) {
                            case 259 /* SyntaxKind.VariableDeclaration */:
                            case 168 /* SyntaxKind.Parameter */:
                            case 207 /* SyntaxKind.BindingElement */:
                            case 171 /* SyntaxKind.PropertyDeclaration */:
                            case 302 /* SyntaxKind.PropertyAssignment */:
                            case 303 /* SyntaxKind.ShorthandPropertyAssignment */:
                            case 305 /* SyntaxKind.EnumMember */:
                            case 209 /* SyntaxKind.ObjectLiteralExpression */:
                            case 261 /* SyntaxKind.FunctionDeclaration */:
                            case 217 /* SyntaxKind.FunctionExpression */:
                            case 218 /* SyntaxKind.ArrowFunction */:
                            case 262 /* SyntaxKind.ClassDeclaration */:
                            case 230 /* SyntaxKind.ClassExpression */:
                            case 265 /* SyntaxKind.EnumDeclaration */:
                            case 173 /* SyntaxKind.MethodDeclaration */:
                            case 176 /* SyntaxKind.GetAccessor */:
                            case 177 /* SyntaxKind.SetAccessor */:
                            case 266 /* SyntaxKind.ModuleDeclaration */:
                                return true;
                        }
                        return false;
                    });
                }
            }
        }
        return undefined;
    }
    function isLiteralConstDeclaration(node) {
        if ((0, ts_1.isDeclarationReadonly)(node) || (0, ts_1.isVariableDeclaration)(node) && (0, ts_1.isVarConst)(node)) {
            return isFreshLiteralType(getTypeOfSymbol(getSymbolOfDeclaration(node)));
        }
        return false;
    }
    function literalTypeToNode(type, enclosing, tracker) {
        var enumResult = type.flags & 1056 /* TypeFlags.EnumLike */ ? nodeBuilder.symbolToExpression(type.symbol, 111551 /* SymbolFlags.Value */, enclosing, /*flags*/ undefined, tracker)
            : type === trueType ? ts_1.factory.createTrue() : type === falseType && ts_1.factory.createFalse();
        if (enumResult)
            return enumResult;
        var literalValue = type.value;
        return typeof literalValue === "object" ? ts_1.factory.createBigIntLiteral(literalValue) :
            typeof literalValue === "number" ? ts_1.factory.createNumericLiteral(literalValue) :
                ts_1.factory.createStringLiteral(literalValue);
    }
    function createLiteralConstValue(node, tracker) {
        var type = getTypeOfSymbol(getSymbolOfDeclaration(node));
        return literalTypeToNode(type, node, tracker);
    }
    function getJsxFactoryEntity(location) {
        return location ? (getJsxNamespace(location), ((0, ts_1.getSourceFileOfNode)(location).localJsxFactory || _jsxFactoryEntity)) : _jsxFactoryEntity;
    }
    function getJsxFragmentFactoryEntity(location) {
        if (location) {
            var file = (0, ts_1.getSourceFileOfNode)(location);
            if (file) {
                if (file.localJsxFragmentFactory) {
                    return file.localJsxFragmentFactory;
                }
                var jsxFragPragmas = file.pragmas.get("jsxfrag");
                var jsxFragPragma = (0, ts_1.isArray)(jsxFragPragmas) ? jsxFragPragmas[0] : jsxFragPragmas;
                if (jsxFragPragma) {
                    file.localJsxFragmentFactory = (0, ts_1.parseIsolatedEntityName)(jsxFragPragma.arguments.factory, languageVersion);
                    return file.localJsxFragmentFactory;
                }
            }
        }
        if (compilerOptions.jsxFragmentFactory) {
            return (0, ts_1.parseIsolatedEntityName)(compilerOptions.jsxFragmentFactory, languageVersion);
        }
    }
    function createResolver() {
        // this variable and functions that use it are deliberately moved here from the outer scope
        // to avoid scope pollution
        var resolvedTypeReferenceDirectives = host.getResolvedTypeReferenceDirectives();
        var fileToDirective;
        if (resolvedTypeReferenceDirectives) {
            // populate reverse mapping: file path -> type reference directive that was resolved to this file
            fileToDirective = new Map();
            resolvedTypeReferenceDirectives.forEach(function (_a, key, mode) {
                var resolvedTypeReferenceDirective = _a.resolvedTypeReferenceDirective;
                if (!(resolvedTypeReferenceDirective === null || resolvedTypeReferenceDirective === void 0 ? void 0 : resolvedTypeReferenceDirective.resolvedFileName)) {
                    return;
                }
                var file = host.getSourceFile(resolvedTypeReferenceDirective.resolvedFileName);
                if (file) {
                    // Add the transitive closure of path references loaded by this file (as long as they are not)
                    // part of an existing type reference.
                    addReferencedFilesToTypeDirective(file, key, mode);
                }
            });
        }
        return {
            getReferencedExportContainer: getReferencedExportContainer,
            getReferencedImportDeclaration: getReferencedImportDeclaration,
            getReferencedDeclarationWithCollidingName: getReferencedDeclarationWithCollidingName,
            isDeclarationWithCollidingName: isDeclarationWithCollidingName,
            isValueAliasDeclaration: function (nodeIn) {
                var node = (0, ts_1.getParseTreeNode)(nodeIn);
                // Synthesized nodes are always treated like values.
                return node && canCollectSymbolAliasAccessabilityData ? isValueAliasDeclaration(node) : true;
            },
            hasGlobalName: hasGlobalName,
            isReferencedAliasDeclaration: function (nodeIn, checkChildren) {
                var node = (0, ts_1.getParseTreeNode)(nodeIn);
                // Synthesized nodes are always treated as referenced.
                return node && canCollectSymbolAliasAccessabilityData ? isReferencedAliasDeclaration(node, checkChildren) : true;
            },
            getNodeCheckFlags: function (nodeIn) {
                var node = (0, ts_1.getParseTreeNode)(nodeIn);
                return node ? getNodeCheckFlags(node) : 0;
            },
            isTopLevelValueImportEqualsWithEntityName: isTopLevelValueImportEqualsWithEntityName,
            isDeclarationVisible: isDeclarationVisible,
            isImplementationOfOverload: isImplementationOfOverload,
            isRequiredInitializedParameter: isRequiredInitializedParameter,
            isOptionalUninitializedParameterProperty: isOptionalUninitializedParameterProperty,
            isExpandoFunctionDeclaration: isExpandoFunctionDeclaration,
            getPropertiesOfContainerFunction: getPropertiesOfContainerFunction,
            createTypeOfDeclaration: createTypeOfDeclaration,
            createReturnTypeOfSignatureDeclaration: createReturnTypeOfSignatureDeclaration,
            createTypeOfExpression: createTypeOfExpression,
            createLiteralConstValue: createLiteralConstValue,
            isSymbolAccessible: isSymbolAccessible,
            isEntityNameVisible: isEntityNameVisible,
            getConstantValue: function (nodeIn) {
                var node = (0, ts_1.getParseTreeNode)(nodeIn, canHaveConstantValue);
                return node ? getConstantValue(node) : undefined;
            },
            collectLinkedAliases: collectLinkedAliases,
            getReferencedValueDeclaration: getReferencedValueDeclaration,
            getReferencedValueDeclarations: getReferencedValueDeclarations,
            getTypeReferenceSerializationKind: getTypeReferenceSerializationKind,
            isOptionalParameter: isOptionalParameter,
            moduleExportsSomeValue: moduleExportsSomeValue,
            isArgumentsLocalBinding: isArgumentsLocalBinding,
            getExternalModuleFileFromDeclaration: function (nodeIn) {
                var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.hasPossibleExternalModuleReference);
                return node && getExternalModuleFileFromDeclaration(node);
            },
            getTypeReferenceDirectivesForEntityName: getTypeReferenceDirectivesForEntityName,
            getTypeReferenceDirectivesForSymbol: getTypeReferenceDirectivesForSymbol,
            isLiteralConstDeclaration: isLiteralConstDeclaration,
            isLateBound: function (nodeIn) {
                var node = (0, ts_1.getParseTreeNode)(nodeIn, ts_1.isDeclaration);
                var symbol = node && getSymbolOfDeclaration(node);
                return !!(symbol && (0, ts_1.getCheckFlags)(symbol) & 4096 /* CheckFlags.Late */);
            },
            getJsxFactoryEntity: getJsxFactoryEntity,
            getJsxFragmentFactoryEntity: getJsxFragmentFactoryEntity,
            getAllAccessorDeclarations: function (accessor) {
                accessor = (0, ts_1.getParseTreeNode)(accessor, ts_1.isGetOrSetAccessorDeclaration); // TODO: GH#18217
                var otherKind = accessor.kind === 177 /* SyntaxKind.SetAccessor */ ? 176 /* SyntaxKind.GetAccessor */ : 177 /* SyntaxKind.SetAccessor */;
                var otherAccessor = (0, ts_1.getDeclarationOfKind)(getSymbolOfDeclaration(accessor), otherKind);
                var firstAccessor = otherAccessor && (otherAccessor.pos < accessor.pos) ? otherAccessor : accessor;
                var secondAccessor = otherAccessor && (otherAccessor.pos < accessor.pos) ? accessor : otherAccessor;
                var setAccessor = accessor.kind === 177 /* SyntaxKind.SetAccessor */ ? accessor : otherAccessor;
                var getAccessor = accessor.kind === 176 /* SyntaxKind.GetAccessor */ ? accessor : otherAccessor;
                return {
                    firstAccessor: firstAccessor,
                    secondAccessor: secondAccessor,
                    setAccessor: setAccessor,
                    getAccessor: getAccessor
                };
            },
            getSymbolOfExternalModuleSpecifier: function (moduleName) { return resolveExternalModuleNameWorker(moduleName, moduleName, /*moduleNotFoundError*/ undefined); },
            isBindingCapturedByNode: function (node, decl) {
                var parseNode = (0, ts_1.getParseTreeNode)(node);
                var parseDecl = (0, ts_1.getParseTreeNode)(decl);
                return !!parseNode && !!parseDecl && ((0, ts_1.isVariableDeclaration)(parseDecl) || (0, ts_1.isBindingElement)(parseDecl)) && isBindingCapturedByNode(parseNode, parseDecl);
            },
            getDeclarationStatementsForSourceFile: function (node, flags, tracker, bundled) {
                var n = (0, ts_1.getParseTreeNode)(node);
                ts_1.Debug.assert(n && n.kind === 311 /* SyntaxKind.SourceFile */, "Non-sourcefile node passed into getDeclarationsForSourceFile");
                var sym = getSymbolOfDeclaration(node);
                if (!sym) {
                    return !node.locals ? [] : nodeBuilder.symbolTableToDeclarationStatements(node.locals, node, flags, tracker, bundled);
                }
                return !sym.exports ? [] : nodeBuilder.symbolTableToDeclarationStatements(sym.exports, node, flags, tracker, bundled);
            },
            isImportRequiredByAugmentation: isImportRequiredByAugmentation,
        };
        function isImportRequiredByAugmentation(node) {
            var file = (0, ts_1.getSourceFileOfNode)(node);
            if (!file.symbol)
                return false;
            var importTarget = getExternalModuleFileFromDeclaration(node);
            if (!importTarget)
                return false;
            if (importTarget === file)
                return false;
            var exports = getExportsOfModule(file.symbol);
            for (var _i = 0, _a = (0, ts_1.arrayFrom)(exports.values()); _i < _a.length; _i++) {
                var s = _a[_i];
                if (s.mergeId) {
                    var merged = getMergedSymbol(s);
                    if (merged.declarations) {
                        for (var _b = 0, _c = merged.declarations; _b < _c.length; _b++) {
                            var d = _c[_b];
                            var declFile = (0, ts_1.getSourceFileOfNode)(d);
                            if (declFile === importTarget) {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }
        function isInHeritageClause(node) {
            return node.parent && node.parent.kind === 232 /* SyntaxKind.ExpressionWithTypeArguments */ && node.parent.parent && node.parent.parent.kind === 297 /* SyntaxKind.HeritageClause */;
        }
        // defined here to avoid outer scope pollution
        function getTypeReferenceDirectivesForEntityName(node) {
            // program does not have any files with type reference directives - bail out
            if (!fileToDirective) {
                return undefined;
            }
            // computed property name should use node as value
            // property access can only be used as values, or types when within an expression with type arguments inside a heritage clause
            // qualified names can only be used as types\namespaces
            // identifiers are treated as values only if they appear in type queries
            var meaning;
            if (node.parent.kind === 166 /* SyntaxKind.ComputedPropertyName */) {
                meaning = 111551 /* SymbolFlags.Value */ | 1048576 /* SymbolFlags.ExportValue */;
            }
            else {
                meaning = 788968 /* SymbolFlags.Type */ | 1920 /* SymbolFlags.Namespace */;
                if ((node.kind === 80 /* SyntaxKind.Identifier */ && isInTypeQuery(node)) || (node.kind === 210 /* SyntaxKind.PropertyAccessExpression */ && !isInHeritageClause(node))) {
                    meaning = 111551 /* SymbolFlags.Value */ | 1048576 /* SymbolFlags.ExportValue */;
                }
            }
            var symbol = resolveEntityName(node, meaning, /*ignoreErrors*/ true);
            return symbol && symbol !== unknownSymbol ? getTypeReferenceDirectivesForSymbol(symbol, meaning) : undefined;
        }
        // defined here to avoid outer scope pollution
        function getTypeReferenceDirectivesForSymbol(symbol, meaning) {
            // program does not have any files with type reference directives - bail out
            if (!fileToDirective || !isSymbolFromTypeDeclarationFile(symbol)) {
                return undefined;
            }
            // check what declarations in the symbol can contribute to the target meaning
            var typeReferenceDirectives;
            for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {
                var decl = _a[_i];
                // check meaning of the local symbol to see if declaration needs to be analyzed further
                if (decl.symbol && decl.symbol.flags & meaning) {
                    var file = (0, ts_1.getSourceFileOfNode)(decl);
                    var typeReferenceDirective = fileToDirective.get(file.path);
                    if (typeReferenceDirective) {
                        (typeReferenceDirectives || (typeReferenceDirectives = [])).push(typeReferenceDirective);
                    }
                    else {
                        // found at least one entry that does not originate from type reference directive
                        return undefined;
                    }
                }
            }
            return typeReferenceDirectives;
        }
        function isSymbolFromTypeDeclarationFile(symbol) {
            // bail out if symbol does not have associated declarations (i.e. this is transient symbol created for property in binding pattern)
            if (!symbol.declarations) {
                return false;
            }
            // walk the parent chain for symbols to make sure that top level parent symbol is in the global scope
            // external modules cannot define or contribute to type declaration files
            var current = symbol;
            while (true) {
                var parent_21 = getParentOfSymbol(current);
                if (parent_21) {
                    current = parent_21;
                }
                else {
                    break;
                }
            }
            if (current.valueDeclaration && current.valueDeclaration.kind === 311 /* SyntaxKind.SourceFile */ && current.flags & 512 /* SymbolFlags.ValueModule */) {
                return false;
            }
            // check that at least one declaration of top level symbol originates from type declaration file
            for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {
                var decl = _a[_i];
                var file = (0, ts_1.getSourceFileOfNode)(decl);
                if (fileToDirective.has(file.path)) {
                    return true;
                }
            }
            return false;
        }
        function addReferencedFilesToTypeDirective(file, key, mode) {
            if (fileToDirective.has(file.path))
                return;
            fileToDirective.set(file.path, [key, mode]);
            for (var _i = 0, _a = file.referencedFiles; _i < _a.length; _i++) {
                var _b = _a[_i], fileName = _b.fileName, resolutionMode = _b.resolutionMode;
                var resolvedFile = (0, ts_1.resolveTripleslashReference)(fileName, file.fileName);
                var referencedFile = host.getSourceFile(resolvedFile);
                if (referencedFile) {
                    addReferencedFilesToTypeDirective(referencedFile, key, resolutionMode || file.impliedNodeFormat);
                }
            }
        }
    }
    function getExternalModuleFileFromDeclaration(declaration) {
        var specifier = declaration.kind === 266 /* SyntaxKind.ModuleDeclaration */ ? (0, ts_1.tryCast)(declaration.name, ts_1.isStringLiteral) : (0, ts_1.getExternalModuleName)(declaration);
        var moduleSymbol = resolveExternalModuleNameWorker(specifier, specifier, /*moduleNotFoundError*/ undefined); // TODO: GH#18217
        if (!moduleSymbol) {
            return undefined;
        }
        return (0, ts_1.getDeclarationOfKind)(moduleSymbol, 311 /* SyntaxKind.SourceFile */);
    }
    function initializeTypeChecker() {
        // Bind all source files and propagate errors
        for (var _i = 0, _a = host.getSourceFiles(); _i < _a.length; _i++) {
            var file = _a[_i];
            (0, ts_1.bindSourceFile)(file, compilerOptions);
        }
        amalgamatedDuplicates = new Map();
        // Initialize global symbol table
        var augmentations;
        for (var _b = 0, _c = host.getSourceFiles(); _b < _c.length; _b++) {
            var file = _c[_b];
            if (file.redirectInfo) {
                continue;
            }
            if (!(0, ts_1.isExternalOrCommonJsModule)(file)) {
                // It is an error for a non-external-module (i.e. script) to declare its own `globalThis`.
                // We can't use `builtinGlobals` for this due to synthetic expando-namespace generation in JS files.
                var fileGlobalThisSymbol = file.locals.get("globalThis");
                if (fileGlobalThisSymbol === null || fileGlobalThisSymbol === void 0 ? void 0 : fileGlobalThisSymbol.declarations) {
                    for (var _d = 0, _e = fileGlobalThisSymbol.declarations; _d < _e.length; _d++) {
                        var declaration = _e[_d];
                        diagnostics.add((0, ts_1.createDiagnosticForNode)(declaration, ts_1.Diagnostics.Declaration_name_conflicts_with_built_in_global_identifier_0, "globalThis"));
                    }
                }
                mergeSymbolTable(globals, file.locals);
            }
            if (file.jsGlobalAugmentations) {
                mergeSymbolTable(globals, file.jsGlobalAugmentations);
            }
            if (file.patternAmbientModules && file.patternAmbientModules.length) {
                patternAmbientModules = (0, ts_1.concatenate)(patternAmbientModules, file.patternAmbientModules);
            }
            if (file.moduleAugmentations.length) {
                (augmentations || (augmentations = [])).push(file.moduleAugmentations);
            }
            if (file.symbol && file.symbol.globalExports) {
                // Merge in UMD exports with first-in-wins semantics (see #9771)
                var source = file.symbol.globalExports;
                source.forEach(function (sourceSymbol, id) {
                    if (!globals.has(id)) {
                        globals.set(id, sourceSymbol);
                    }
                });
            }
        }
        // We do global augmentations separately from module augmentations (and before creating global types) because they
        //  1. Affect global types. We won't have the correct global types until global augmentations are merged. Also,
        //  2. Module augmentation instantiation requires creating the type of a module, which, in turn, can require
        //       checking for an export or property on the module (if export=) which, in turn, can fall back to the
        //       apparent type of the module - either globalObjectType or globalFunctionType - which wouldn't exist if we
        //       did module augmentations prior to finalizing the global types.
        if (augmentations) {
            // merge _global_ module augmentations.
            // this needs to be done after global symbol table is initialized to make sure that all ambient modules are indexed
            for (var _f = 0, augmentations_1 = augmentations; _f < augmentations_1.length; _f++) {
                var list = augmentations_1[_f];
                for (var _g = 0, list_1 = list; _g < list_1.length; _g++) {
                    var augmentation = list_1[_g];
                    if (!(0, ts_1.isGlobalScopeAugmentation)(augmentation.parent))
                        continue;
                    mergeModuleAugmentation(augmentation);
                }
            }
        }
        // Setup global builtins
        addToSymbolTable(globals, builtinGlobals, ts_1.Diagnostics.Declaration_name_conflicts_with_built_in_global_identifier_0);
        getSymbolLinks(undefinedSymbol).type = undefinedWideningType;
        getSymbolLinks(argumentsSymbol).type = getGlobalType("IArguments", /*arity*/ 0, /*reportErrors*/ true);
        getSymbolLinks(unknownSymbol).type = errorType;
        getSymbolLinks(globalThisSymbol).type = createObjectType(16 /* ObjectFlags.Anonymous */, globalThisSymbol);
        // Initialize special types
        globalArrayType = getGlobalType("Array", /*arity*/ 1, /*reportErrors*/ true);
        globalObjectType = getGlobalType("Object", /*arity*/ 0, /*reportErrors*/ true);
        globalFunctionType = getGlobalType("Function", /*arity*/ 0, /*reportErrors*/ true);
        globalCallableFunctionType = strictBindCallApply && getGlobalType("CallableFunction", /*arity*/ 0, /*reportErrors*/ true) || globalFunctionType;
        globalNewableFunctionType = strictBindCallApply && getGlobalType("NewableFunction", /*arity*/ 0, /*reportErrors*/ true) || globalFunctionType;
        globalStringType = getGlobalType("String", /*arity*/ 0, /*reportErrors*/ true);
        globalNumberType = getGlobalType("Number", /*arity*/ 0, /*reportErrors*/ true);
        globalBooleanType = getGlobalType("Boolean", /*arity*/ 0, /*reportErrors*/ true);
        globalRegExpType = getGlobalType("RegExp", /*arity*/ 0, /*reportErrors*/ true);
        anyArrayType = createArrayType(anyType);
        autoArrayType = createArrayType(autoType);
        if (autoArrayType === emptyObjectType) {
            // autoArrayType is used as a marker, so even if global Array type is not defined, it needs to be a unique type
            autoArrayType = createAnonymousType(/*symbol*/ undefined, emptySymbols, ts_1.emptyArray, ts_1.emptyArray, ts_1.emptyArray);
        }
        globalReadonlyArrayType = getGlobalTypeOrUndefined("ReadonlyArray", /*arity*/ 1) || globalArrayType;
        anyReadonlyArrayType = globalReadonlyArrayType ? createTypeFromGenericGlobalType(globalReadonlyArrayType, [anyType]) : anyArrayType;
        globalThisType = getGlobalTypeOrUndefined("ThisType", /*arity*/ 1);
        if (augmentations) {
            // merge _nonglobal_ module augmentations.
            // this needs to be done after global symbol table is initialized to make sure that all ambient modules are indexed
            for (var _h = 0, augmentations_2 = augmentations; _h < augmentations_2.length; _h++) {
                var list = augmentations_2[_h];
                for (var _j = 0, list_2 = list; _j < list_2.length; _j++) {
                    var augmentation = list_2[_j];
                    if ((0, ts_1.isGlobalScopeAugmentation)(augmentation.parent))
                        continue;
                    mergeModuleAugmentation(augmentation);
                }
            }
        }
        amalgamatedDuplicates.forEach(function (_a) {
            var firstFile = _a.firstFile, secondFile = _a.secondFile, conflictingSymbols = _a.conflictingSymbols;
            // If not many things conflict, issue individual errors
            if (conflictingSymbols.size < 8) {
                conflictingSymbols.forEach(function (_a, symbolName) {
                    var isBlockScoped = _a.isBlockScoped, firstFileLocations = _a.firstFileLocations, secondFileLocations = _a.secondFileLocations;
                    var message = isBlockScoped ? ts_1.Diagnostics.Cannot_redeclare_block_scoped_variable_0 : ts_1.Diagnostics.Duplicate_identifier_0;
                    for (var _i = 0, firstFileLocations_1 = firstFileLocations; _i < firstFileLocations_1.length; _i++) {
                        var node = firstFileLocations_1[_i];
                        addDuplicateDeclarationError(node, message, symbolName, secondFileLocations);
                    }
                    for (var _b = 0, secondFileLocations_1 = secondFileLocations; _b < secondFileLocations_1.length; _b++) {
                        var node = secondFileLocations_1[_b];
                        addDuplicateDeclarationError(node, message, symbolName, firstFileLocations);
                    }
                });
            }
            else {
                // Otherwise issue top-level error since the files appear very identical in terms of what they contain
                var list = (0, ts_1.arrayFrom)(conflictingSymbols.keys()).join(", ");
                diagnostics.add((0, ts_1.addRelatedInfo)((0, ts_1.createDiagnosticForNode)(firstFile, ts_1.Diagnostics.Definitions_of_the_following_identifiers_conflict_with_those_in_another_file_Colon_0, list), (0, ts_1.createDiagnosticForNode)(secondFile, ts_1.Diagnostics.Conflicts_are_in_this_file)));
                diagnostics.add((0, ts_1.addRelatedInfo)((0, ts_1.createDiagnosticForNode)(secondFile, ts_1.Diagnostics.Definitions_of_the_following_identifiers_conflict_with_those_in_another_file_Colon_0, list), (0, ts_1.createDiagnosticForNode)(firstFile, ts_1.Diagnostics.Conflicts_are_in_this_file)));
            }
        });
        amalgamatedDuplicates = undefined;
    }
    function checkExternalEmitHelpers(location, helpers) {
        if ((requestedExternalEmitHelpers & helpers) !== helpers && compilerOptions.importHelpers) {
            var sourceFile = (0, ts_1.getSourceFileOfNode)(location);
            if ((0, ts_1.isEffectiveExternalModule)(sourceFile, compilerOptions) && !(location.flags & 16777216 /* NodeFlags.Ambient */)) {
                var helpersModule = resolveHelpersModule(sourceFile, location);
                if (helpersModule !== unknownSymbol) {
                    var uncheckedHelpers = helpers & ~requestedExternalEmitHelpers;
                    for (var helper = 1 /* ExternalEmitHelpers.FirstEmitHelper */; helper <= 16777216 /* ExternalEmitHelpers.LastEmitHelper */; helper <<= 1) {
                        if (uncheckedHelpers & helper) {
                            for (var _i = 0, _a = getHelperNames(helper); _i < _a.length; _i++) {
                                var name_49 = _a[_i];
                                if (requestedExternalEmitHelperNames.has(name_49))
                                    continue;
                                requestedExternalEmitHelperNames.add(name_49);
                                var symbol = resolveSymbol(getSymbol(getExportsOfModule(helpersModule), (0, ts_1.escapeLeadingUnderscores)(name_49), 111551 /* SymbolFlags.Value */));
                                if (!symbol) {
                                    error(location, ts_1.Diagnostics.This_syntax_requires_an_imported_helper_named_1_which_does_not_exist_in_0_Consider_upgrading_your_version_of_0, ts_1.externalHelpersModuleNameText, name_49);
                                }
                                else if (helper & 524288 /* ExternalEmitHelpers.ClassPrivateFieldGet */) {
                                    if (!(0, ts_1.some)(getSignaturesOfSymbol(symbol), function (signature) { return getParameterCount(signature) > 3; })) {
                                        error(location, ts_1.Diagnostics.This_syntax_requires_an_imported_helper_named_1_with_2_parameters_which_is_not_compatible_with_the_one_in_0_Consider_upgrading_your_version_of_0, ts_1.externalHelpersModuleNameText, name_49, 4);
                                    }
                                }
                                else if (helper & 1048576 /* ExternalEmitHelpers.ClassPrivateFieldSet */) {
                                    if (!(0, ts_1.some)(getSignaturesOfSymbol(symbol), function (signature) { return getParameterCount(signature) > 4; })) {
                                        error(location, ts_1.Diagnostics.This_syntax_requires_an_imported_helper_named_1_with_2_parameters_which_is_not_compatible_with_the_one_in_0_Consider_upgrading_your_version_of_0, ts_1.externalHelpersModuleNameText, name_49, 5);
                                    }
                                }
                                else if (helper & 1024 /* ExternalEmitHelpers.SpreadArray */) {
                                    if (!(0, ts_1.some)(getSignaturesOfSymbol(symbol), function (signature) { return getParameterCount(signature) > 2; })) {
                                        error(location, ts_1.Diagnostics.This_syntax_requires_an_imported_helper_named_1_with_2_parameters_which_is_not_compatible_with_the_one_in_0_Consider_upgrading_your_version_of_0, ts_1.externalHelpersModuleNameText, name_49, 3);
                                    }
                                }
                            }
                        }
                    }
                }
                requestedExternalEmitHelpers |= helpers;
            }
        }
    }
    function getHelperNames(helper) {
        switch (helper) {
            case 1 /* ExternalEmitHelpers.Extends */: return ["__extends"];
            case 2 /* ExternalEmitHelpers.Assign */: return ["__assign"];
            case 4 /* ExternalEmitHelpers.Rest */: return ["__rest"];
            case 8 /* ExternalEmitHelpers.Decorate */: return legacyDecorators ? ["__decorate"] : ["__esDecorate", "__runInitializers"];
            case 16 /* ExternalEmitHelpers.Metadata */: return ["__metadata"];
            case 32 /* ExternalEmitHelpers.Param */: return ["__param"];
            case 64 /* ExternalEmitHelpers.Awaiter */: return ["__awaiter"];
            case 128 /* ExternalEmitHelpers.Generator */: return ["__generator"];
            case 256 /* ExternalEmitHelpers.Values */: return ["__values"];
            case 512 /* ExternalEmitHelpers.Read */: return ["__read"];
            case 1024 /* ExternalEmitHelpers.SpreadArray */: return ["__spreadArray"];
            case 2048 /* ExternalEmitHelpers.Await */: return ["__await"];
            case 4096 /* ExternalEmitHelpers.AsyncGenerator */: return ["__asyncGenerator"];
            case 8192 /* ExternalEmitHelpers.AsyncDelegator */: return ["__asyncDelegator"];
            case 16384 /* ExternalEmitHelpers.AsyncValues */: return ["__asyncValues"];
            case 32768 /* ExternalEmitHelpers.ExportStar */: return ["__exportStar"];
            case 65536 /* ExternalEmitHelpers.ImportStar */: return ["__importStar"];
            case 131072 /* ExternalEmitHelpers.ImportDefault */: return ["__importDefault"];
            case 262144 /* ExternalEmitHelpers.MakeTemplateObject */: return ["__makeTemplateObject"];
            case 524288 /* ExternalEmitHelpers.ClassPrivateFieldGet */: return ["__classPrivateFieldGet"];
            case 1048576 /* ExternalEmitHelpers.ClassPrivateFieldSet */: return ["__classPrivateFieldSet"];
            case 2097152 /* ExternalEmitHelpers.ClassPrivateFieldIn */: return ["__classPrivateFieldIn"];
            case 4194304 /* ExternalEmitHelpers.CreateBinding */: return ["__createBinding"];
            case 8388608 /* ExternalEmitHelpers.SetFunctionName */: return ["__setFunctionName"];
            case 16777216 /* ExternalEmitHelpers.PropKey */: return ["__propKey"];
            default: return ts_1.Debug.fail("Unrecognized helper");
        }
    }
    function resolveHelpersModule(node, errorNode) {
        if (!externalHelpersModule) {
            externalHelpersModule = resolveExternalModule(node, ts_1.externalHelpersModuleNameText, ts_1.Diagnostics.This_syntax_requires_an_imported_helper_but_module_0_cannot_be_found, errorNode) || unknownSymbol;
        }
        return externalHelpersModule;
    }
    // GRAMMAR CHECKING
    function checkGrammarModifiers(node) {
        var quickResult = reportObviousDecoratorErrors(node) || reportObviousModifierErrors(node);
        if (quickResult !== undefined) {
            return quickResult;
        }
        if ((0, ts_1.isParameter)(node) && (0, ts_1.parameterIsThisKeyword)(node)) {
            return grammarErrorOnFirstToken(node, ts_1.Diagnostics.Neither_decorators_nor_modifiers_may_be_applied_to_this_parameters);
        }
        var lastStatic, lastDeclare, lastAsync, lastOverride, firstDecorator;
        var flags = 0 /* ModifierFlags.None */;
        var sawExportBeforeDecorators = false;
        // We parse decorators and modifiers in four contiguous chunks:
        // [...leadingDecorators, ...leadingModifiers, ...trailingDecorators, ...trailingModifiers]. It is an error to
        // have both leading and trailing decorators.
        var hasLeadingDecorators = false;
        for (var _i = 0, _a = node.modifiers; _i < _a.length; _i++) {
            var modifier = _a[_i];
            if ((0, ts_1.isDecorator)(modifier)) {
                if (!(0, ts_1.nodeCanBeDecorated)(legacyDecorators, node, node.parent, node.parent.parent)) {
                    if (node.kind === 173 /* SyntaxKind.MethodDeclaration */ && !(0, ts_1.nodeIsPresent)(node.body)) {
                        return grammarErrorOnFirstToken(node, ts_1.Diagnostics.A_decorator_can_only_decorate_a_method_implementation_not_an_overload);
                    }
                    else {
                        return grammarErrorOnFirstToken(node, ts_1.Diagnostics.Decorators_are_not_valid_here);
                    }
                }
                else if (legacyDecorators && (node.kind === 176 /* SyntaxKind.GetAccessor */ || node.kind === 177 /* SyntaxKind.SetAccessor */)) {
                    var accessors = (0, ts_1.getAllAccessorDeclarations)(node.parent.members, node);
                    if ((0, ts_1.hasDecorators)(accessors.firstAccessor) && node === accessors.secondAccessor) {
                        return grammarErrorOnFirstToken(node, ts_1.Diagnostics.Decorators_cannot_be_applied_to_multiple_get_Slashset_accessors_of_the_same_name);
                    }
                }
                // if we've seen any modifiers aside from `export`, `default`, or another decorator, then this is an invalid position
                if (flags & ~(1025 /* ModifierFlags.ExportDefault */ | 131072 /* ModifierFlags.Decorator */)) {
                    return grammarErrorOnNode(modifier, ts_1.Diagnostics.Decorators_are_not_valid_here);
                }
                // if we've already seen leading decorators and leading modifiers, then trailing decorators are an invalid position
                if (hasLeadingDecorators && flags & 126975 /* ModifierFlags.Modifier */) {
                    ts_1.Debug.assertIsDefined(firstDecorator);
                    var sourceFile = (0, ts_1.getSourceFileOfNode)(modifier);
                    if (!hasParseDiagnostics(sourceFile)) {
                        (0, ts_1.addRelatedInfo)(error(modifier, ts_1.Diagnostics.Decorators_may_not_appear_after_export_or_export_default_if_they_also_appear_before_export), (0, ts_1.createDiagnosticForNode)(firstDecorator, ts_1.Diagnostics.Decorator_used_before_export_here));
                        return true;
                    }
                    return false;
                }
                flags |= 131072 /* ModifierFlags.Decorator */;
                // if we have not yet seen a modifier, then these are leading decorators
                if (!(flags & 126975 /* ModifierFlags.Modifier */)) {
                    hasLeadingDecorators = true;
                }
                else if (flags & 1 /* ModifierFlags.Export */) {
                    sawExportBeforeDecorators = true;
                }
                firstDecorator !== null && firstDecorator !== void 0 ? firstDecorator : (firstDecorator = modifier);
            }
            else {
                if (modifier.kind !== 148 /* SyntaxKind.ReadonlyKeyword */) {
                    if (node.kind === 170 /* SyntaxKind.PropertySignature */ || node.kind === 172 /* SyntaxKind.MethodSignature */) {
                        return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_appear_on_a_type_member, (0, ts_1.tokenToString)(modifier.kind));
                    }
                    if (node.kind === 180 /* SyntaxKind.IndexSignature */ && (modifier.kind !== 126 /* SyntaxKind.StaticKeyword */ || !(0, ts_1.isClassLike)(node.parent))) {
                        return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_appear_on_an_index_signature, (0, ts_1.tokenToString)(modifier.kind));
                    }
                }
                if (modifier.kind !== 103 /* SyntaxKind.InKeyword */ && modifier.kind !== 147 /* SyntaxKind.OutKeyword */ && modifier.kind !== 87 /* SyntaxKind.ConstKeyword */) {
                    if (node.kind === 167 /* SyntaxKind.TypeParameter */) {
                        return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_appear_on_a_type_parameter, (0, ts_1.tokenToString)(modifier.kind));
                    }
                }
                switch (modifier.kind) {
                    case 87 /* SyntaxKind.ConstKeyword */:
                        if (node.kind !== 265 /* SyntaxKind.EnumDeclaration */ && node.kind !== 167 /* SyntaxKind.TypeParameter */) {
                            return grammarErrorOnNode(node, ts_1.Diagnostics.A_class_member_cannot_have_the_0_keyword, (0, ts_1.tokenToString)(87 /* SyntaxKind.ConstKeyword */));
                        }
                        var parent_22 = node.parent;
                        if (node.kind === 167 /* SyntaxKind.TypeParameter */ && !((0, ts_1.isFunctionLikeDeclaration)(parent_22) || (0, ts_1.isClassLike)(parent_22) || (0, ts_1.isFunctionTypeNode)(parent_22) ||
                            (0, ts_1.isConstructorTypeNode)(parent_22) || (0, ts_1.isCallSignatureDeclaration)(parent_22) || (0, ts_1.isConstructSignatureDeclaration)(parent_22) || (0, ts_1.isMethodSignature)(parent_22))) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_can_only_appear_on_a_type_parameter_of_a_function_method_or_class, (0, ts_1.tokenToString)(modifier.kind));
                        }
                        break;
                    case 163 /* SyntaxKind.OverrideKeyword */:
                        // If node.kind === SyntaxKind.Parameter, checkParameter reports an error if it's not a parameter property.
                        if (flags & 16384 /* ModifierFlags.Override */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_already_seen, "override");
                        }
                        else if (flags & 2 /* ModifierFlags.Ambient */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "override", "declare");
                        }
                        else if (flags & 64 /* ModifierFlags.Readonly */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, "override", "readonly");
                        }
                        else if (flags & 128 /* ModifierFlags.Accessor */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, "override", "accessor");
                        }
                        else if (flags & 512 /* ModifierFlags.Async */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, "override", "async");
                        }
                        flags |= 16384 /* ModifierFlags.Override */;
                        lastOverride = modifier;
                        break;
                    case 125 /* SyntaxKind.PublicKeyword */:
                    case 124 /* SyntaxKind.ProtectedKeyword */:
                    case 123 /* SyntaxKind.PrivateKeyword */:
                        var text = visibilityToString((0, ts_1.modifierToFlag)(modifier.kind));
                        if (flags & 28 /* ModifierFlags.AccessibilityModifier */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics.Accessibility_modifier_already_seen);
                        }
                        else if (flags & 16384 /* ModifierFlags.Override */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, text, "override");
                        }
                        else if (flags & 32 /* ModifierFlags.Static */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, text, "static");
                        }
                        else if (flags & 128 /* ModifierFlags.Accessor */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, text, "accessor");
                        }
                        else if (flags & 64 /* ModifierFlags.Readonly */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, text, "readonly");
                        }
                        else if (flags & 512 /* ModifierFlags.Async */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, text, "async");
                        }
                        else if (node.parent.kind === 267 /* SyntaxKind.ModuleBlock */ || node.parent.kind === 311 /* SyntaxKind.SourceFile */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_appear_on_a_module_or_namespace_element, text);
                        }
                        else if (flags & 256 /* ModifierFlags.Abstract */) {
                            if (modifier.kind === 123 /* SyntaxKind.PrivateKeyword */) {
                                return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, text, "abstract");
                            }
                            else {
                                return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, text, "abstract");
                            }
                        }
                        else if ((0, ts_1.isPrivateIdentifierClassElementDeclaration)(node)) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics.An_accessibility_modifier_cannot_be_used_with_a_private_identifier);
                        }
                        flags |= (0, ts_1.modifierToFlag)(modifier.kind);
                        break;
                    case 126 /* SyntaxKind.StaticKeyword */:
                        if (flags & 32 /* ModifierFlags.Static */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_already_seen, "static");
                        }
                        else if (flags & 64 /* ModifierFlags.Readonly */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, "static", "readonly");
                        }
                        else if (flags & 512 /* ModifierFlags.Async */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, "static", "async");
                        }
                        else if (flags & 128 /* ModifierFlags.Accessor */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, "static", "accessor");
                        }
                        else if (node.parent.kind === 267 /* SyntaxKind.ModuleBlock */ || node.parent.kind === 311 /* SyntaxKind.SourceFile */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_appear_on_a_module_or_namespace_element, "static");
                        }
                        else if (node.kind === 168 /* SyntaxKind.Parameter */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_appear_on_a_parameter, "static");
                        }
                        else if (flags & 256 /* ModifierFlags.Abstract */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "static", "abstract");
                        }
                        else if (flags & 16384 /* ModifierFlags.Override */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, "static", "override");
                        }
                        flags |= 32 /* ModifierFlags.Static */;
                        lastStatic = modifier;
                        break;
                    case 129 /* SyntaxKind.AccessorKeyword */:
                        if (flags & 128 /* ModifierFlags.Accessor */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_already_seen, "accessor");
                        }
                        else if (flags & 64 /* ModifierFlags.Readonly */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "accessor", "readonly");
                        }
                        else if (flags & 2 /* ModifierFlags.Ambient */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "accessor", "declare");
                        }
                        else if (node.kind !== 171 /* SyntaxKind.PropertyDeclaration */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics.accessor_modifier_can_only_appear_on_a_property_declaration);
                        }
                        flags |= 128 /* ModifierFlags.Accessor */;
                        break;
                    case 148 /* SyntaxKind.ReadonlyKeyword */:
                        if (flags & 64 /* ModifierFlags.Readonly */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_already_seen, "readonly");
                        }
                        else if (node.kind !== 171 /* SyntaxKind.PropertyDeclaration */ && node.kind !== 170 /* SyntaxKind.PropertySignature */ && node.kind !== 180 /* SyntaxKind.IndexSignature */ && node.kind !== 168 /* SyntaxKind.Parameter */) {
                            // If node.kind === SyntaxKind.Parameter, checkParameter reports an error if it's not a parameter property.
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics.readonly_modifier_can_only_appear_on_a_property_declaration_or_index_signature);
                        }
                        else if (flags & 128 /* ModifierFlags.Accessor */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "readonly", "accessor");
                        }
                        flags |= 64 /* ModifierFlags.Readonly */;
                        break;
                    case 95 /* SyntaxKind.ExportKeyword */:
                        if (compilerOptions.verbatimModuleSyntax &&
                            !(node.flags & 16777216 /* NodeFlags.Ambient */) &&
                            node.kind !== 264 /* SyntaxKind.TypeAliasDeclaration */ &&
                            node.kind !== 263 /* SyntaxKind.InterfaceDeclaration */ &&
                            // ModuleDeclaration needs to be checked that it is uninstantiated later
                            node.kind !== 266 /* SyntaxKind.ModuleDeclaration */ &&
                            node.parent.kind === 311 /* SyntaxKind.SourceFile */ &&
                            (moduleKind === ts_1.ModuleKind.CommonJS || (0, ts_1.getSourceFileOfNode)(node).impliedNodeFormat === ts_1.ModuleKind.CommonJS)) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics.A_top_level_export_modifier_cannot_be_used_on_value_declarations_in_a_CommonJS_module_when_verbatimModuleSyntax_is_enabled);
                        }
                        if (flags & 1 /* ModifierFlags.Export */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_already_seen, "export");
                        }
                        else if (flags & 2 /* ModifierFlags.Ambient */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, "export", "declare");
                        }
                        else if (flags & 256 /* ModifierFlags.Abstract */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, "export", "abstract");
                        }
                        else if (flags & 512 /* ModifierFlags.Async */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, "export", "async");
                        }
                        else if ((0, ts_1.isClassLike)(node.parent)) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_appear_on_class_elements_of_this_kind, "export");
                        }
                        else if (node.kind === 168 /* SyntaxKind.Parameter */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_appear_on_a_parameter, "export");
                        }
                        flags |= 1 /* ModifierFlags.Export */;
                        break;
                    case 90 /* SyntaxKind.DefaultKeyword */:
                        var container = node.parent.kind === 311 /* SyntaxKind.SourceFile */ ? node.parent : node.parent.parent;
                        if (container.kind === 266 /* SyntaxKind.ModuleDeclaration */ && !(0, ts_1.isAmbientModule)(container)) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics.A_default_export_can_only_be_used_in_an_ECMAScript_style_module);
                        }
                        else if (!(flags & 1 /* ModifierFlags.Export */)) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, "export", "default");
                        }
                        else if (sawExportBeforeDecorators) {
                            return grammarErrorOnNode(firstDecorator, ts_1.Diagnostics.Decorators_are_not_valid_here);
                        }
                        flags |= 1024 /* ModifierFlags.Default */;
                        break;
                    case 138 /* SyntaxKind.DeclareKeyword */:
                        if (flags & 2 /* ModifierFlags.Ambient */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_already_seen, "declare");
                        }
                        else if (flags & 512 /* ModifierFlags.Async */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_be_used_in_an_ambient_context, "async");
                        }
                        else if (flags & 16384 /* ModifierFlags.Override */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_be_used_in_an_ambient_context, "override");
                        }
                        else if ((0, ts_1.isClassLike)(node.parent) && !(0, ts_1.isPropertyDeclaration)(node)) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_appear_on_class_elements_of_this_kind, "declare");
                        }
                        else if (node.kind === 168 /* SyntaxKind.Parameter */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_appear_on_a_parameter, "declare");
                        }
                        else if ((node.parent.flags & 16777216 /* NodeFlags.Ambient */) && node.parent.kind === 267 /* SyntaxKind.ModuleBlock */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics.A_declare_modifier_cannot_be_used_in_an_already_ambient_context);
                        }
                        else if ((0, ts_1.isPrivateIdentifierClassElementDeclaration)(node)) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_be_used_with_a_private_identifier, "declare");
                        }
                        else if (flags & 128 /* ModifierFlags.Accessor */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "declare", "accessor");
                        }
                        flags |= 2 /* ModifierFlags.Ambient */;
                        lastDeclare = modifier;
                        break;
                    case 128 /* SyntaxKind.AbstractKeyword */:
                        if (flags & 256 /* ModifierFlags.Abstract */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_already_seen, "abstract");
                        }
                        if (node.kind !== 262 /* SyntaxKind.ClassDeclaration */ &&
                            node.kind !== 184 /* SyntaxKind.ConstructorType */) {
                            if (node.kind !== 173 /* SyntaxKind.MethodDeclaration */ &&
                                node.kind !== 171 /* SyntaxKind.PropertyDeclaration */ &&
                                node.kind !== 176 /* SyntaxKind.GetAccessor */ &&
                                node.kind !== 177 /* SyntaxKind.SetAccessor */) {
                                return grammarErrorOnNode(modifier, ts_1.Diagnostics.abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration);
                            }
                            if (!(node.parent.kind === 262 /* SyntaxKind.ClassDeclaration */ && (0, ts_1.hasSyntacticModifier)(node.parent, 256 /* ModifierFlags.Abstract */))) {
                                var message = node.kind === 171 /* SyntaxKind.PropertyDeclaration */
                                    ? ts_1.Diagnostics.Abstract_properties_can_only_appear_within_an_abstract_class
                                    : ts_1.Diagnostics.Abstract_methods_can_only_appear_within_an_abstract_class;
                                return grammarErrorOnNode(modifier, message);
                            }
                            if (flags & 32 /* ModifierFlags.Static */) {
                                return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "static", "abstract");
                            }
                            if (flags & 8 /* ModifierFlags.Private */) {
                                return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "private", "abstract");
                            }
                            if (flags & 512 /* ModifierFlags.Async */ && lastAsync) {
                                return grammarErrorOnNode(lastAsync, ts_1.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "async", "abstract");
                            }
                            if (flags & 16384 /* ModifierFlags.Override */) {
                                return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, "abstract", "override");
                            }
                            if (flags & 128 /* ModifierFlags.Accessor */) {
                                return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, "abstract", "accessor");
                            }
                        }
                        if ((0, ts_1.isNamedDeclaration)(node) && node.name.kind === 81 /* SyntaxKind.PrivateIdentifier */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_be_used_with_a_private_identifier, "abstract");
                        }
                        flags |= 256 /* ModifierFlags.Abstract */;
                        break;
                    case 134 /* SyntaxKind.AsyncKeyword */:
                        if (flags & 512 /* ModifierFlags.Async */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_already_seen, "async");
                        }
                        else if (flags & 2 /* ModifierFlags.Ambient */ || node.parent.flags & 16777216 /* NodeFlags.Ambient */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_be_used_in_an_ambient_context, "async");
                        }
                        else if (node.kind === 168 /* SyntaxKind.Parameter */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_appear_on_a_parameter, "async");
                        }
                        if (flags & 256 /* ModifierFlags.Abstract */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "async", "abstract");
                        }
                        flags |= 512 /* ModifierFlags.Async */;
                        lastAsync = modifier;
                        break;
                    case 103 /* SyntaxKind.InKeyword */:
                    case 147 /* SyntaxKind.OutKeyword */:
                        var inOutFlag = modifier.kind === 103 /* SyntaxKind.InKeyword */ ? 32768 /* ModifierFlags.In */ : 65536 /* ModifierFlags.Out */;
                        var inOutText = modifier.kind === 103 /* SyntaxKind.InKeyword */ ? "in" : "out";
                        if (node.kind !== 167 /* SyntaxKind.TypeParameter */ || !((0, ts_1.isInterfaceDeclaration)(node.parent) || (0, ts_1.isClassLike)(node.parent) || (0, ts_1.isTypeAliasDeclaration)(node.parent))) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_can_only_appear_on_a_type_parameter_of_a_class_interface_or_type_alias, inOutText);
                        }
                        if (flags & inOutFlag) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_already_seen, inOutText);
                        }
                        if (inOutFlag & 32768 /* ModifierFlags.In */ && flags & 65536 /* ModifierFlags.Out */) {
                            return grammarErrorOnNode(modifier, ts_1.Diagnostics._0_modifier_must_precede_1_modifier, "in", "out");
                        }
                        flags |= inOutFlag;
                        break;
                }
            }
        }
        if (node.kind === 175 /* SyntaxKind.Constructor */) {
            if (flags & 32 /* ModifierFlags.Static */) {
                return grammarErrorOnNode(lastStatic, ts_1.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, "static");
            }
            if (flags & 16384 /* ModifierFlags.Override */) {
                return grammarErrorOnNode(lastOverride, ts_1.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, "override"); // TODO: GH#18217
            }
            if (flags & 512 /* ModifierFlags.Async */) {
                return grammarErrorOnNode(lastAsync, ts_1.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, "async");
            }
            return false;
        }
        else if ((node.kind === 271 /* SyntaxKind.ImportDeclaration */ || node.kind === 270 /* SyntaxKind.ImportEqualsDeclaration */) && flags & 2 /* ModifierFlags.Ambient */) {
            return grammarErrorOnNode(lastDeclare, ts_1.Diagnostics.A_0_modifier_cannot_be_used_with_an_import_declaration, "declare");
        }
        else if (node.kind === 168 /* SyntaxKind.Parameter */ && (flags & 16476 /* ModifierFlags.ParameterPropertyModifier */) && (0, ts_1.isBindingPattern)(node.name)) {
            return grammarErrorOnNode(node, ts_1.Diagnostics.A_parameter_property_may_not_be_declared_using_a_binding_pattern);
        }
        else if (node.kind === 168 /* SyntaxKind.Parameter */ && (flags & 16476 /* ModifierFlags.ParameterPropertyModifier */) && node.dotDotDotToken) {
            return grammarErrorOnNode(node, ts_1.Diagnostics.A_parameter_property_cannot_be_declared_using_a_rest_parameter);
        }
        if (flags & 512 /* ModifierFlags.Async */) {
            return checkGrammarAsyncModifier(node, lastAsync);
        }
        return false;
    }
    /**
     * true | false: Early return this value from checkGrammarModifiers.
     * undefined: Need to do full checking on the modifiers.
     */
    function reportObviousModifierErrors(node) {
        if (!node.modifiers)
            return false;
        var modifier = findFirstIllegalModifier(node);
        return modifier && grammarErrorOnFirstToken(modifier, ts_1.Diagnostics.Modifiers_cannot_appear_here);
    }
    function findFirstModifierExcept(node, allowedModifier) {
        var modifier = (0, ts_1.find)(node.modifiers, ts_1.isModifier);
        return modifier && modifier.kind !== allowedModifier ? modifier : undefined;
    }
    function findFirstIllegalModifier(node) {
        switch (node.kind) {
            case 176 /* SyntaxKind.GetAccessor */:
            case 177 /* SyntaxKind.SetAccessor */:
            case 175 /* SyntaxKind.Constructor */:
            case 171 /* SyntaxKind.PropertyDeclaration */:
            case 170 /* SyntaxKind.PropertySignature */:
            case 173 /* SyntaxKind.MethodDeclaration */:
            case 172 /* SyntaxKind.MethodSignature */:
            case 180 /* SyntaxKind.IndexSignature */:
            case 266 /* SyntaxKind.ModuleDeclaration */:
            case 271 /* SyntaxKind.ImportDeclaration */:
            case 270 /* SyntaxKind.ImportEqualsDeclaration */:
            case 277 /* SyntaxKind.ExportDeclaration */:
            case 276 /* SyntaxKind.ExportAssignment */:
            case 217 /* SyntaxKind.FunctionExpression */:
            case 218 /* SyntaxKind.ArrowFunction */:
            case 168 /* SyntaxKind.Parameter */:
            case 167 /* SyntaxKind.TypeParameter */:
                return undefined;
            case 174 /* SyntaxKind.ClassStaticBlockDeclaration */:
            case 302 /* SyntaxKind.PropertyAssignment */:
            case 303 /* SyntaxKind.ShorthandPropertyAssignment */:
            case 269 /* SyntaxKind.NamespaceExportDeclaration */:
            case 281 /* SyntaxKind.MissingDeclaration */:
                return (0, ts_1.find)(node.modifiers, ts_1.isModifier);
            default:
                if (node.parent.kind === 267 /* SyntaxKind.ModuleBlock */ || node.parent.kind === 311 /* SyntaxKind.SourceFile */) {
                    return undefined;
                }
                switch (node.kind) {
                    case 261 /* SyntaxKind.FunctionDeclaration */:
                        return findFirstModifierExcept(node, 134 /* SyntaxKind.AsyncKeyword */);
                    case 262 /* SyntaxKind.ClassDeclaration */:
                    case 184 /* SyntaxKind.ConstructorType */:
                        return findFirstModifierExcept(node, 128 /* SyntaxKind.AbstractKeyword */);
                    case 230 /* SyntaxKind.ClassExpression */:
                    case 263 /* SyntaxKind.InterfaceDeclaration */:
                    case 242 /* SyntaxKind.VariableStatement */:
                    case 264 /* SyntaxKind.TypeAliasDeclaration */:
                        return (0, ts_1.find)(node.modifiers, ts_1.isModifier);
                    case 265 /* SyntaxKind.EnumDeclaration */:
                        return findFirstModifierExcept(node, 87 /* SyntaxKind.ConstKeyword */);
                    default:
                        ts_1.Debug.assertNever(node);
                }
        }
    }
    function reportObviousDecoratorErrors(node) {
        var decorator = findFirstIllegalDecorator(node);
        return decorator && grammarErrorOnFirstToken(decorator, ts_1.Diagnostics.Decorators_are_not_valid_here);
    }
    function findFirstIllegalDecorator(node) {
        return (0, ts_1.canHaveIllegalDecorators)(node) ? (0, ts_1.find)(node.modifiers, ts_1.isDecorator) : undefined;
    }
    function checkGrammarAsyncModifier(node, asyncModifier) {
        switch (node.kind) {
            case 173 /* SyntaxKind.MethodDeclaration */:
            case 261 /* SyntaxKind.FunctionDeclaration */:
            case 217 /* SyntaxKind.FunctionExpression */:
            case 218 /* SyntaxKind.ArrowFunction */:
                return false;
        }
        return grammarErrorOnNode(asyncModifier, ts_1.Diagnostics._0_modifier_cannot_be_used_here, "async");
    }
    function checkGrammarForDisallowedTrailingComma(list, diag) {
        if (diag === void 0) { diag = ts_1.Diagnostics.Trailing_comma_not_allowed; }
        if (list && list.hasTrailingComma) {
            return grammarErrorAtPos(list[0], list.end - ",".length, ",".length, diag);
        }
        return false;
    }
    function checkGrammarTypeParameterList(typeParameters, file) {
        if (typeParameters && typeParameters.length === 0) {
            var start = typeParameters.pos - "<".length;
            var end = (0, ts_1.skipTrivia)(file.text, typeParameters.end) + ">".length;
            return grammarErrorAtPos(file, start, end - start, ts_1.Diagnostics.Type_parameter_list_cannot_be_empty);
        }
        return false;
    }
    function checkGrammarParameterList(parameters) {
        var seenOptionalParameter = false;
        var parameterCount = parameters.length;
        for (var i = 0; i < parameterCount; i++) {
            var parameter = parameters[i];
            if (parameter.dotDotDotToken) {
                if (i !== (parameterCount - 1)) {
                    return grammarErrorOnNode(parameter.dotDotDotToken, ts_1.Diagnostics.A_rest_parameter_must_be_last_in_a_parameter_list);
                }
                if (!(parameter.flags & 16777216 /* NodeFlags.Ambient */)) { // Allow `...foo,` in ambient declarations; see GH#23070
                    checkGrammarForDisallowedTrailingComma(parameters, ts_1.Diagnostics.A_rest_parameter_or_binding_pattern_may_not_have_a_trailing_comma);
                }
                if (parameter.questionToken) {
                    return grammarErrorOnNode(parameter.questionToken, ts_1.Diagnostics.A_rest_parameter_cannot_be_optional);
                }
                if (parameter.initializer) {
                    return grammarErrorOnNode(parameter.name, ts_1.Diagnostics.A_rest_parameter_cannot_have_an_initializer);
                }
            }
            else if (isOptionalParameter(parameter)) {
                seenOptionalParameter = true;
                if (parameter.questionToken && parameter.initializer) {
                    return grammarErrorOnNode(parameter.name, ts_1.Diagnostics.Parameter_cannot_have_question_mark_and_initializer);
                }
            }
            else if (seenOptionalParameter && !parameter.initializer) {
                return grammarErrorOnNode(parameter.name, ts_1.Diagnostics.A_required_parameter_cannot_follow_an_optional_parameter);
            }
        }
    }
    function getNonSimpleParameters(parameters) {
        return (0, ts_1.filter)(parameters, function (parameter) { return !!parameter.initializer || (0, ts_1.isBindingPattern)(parameter.name) || (0, ts_1.isRestParameter)(parameter); });
    }
    function checkGrammarForUseStrictSimpleParameterList(node) {
        if (languageVersion >= 3 /* ScriptTarget.ES2016 */) {
            var useStrictDirective_1 = node.body && (0, ts_1.isBlock)(node.body) && (0, ts_1.findUseStrictPrologue)(node.body.statements);
            if (useStrictDirective_1) {
                var nonSimpleParameters = getNonSimpleParameters(node.parameters);
                if ((0, ts_1.length)(nonSimpleParameters)) {
                    (0, ts_1.forEach)(nonSimpleParameters, function (parameter) {
                        (0, ts_1.addRelatedInfo)(error(parameter, ts_1.Diagnostics.This_parameter_is_not_allowed_with_use_strict_directive), (0, ts_1.createDiagnosticForNode)(useStrictDirective_1, ts_1.Diagnostics.use_strict_directive_used_here));
                    });
                    var diagnostics_1 = nonSimpleParameters.map(function (parameter, index) { return (index === 0 ? (0, ts_1.createDiagnosticForNode)(parameter, ts_1.Diagnostics.Non_simple_parameter_declared_here) : (0, ts_1.createDiagnosticForNode)(parameter, ts_1.Diagnostics.and_here)); });
                    ts_1.addRelatedInfo.apply(void 0, __spreadArray([error(useStrictDirective_1, ts_1.Diagnostics.use_strict_directive_cannot_be_used_with_non_simple_parameter_list)], diagnostics_1, false));
                    return true;
                }
            }
        }
        return false;
    }
    function checkGrammarFunctionLikeDeclaration(node) {
        // Prevent cascading error by short-circuit
        var file = (0, ts_1.getSourceFileOfNode)(node);
        return checkGrammarModifiers(node) ||
            checkGrammarTypeParameterList(node.typeParameters, file) ||
            checkGrammarParameterList(node.parameters) ||
            checkGrammarArrowFunction(node, file) ||
            ((0, ts_1.isFunctionLikeDeclaration)(node) && checkGrammarForUseStrictSimpleParameterList(node));
    }
    function checkGrammarClassLikeDeclaration(node) {
        var file = (0, ts_1.getSourceFileOfNode)(node);
        return checkGrammarClassDeclarationHeritageClauses(node) ||
            checkGrammarTypeParameterList(node.typeParameters, file);
    }
    function checkGrammarArrowFunction(node, file) {
        if (!(0, ts_1.isArrowFunction)(node)) {
            return false;
        }
        if (node.typeParameters && !((0, ts_1.length)(node.typeParameters) > 1 || node.typeParameters.hasTrailingComma || node.typeParameters[0].constraint)) {
            if (file && (0, ts_1.fileExtensionIsOneOf)(file.fileName, [".mts" /* Extension.Mts */, ".cts" /* Extension.Cts */])) {
                grammarErrorOnNode(node.typeParameters[0], ts_1.Diagnostics.This_syntax_is_reserved_in_files_with_the_mts_or_cts_extension_Add_a_trailing_comma_or_explicit_constraint);
            }
        }
        var equalsGreaterThanToken = node.equalsGreaterThanToken;
        var startLine = (0, ts_1.getLineAndCharacterOfPosition)(file, equalsGreaterThanToken.pos).line;
        var endLine = (0, ts_1.getLineAndCharacterOfPosition)(file, equalsGreaterThanToken.end).line;
        return startLine !== endLine && grammarErrorOnNode(equalsGreaterThanToken, ts_1.Diagnostics.Line_terminator_not_permitted_before_arrow);
    }
    function checkGrammarIndexSignatureParameters(node) {
        var parameter = node.parameters[0];
        if (node.parameters.length !== 1) {
            if (parameter) {
                return grammarErrorOnNode(parameter.name, ts_1.Diagnostics.An_index_signature_must_have_exactly_one_parameter);
            }
            else {
                return grammarErrorOnNode(node, ts_1.Diagnostics.An_index_signature_must_have_exactly_one_parameter);
            }
        }
        checkGrammarForDisallowedTrailingComma(node.parameters, ts_1.Diagnostics.An_index_signature_cannot_have_a_trailing_comma);
        if (parameter.dotDotDotToken) {
            return grammarErrorOnNode(parameter.dotDotDotToken, ts_1.Diagnostics.An_index_signature_cannot_have_a_rest_parameter);
        }
        if ((0, ts_1.hasEffectiveModifiers)(parameter)) {
            return grammarErrorOnNode(parameter.name, ts_1.Diagnostics.An_index_signature_parameter_cannot_have_an_accessibility_modifier);
        }
        if (parameter.questionToken) {
            return grammarErrorOnNode(parameter.questionToken, ts_1.Diagnostics.An_index_signature_parameter_cannot_have_a_question_mark);
        }
        if (parameter.initializer) {
            return grammarErrorOnNode(parameter.name, ts_1.Diagnostics.An_index_signature_parameter_cannot_have_an_initializer);
        }
        if (!parameter.type) {
            return grammarErrorOnNode(parameter.name, ts_1.Diagnostics.An_index_signature_parameter_must_have_a_type_annotation);
        }
        var type = getTypeFromTypeNode(parameter.type);
        if (someType(type, function (t) { return !!(t.flags & 8576 /* TypeFlags.StringOrNumberLiteralOrUnique */); }) || isGenericType(type)) {
            return grammarErrorOnNode(parameter.name, ts_1.Diagnostics.An_index_signature_parameter_type_cannot_be_a_literal_type_or_generic_type_Consider_using_a_mapped_object_type_instead);
        }
        if (!everyType(type, isValidIndexKeyType)) {
            return grammarErrorOnNode(parameter.name, ts_1.Diagnostics.An_index_signature_parameter_type_must_be_string_number_symbol_or_a_template_literal_type);
        }
        if (!node.type) {
            return grammarErrorOnNode(node, ts_1.Diagnostics.An_index_signature_must_have_a_type_annotation);
        }
        return false;
    }
    function checkGrammarIndexSignature(node) {
        // Prevent cascading error by short-circuit
        return checkGrammarModifiers(node) || checkGrammarIndexSignatureParameters(node);
    }
    function checkGrammarForAtLeastOneTypeArgument(node, typeArguments) {
        if (typeArguments && typeArguments.length === 0) {
            var sourceFile = (0, ts_1.getSourceFileOfNode)(node);
            var start = typeArguments.pos - "<".length;
            var end = (0, ts_1.skipTrivia)(sourceFile.text, typeArguments.end) + ">".length;
            return grammarErrorAtPos(sourceFile, start, end - start, ts_1.Diagnostics.Type_argument_list_cannot_be_empty);
        }
        return false;
    }
    function checkGrammarTypeArguments(node, typeArguments) {
        return checkGrammarForDisallowedTrailingComma(typeArguments) ||
            checkGrammarForAtLeastOneTypeArgument(node, typeArguments);
    }
    function checkGrammarTaggedTemplateChain(node) {
        if (node.questionDotToken || node.flags & 32 /* NodeFlags.OptionalChain */) {
            return grammarErrorOnNode(node.template, ts_1.Diagnostics.Tagged_template_expressions_are_not_permitted_in_an_optional_chain);
        }
        return false;
    }
    function checkGrammarHeritageClause(node) {
        var types = node.types;
        if (checkGrammarForDisallowedTrailingComma(types)) {
            return true;
        }
        if (types && types.length === 0) {
            var listType = (0, ts_1.tokenToString)(node.token);
            return grammarErrorAtPos(node, types.pos, 0, ts_1.Diagnostics._0_list_cannot_be_empty, listType);
        }
        return (0, ts_1.some)(types, checkGrammarExpressionWithTypeArguments);
    }
    function checkGrammarExpressionWithTypeArguments(node) {
        if ((0, ts_1.isExpressionWithTypeArguments)(node) && (0, ts_1.isImportKeyword)(node.expression) && node.typeArguments) {
            return grammarErrorOnNode(node, ts_1.Diagnostics.This_use_of_import_is_invalid_import_calls_can_be_written_but_they_must_have_parentheses_and_cannot_have_type_arguments);
        }
        return checkGrammarTypeArguments(node, node.typeArguments);
    }
    function checkGrammarClassDeclarationHeritageClauses(node) {
        var seenExtendsClause = false;
        var seenImplementsClause = false;
        if (!checkGrammarModifiers(node) && node.heritageClauses) {
            for (var _i = 0, _a = node.heritageClauses; _i < _a.length; _i++) {
                var heritageClause = _a[_i];
                if (heritageClause.token === 96 /* SyntaxKind.ExtendsKeyword */) {
                    if (seenExtendsClause) {
                        return grammarErrorOnFirstToken(heritageClause, ts_1.Diagnostics.extends_clause_already_seen);
                    }
                    if (seenImplementsClause) {
                        return grammarErrorOnFirstToken(heritageClause, ts_1.Diagnostics.extends_clause_must_precede_implements_clause);
                    }
                    if (heritageClause.types.length > 1) {
                        return grammarErrorOnFirstToken(heritageClause.types[1], ts_1.Diagnostics.Classes_can_only_extend_a_single_class);
                    }
                    seenExtendsClause = true;
                }
                else {
                    ts_1.Debug.assert(heritageClause.token === 119 /* SyntaxKind.ImplementsKeyword */);
                    if (seenImplementsClause) {
                        return grammarErrorOnFirstToken(heritageClause, ts_1.Diagnostics.implements_clause_already_seen);
                    }
                    seenImplementsClause = true;
                }
                // Grammar checking heritageClause inside class declaration
                checkGrammarHeritageClause(heritageClause);
            }
        }
    }
    function checkGrammarInterfaceDeclaration(node) {
        var seenExtendsClause = false;
        if (node.heritageClauses) {
            for (var _i = 0, _a = node.heritageClauses; _i < _a.length; _i++) {
                var heritageClause = _a[_i];
                if (heritageClause.token === 96 /* SyntaxKind.ExtendsKeyword */) {
                    if (seenExtendsClause) {
                        return grammarErrorOnFirstToken(heritageClause, ts_1.Diagnostics.extends_clause_already_seen);
                    }
                    seenExtendsClause = true;
                }
                else {
                    ts_1.Debug.assert(heritageClause.token === 119 /* SyntaxKind.ImplementsKeyword */);
                    return grammarErrorOnFirstToken(heritageClause, ts_1.Diagnostics.Interface_declaration_cannot_have_implements_clause);
                }
                // Grammar checking heritageClause inside class declaration
                checkGrammarHeritageClause(heritageClause);
            }
        }
        return false;
    }
    function checkGrammarComputedPropertyName(node) {
        // If node is not a computedPropertyName, just skip the grammar checking
        if (node.kind !== 166 /* SyntaxKind.ComputedPropertyName */) {
            return false;
        }
        var computedPropertyName = node;
        if (computedPropertyName.expression.kind === 225 /* SyntaxKind.BinaryExpression */ && computedPropertyName.expression.operatorToken.kind === 28 /* SyntaxKind.CommaToken */) {
            return grammarErrorOnNode(computedPropertyName.expression, ts_1.Diagnostics.A_comma_expression_is_not_allowed_in_a_computed_property_name);
        }
        return false;
    }
    function checkGrammarForGenerator(node) {
        if (node.asteriskToken) {
            ts_1.Debug.assert(node.kind === 261 /* SyntaxKind.FunctionDeclaration */ ||
                node.kind === 217 /* SyntaxKind.FunctionExpression */ ||
                node.kind === 173 /* SyntaxKind.MethodDeclaration */);
            if (node.flags & 16777216 /* NodeFlags.Ambient */) {
                return grammarErrorOnNode(node.asteriskToken, ts_1.Diagnostics.Generators_are_not_allowed_in_an_ambient_context);
            }
            if (!node.body) {
                return grammarErrorOnNode(node.asteriskToken, ts_1.Diagnostics.An_overload_signature_cannot_be_declared_as_a_generator);
            }
        }
    }
    function checkGrammarForInvalidQuestionMark(questionToken, message) {
        return !!questionToken && grammarErrorOnNode(questionToken, message);
    }
    function checkGrammarForInvalidExclamationToken(exclamationToken, message) {
        return !!exclamationToken && grammarErrorOnNode(exclamationToken, message);
    }
    function checkGrammarObjectLiteralExpression(node, inDestructuring) {
        var seen = new Map();
        for (var _i = 0, _a = node.properties; _i < _a.length; _i++) {
            var prop = _a[_i];
            if (prop.kind === 304 /* SyntaxKind.SpreadAssignment */) {
                if (inDestructuring) {
                    // a rest property cannot be destructured any further
                    var expression = (0, ts_1.skipParentheses)(prop.expression);
                    if ((0, ts_1.isArrayLiteralExpression)(expression) || (0, ts_1.isObjectLiteralExpression)(expression)) {
                        return grammarErrorOnNode(prop.expression, ts_1.Diagnostics.A_rest_element_cannot_contain_a_binding_pattern);
                    }
                }
                continue;
            }
            var name_50 = prop.name;
            if (name_50.kind === 166 /* SyntaxKind.ComputedPropertyName */) {
                // If the name is not a ComputedPropertyName, the grammar checking will skip it
                checkGrammarComputedPropertyName(name_50);
            }
            if (prop.kind === 303 /* SyntaxKind.ShorthandPropertyAssignment */ && !inDestructuring && prop.objectAssignmentInitializer) {
                // having objectAssignmentInitializer is only valid in ObjectAssignmentPattern
                // outside of destructuring it is a syntax error
                grammarErrorOnNode(prop.equalsToken, ts_1.Diagnostics.Did_you_mean_to_use_a_Colon_An_can_only_follow_a_property_name_when_the_containing_object_literal_is_part_of_a_destructuring_pattern);
            }
            if (name_50.kind === 81 /* SyntaxKind.PrivateIdentifier */) {
                grammarErrorOnNode(name_50, ts_1.Diagnostics.Private_identifiers_are_not_allowed_outside_class_bodies);
            }
            // Modifiers are never allowed on properties except for 'async' on a method declaration
            if ((0, ts_1.canHaveModifiers)(prop) && prop.modifiers) {
                for (var _b = 0, _c = prop.modifiers; _b < _c.length; _b++) {
                    var mod = _c[_b];
                    if ((0, ts_1.isModifier)(mod) && (mod.kind !== 134 /* SyntaxKind.AsyncKeyword */ || prop.kind !== 173 /* SyntaxKind.MethodDeclaration */)) {
                        grammarErrorOnNode(mod, ts_1.Diagnostics._0_modifier_cannot_be_used_here, (0, ts_1.getTextOfNode)(mod));
                    }
                }
            }
            else if ((0, ts_1.canHaveIllegalModifiers)(prop) && prop.modifiers) {
                for (var _d = 0, _e = prop.modifiers; _d < _e.length; _d++) {
                    var mod = _e[_d];
                    if ((0, ts_1.isModifier)(mod)) {
                        grammarErrorOnNode(mod, ts_1.Diagnostics._0_modifier_cannot_be_used_here, (0, ts_1.getTextOfNode)(mod));
                    }
                }
            }
            // ECMA-262 11.1.5 Object Initializer
            // If previous is not undefined then throw a SyntaxError exception if any of the following conditions are true
            // a.This production is contained in strict code and IsDataDescriptor(previous) is true and
            // IsDataDescriptor(propId.descriptor) is true.
            //    b.IsDataDescriptor(previous) is true and IsAccessorDescriptor(propId.descriptor) is true.
            //    c.IsAccessorDescriptor(previous) is true and IsDataDescriptor(propId.descriptor) is true.
            //    d.IsAccessorDescriptor(previous) is true and IsAccessorDescriptor(propId.descriptor) is true
            // and either both previous and propId.descriptor have[[Get]] fields or both previous and propId.descriptor have[[Set]] fields
            var currentKind = void 0;
            switch (prop.kind) {
                case 303 /* SyntaxKind.ShorthandPropertyAssignment */:
                case 302 /* SyntaxKind.PropertyAssignment */:
                    // Grammar checking for computedPropertyName and shorthandPropertyAssignment
                    checkGrammarForInvalidExclamationToken(prop.exclamationToken, ts_1.Diagnostics.A_definite_assignment_assertion_is_not_permitted_in_this_context);
                    checkGrammarForInvalidQuestionMark(prop.questionToken, ts_1.Diagnostics.An_object_member_cannot_be_declared_optional);
                    if (name_50.kind === 9 /* SyntaxKind.NumericLiteral */) {
                        checkGrammarNumericLiteral(name_50);
                    }
                    currentKind = 4 /* DeclarationMeaning.PropertyAssignment */;
                    break;
                case 173 /* SyntaxKind.MethodDeclaration */:
                    currentKind = 8 /* DeclarationMeaning.Method */;
                    break;
                case 176 /* SyntaxKind.GetAccessor */:
                    currentKind = 1 /* DeclarationMeaning.GetAccessor */;
                    break;
                case 177 /* SyntaxKind.SetAccessor */:
                    currentKind = 2 /* DeclarationMeaning.SetAccessor */;
                    break;
                default:
                    ts_1.Debug.assertNever(prop, "Unexpected syntax kind:" + prop.kind);
            }
            if (!inDestructuring) {
                var effectiveName = getEffectivePropertyNameForPropertyNameNode(name_50);
                if (effectiveName === undefined) {
                    continue;
                }
                var existingKind = seen.get(effectiveName);
                if (!existingKind) {
                    seen.set(effectiveName, currentKind);
                }
                else {
                    if ((currentKind & 8 /* DeclarationMeaning.Method */) && (existingKind & 8 /* DeclarationMeaning.Method */)) {
                        grammarErrorOnNode(name_50, ts_1.Diagnostics.Duplicate_identifier_0, (0, ts_1.getTextOfNode)(name_50));
                    }
                    else if ((currentKind & 4 /* DeclarationMeaning.PropertyAssignment */) && (existingKind & 4 /* DeclarationMeaning.PropertyAssignment */)) {
                        grammarErrorOnNode(name_50, ts_1.Diagnostics.An_object_literal_cannot_have_multiple_properties_with_the_same_name, (0, ts_1.getTextOfNode)(name_50));
                    }
                    else if ((currentKind & 3 /* DeclarationMeaning.GetOrSetAccessor */) && (existingKind & 3 /* DeclarationMeaning.GetOrSetAccessor */)) {
                        if (existingKind !== 3 /* DeclarationMeaning.GetOrSetAccessor */ && currentKind !== existingKind) {
                            seen.set(effectiveName, currentKind | existingKind);
                        }
                        else {
                            return grammarErrorOnNode(name_50, ts_1.Diagnostics.An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name);
                        }
                    }
                    else {
                        return grammarErrorOnNode(name_50, ts_1.Diagnostics.An_object_literal_cannot_have_property_and_accessor_with_the_same_name);
                    }
                }
            }
        }
    }
    function checkGrammarJsxElement(node) {
        checkGrammarJsxName(node.tagName);
        checkGrammarTypeArguments(node, node.typeArguments);
        var seen = new Map();
        for (var _i = 0, _a = node.attributes.properties; _i < _a.length; _i++) {
            var attr = _a[_i];
            if (attr.kind === 292 /* SyntaxKind.JsxSpreadAttribute */) {
                continue;
            }
            var name_51 = attr.name, initializer = attr.initializer;
            var escapedText = (0, ts_1.getEscapedTextOfJsxAttributeName)(name_51);
            if (!seen.get(escapedText)) {
                seen.set(escapedText, true);
            }
            else {
                return grammarErrorOnNode(name_51, ts_1.Diagnostics.JSX_elements_cannot_have_multiple_attributes_with_the_same_name);
            }
            if (initializer && initializer.kind === 293 /* SyntaxKind.JsxExpression */ && !initializer.expression) {
                return grammarErrorOnNode(initializer, ts_1.Diagnostics.JSX_attributes_must_only_be_assigned_a_non_empty_expression);
            }
        }
    }
    function checkGrammarJsxName(node) {
        if ((0, ts_1.isPropertyAccessExpression)(node) && (0, ts_1.isJsxNamespacedName)(node.expression)) {
            return grammarErrorOnNode(node.expression, ts_1.Diagnostics.JSX_property_access_expressions_cannot_include_JSX_namespace_names);
        }
        if ((0, ts_1.isJsxNamespacedName)(node) && (0, ts_1.getJSXTransformEnabled)(compilerOptions) && !(0, ts_1.isIntrinsicJsxName)(node.namespace.escapedText)) {
            return grammarErrorOnNode(node, ts_1.Diagnostics.React_components_cannot_include_JSX_namespace_names);
        }
    }
    function checkGrammarJsxExpression(node) {
        if (node.expression && (0, ts_1.isCommaSequence)(node.expression)) {
            return grammarErrorOnNode(node.expression, ts_1.Diagnostics.JSX_expressions_may_not_use_the_comma_operator_Did_you_mean_to_write_an_array);
        }
    }
    function checkGrammarForInOrForOfStatement(forInOrOfStatement) {
        if (checkGrammarStatementInAmbientContext(forInOrOfStatement)) {
            return true;
        }
        if (forInOrOfStatement.kind === 249 /* SyntaxKind.ForOfStatement */ && forInOrOfStatement.awaitModifier) {
            if (!(forInOrOfStatement.flags & 32768 /* NodeFlags.AwaitContext */)) {
                var sourceFile = (0, ts_1.getSourceFileOfNode)(forInOrOfStatement);
                if ((0, ts_1.isInTopLevelContext)(forInOrOfStatement)) {
                    if (!hasParseDiagnostics(sourceFile)) {
                        if (!(0, ts_1.isEffectiveExternalModule)(sourceFile, compilerOptions)) {
                            diagnostics.add((0, ts_1.createDiagnosticForNode)(forInOrOfStatement.awaitModifier, ts_1.Diagnostics.for_await_loops_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_file_has_no_imports_or_exports_Consider_adding_an_empty_export_to_make_this_file_a_module));
                        }
                        switch (moduleKind) {
                            case ts_1.ModuleKind.Node16:
                            case ts_1.ModuleKind.NodeNext:
                                if (sourceFile.impliedNodeFormat === ts_1.ModuleKind.CommonJS) {
                                    diagnostics.add((0, ts_1.createDiagnosticForNode)(forInOrOfStatement.awaitModifier, ts_1.Diagnostics.The_current_file_is_a_CommonJS_module_and_cannot_use_await_at_the_top_level));
                                    break;
                                }
                            // fallthrough
                            case ts_1.ModuleKind.ES2022:
                            case ts_1.ModuleKind.ESNext:
                            case ts_1.ModuleKind.System:
                                if (languageVersion >= 4 /* ScriptTarget.ES2017 */) {
                                    break;
                                }
                            // fallthrough
                            default:
                                diagnostics.add((0, ts_1.createDiagnosticForNode)(forInOrOfStatement.awaitModifier, ts_1.Diagnostics.Top_level_for_await_loops_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_node16_or_nodenext_and_the_target_option_is_set_to_es2017_or_higher));
                                break;
                        }
                    }
                }
                else {
                    // use of 'for-await-of' in non-async function
                    if (!hasParseDiagnostics(sourceFile)) {
                        var diagnostic = (0, ts_1.createDiagnosticForNode)(forInOrOfStatement.awaitModifier, ts_1.Diagnostics.for_await_loops_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules);
                        var func = (0, ts_1.getContainingFunction)(forInOrOfStatement);
                        if (func && func.kind !== 175 /* SyntaxKind.Constructor */) {
                            ts_1.Debug.assert(((0, ts_1.getFunctionFlags)(func) & 2 /* FunctionFlags.Async */) === 0, "Enclosing function should never be an async function.");
                            var relatedInfo = (0, ts_1.createDiagnosticForNode)(func, ts_1.Diagnostics.Did_you_mean_to_mark_this_function_as_async);
                            (0, ts_1.addRelatedInfo)(diagnostic, relatedInfo);
                        }
                        diagnostics.add(diagnostic);
                        return true;
                    }
                }
                return false;
            }
        }
        if ((0, ts_1.isForOfStatement)(forInOrOfStatement) && !(forInOrOfStatement.flags & 32768 /* NodeFlags.AwaitContext */) &&
            (0, ts_1.isIdentifier)(forInOrOfStatement.initializer) && forInOrOfStatement.initializer.escapedText === "async") {
            grammarErrorOnNode(forInOrOfStatement.initializer, ts_1.Diagnostics.The_left_hand_side_of_a_for_of_statement_may_not_be_async);
            return false;
        }
        if (forInOrOfStatement.initializer.kind === 260 /* SyntaxKind.VariableDeclarationList */) {
            var variableList = forInOrOfStatement.initializer;
            if (!checkGrammarVariableDeclarationList(variableList)) {
                var declarations = variableList.declarations;
                // declarations.length can be zero if there is an error in variable declaration in for-of or for-in
                // See http://www.ecma-international.org/ecma-262/6.0/#sec-for-in-and-for-of-statements for details
                // For example:
                //      var let = 10;
                //      for (let of [1,2,3]) {} // this is invalid ES6 syntax
                //      for (let in [1,2,3]) {} // this is invalid ES6 syntax
                // We will then want to skip on grammar checking on variableList declaration
                if (!declarations.length) {
                    return false;
                }
                if (declarations.length > 1) {
                    var diagnostic = forInOrOfStatement.kind === 248 /* SyntaxKind.ForInStatement */
                        ? ts_1.Diagnostics.Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement
                        : ts_1.Diagnostics.Only_a_single_variable_declaration_is_allowed_in_a_for_of_statement;
                    return grammarErrorOnFirstToken(variableList.declarations[1], diagnostic);
                }
                var firstDeclaration = declarations[0];
                if (firstDeclaration.initializer) {
                    var diagnostic = forInOrOfStatement.kind === 248 /* SyntaxKind.ForInStatement */
                        ? ts_1.Diagnostics.The_variable_declaration_of_a_for_in_statement_cannot_have_an_initializer
                        : ts_1.Diagnostics.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer;
                    return grammarErrorOnNode(firstDeclaration.name, diagnostic);
                }
                if (firstDeclaration.type) {
                    var diagnostic = forInOrOfStatement.kind === 248 /* SyntaxKind.ForInStatement */
                        ? ts_1.Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation
                        : ts_1.Diagnostics.The_left_hand_side_of_a_for_of_statement_cannot_use_a_type_annotation;
                    return grammarErrorOnNode(firstDeclaration, diagnostic);
                }
            }
        }
        return false;
    }
    function checkGrammarAccessor(accessor) {
        if (!(accessor.flags & 16777216 /* NodeFlags.Ambient */) && (accessor.parent.kind !== 186 /* SyntaxKind.TypeLiteral */) && (accessor.parent.kind !== 263 /* SyntaxKind.InterfaceDeclaration */)) {
            if (languageVersion < 1 /* ScriptTarget.ES5 */) {
                return grammarErrorOnNode(accessor.name, ts_1.Diagnostics.Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher);
            }
            if (languageVersion < 2 /* ScriptTarget.ES2015 */ && (0, ts_1.isPrivateIdentifier)(accessor.name)) {
                return grammarErrorOnNode(accessor.name, ts_1.Diagnostics.Private_identifiers_are_only_available_when_targeting_ECMAScript_2015_and_higher);
            }
            if (accessor.body === undefined && !(0, ts_1.hasSyntacticModifier)(accessor, 256 /* ModifierFlags.Abstract */)) {
                return grammarErrorAtPos(accessor, accessor.end - 1, ";".length, ts_1.Diagnostics._0_expected, "{");
            }
        }
        if (accessor.body) {
            if ((0, ts_1.hasSyntacticModifier)(accessor, 256 /* ModifierFlags.Abstract */)) {
                return grammarErrorOnNode(accessor, ts_1.Diagnostics.An_abstract_accessor_cannot_have_an_implementation);
            }
            if (accessor.parent.kind === 186 /* SyntaxKind.TypeLiteral */ || accessor.parent.kind === 263 /* SyntaxKind.InterfaceDeclaration */) {
                return grammarErrorOnNode(accessor.body, ts_1.Diagnostics.An_implementation_cannot_be_declared_in_ambient_contexts);
            }
        }
        if (accessor.typeParameters) {
            return grammarErrorOnNode(accessor.name, ts_1.Diagnostics.An_accessor_cannot_have_type_parameters);
        }
        if (!doesAccessorHaveCorrectParameterCount(accessor)) {
            return grammarErrorOnNode(accessor.name, accessor.kind === 176 /* SyntaxKind.GetAccessor */ ?
                ts_1.Diagnostics.A_get_accessor_cannot_have_parameters :
                ts_1.Diagnostics.A_set_accessor_must_have_exactly_one_parameter);
        }
        if (accessor.kind === 177 /* SyntaxKind.SetAccessor */) {
            if (accessor.type) {
                return grammarErrorOnNode(accessor.name, ts_1.Diagnostics.A_set_accessor_cannot_have_a_return_type_annotation);
            }
            var parameter = ts_1.Debug.checkDefined((0, ts_1.getSetAccessorValueParameter)(accessor), "Return value does not match parameter count assertion.");
            if (parameter.dotDotDotToken) {
                return grammarErrorOnNode(parameter.dotDotDotToken, ts_1.Diagnostics.A_set_accessor_cannot_have_rest_parameter);
            }
            if (parameter.questionToken) {
                return grammarErrorOnNode(parameter.questionToken, ts_1.Diagnostics.A_set_accessor_cannot_have_an_optional_parameter);
            }
            if (parameter.initializer) {
                return grammarErrorOnNode(accessor.name, ts_1.Diagnostics.A_set_accessor_parameter_cannot_have_an_initializer);
            }
        }
        return false;
    }
    /** Does the accessor have the right number of parameters?
     * A get accessor has no parameters or a single `this` parameter.
     * A set accessor has one parameter or a `this` parameter and one more parameter.
     */
    function doesAccessorHaveCorrectParameterCount(accessor) {
        return getAccessorThisParameter(accessor) || accessor.parameters.length === (accessor.kind === 176 /* SyntaxKind.GetAccessor */ ? 0 : 1);
    }
    function getAccessorThisParameter(accessor) {
        if (accessor.parameters.length === (accessor.kind === 176 /* SyntaxKind.GetAccessor */ ? 1 : 2)) {
            return (0, ts_1.getThisParameter)(accessor);
        }
    }
    function checkGrammarTypeOperatorNode(node) {
        if (node.operator === 158 /* SyntaxKind.UniqueKeyword */) {
            if (node.type.kind !== 155 /* SyntaxKind.SymbolKeyword */) {
                return grammarErrorOnNode(node.type, ts_1.Diagnostics._0_expected, (0, ts_1.tokenToString)(155 /* SyntaxKind.SymbolKeyword */));
            }
            var parent_23 = (0, ts_1.walkUpParenthesizedTypes)(node.parent);
            if ((0, ts_1.isInJSFile)(parent_23) && (0, ts_1.isJSDocTypeExpression)(parent_23)) {
                var host_2 = (0, ts_1.getJSDocHost)(parent_23);
                if (host_2) {
                    parent_23 = (0, ts_1.getSingleVariableOfVariableStatement)(host_2) || host_2;
                }
            }
            switch (parent_23.kind) {
                case 259 /* SyntaxKind.VariableDeclaration */:
                    var decl = parent_23;
                    if (decl.name.kind !== 80 /* SyntaxKind.Identifier */) {
                        return grammarErrorOnNode(node, ts_1.Diagnostics.unique_symbol_types_may_not_be_used_on_a_variable_declaration_with_a_binding_name);
                    }
                    if (!(0, ts_1.isVariableDeclarationInVariableStatement)(decl)) {
                        return grammarErrorOnNode(node, ts_1.Diagnostics.unique_symbol_types_are_only_allowed_on_variables_in_a_variable_statement);
                    }
                    if (!(decl.parent.flags & 2 /* NodeFlags.Const */)) {
                        return grammarErrorOnNode(parent_23.name, ts_1.Diagnostics.A_variable_whose_type_is_a_unique_symbol_type_must_be_const);
                    }
                    break;
                case 171 /* SyntaxKind.PropertyDeclaration */:
                    if (!(0, ts_1.isStatic)(parent_23) ||
                        !(0, ts_1.hasEffectiveReadonlyModifier)(parent_23)) {
                        return grammarErrorOnNode(parent_23.name, ts_1.Diagnostics.A_property_of_a_class_whose_type_is_a_unique_symbol_type_must_be_both_static_and_readonly);
                    }
                    break;
                case 170 /* SyntaxKind.PropertySignature */:
                    if (!(0, ts_1.hasSyntacticModifier)(parent_23, 64 /* ModifierFlags.Readonly */)) {
                        return grammarErrorOnNode(parent_23.name, ts_1.Diagnostics.A_property_of_an_interface_or_type_literal_whose_type_is_a_unique_symbol_type_must_be_readonly);
                    }
                    break;
                default:
                    return grammarErrorOnNode(node, ts_1.Diagnostics.unique_symbol_types_are_not_allowed_here);
            }
        }
        else if (node.operator === 148 /* SyntaxKind.ReadonlyKeyword */) {
            if (node.type.kind !== 187 /* SyntaxKind.ArrayType */ && node.type.kind !== 188 /* SyntaxKind.TupleType */) {
                return grammarErrorOnFirstToken(node, ts_1.Diagnostics.readonly_type_modifier_is_only_permitted_on_array_and_tuple_literal_types, (0, ts_1.tokenToString)(155 /* SyntaxKind.SymbolKeyword */));
            }
        }
    }
    function checkGrammarForInvalidDynamicName(node, message) {
        if (isNonBindableDynamicName(node)) {
            return grammarErrorOnNode(node, message);
        }
    }
    function checkGrammarMethod(node) {
        if (checkGrammarFunctionLikeDeclaration(node)) {
            return true;
        }
        if (node.kind === 173 /* SyntaxKind.MethodDeclaration */) {
            if (node.parent.kind === 209 /* SyntaxKind.ObjectLiteralExpression */) {
                // We only disallow modifier on a method declaration if it is a property of object-literal-expression
                if (node.modifiers && !(node.modifiers.length === 1 && (0, ts_1.first)(node.modifiers).kind === 134 /* SyntaxKind.AsyncKeyword */)) {
                    return grammarErrorOnFirstToken(node, ts_1.Diagnostics.Modifiers_cannot_appear_here);
                }
                else if (checkGrammarForInvalidQuestionMark(node.questionToken, ts_1.Diagnostics.An_object_member_cannot_be_declared_optional)) {
                    return true;
                }
                else if (checkGrammarForInvalidExclamationToken(node.exclamationToken, ts_1.Diagnostics.A_definite_assignment_assertion_is_not_permitted_in_this_context)) {
                    return true;
                }
                else if (node.body === undefined) {
                    return grammarErrorAtPos(node, node.end - 1, ";".length, ts_1.Diagnostics._0_expected, "{");
                }
            }
            if (checkGrammarForGenerator(node)) {
                return true;
            }
        }
        if ((0, ts_1.isClassLike)(node.parent)) {
            if (languageVersion < 2 /* ScriptTarget.ES2015 */ && (0, ts_1.isPrivateIdentifier)(node.name)) {
                return grammarErrorOnNode(node.name, ts_1.Diagnostics.Private_identifiers_are_only_available_when_targeting_ECMAScript_2015_and_higher);
            }
            // Technically, computed properties in ambient contexts is disallowed
            // for property declarations and accessors too, not just methods.
            // However, property declarations disallow computed names in general,
            // and accessors are not allowed in ambient contexts in general,
            // so this error only really matters for methods.
            if (node.flags & 16777216 /* NodeFlags.Ambient */) {
                return checkGrammarForInvalidDynamicName(node.name, ts_1.Diagnostics.A_computed_property_name_in_an_ambient_context_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type);
            }
            else if (node.kind === 173 /* SyntaxKind.MethodDeclaration */ && !node.body) {
                return checkGrammarForInvalidDynamicName(node.name, ts_1.Diagnostics.A_computed_property_name_in_a_method_overload_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type);
            }
        }
        else if (node.parent.kind === 263 /* SyntaxKind.InterfaceDeclaration */) {
            return checkGrammarForInvalidDynamicName(node.name, ts_1.Diagnostics.A_computed_property_name_in_an_interface_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type);
        }
        else if (node.parent.kind === 186 /* SyntaxKind.TypeLiteral */) {
            return checkGrammarForInvalidDynamicName(node.name, ts_1.Diagnostics.A_computed_property_name_in_a_type_literal_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type);
        }
    }
    function checkGrammarBreakOrContinueStatement(node) {
        var current = node;
        while (current) {
            if ((0, ts_1.isFunctionLikeOrClassStaticBlockDeclaration)(current)) {
                return grammarErrorOnNode(node, ts_1.Diagnostics.Jump_target_cannot_cross_function_boundary);
            }
            switch (current.kind) {
                case 255 /* SyntaxKind.LabeledStatement */:
                    if (node.label && current.label.escapedText === node.label.escapedText) {
                        // found matching label - verify that label usage is correct
                        // continue can only target labels that are on iteration statements
                        var isMisplacedContinueLabel = node.kind === 250 /* SyntaxKind.ContinueStatement */
                            && !(0, ts_1.isIterationStatement)(current.statement, /*lookInLabeledStatements*/ true);
                        if (isMisplacedContinueLabel) {
                            return grammarErrorOnNode(node, ts_1.Diagnostics.A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement);
                        }
                        return false;
                    }
                    break;
                case 254 /* SyntaxKind.SwitchStatement */:
                    if (node.kind === 251 /* SyntaxKind.BreakStatement */ && !node.label) {
                        // unlabeled break within switch statement - ok
                        return false;
                    }
                    break;
                default:
                    if ((0, ts_1.isIterationStatement)(current, /*lookInLabeledStatements*/ false) && !node.label) {
                        // unlabeled break or continue within iteration statement - ok
                        return false;
                    }
                    break;
            }
            current = current.parent;
        }
        if (node.label) {
            var message = node.kind === 251 /* SyntaxKind.BreakStatement */
                ? ts_1.Diagnostics.A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement
                : ts_1.Diagnostics.A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement;
            return grammarErrorOnNode(node, message);
        }
        else {
            var message = node.kind === 251 /* SyntaxKind.BreakStatement */
                ? ts_1.Diagnostics.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement
                : ts_1.Diagnostics.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement;
            return grammarErrorOnNode(node, message);
        }
    }
    function checkGrammarBindingElement(node) {
        if (node.dotDotDotToken) {
            var elements = node.parent.elements;
            if (node !== (0, ts_1.last)(elements)) {
                return grammarErrorOnNode(node, ts_1.Diagnostics.A_rest_element_must_be_last_in_a_destructuring_pattern);
            }
            checkGrammarForDisallowedTrailingComma(elements, ts_1.Diagnostics.A_rest_parameter_or_binding_pattern_may_not_have_a_trailing_comma);
            if (node.propertyName) {
                return grammarErrorOnNode(node.name, ts_1.Diagnostics.A_rest_element_cannot_have_a_property_name);
            }
        }
        if (node.dotDotDotToken && node.initializer) {
            // Error on equals token which immediately precedes the initializer
            return grammarErrorAtPos(node, node.initializer.pos - 1, 1, ts_1.Diagnostics.A_rest_element_cannot_have_an_initializer);
        }
    }
    function isStringOrNumberLiteralExpression(expr) {
        return (0, ts_1.isStringOrNumericLiteralLike)(expr) ||
            expr.kind === 223 /* SyntaxKind.PrefixUnaryExpression */ && expr.operator === 41 /* SyntaxKind.MinusToken */ &&
                expr.operand.kind === 9 /* SyntaxKind.NumericLiteral */;
    }
    function isBigIntLiteralExpression(expr) {
        return expr.kind === 10 /* SyntaxKind.BigIntLiteral */ ||
            expr.kind === 223 /* SyntaxKind.PrefixUnaryExpression */ && expr.operator === 41 /* SyntaxKind.MinusToken */ &&
                expr.operand.kind === 10 /* SyntaxKind.BigIntLiteral */;
    }
    function isSimpleLiteralEnumReference(expr) {
        if (((0, ts_1.isPropertyAccessExpression)(expr) || ((0, ts_1.isElementAccessExpression)(expr) && isStringOrNumberLiteralExpression(expr.argumentExpression))) &&
            (0, ts_1.isEntityNameExpression)(expr.expression)) {
            return !!(checkExpressionCached(expr).flags & 1056 /* TypeFlags.EnumLike */);
        }
    }
    function checkAmbientInitializer(node) {
        var initializer = node.initializer;
        if (initializer) {
            var isInvalidInitializer = !(isStringOrNumberLiteralExpression(initializer) ||
                isSimpleLiteralEnumReference(initializer) ||
                initializer.kind === 112 /* SyntaxKind.TrueKeyword */ || initializer.kind === 97 /* SyntaxKind.FalseKeyword */ ||
                isBigIntLiteralExpression(initializer));
            var isConstOrReadonly = (0, ts_1.isDeclarationReadonly)(node) || (0, ts_1.isVariableDeclaration)(node) && (0, ts_1.isVarConst)(node);
            if (isConstOrReadonly && !node.type) {
                if (isInvalidInitializer) {
                    return grammarErrorOnNode(initializer, ts_1.Diagnostics.A_const_initializer_in_an_ambient_context_must_be_a_string_or_numeric_literal_or_literal_enum_reference);
                }
            }
            else {
                return grammarErrorOnNode(initializer, ts_1.Diagnostics.Initializers_are_not_allowed_in_ambient_contexts);
            }
        }
    }
    function checkGrammarVariableDeclaration(node) {
        if (node.parent.parent.kind !== 248 /* SyntaxKind.ForInStatement */ && node.parent.parent.kind !== 249 /* SyntaxKind.ForOfStatement */) {
            if (node.flags & 16777216 /* NodeFlags.Ambient */) {
                checkAmbientInitializer(node);
            }
            else if (!node.initializer) {
                if ((0, ts_1.isBindingPattern)(node.name) && !(0, ts_1.isBindingPattern)(node.parent)) {
                    return grammarErrorOnNode(node, ts_1.Diagnostics.A_destructuring_declaration_must_have_an_initializer);
                }
                if ((0, ts_1.isVarConst)(node)) {
                    return grammarErrorOnNode(node, ts_1.Diagnostics.const_declarations_must_be_initialized);
                }
            }
        }
        if (node.exclamationToken && (node.parent.parent.kind !== 242 /* SyntaxKind.VariableStatement */ || !node.type || node.initializer || node.flags & 16777216 /* NodeFlags.Ambient */)) {
            var message = node.initializer
                ? ts_1.Diagnostics.Declarations_with_initializers_cannot_also_have_definite_assignment_assertions
                : !node.type
                    ? ts_1.Diagnostics.Declarations_with_definite_assignment_assertions_must_also_have_type_annotations
                    : ts_1.Diagnostics.A_definite_assignment_assertion_is_not_permitted_in_this_context;
            return grammarErrorOnNode(node.exclamationToken, message);
        }
        if ((moduleKind < ts_1.ModuleKind.ES2015 || (0, ts_1.getSourceFileOfNode)(node).impliedNodeFormat === ts_1.ModuleKind.CommonJS) && moduleKind !== ts_1.ModuleKind.System &&
            !(node.parent.parent.flags & 16777216 /* NodeFlags.Ambient */) && (0, ts_1.hasSyntacticModifier)(node.parent.parent, 1 /* ModifierFlags.Export */)) {
            checkESModuleMarker(node.name);
        }
        var checkLetConstNames = ((0, ts_1.isLet)(node) || (0, ts_1.isVarConst)(node));
        // 1. LexicalDeclaration : LetOrConst BindingList ;
        // It is a Syntax Error if the BoundNames of BindingList contains "let".
        // 2. ForDeclaration: ForDeclaration : LetOrConst ForBinding
        // It is a Syntax Error if the BoundNames of ForDeclaration contains "let".
        // It is a SyntaxError if a VariableDeclaration or VariableDeclarationNoIn occurs within strict code
        // and its Identifier is eval or arguments
        return checkLetConstNames && checkGrammarNameInLetOrConstDeclarations(node.name);
    }
    function checkESModuleMarker(name) {
        if (name.kind === 80 /* SyntaxKind.Identifier */) {
            if ((0, ts_1.idText)(name) === "__esModule") {
                return grammarErrorOnNodeSkippedOn("noEmit", name, ts_1.Diagnostics.Identifier_expected_esModule_is_reserved_as_an_exported_marker_when_transforming_ECMAScript_modules);
            }
        }
        else {
            var elements = name.elements;
            for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
                var element = elements_1[_i];
                if (!(0, ts_1.isOmittedExpression)(element)) {
                    return checkESModuleMarker(element.name);
                }
            }
        }
        return false;
    }
    function checkGrammarNameInLetOrConstDeclarations(name) {
        if (name.kind === 80 /* SyntaxKind.Identifier */) {
            if (name.escapedText === "let") {
                return grammarErrorOnNode(name, ts_1.Diagnostics.let_is_not_allowed_to_be_used_as_a_name_in_let_or_const_declarations);
            }
        }
        else {
            var elements = name.elements;
            for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {
                var element = elements_2[_i];
                if (!(0, ts_1.isOmittedExpression)(element)) {
                    checkGrammarNameInLetOrConstDeclarations(element.name);
                }
            }
        }
        return false;
    }
    function checkGrammarVariableDeclarationList(declarationList) {
        var declarations = declarationList.declarations;
        if (checkGrammarForDisallowedTrailingComma(declarationList.declarations)) {
            return true;
        }
        if (!declarationList.declarations.length) {
            return grammarErrorAtPos(declarationList, declarations.pos, declarations.end - declarations.pos, ts_1.Diagnostics.Variable_declaration_list_cannot_be_empty);
        }
        return false;
    }
    function allowLetAndConstDeclarations(parent) {
        switch (parent.kind) {
            case 244 /* SyntaxKind.IfStatement */:
            case 245 /* SyntaxKind.DoStatement */:
            case 246 /* SyntaxKind.WhileStatement */:
            case 253 /* SyntaxKind.WithStatement */:
            case 247 /* SyntaxKind.ForStatement */:
            case 248 /* SyntaxKind.ForInStatement */:
            case 249 /* SyntaxKind.ForOfStatement */:
                return false;
            case 255 /* SyntaxKind.LabeledStatement */:
                return allowLetAndConstDeclarations(parent.parent);
        }
        return true;
    }
    function checkGrammarForDisallowedLetOrConstStatement(node) {
        if (!allowLetAndConstDeclarations(node.parent)) {
            if ((0, ts_1.isLet)(node.declarationList)) {
                return grammarErrorOnNode(node, ts_1.Diagnostics.let_declarations_can_only_be_declared_inside_a_block);
            }
            else if ((0, ts_1.isVarConst)(node.declarationList)) {
                return grammarErrorOnNode(node, ts_1.Diagnostics.const_declarations_can_only_be_declared_inside_a_block);
            }
        }
    }
    function checkGrammarMetaProperty(node) {
        var escapedText = node.name.escapedText;
        switch (node.keywordToken) {
            case 105 /* SyntaxKind.NewKeyword */:
                if (escapedText !== "target") {
                    return grammarErrorOnNode(node.name, ts_1.Diagnostics._0_is_not_a_valid_meta_property_for_keyword_1_Did_you_mean_2, (0, ts_1.unescapeLeadingUnderscores)(node.name.escapedText), (0, ts_1.tokenToString)(node.keywordToken), "target");
                }
                break;
            case 102 /* SyntaxKind.ImportKeyword */:
                if (escapedText !== "meta") {
                    return grammarErrorOnNode(node.name, ts_1.Diagnostics._0_is_not_a_valid_meta_property_for_keyword_1_Did_you_mean_2, (0, ts_1.unescapeLeadingUnderscores)(node.name.escapedText), (0, ts_1.tokenToString)(node.keywordToken), "meta");
                }
                break;
        }
    }
    function hasParseDiagnostics(sourceFile) {
        return sourceFile.parseDiagnostics.length > 0;
    }
    function grammarErrorOnFirstToken(node, message) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var sourceFile = (0, ts_1.getSourceFileOfNode)(node);
        if (!hasParseDiagnostics(sourceFile)) {
            var span = (0, ts_1.getSpanOfTokenAtPosition)(sourceFile, node.pos);
            diagnostics.add(ts_1.createFileDiagnostic.apply(void 0, __spreadArray([sourceFile, span.start, span.length, message], args, false)));
            return true;
        }
        return false;
    }
    function grammarErrorAtPos(nodeForSourceFile, start, length, message) {
        var args = [];
        for (var _i = 4; _i < arguments.length; _i++) {
            args[_i - 4] = arguments[_i];
        }
        var sourceFile = (0, ts_1.getSourceFileOfNode)(nodeForSourceFile);
        if (!hasParseDiagnostics(sourceFile)) {
            diagnostics.add(ts_1.createFileDiagnostic.apply(void 0, __spreadArray([sourceFile, start, length, message], args, false)));
            return true;
        }
        return false;
    }
    function grammarErrorOnNodeSkippedOn(key, node, message) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        var sourceFile = (0, ts_1.getSourceFileOfNode)(node);
        if (!hasParseDiagnostics(sourceFile)) {
            errorSkippedOn.apply(void 0, __spreadArray([key, node, message], args, false));
            return true;
        }
        return false;
    }
    function grammarErrorOnNode(node, message) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var sourceFile = (0, ts_1.getSourceFileOfNode)(node);
        if (!hasParseDiagnostics(sourceFile)) {
            diagnostics.add(ts_1.createDiagnosticForNode.apply(void 0, __spreadArray([node, message], args, false)));
            return true;
        }
        return false;
    }
    function checkGrammarConstructorTypeParameters(node) {
        var jsdocTypeParameters = (0, ts_1.isInJSFile)(node) ? (0, ts_1.getJSDocTypeParameterDeclarations)(node) : undefined;
        var range = node.typeParameters || jsdocTypeParameters && (0, ts_1.firstOrUndefined)(jsdocTypeParameters);
        if (range) {
            var pos = range.pos === range.end ? range.pos : (0, ts_1.skipTrivia)((0, ts_1.getSourceFileOfNode)(node).text, range.pos);
            return grammarErrorAtPos(node, pos, range.end - pos, ts_1.Diagnostics.Type_parameters_cannot_appear_on_a_constructor_declaration);
        }
    }
    function checkGrammarConstructorTypeAnnotation(node) {
        var type = node.type || (0, ts_1.getEffectiveReturnTypeNode)(node);
        if (type) {
            return grammarErrorOnNode(type, ts_1.Diagnostics.Type_annotation_cannot_appear_on_a_constructor_declaration);
        }
    }
    function checkGrammarProperty(node) {
        if ((0, ts_1.isComputedPropertyName)(node.name) && (0, ts_1.isBinaryExpression)(node.name.expression) && node.name.expression.operatorToken.kind === 103 /* SyntaxKind.InKeyword */) {
            return grammarErrorOnNode(node.parent.members[0], ts_1.Diagnostics.A_mapped_type_may_not_declare_properties_or_methods);
        }
        if ((0, ts_1.isClassLike)(node.parent)) {
            if ((0, ts_1.isStringLiteral)(node.name) && node.name.text === "constructor") {
                return grammarErrorOnNode(node.name, ts_1.Diagnostics.Classes_may_not_have_a_field_named_constructor);
            }
            if (checkGrammarForInvalidDynamicName(node.name, ts_1.Diagnostics.A_computed_property_name_in_a_class_property_declaration_must_have_a_simple_literal_type_or_a_unique_symbol_type)) {
                return true;
            }
            if (languageVersion < 2 /* ScriptTarget.ES2015 */ && (0, ts_1.isPrivateIdentifier)(node.name)) {
                return grammarErrorOnNode(node.name, ts_1.Diagnostics.Private_identifiers_are_only_available_when_targeting_ECMAScript_2015_and_higher);
            }
            if (languageVersion < 2 /* ScriptTarget.ES2015 */ && (0, ts_1.isAutoAccessorPropertyDeclaration)(node)) {
                return grammarErrorOnNode(node.name, ts_1.Diagnostics.Properties_with_the_accessor_modifier_are_only_available_when_targeting_ECMAScript_2015_and_higher);
            }
            if ((0, ts_1.isAutoAccessorPropertyDeclaration)(node) && checkGrammarForInvalidQuestionMark(node.questionToken, ts_1.Diagnostics.An_accessor_property_cannot_be_declared_optional)) {
                return true;
            }
        }
        else if (node.parent.kind === 263 /* SyntaxKind.InterfaceDeclaration */) {
            if (checkGrammarForInvalidDynamicName(node.name, ts_1.Diagnostics.A_computed_property_name_in_an_interface_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type)) {
                return true;
            }
            // Interfaces cannot contain property declarations
            ts_1.Debug.assertNode(node, ts_1.isPropertySignature);
            if (node.initializer) {
                return grammarErrorOnNode(node.initializer, ts_1.Diagnostics.An_interface_property_cannot_have_an_initializer);
            }
        }
        else if ((0, ts_1.isTypeLiteralNode)(node.parent)) {
            if (checkGrammarForInvalidDynamicName(node.name, ts_1.Diagnostics.A_computed_property_name_in_a_type_literal_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type)) {
                return true;
            }
            // Type literals cannot contain property declarations
            ts_1.Debug.assertNode(node, ts_1.isPropertySignature);
            if (node.initializer) {
                return grammarErrorOnNode(node.initializer, ts_1.Diagnostics.A_type_literal_property_cannot_have_an_initializer);
            }
        }
        if (node.flags & 16777216 /* NodeFlags.Ambient */) {
            checkAmbientInitializer(node);
        }
        if ((0, ts_1.isPropertyDeclaration)(node) && node.exclamationToken && (!(0, ts_1.isClassLike)(node.parent) || !node.type || node.initializer ||
            node.flags & 16777216 /* NodeFlags.Ambient */ || (0, ts_1.isStatic)(node) || (0, ts_1.hasAbstractModifier)(node))) {
            var message = node.initializer
                ? ts_1.Diagnostics.Declarations_with_initializers_cannot_also_have_definite_assignment_assertions
                : !node.type
                    ? ts_1.Diagnostics.Declarations_with_definite_assignment_assertions_must_also_have_type_annotations
                    : ts_1.Diagnostics.A_definite_assignment_assertion_is_not_permitted_in_this_context;
            return grammarErrorOnNode(node.exclamationToken, message);
        }
    }
    function checkGrammarTopLevelElementForRequiredDeclareModifier(node) {
        // A declare modifier is required for any top level .d.ts declaration except export=, export default, export as namespace
        // interfaces and imports categories:
        //
        //  DeclarationElement:
        //     ExportAssignment
        //     export_opt   InterfaceDeclaration
        //     export_opt   TypeAliasDeclaration
        //     export_opt   ImportDeclaration
        //     export_opt   ExternalImportDeclaration
        //     export_opt   AmbientDeclaration
        //
        // TODO: The spec needs to be amended to reflect this grammar.
        if (node.kind === 263 /* SyntaxKind.InterfaceDeclaration */ ||
            node.kind === 264 /* SyntaxKind.TypeAliasDeclaration */ ||
            node.kind === 271 /* SyntaxKind.ImportDeclaration */ ||
            node.kind === 270 /* SyntaxKind.ImportEqualsDeclaration */ ||
            node.kind === 277 /* SyntaxKind.ExportDeclaration */ ||
            node.kind === 276 /* SyntaxKind.ExportAssignment */ ||
            node.kind === 269 /* SyntaxKind.NamespaceExportDeclaration */ ||
            (0, ts_1.hasSyntacticModifier)(node, 2 /* ModifierFlags.Ambient */ | 1 /* ModifierFlags.Export */ | 1024 /* ModifierFlags.Default */)) {
            return false;
        }
        return grammarErrorOnFirstToken(node, ts_1.Diagnostics.Top_level_declarations_in_d_ts_files_must_start_with_either_a_declare_or_export_modifier);
    }
    function checkGrammarTopLevelElementsForRequiredDeclareModifier(file) {
        for (var _i = 0, _a = file.statements; _i < _a.length; _i++) {
            var decl = _a[_i];
            if ((0, ts_1.isDeclaration)(decl) || decl.kind === 242 /* SyntaxKind.VariableStatement */) {
                if (checkGrammarTopLevelElementForRequiredDeclareModifier(decl)) {
                    return true;
                }
            }
        }
        return false;
    }
    function checkGrammarSourceFile(node) {
        return !!(node.flags & 16777216 /* NodeFlags.Ambient */) && checkGrammarTopLevelElementsForRequiredDeclareModifier(node);
    }
    function checkGrammarStatementInAmbientContext(node) {
        if (node.flags & 16777216 /* NodeFlags.Ambient */) {
            // Find containing block which is either Block, ModuleBlock, SourceFile
            var links = getNodeLinks(node);
            if (!links.hasReportedStatementInAmbientContext && ((0, ts_1.isFunctionLike)(node.parent) || (0, ts_1.isAccessor)(node.parent))) {
                return getNodeLinks(node).hasReportedStatementInAmbientContext = grammarErrorOnFirstToken(node, ts_1.Diagnostics.An_implementation_cannot_be_declared_in_ambient_contexts);
            }
            // We are either parented by another statement, or some sort of block.
            // If we're in a block, we only want to really report an error once
            // to prevent noisiness.  So use a bit on the block to indicate if
            // this has already been reported, and don't report if it has.
            //
            if (node.parent.kind === 240 /* SyntaxKind.Block */ || node.parent.kind === 267 /* SyntaxKind.ModuleBlock */ || node.parent.kind === 311 /* SyntaxKind.SourceFile */) {
                var links_3 = getNodeLinks(node.parent);
                // Check if the containing block ever report this error
                if (!links_3.hasReportedStatementInAmbientContext) {
                    return links_3.hasReportedStatementInAmbientContext = grammarErrorOnFirstToken(node, ts_1.Diagnostics.Statements_are_not_allowed_in_ambient_contexts);
                }
            }
            else {
                // We must be parented by a statement.  If so, there's no need
                // to report the error as our parent will have already done it.
                // Debug.assert(isStatement(node.parent));
            }
        }
        return false;
    }
    function checkGrammarNumericLiteral(node) {
        // Realism (size) checking
        // We should test against `getTextOfNode(node)` rather than `node.text`, because `node.text` for large numeric literals can contain "."
        // e.g. `node.text` for numeric literal `1100000000000000000000` is `1.1e21`.
        var isFractional = (0, ts_1.getTextOfNode)(node).indexOf(".") !== -1;
        var isScientific = node.numericLiteralFlags & 16 /* TokenFlags.Scientific */;
        // Scientific notation (e.g. 2e54 and 1e00000000010) can't be converted to bigint
        // Fractional numbers (e.g. 9000000000000000.001) are inherently imprecise anyway
        if (isFractional || isScientific) {
            return;
        }
        // Here `node` is guaranteed to be a numeric literal representing an integer.
        // We need to judge whether the integer `node` represents is <= 2 ** 53 - 1, which can be accomplished by comparing to `value` defined below because:
        // 1) when `node` represents an integer <= 2 ** 53 - 1, `node.text` is its exact string representation and thus `value` precisely represents the integer.
        // 2) otherwise, although `node.text` may be imprecise string representation, its mathematical value and consequently `value` cannot be less than 2 ** 53,
        //    thus the result of the predicate won't be affected.
        var value = +node.text;
        if (value <= Math.pow(2, 53) - 1) {
            return;
        }
        addErrorOrSuggestion(/*isError*/ false, (0, ts_1.createDiagnosticForNode)(node, ts_1.Diagnostics.Numeric_literals_with_absolute_values_equal_to_2_53_or_greater_are_too_large_to_be_represented_accurately_as_integers));
    }
    function checkGrammarBigIntLiteral(node) {
        var literalType = (0, ts_1.isLiteralTypeNode)(node.parent) ||
            (0, ts_1.isPrefixUnaryExpression)(node.parent) && (0, ts_1.isLiteralTypeNode)(node.parent.parent);
        if (!literalType) {
            if (languageVersion < 7 /* ScriptTarget.ES2020 */) {
                if (grammarErrorOnNode(node, ts_1.Diagnostics.BigInt_literals_are_not_available_when_targeting_lower_than_ES2020)) {
                    return true;
                }
            }
        }
        return false;
    }
    function grammarErrorAfterFirstToken(node, message) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var sourceFile = (0, ts_1.getSourceFileOfNode)(node);
        if (!hasParseDiagnostics(sourceFile)) {
            var span = (0, ts_1.getSpanOfTokenAtPosition)(sourceFile, node.pos);
            diagnostics.add(ts_1.createFileDiagnostic.apply(void 0, __spreadArray([sourceFile, (0, ts_1.textSpanEnd)(span), /*length*/ 0, message], args, false)));
            return true;
        }
        return false;
    }
    function getAmbientModules() {
        if (!ambientModulesCache) {
            ambientModulesCache = [];
            globals.forEach(function (global, sym) {
                // No need to `unescapeLeadingUnderscores`, an escaped symbol is never an ambient module.
                if (ambientModuleSymbolRegex.test(sym)) {
                    ambientModulesCache.push(global);
                }
            });
        }
        return ambientModulesCache;
    }
    function checkGrammarImportClause(node) {
        var _a;
        if (node.isTypeOnly && node.name && node.namedBindings) {
            return grammarErrorOnNode(node, ts_1.Diagnostics.A_type_only_import_can_specify_a_default_import_or_named_bindings_but_not_both);
        }
        if (node.isTypeOnly && ((_a = node.namedBindings) === null || _a === void 0 ? void 0 : _a.kind) === 274 /* SyntaxKind.NamedImports */) {
            return checkGrammarNamedImportsOrExports(node.namedBindings);
        }
        return false;
    }
    function checkGrammarNamedImportsOrExports(namedBindings) {
        return !!(0, ts_1.forEach)(namedBindings.elements, function (specifier) {
            if (specifier.isTypeOnly) {
                return grammarErrorOnFirstToken(specifier, specifier.kind === 275 /* SyntaxKind.ImportSpecifier */
                    ? ts_1.Diagnostics.The_type_modifier_cannot_be_used_on_a_named_import_when_import_type_is_used_on_its_import_statement
                    : ts_1.Diagnostics.The_type_modifier_cannot_be_used_on_a_named_export_when_export_type_is_used_on_its_export_statement);
            }
        });
    }
    function checkGrammarImportCallExpression(node) {
        if (compilerOptions.verbatimModuleSyntax && moduleKind === ts_1.ModuleKind.CommonJS) {
            return grammarErrorOnNode(node, ts_1.Diagnostics.ESM_syntax_is_not_allowed_in_a_CommonJS_module_when_verbatimModuleSyntax_is_enabled);
        }
        if (moduleKind === ts_1.ModuleKind.ES2015) {
            return grammarErrorOnNode(node, ts_1.Diagnostics.Dynamic_imports_are_only_supported_when_the_module_flag_is_set_to_es2020_es2022_esnext_commonjs_amd_system_umd_node16_or_nodenext);
        }
        if (node.typeArguments) {
            return grammarErrorOnNode(node, ts_1.Diagnostics.This_use_of_import_is_invalid_import_calls_can_be_written_but_they_must_have_parentheses_and_cannot_have_type_arguments);
        }
        var nodeArguments = node.arguments;
        if (moduleKind !== ts_1.ModuleKind.ESNext && moduleKind !== ts_1.ModuleKind.NodeNext && moduleKind !== ts_1.ModuleKind.Node16) {
            // We are allowed trailing comma after proposal-import-assertions.
            checkGrammarForDisallowedTrailingComma(nodeArguments);
            if (nodeArguments.length > 1) {
                var assertionArgument = nodeArguments[1];
                return grammarErrorOnNode(assertionArgument, ts_1.Diagnostics.Dynamic_imports_only_support_a_second_argument_when_the_module_option_is_set_to_esnext_node16_or_nodenext);
            }
        }
        if (nodeArguments.length === 0 || nodeArguments.length > 2) {
            return grammarErrorOnNode(node, ts_1.Diagnostics.Dynamic_imports_can_only_accept_a_module_specifier_and_an_optional_assertion_as_arguments);
        }
        // see: parseArgumentOrArrayLiteralElement...we use this function which parse arguments of callExpression to parse specifier for dynamic import.
        // parseArgumentOrArrayLiteralElement allows spread element to be in an argument list which is not allowed as specifier in dynamic import.
        var spreadElement = (0, ts_1.find)(nodeArguments, ts_1.isSpreadElement);
        if (spreadElement) {
            return grammarErrorOnNode(spreadElement, ts_1.Diagnostics.Argument_of_dynamic_import_cannot_be_spread_element);
        }
        return false;
    }
    function findMatchingTypeReferenceOrTypeAliasReference(source, unionTarget) {
        var sourceObjectFlags = (0, ts_1.getObjectFlags)(source);
        if (sourceObjectFlags & (4 /* ObjectFlags.Reference */ | 16 /* ObjectFlags.Anonymous */) && unionTarget.flags & 1048576 /* TypeFlags.Union */) {
            return (0, ts_1.find)(unionTarget.types, function (target) {
                if (target.flags & 524288 /* TypeFlags.Object */) {
                    var overlapObjFlags = sourceObjectFlags & (0, ts_1.getObjectFlags)(target);
                    if (overlapObjFlags & 4 /* ObjectFlags.Reference */) {
                        return source.target === target.target;
                    }
                    if (overlapObjFlags & 16 /* ObjectFlags.Anonymous */) {
                        return !!source.aliasSymbol && source.aliasSymbol === target.aliasSymbol;
                    }
                }
                return false;
            });
        }
    }
    function findBestTypeForObjectLiteral(source, unionTarget) {
        if ((0, ts_1.getObjectFlags)(source) & 128 /* ObjectFlags.ObjectLiteral */ && someType(unionTarget, isArrayLikeType)) {
            return (0, ts_1.find)(unionTarget.types, function (t) { return !isArrayLikeType(t); });
        }
    }
    function findBestTypeForInvokable(source, unionTarget) {
        var signatureKind = 0 /* SignatureKind.Call */;
        var hasSignatures = getSignaturesOfType(source, signatureKind).length > 0 ||
            (signatureKind = 1 /* SignatureKind.Construct */, getSignaturesOfType(source, signatureKind).length > 0);
        if (hasSignatures) {
            return (0, ts_1.find)(unionTarget.types, function (t) { return getSignaturesOfType(t, signatureKind).length > 0; });
        }
    }
    function findMostOverlappyType(source, unionTarget) {
        var bestMatch;
        if (!(source.flags & (402784252 /* TypeFlags.Primitive */ | 406847488 /* TypeFlags.InstantiablePrimitive */))) {
            var matchingCount = 0;
            for (var _i = 0, _a = unionTarget.types; _i < _a.length; _i++) {
                var target = _a[_i];
                if (!(target.flags & (402784252 /* TypeFlags.Primitive */ | 406847488 /* TypeFlags.InstantiablePrimitive */))) {
                    var overlap = getIntersectionType([getIndexType(source), getIndexType(target)]);
                    if (overlap.flags & 4194304 /* TypeFlags.Index */) {
                        // perfect overlap of keys
                        return target;
                    }
                    else if (isUnitType(overlap) || overlap.flags & 1048576 /* TypeFlags.Union */) {
                        // We only want to account for literal types otherwise.
                        // If we have a union of index types, it seems likely that we
                        // needed to elaborate between two generic mapped types anyway.
                        var len = overlap.flags & 1048576 /* TypeFlags.Union */ ? (0, ts_1.countWhere)(overlap.types, isUnitType) : 1;
                        if (len >= matchingCount) {
                            bestMatch = target;
                            matchingCount = len;
                        }
                    }
                }
            }
        }
        return bestMatch;
    }
    function filterPrimitivesIfContainsNonPrimitive(type) {
        if (maybeTypeOfKind(type, 67108864 /* TypeFlags.NonPrimitive */)) {
            var result = filterType(type, function (t) { return !(t.flags & 402784252 /* TypeFlags.Primitive */); });
            if (!(result.flags & 131072 /* TypeFlags.Never */)) {
                return result;
            }
        }
        return type;
    }
    // Keep this up-to-date with the same logic within `getApparentTypeOfContextualType`, since they should behave similarly
    function findMatchingDiscriminantType(source, target, isRelatedTo) {
        if (target.flags & 1048576 /* TypeFlags.Union */ && source.flags & (2097152 /* TypeFlags.Intersection */ | 524288 /* TypeFlags.Object */)) {
            var match = getMatchingUnionConstituentForType(target, source);
            if (match) {
                return match;
            }
            var sourceProperties = getPropertiesOfType(source);
            if (sourceProperties) {
                var sourcePropertiesFiltered = findDiscriminantProperties(sourceProperties, target);
                if (sourcePropertiesFiltered) {
                    var discriminated = discriminateTypeByDiscriminableItems(target, (0, ts_1.map)(sourcePropertiesFiltered, function (p) { return [function () { return getTypeOfSymbol(p); }, p.escapedName]; }), isRelatedTo);
                    if (discriminated !== target) {
                        return discriminated;
                    }
                }
            }
        }
        return undefined;
    }
    function getEffectivePropertyNameForPropertyNameNode(node) {
        var name = (0, ts_1.getPropertyNameForPropertyNameNode)(node);
        return name ? name :
            (0, ts_1.isComputedPropertyName)(node) && (0, ts_1.isEntityNameExpression)(node.expression) ? tryGetNameFromEntityNameExpression(node.expression) : undefined;
    }
}
exports.createTypeChecker = createTypeChecker;
function isNotAccessor(declaration) {
    // Accessors check for their own matching duplicates, and in contexts where they are valid, there are already duplicate identifier checks
    return !(0, ts_1.isAccessor)(declaration);
}
function isNotOverload(declaration) {
    return (declaration.kind !== 261 /* SyntaxKind.FunctionDeclaration */ && declaration.kind !== 173 /* SyntaxKind.MethodDeclaration */) ||
        !!declaration.body;
}
/** Like 'isDeclarationName', but returns true for LHS of `import { x as y }` or `export { x as y }`. */
function isDeclarationNameOrImportPropertyName(name) {
    switch (name.parent.kind) {
        case 275 /* SyntaxKind.ImportSpecifier */:
        case 280 /* SyntaxKind.ExportSpecifier */:
            return (0, ts_1.isIdentifier)(name);
        default:
            return (0, ts_1.isDeclarationName)(name);
    }
}
var JsxNames;
(function (JsxNames) {
    JsxNames.JSX = "JSX";
    JsxNames.IntrinsicElements = "IntrinsicElements";
    JsxNames.ElementClass = "ElementClass";
    JsxNames.ElementAttributesPropertyNameContainer = "ElementAttributesProperty"; // TODO: Deprecate and remove support
    JsxNames.ElementChildrenAttributeNameContainer = "ElementChildrenAttribute";
    JsxNames.Element = "Element";
    JsxNames.ElementType = "ElementType";
    JsxNames.IntrinsicAttributes = "IntrinsicAttributes";
    JsxNames.IntrinsicClassAttributes = "IntrinsicClassAttributes";
    JsxNames.LibraryManagedAttributes = "LibraryManagedAttributes";
})(JsxNames || (JsxNames = {}));
function getIterationTypesKeyFromIterationTypeKind(typeKind) {
    switch (typeKind) {
        case 0 /* IterationTypeKind.Yield */: return "yieldType";
        case 1 /* IterationTypeKind.Return */: return "returnType";
        case 2 /* IterationTypeKind.Next */: return "nextType";
    }
}
/** @internal */
function signatureHasRestParameter(s) {
    return !!(s.flags & 1 /* SignatureFlags.HasRestParameter */);
}
exports.signatureHasRestParameter = signatureHasRestParameter;
/** @internal */
function signatureHasLiteralTypes(s) {
    return !!(s.flags & 2 /* SignatureFlags.HasLiteralTypes */);
}
exports.signatureHasLiteralTypes = signatureHasLiteralTypes;
function createBasicNodeBuilderModuleSpecifierResolutionHost(host) {
    return {
        getCommonSourceDirectory: !!host.getCommonSourceDirectory ? function () { return host.getCommonSourceDirectory(); } : function () { return ""; },
        getCurrentDirectory: function () { return host.getCurrentDirectory(); },
        getSymlinkCache: (0, ts_1.maybeBind)(host, host.getSymlinkCache),
        getPackageJsonInfoCache: function () { var _a; return (_a = host.getPackageJsonInfoCache) === null || _a === void 0 ? void 0 : _a.call(host); },
        useCaseSensitiveFileNames: (0, ts_1.maybeBind)(host, host.useCaseSensitiveFileNames),
        redirectTargetsMap: host.redirectTargetsMap,
        getProjectReferenceRedirect: function (fileName) { return host.getProjectReferenceRedirect(fileName); },
        isSourceOfProjectReferenceRedirect: function (fileName) { return host.isSourceOfProjectReferenceRedirect(fileName); },
        fileExists: function (fileName) { return host.fileExists(fileName); },
        getFileIncludeReasons: function () { return host.getFileIncludeReasons(); },
        readFile: host.readFile ? (function (fileName) { return host.readFile(fileName); }) : undefined,
    };
}
var SymbolTrackerImpl = /** @class */ (function () {
    function SymbolTrackerImpl(context, tracker, moduleResolverHost) {
        var _a;
        this.moduleResolverHost = undefined;
        this.inner = undefined;
        this.disableTrackSymbol = false;
        while (tracker instanceof SymbolTrackerImpl) {
            tracker = tracker.inner;
        }
        this.inner = tracker;
        this.moduleResolverHost = moduleResolverHost;
        this.context = context;
        this.canTrackSymbol = !!((_a = this.inner) === null || _a === void 0 ? void 0 : _a.trackSymbol);
    }
    SymbolTrackerImpl.prototype.trackSymbol = function (symbol, enclosingDeclaration, meaning) {
        var _a;
        if (((_a = this.inner) === null || _a === void 0 ? void 0 : _a.trackSymbol) && !this.disableTrackSymbol) {
            if (this.inner.trackSymbol(symbol, enclosingDeclaration, meaning)) {
                this.onDiagnosticReported();
                return true;
            }
        }
        return false;
    };
    SymbolTrackerImpl.prototype.reportInaccessibleThisError = function () {
        var _a;
        if ((_a = this.inner) === null || _a === void 0 ? void 0 : _a.reportInaccessibleThisError) {
            this.onDiagnosticReported();
            this.inner.reportInaccessibleThisError();
        }
    };
    SymbolTrackerImpl.prototype.reportPrivateInBaseOfClassExpression = function (propertyName) {
        var _a;
        if ((_a = this.inner) === null || _a === void 0 ? void 0 : _a.reportPrivateInBaseOfClassExpression) {
            this.onDiagnosticReported();
            this.inner.reportPrivateInBaseOfClassExpression(propertyName);
        }
    };
    SymbolTrackerImpl.prototype.reportInaccessibleUniqueSymbolError = function () {
        var _a;
        if ((_a = this.inner) === null || _a === void 0 ? void 0 : _a.reportInaccessibleUniqueSymbolError) {
            this.onDiagnosticReported();
            this.inner.reportInaccessibleUniqueSymbolError();
        }
    };
    SymbolTrackerImpl.prototype.reportCyclicStructureError = function () {
        var _a;
        if ((_a = this.inner) === null || _a === void 0 ? void 0 : _a.reportCyclicStructureError) {
            this.onDiagnosticReported();
            this.inner.reportCyclicStructureError();
        }
    };
    SymbolTrackerImpl.prototype.reportLikelyUnsafeImportRequiredError = function (specifier) {
        var _a;
        if ((_a = this.inner) === null || _a === void 0 ? void 0 : _a.reportLikelyUnsafeImportRequiredError) {
            this.onDiagnosticReported();
            this.inner.reportLikelyUnsafeImportRequiredError(specifier);
        }
    };
    SymbolTrackerImpl.prototype.reportTruncationError = function () {
        var _a;
        if ((_a = this.inner) === null || _a === void 0 ? void 0 : _a.reportTruncationError) {
            this.onDiagnosticReported();
            this.inner.reportTruncationError();
        }
    };
    SymbolTrackerImpl.prototype.trackReferencedAmbientModule = function (decl, symbol) {
        var _a;
        if ((_a = this.inner) === null || _a === void 0 ? void 0 : _a.trackReferencedAmbientModule) {
            this.onDiagnosticReported();
            this.inner.trackReferencedAmbientModule(decl, symbol);
        }
    };
    SymbolTrackerImpl.prototype.trackExternalModuleSymbolOfImportTypeNode = function (symbol) {
        var _a;
        if ((_a = this.inner) === null || _a === void 0 ? void 0 : _a.trackExternalModuleSymbolOfImportTypeNode) {
            this.onDiagnosticReported();
            this.inner.trackExternalModuleSymbolOfImportTypeNode(symbol);
        }
    };
    SymbolTrackerImpl.prototype.reportNonlocalAugmentation = function (containingFile, parentSymbol, augmentingSymbol) {
        var _a;
        if ((_a = this.inner) === null || _a === void 0 ? void 0 : _a.reportNonlocalAugmentation) {
            this.onDiagnosticReported();
            this.inner.reportNonlocalAugmentation(containingFile, parentSymbol, augmentingSymbol);
        }
    };
    SymbolTrackerImpl.prototype.reportNonSerializableProperty = function (propertyName) {
        var _a;
        if ((_a = this.inner) === null || _a === void 0 ? void 0 : _a.reportNonSerializableProperty) {
            this.onDiagnosticReported();
            this.inner.reportNonSerializableProperty(propertyName);
        }
    };
    SymbolTrackerImpl.prototype.reportImportTypeNodeResolutionModeOverride = function () {
        var _a;
        if ((_a = this.inner) === null || _a === void 0 ? void 0 : _a.reportImportTypeNodeResolutionModeOverride) {
            this.onDiagnosticReported();
            this.inner.reportImportTypeNodeResolutionModeOverride();
        }
    };
    SymbolTrackerImpl.prototype.onDiagnosticReported = function () {
        this.context.reportedDiagnostic = true;
    };
    return SymbolTrackerImpl;
}());
