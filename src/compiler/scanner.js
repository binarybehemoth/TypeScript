"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.utf16EncodeAsString = exports.createScanner = exports.isIdentifierText = exports.isIdentifierPart = exports.isIdentifierStart = exports.getShebang = exports.getTrailingCommentRanges = exports.getLeadingCommentRanges = exports.reduceEachTrailingCommentRange = exports.reduceEachLeadingCommentRange = exports.forEachTrailingCommentRange = exports.forEachLeadingCommentRange = exports.scanShebangTrivia = exports.isShebangTrivia = exports.skipTrivia = exports.couldStartTrivia = exports.isOctalDigit = exports.isLineBreak = exports.isWhiteSpaceSingleLine = exports.isWhiteSpaceLike = exports.getLineAndCharacterOfPosition = exports.getLinesBetweenPositions = exports.computeLineOfPosition = exports.computeLineAndCharacterOfPosition = exports.getLineStarts = exports.computePositionOfLineAndCharacter = exports.getPositionOfLineAndCharacter = exports.computeLineStarts = exports.stringToToken = exports.tokenToString = exports.isUnicodeIdentifierStart = exports.textToKeywordObj = exports.tokenIsIdentifierOrKeywordOrGreaterThan = exports.tokenIsIdentifierOrKeyword = void 0;
var ts_1 = require("./_namespaces/ts");
/** @internal */
function tokenIsIdentifierOrKeyword(token) {
    return token >= 80 /* SyntaxKind.Identifier */;
}
exports.tokenIsIdentifierOrKeyword = tokenIsIdentifierOrKeyword;
/** @internal */
function tokenIsIdentifierOrKeywordOrGreaterThan(token) {
    return token === 32 /* SyntaxKind.GreaterThanToken */ || tokenIsIdentifierOrKeyword(token);
}
exports.tokenIsIdentifierOrKeywordOrGreaterThan = tokenIsIdentifierOrKeywordOrGreaterThan;
/** @internal */
exports.textToKeywordObj = (_a = {
        abstract: 128 /* SyntaxKind.AbstractKeyword */,
        accessor: 129 /* SyntaxKind.AccessorKeyword */,
        any: 133 /* SyntaxKind.AnyKeyword */,
        as: 130 /* SyntaxKind.AsKeyword */,
        asserts: 131 /* SyntaxKind.AssertsKeyword */,
        assert: 132 /* SyntaxKind.AssertKeyword */,
        bigint: 162 /* SyntaxKind.BigIntKeyword */,
        boolean: 136 /* SyntaxKind.BooleanKeyword */,
        break: 83 /* SyntaxKind.BreakKeyword */,
        case: 84 /* SyntaxKind.CaseKeyword */,
        catch: 85 /* SyntaxKind.CatchKeyword */,
        class: 86 /* SyntaxKind.ClassKeyword */,
        continue: 88 /* SyntaxKind.ContinueKeyword */,
        const: 87 /* SyntaxKind.ConstKeyword */
    },
    _a["" + "constructor"] = 137 /* SyntaxKind.ConstructorKeyword */,
    _a.debugger = 89 /* SyntaxKind.DebuggerKeyword */,
    _a.declare = 138 /* SyntaxKind.DeclareKeyword */,
    _a.default = 90 /* SyntaxKind.DefaultKeyword */,
    _a.delete = 91 /* SyntaxKind.DeleteKeyword */,
    _a.do = 92 /* SyntaxKind.DoKeyword */,
    _a.else = 93 /* SyntaxKind.ElseKeyword */,
    _a.enum = 94 /* SyntaxKind.EnumKeyword */,
    _a.export = 95 /* SyntaxKind.ExportKeyword */,
    _a.extends = 96 /* SyntaxKind.ExtendsKeyword */,
    _a.false = 97 /* SyntaxKind.FalseKeyword */,
    _a.finally = 98 /* SyntaxKind.FinallyKeyword */,
    _a.for = 99 /* SyntaxKind.ForKeyword */,
    _a.from = 160 /* SyntaxKind.FromKeyword */,
    _a.function = 100 /* SyntaxKind.FunctionKeyword */,
    _a.get = 139 /* SyntaxKind.GetKeyword */,
    _a.if = 101 /* SyntaxKind.IfKeyword */,
    _a.implements = 119 /* SyntaxKind.ImplementsKeyword */,
    _a.import = 102 /* SyntaxKind.ImportKeyword */,
    _a.in = 103 /* SyntaxKind.InKeyword */,
    _a.infer = 140 /* SyntaxKind.InferKeyword */,
    _a.instanceof = 104 /* SyntaxKind.InstanceOfKeyword */,
    _a.interface = 120 /* SyntaxKind.InterfaceKeyword */,
    _a.intrinsic = 141 /* SyntaxKind.IntrinsicKeyword */,
    _a.is = 142 /* SyntaxKind.IsKeyword */,
    _a.keyof = 143 /* SyntaxKind.KeyOfKeyword */,
    _a.let = 121 /* SyntaxKind.LetKeyword */,
    _a.module = 144 /* SyntaxKind.ModuleKeyword */,
    _a.namespace = 145 /* SyntaxKind.NamespaceKeyword */,
    _a.never = 146 /* SyntaxKind.NeverKeyword */,
    _a.new = 105 /* SyntaxKind.NewKeyword */,
    _a.null = 106 /* SyntaxKind.NullKeyword */,
    _a.number = 150 /* SyntaxKind.NumberKeyword */,
    _a.object = 151 /* SyntaxKind.ObjectKeyword */,
    _a.package = 122 /* SyntaxKind.PackageKeyword */,
    _a.private = 123 /* SyntaxKind.PrivateKeyword */,
    _a.protected = 124 /* SyntaxKind.ProtectedKeyword */,
    _a.public = 125 /* SyntaxKind.PublicKeyword */,
    _a.override = 163 /* SyntaxKind.OverrideKeyword */,
    _a.out = 147 /* SyntaxKind.OutKeyword */,
    _a.readonly = 148 /* SyntaxKind.ReadonlyKeyword */,
    _a.require = 149 /* SyntaxKind.RequireKeyword */,
    _a.global = 161 /* SyntaxKind.GlobalKeyword */,
    _a.return = 107 /* SyntaxKind.ReturnKeyword */,
    _a.satisfies = 152 /* SyntaxKind.SatisfiesKeyword */,
    _a.set = 153 /* SyntaxKind.SetKeyword */,
    _a.static = 126 /* SyntaxKind.StaticKeyword */,
    _a.string = 154 /* SyntaxKind.StringKeyword */,
    _a.super = 108 /* SyntaxKind.SuperKeyword */,
    _a.switch = 109 /* SyntaxKind.SwitchKeyword */,
    _a.symbol = 155 /* SyntaxKind.SymbolKeyword */,
    _a.this = 110 /* SyntaxKind.ThisKeyword */,
    _a.throw = 111 /* SyntaxKind.ThrowKeyword */,
    _a.true = 112 /* SyntaxKind.TrueKeyword */,
    _a.try = 113 /* SyntaxKind.TryKeyword */,
    _a.type = 156 /* SyntaxKind.TypeKeyword */,
    _a.typeof = 114 /* SyntaxKind.TypeOfKeyword */,
    _a.undefined = 157 /* SyntaxKind.UndefinedKeyword */,
    _a.unique = 158 /* SyntaxKind.UniqueKeyword */,
    _a.unknown = 159 /* SyntaxKind.UnknownKeyword */,
    _a.var = 115 /* SyntaxKind.VarKeyword */,
    _a.void = 116 /* SyntaxKind.VoidKeyword */,
    _a.while = 117 /* SyntaxKind.WhileKeyword */,
    _a.with = 118 /* SyntaxKind.WithKeyword */,
    _a.yield = 127 /* SyntaxKind.YieldKeyword */,
    _a.async = 134 /* SyntaxKind.AsyncKeyword */,
    _a.await = 135 /* SyntaxKind.AwaitKeyword */,
    _a.of = 164 /* SyntaxKind.OfKeyword */,
    _a);
var textToKeyword = new Map(Object.entries(exports.textToKeywordObj));
var textToToken = new Map(Object.entries(__assign(__assign({}, exports.textToKeywordObj), { "{": 19 /* SyntaxKind.OpenBraceToken */, "}": 20 /* SyntaxKind.CloseBraceToken */, "(": 21 /* SyntaxKind.OpenParenToken */, ")": 22 /* SyntaxKind.CloseParenToken */, "[": 23 /* SyntaxKind.OpenBracketToken */, "]": 24 /* SyntaxKind.CloseBracketToken */, ".": 25 /* SyntaxKind.DotToken */, "...": 26 /* SyntaxKind.DotDotDotToken */, ";": 27 /* SyntaxKind.SemicolonToken */, ",": 28 /* SyntaxKind.CommaToken */, "<": 30 /* SyntaxKind.LessThanToken */, ">": 32 /* SyntaxKind.GreaterThanToken */, "<=": 33 /* SyntaxKind.LessThanEqualsToken */, ">=": 34 /* SyntaxKind.GreaterThanEqualsToken */, "==": 35 /* SyntaxKind.EqualsEqualsToken */, "!=": 36 /* SyntaxKind.ExclamationEqualsToken */, "===": 37 /* SyntaxKind.EqualsEqualsEqualsToken */, "!==": 38 /* SyntaxKind.ExclamationEqualsEqualsToken */, "=>": 39 /* SyntaxKind.EqualsGreaterThanToken */, "+": 40 /* SyntaxKind.PlusToken */, "-": 41 /* SyntaxKind.MinusToken */, "**": 43 /* SyntaxKind.AsteriskAsteriskToken */, "*": 42 /* SyntaxKind.AsteriskToken */, "/": 44 /* SyntaxKind.SlashToken */, "%": 45 /* SyntaxKind.PercentToken */, "++": 46 /* SyntaxKind.PlusPlusToken */, "--": 47 /* SyntaxKind.MinusMinusToken */, "<<": 48 /* SyntaxKind.LessThanLessThanToken */, "</": 31 /* SyntaxKind.LessThanSlashToken */, ">>": 49 /* SyntaxKind.GreaterThanGreaterThanToken */, ">>>": 50 /* SyntaxKind.GreaterThanGreaterThanGreaterThanToken */, "&": 51 /* SyntaxKind.AmpersandToken */, "|": 52 /* SyntaxKind.BarToken */, "^": 53 /* SyntaxKind.CaretToken */, "!": 54 /* SyntaxKind.ExclamationToken */, "~": 55 /* SyntaxKind.TildeToken */, "&&": 56 /* SyntaxKind.AmpersandAmpersandToken */, "||": 57 /* SyntaxKind.BarBarToken */, "?": 58 /* SyntaxKind.QuestionToken */, "??": 61 /* SyntaxKind.QuestionQuestionToken */, "?.": 29 /* SyntaxKind.QuestionDotToken */, ":": 59 /* SyntaxKind.ColonToken */, "=": 64 /* SyntaxKind.EqualsToken */, "+=": 65 /* SyntaxKind.PlusEqualsToken */, "-=": 66 /* SyntaxKind.MinusEqualsToken */, "*=": 67 /* SyntaxKind.AsteriskEqualsToken */, "**=": 68 /* SyntaxKind.AsteriskAsteriskEqualsToken */, "/=": 69 /* SyntaxKind.SlashEqualsToken */, "%=": 70 /* SyntaxKind.PercentEqualsToken */, "<<=": 71 /* SyntaxKind.LessThanLessThanEqualsToken */, ">>=": 72 /* SyntaxKind.GreaterThanGreaterThanEqualsToken */, ">>>=": 73 /* SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken */, "&=": 74 /* SyntaxKind.AmpersandEqualsToken */, "|=": 75 /* SyntaxKind.BarEqualsToken */, "^=": 79 /* SyntaxKind.CaretEqualsToken */, "||=": 76 /* SyntaxKind.BarBarEqualsToken */, "&&=": 77 /* SyntaxKind.AmpersandAmpersandEqualsToken */, "??=": 78 /* SyntaxKind.QuestionQuestionEqualsToken */, "@": 60 /* SyntaxKind.AtToken */, "#": 63 /* SyntaxKind.HashToken */, "`": 62 /* SyntaxKind.BacktickToken */ })));
/*
    As per ECMAScript Language Specification 3th Edition, Section 7.6: Identifiers
    IdentifierStart ::
        Can contain Unicode 3.0.0 categories:
        Uppercase letter (Lu),
        Lowercase letter (Ll),
        Titlecase letter (Lt),
        Modifier letter (Lm),
        Other letter (Lo), or
        Letter number (Nl).
    IdentifierPart :: =
        Can contain IdentifierStart + Unicode 3.0.0 categories:
        Non-spacing mark (Mn),
        Combining spacing mark (Mc),
        Decimal number (Nd), or
        Connector punctuation (Pc).

    Codepoint ranges for ES3 Identifiers are extracted from the Unicode 3.0.0 specification at:
    http://www.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.txt
*/
var unicodeES3IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1610, 1649, 1747, 1749, 1749, 1765, 1766, 1786, 1788, 1808, 1808, 1810, 1836, 1920, 1957, 2309, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2784, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3424, 3425, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840, 3840, 3904, 3911, 3913, 3946, 3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138, 4176, 4181, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12346, 12353, 12436, 12445, 12446, 12449, 12538, 12540, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65138, 65140, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,];
var unicodeES3IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 768, 846, 864, 866, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1155, 1158, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1441, 1443, 1465, 1467, 1469, 1471, 1471, 1473, 1474, 1476, 1476, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1621, 1632, 1641, 1648, 1747, 1749, 1756, 1759, 1768, 1770, 1773, 1776, 1788, 1808, 1836, 1840, 1866, 1920, 1968, 2305, 2307, 2309, 2361, 2364, 2381, 2384, 2388, 2392, 2403, 2406, 2415, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2562, 2562, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2649, 2652, 2654, 2654, 2662, 2676, 2689, 2691, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2784, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2876, 2883, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2913, 2918, 2927, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3047, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3168, 3169, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3297, 3302, 3311, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3390, 3395, 3398, 3400, 3402, 3405, 3415, 3415, 3424, 3425, 3430, 3439, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3805, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3946, 3953, 3972, 3974, 3979, 3984, 3991, 3993, 4028, 4038, 4038, 4096, 4129, 4131, 4135, 4137, 4138, 4140, 4146, 4150, 4153, 4160, 4169, 4176, 4185, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 4969, 4977, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6099, 6112, 6121, 6160, 6169, 6176, 6263, 6272, 6313, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8255, 8256, 8319, 8319, 8400, 8412, 8417, 8417, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12346, 12353, 12436, 12441, 12442, 12445, 12446, 12449, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65056, 65059, 65075, 65076, 65101, 65103, 65136, 65138, 65140, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65381, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,];
/*
    As per ECMAScript Language Specification 5th Edition, Section 7.6: ISyntaxToken Names and Identifiers
    IdentifierStart ::
        Can contain Unicode 6.2 categories:
        Uppercase letter (Lu),
        Lowercase letter (Ll),
        Titlecase letter (Lt),
        Modifier letter (Lm),
        Other letter (Lo), or
        Letter number (Nl).
    IdentifierPart ::
        Can contain IdentifierStart + Unicode 6.2 categories:
        Non-spacing mark (Mn),
        Combining spacing mark (Mc),
        Decimal number (Nd),
        Connector punctuation (Pc),
        <ZWNJ>, or
        <ZWJ>.

    Codepoint ranges for ES5 Identifiers are extracted from the Unicode 6.2 specification at:
    http://www.unicode.org/Public/6.2.0/ucd/UnicodeData.txt
*/
var unicodeES5IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,];
var unicodeES5IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520, 1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788, 1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112, 2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423, 2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929, 2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424, 3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028, 4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155, 7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205, 8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072, 43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309, 43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584, 43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741, 43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,];
/**
 * Generated by scripts/regenerate-unicode-identifier-parts.js on node v12.4.0 with unicode 12.1
 * based on http://www.unicode.org/reports/tr31/ and https://www.ecma-international.org/ecma-262/6.0/#sec-names-and-keywords
 * unicodeESNextIdentifierStart corresponds to the ID_Start and Other_ID_Start property, and
 * unicodeESNextIdentifierPart corresponds to ID_Continue, Other_ID_Continue, plus ID_Start and Other_ID_Start
 */
var unicodeESNextIdentifierStart = [65, 90, 97, 122, 170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 895, 895, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1327, 1329, 1366, 1369, 1369, 1376, 1416, 1488, 1514, 1519, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2144, 2154, 2208, 2228, 2230, 2237, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2432, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2556, 2556, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2809, 2809, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3129, 3133, 3133, 3160, 3162, 3168, 3169, 3200, 3200, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3412, 3414, 3423, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3718, 3722, 3724, 3747, 3749, 3749, 3751, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5109, 5112, 5117, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5880, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6264, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6430, 6480, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7296, 7304, 7312, 7354, 7357, 7359, 7401, 7404, 7406, 7411, 7413, 7414, 7418, 7418, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8472, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12443, 12447, 12449, 12538, 12540, 12543, 12549, 12591, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40943, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42653, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42943, 42946, 42950, 42999, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43261, 43262, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43488, 43492, 43494, 43503, 43514, 43518, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43646, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43824, 43866, 43868, 43879, 43888, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65536, 65547, 65549, 65574, 65576, 65594, 65596, 65597, 65599, 65613, 65616, 65629, 65664, 65786, 65856, 65908, 66176, 66204, 66208, 66256, 66304, 66335, 66349, 66378, 66384, 66421, 66432, 66461, 66464, 66499, 66504, 66511, 66513, 66517, 66560, 66717, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67592, 67594, 67637, 67639, 67640, 67644, 67644, 67647, 67669, 67680, 67702, 67712, 67742, 67808, 67826, 67828, 67829, 67840, 67861, 67872, 67897, 67968, 68023, 68030, 68031, 68096, 68096, 68112, 68115, 68117, 68119, 68121, 68149, 68192, 68220, 68224, 68252, 68288, 68295, 68297, 68324, 68352, 68405, 68416, 68437, 68448, 68466, 68480, 68497, 68608, 68680, 68736, 68786, 68800, 68850, 68864, 68899, 69376, 69404, 69415, 69415, 69424, 69445, 69600, 69622, 69635, 69687, 69763, 69807, 69840, 69864, 69891, 69926, 69956, 69956, 69968, 70002, 70006, 70006, 70019, 70066, 70081, 70084, 70106, 70106, 70108, 70108, 70144, 70161, 70163, 70187, 70272, 70278, 70280, 70280, 70282, 70285, 70287, 70301, 70303, 70312, 70320, 70366, 70405, 70412, 70415, 70416, 70419, 70440, 70442, 70448, 70450, 70451, 70453, 70457, 70461, 70461, 70480, 70480, 70493, 70497, 70656, 70708, 70727, 70730, 70751, 70751, 70784, 70831, 70852, 70853, 70855, 70855, 71040, 71086, 71128, 71131, 71168, 71215, 71236, 71236, 71296, 71338, 71352, 71352, 71424, 71450, 71680, 71723, 71840, 71903, 71935, 71935, 72096, 72103, 72106, 72144, 72161, 72161, 72163, 72163, 72192, 72192, 72203, 72242, 72250, 72250, 72272, 72272, 72284, 72329, 72349, 72349, 72384, 72440, 72704, 72712, 72714, 72750, 72768, 72768, 72818, 72847, 72960, 72966, 72968, 72969, 72971, 73008, 73030, 73030, 73056, 73061, 73063, 73064, 73066, 73097, 73112, 73112, 73440, 73458, 73728, 74649, 74752, 74862, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92766, 92880, 92909, 92928, 92975, 92992, 92995, 93027, 93047, 93053, 93071, 93760, 93823, 93952, 94026, 94032, 94032, 94099, 94111, 94176, 94177, 94179, 94179, 94208, 100343, 100352, 101106, 110592, 110878, 110928, 110930, 110948, 110951, 110960, 111355, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 119808, 119892, 119894, 119964, 119966, 119967, 119970, 119970, 119973, 119974, 119977, 119980, 119982, 119993, 119995, 119995, 119997, 120003, 120005, 120069, 120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121, 120123, 120126, 120128, 120132, 120134, 120134, 120138, 120144, 120146, 120485, 120488, 120512, 120514, 120538, 120540, 120570, 120572, 120596, 120598, 120628, 120630, 120654, 120656, 120686, 120688, 120712, 120714, 120744, 120746, 120770, 120772, 120779, 123136, 123180, 123191, 123197, 123214, 123214, 123584, 123627, 124928, 125124, 125184, 125251, 125259, 125259, 126464, 126467, 126469, 126495, 126497, 126498, 126500, 126500, 126503, 126503, 126505, 126514, 126516, 126519, 126521, 126521, 126523, 126523, 126530, 126530, 126535, 126535, 126537, 126537, 126539, 126539, 126541, 126543, 126545, 126546, 126548, 126548, 126551, 126551, 126553, 126553, 126555, 126555, 126557, 126557, 126559, 126559, 126561, 126562, 126564, 126564, 126567, 126570, 126572, 126578, 126580, 126583, 126585, 126588, 126590, 126590, 126592, 126601, 126603, 126619, 126625, 126627, 126629, 126633, 126635, 126651, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 183984, 191456, 194560, 195101];
var unicodeESNextIdentifierPart = [48, 57, 65, 90, 95, 95, 97, 122, 170, 170, 181, 181, 183, 183, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 895, 895, 902, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1155, 1159, 1162, 1327, 1329, 1366, 1369, 1369, 1376, 1416, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1519, 1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788, 1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2045, 2045, 2048, 2093, 2112, 2139, 2144, 2154, 2208, 2228, 2230, 2237, 2259, 2273, 2275, 2403, 2406, 2415, 2417, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2556, 2556, 2558, 2558, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2809, 2815, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929, 2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024, 3031, 3031, 3046, 3055, 3072, 3084, 3086, 3088, 3090, 3112, 3114, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3160, 3162, 3168, 3171, 3174, 3183, 3200, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3328, 3331, 3333, 3340, 3342, 3344, 3346, 3396, 3398, 3400, 3402, 3406, 3412, 3415, 3423, 3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3558, 3567, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3718, 3722, 3724, 3747, 3749, 3749, 3751, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028, 4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4969, 4977, 4992, 5007, 5024, 5109, 5112, 5117, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5880, 5888, 5900, 5902, 5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6264, 6272, 6314, 6320, 6389, 6400, 6430, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6656, 6683, 6688, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6823, 6823, 6832, 6845, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155, 7168, 7223, 7232, 7241, 7245, 7293, 7296, 7304, 7312, 7354, 7357, 7359, 7376, 7378, 7380, 7418, 7424, 7673, 7675, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8472, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11744, 11775, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12348, 12353, 12438, 12441, 12447, 12449, 12538, 12540, 12543, 12549, 12591, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40943, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42539, 42560, 42607, 42612, 42621, 42623, 42737, 42775, 42783, 42786, 42888, 42891, 42943, 42946, 42950, 42999, 43047, 43072, 43123, 43136, 43205, 43216, 43225, 43232, 43255, 43259, 43259, 43261, 43309, 43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43488, 43518, 43520, 43574, 43584, 43597, 43600, 43609, 43616, 43638, 43642, 43714, 43739, 43741, 43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43824, 43866, 43868, 43879, 43888, 44010, 44012, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65024, 65039, 65056, 65071, 65075, 65076, 65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65536, 65547, 65549, 65574, 65576, 65594, 65596, 65597, 65599, 65613, 65616, 65629, 65664, 65786, 65856, 65908, 66045, 66045, 66176, 66204, 66208, 66256, 66272, 66272, 66304, 66335, 66349, 66378, 66384, 66426, 66432, 66461, 66464, 66499, 66504, 66511, 66513, 66517, 66560, 66717, 66720, 66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67592, 67594, 67637, 67639, 67640, 67644, 67644, 67647, 67669, 67680, 67702, 67712, 67742, 67808, 67826, 67828, 67829, 67840, 67861, 67872, 67897, 67968, 68023, 68030, 68031, 68096, 68099, 68101, 68102, 68108, 68115, 68117, 68119, 68121, 68149, 68152, 68154, 68159, 68159, 68192, 68220, 68224, 68252, 68288, 68295, 68297, 68326, 68352, 68405, 68416, 68437, 68448, 68466, 68480, 68497, 68608, 68680, 68736, 68786, 68800, 68850, 68864, 68903, 68912, 68921, 69376, 69404, 69415, 69415, 69424, 69456, 69600, 69622, 69632, 69702, 69734, 69743, 69759, 69818, 69840, 69864, 69872, 69881, 69888, 69940, 69942, 69951, 69956, 69958, 69968, 70003, 70006, 70006, 70016, 70084, 70089, 70092, 70096, 70106, 70108, 70108, 70144, 70161, 70163, 70199, 70206, 70206, 70272, 70278, 70280, 70280, 70282, 70285, 70287, 70301, 70303, 70312, 70320, 70378, 70384, 70393, 70400, 70403, 70405, 70412, 70415, 70416, 70419, 70440, 70442, 70448, 70450, 70451, 70453, 70457, 70459, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70656, 70730, 70736, 70745, 70750, 70751, 70784, 70853, 70855, 70855, 70864, 70873, 71040, 71093, 71096, 71104, 71128, 71133, 71168, 71232, 71236, 71236, 71248, 71257, 71296, 71352, 71360, 71369, 71424, 71450, 71453, 71467, 71472, 71481, 71680, 71738, 71840, 71913, 71935, 71935, 72096, 72103, 72106, 72151, 72154, 72161, 72163, 72164, 72192, 72254, 72263, 72263, 72272, 72345, 72349, 72349, 72384, 72440, 72704, 72712, 72714, 72758, 72760, 72768, 72784, 72793, 72818, 72847, 72850, 72871, 72873, 72886, 72960, 72966, 72968, 72969, 72971, 73014, 73018, 73018, 73020, 73021, 73023, 73031, 73040, 73049, 73056, 73061, 73063, 73064, 73066, 73102, 73104, 73105, 73107, 73112, 73120, 73129, 73440, 73462, 73728, 74649, 74752, 74862, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92766, 92768, 92777, 92880, 92909, 92912, 92916, 92928, 92982, 92992, 92995, 93008, 93017, 93027, 93047, 93053, 93071, 93760, 93823, 93952, 94026, 94031, 94087, 94095, 94111, 94176, 94177, 94179, 94179, 94208, 100343, 100352, 101106, 110592, 110878, 110928, 110930, 110948, 110951, 110960, 111355, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113821, 113822, 119141, 119145, 119149, 119154, 119163, 119170, 119173, 119179, 119210, 119213, 119362, 119364, 119808, 119892, 119894, 119964, 119966, 119967, 119970, 119970, 119973, 119974, 119977, 119980, 119982, 119993, 119995, 119995, 119997, 120003, 120005, 120069, 120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121, 120123, 120126, 120128, 120132, 120134, 120134, 120138, 120144, 120146, 120485, 120488, 120512, 120514, 120538, 120540, 120570, 120572, 120596, 120598, 120628, 120630, 120654, 120656, 120686, 120688, 120712, 120714, 120744, 120746, 120770, 120772, 120779, 120782, 120831, 121344, 121398, 121403, 121452, 121461, 121461, 121476, 121476, 121499, 121503, 121505, 121519, 122880, 122886, 122888, 122904, 122907, 122913, 122915, 122916, 122918, 122922, 123136, 123180, 123184, 123197, 123200, 123209, 123214, 123214, 123584, 123641, 124928, 125124, 125136, 125142, 125184, 125259, 125264, 125273, 126464, 126467, 126469, 126495, 126497, 126498, 126500, 126500, 126503, 126503, 126505, 126514, 126516, 126519, 126521, 126521, 126523, 126523, 126530, 126530, 126535, 126535, 126537, 126537, 126539, 126539, 126541, 126543, 126545, 126546, 126548, 126548, 126551, 126551, 126553, 126553, 126555, 126555, 126557, 126557, 126559, 126559, 126561, 126562, 126564, 126564, 126567, 126570, 126572, 126578, 126580, 126583, 126585, 126588, 126590, 126590, 126592, 126601, 126603, 126619, 126625, 126627, 126629, 126633, 126635, 126651, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 183984, 191456, 194560, 195101, 917760, 917999];
/**
 * Test for whether a single line comment with leading whitespace trimmed's text contains a directive.
 */
var commentDirectiveRegExSingleLine = /^\/\/\/?\s*@(ts-expect-error|ts-ignore)/;
/**
 * Test for whether a multi-line comment with leading whitespace trimmed's last line contains a directive.
 */
var commentDirectiveRegExMultiLine = /^(?:\/|\*)*\s*@(ts-expect-error|ts-ignore)/;
function lookupInUnicodeMap(code, map) {
    // Bail out quickly if it couldn't possibly be in the map.
    if (code < map[0]) {
        return false;
    }
    // Perform binary search in one of the Unicode range maps
    var lo = 0;
    var hi = map.length;
    var mid;
    while (lo + 1 < hi) {
        mid = lo + (hi - lo) / 2;
        // mid has to be even to catch a range's beginning
        mid -= mid % 2;
        if (map[mid] <= code && code <= map[mid + 1]) {
            return true;
        }
        if (code < map[mid]) {
            hi = mid;
        }
        else {
            lo = mid + 2;
        }
    }
    return false;
}
/** @internal */ function isUnicodeIdentifierStart(code, languageVersion) {
    return languageVersion >= 2 /* ScriptTarget.ES2015 */ ?
        lookupInUnicodeMap(code, unicodeESNextIdentifierStart) :
        languageVersion === 1 /* ScriptTarget.ES5 */ ? lookupInUnicodeMap(code, unicodeES5IdentifierStart) :
            lookupInUnicodeMap(code, unicodeES3IdentifierStart);
}
exports.isUnicodeIdentifierStart = isUnicodeIdentifierStart;
function isUnicodeIdentifierPart(code, languageVersion) {
    return languageVersion >= 2 /* ScriptTarget.ES2015 */ ?
        lookupInUnicodeMap(code, unicodeESNextIdentifierPart) :
        languageVersion === 1 /* ScriptTarget.ES5 */ ? lookupInUnicodeMap(code, unicodeES5IdentifierPart) :
            lookupInUnicodeMap(code, unicodeES3IdentifierPart);
}
function makeReverseMap(source) {
    var result = [];
    source.forEach(function (value, name) {
        result[value] = name;
    });
    return result;
}
var tokenStrings = makeReverseMap(textToToken);
function tokenToString(t) {
    return tokenStrings[t];
}
exports.tokenToString = tokenToString;
/** @internal */
function stringToToken(s) {
    return textToToken.get(s);
}
exports.stringToToken = stringToToken;
/** @internal */
function computeLineStarts(text) {
    var result = [];
    var pos = 0;
    var lineStart = 0;
    while (pos < text.length) {
        var ch = text.charCodeAt(pos);
        pos++;
        switch (ch) {
            case 13 /* CharacterCodes.carriageReturn */:
                if (text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {
                    pos++;
                }
            // falls through
            case 10 /* CharacterCodes.lineFeed */:
                result.push(lineStart);
                lineStart = pos;
                break;
            default:
                if (ch > 127 /* CharacterCodes.maxAsciiCharacter */ && isLineBreak(ch)) {
                    result.push(lineStart);
                    lineStart = pos;
                }
                break;
        }
    }
    result.push(lineStart);
    return result;
}
exports.computeLineStarts = computeLineStarts;
function getPositionOfLineAndCharacter(sourceFile, line, character, allowEdits) {
    return sourceFile.getPositionOfLineAndCharacter ?
        sourceFile.getPositionOfLineAndCharacter(line, character, allowEdits) :
        computePositionOfLineAndCharacter(getLineStarts(sourceFile), line, character, sourceFile.text, allowEdits);
}
exports.getPositionOfLineAndCharacter = getPositionOfLineAndCharacter;
/** @internal */
function computePositionOfLineAndCharacter(lineStarts, line, character, debugText, allowEdits) {
    if (line < 0 || line >= lineStarts.length) {
        if (allowEdits) {
            // Clamp line to nearest allowable value
            line = line < 0 ? 0 : line >= lineStarts.length ? lineStarts.length - 1 : line;
        }
        else {
            ts_1.Debug.fail("Bad line number. Line: ".concat(line, ", lineStarts.length: ").concat(lineStarts.length, " , line map is correct? ").concat(debugText !== undefined ? (0, ts_1.arraysEqual)(lineStarts, computeLineStarts(debugText)) : "unknown"));
        }
    }
    var res = lineStarts[line] + character;
    if (allowEdits) {
        // Clamp to nearest allowable values to allow the underlying to be edited without crashing (accuracy is lost, instead)
        // TODO: Somehow track edits between file as it was during the creation of sourcemap we have and the current file and
        // apply them to the computed position to improve accuracy
        return res > lineStarts[line + 1] ? lineStarts[line + 1] : typeof debugText === "string" && res > debugText.length ? debugText.length : res;
    }
    if (line < lineStarts.length - 1) {
        ts_1.Debug.assert(res < lineStarts[line + 1]);
    }
    else if (debugText !== undefined) {
        ts_1.Debug.assert(res <= debugText.length); // Allow single character overflow for trailing newline
    }
    return res;
}
exports.computePositionOfLineAndCharacter = computePositionOfLineAndCharacter;
/** @internal */
function getLineStarts(sourceFile) {
    return sourceFile.lineMap || (sourceFile.lineMap = computeLineStarts(sourceFile.text));
}
exports.getLineStarts = getLineStarts;
/** @internal */
function computeLineAndCharacterOfPosition(lineStarts, position) {
    var lineNumber = computeLineOfPosition(lineStarts, position);
    return {
        line: lineNumber,
        character: position - lineStarts[lineNumber]
    };
}
exports.computeLineAndCharacterOfPosition = computeLineAndCharacterOfPosition;
/**
 * @internal
 * We assume the first line starts at position 0 and 'position' is non-negative.
 */
function computeLineOfPosition(lineStarts, position, lowerBound) {
    var lineNumber = (0, ts_1.binarySearch)(lineStarts, position, ts_1.identity, ts_1.compareValues, lowerBound);
    if (lineNumber < 0) {
        // If the actual position was not found,
        // the binary search returns the 2's-complement of the next line start
        // e.g. if the line starts at [5, 10, 23, 80] and the position requested was 20
        // then the search will return -2.
        //
        // We want the index of the previous line start, so we subtract 1.
        // Review 2's-complement if this is confusing.
        lineNumber = ~lineNumber - 1;
        ts_1.Debug.assert(lineNumber !== -1, "position cannot precede the beginning of the file");
    }
    return lineNumber;
}
exports.computeLineOfPosition = computeLineOfPosition;
/** @internal */
function getLinesBetweenPositions(sourceFile, pos1, pos2) {
    if (pos1 === pos2)
        return 0;
    var lineStarts = getLineStarts(sourceFile);
    var lower = Math.min(pos1, pos2);
    var isNegative = lower === pos2;
    var upper = isNegative ? pos1 : pos2;
    var lowerLine = computeLineOfPosition(lineStarts, lower);
    var upperLine = computeLineOfPosition(lineStarts, upper, lowerLine);
    return isNegative ? lowerLine - upperLine : upperLine - lowerLine;
}
exports.getLinesBetweenPositions = getLinesBetweenPositions;
function getLineAndCharacterOfPosition(sourceFile, position) {
    return computeLineAndCharacterOfPosition(getLineStarts(sourceFile), position);
}
exports.getLineAndCharacterOfPosition = getLineAndCharacterOfPosition;
function isWhiteSpaceLike(ch) {
    return isWhiteSpaceSingleLine(ch) || isLineBreak(ch);
}
exports.isWhiteSpaceLike = isWhiteSpaceLike;
/** Does not include line breaks. For that, see isWhiteSpaceLike. */
function isWhiteSpaceSingleLine(ch) {
    // Note: nextLine is in the Zs space, and should be considered to be a whitespace.
    // It is explicitly not a line-break as it isn't in the exact set specified by EcmaScript.
    return ch === 32 /* CharacterCodes.space */ ||
        ch === 9 /* CharacterCodes.tab */ ||
        ch === 11 /* CharacterCodes.verticalTab */ ||
        ch === 12 /* CharacterCodes.formFeed */ ||
        ch === 160 /* CharacterCodes.nonBreakingSpace */ ||
        ch === 133 /* CharacterCodes.nextLine */ ||
        ch === 5760 /* CharacterCodes.ogham */ ||
        ch >= 8192 /* CharacterCodes.enQuad */ && ch <= 8203 /* CharacterCodes.zeroWidthSpace */ ||
        ch === 8239 /* CharacterCodes.narrowNoBreakSpace */ ||
        ch === 8287 /* CharacterCodes.mathematicalSpace */ ||
        ch === 12288 /* CharacterCodes.ideographicSpace */ ||
        ch === 65279 /* CharacterCodes.byteOrderMark */;
}
exports.isWhiteSpaceSingleLine = isWhiteSpaceSingleLine;
function isLineBreak(ch) {
    // ES5 7.3:
    // The ECMAScript line terminator characters are listed in Table 3.
    //     Table 3: Line Terminator Characters
    //     Code Unit Value     Name                    Formal Name
    //     \u000A              Line Feed               <LF>
    //     \u000D              Carriage Return         <CR>
    //     \u2028              Line separator          <LS>
    //     \u2029              Paragraph separator     <PS>
    // Only the characters in Table 3 are treated as line terminators. Other new line or line
    // breaking characters are treated as white space but not as line terminators.
    return ch === 10 /* CharacterCodes.lineFeed */ ||
        ch === 13 /* CharacterCodes.carriageReturn */ ||
        ch === 8232 /* CharacterCodes.lineSeparator */ ||
        ch === 8233 /* CharacterCodes.paragraphSeparator */;
}
exports.isLineBreak = isLineBreak;
function isDigit(ch) {
    return ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */;
}
function isHexDigit(ch) {
    return isDigit(ch) || ch >= 65 /* CharacterCodes.A */ && ch <= 70 /* CharacterCodes.F */ || ch >= 97 /* CharacterCodes.a */ && ch <= 102 /* CharacterCodes.f */;
}
function isCodePoint(code) {
    return code <= 0x10FFFF;
}
/** @internal */
function isOctalDigit(ch) {
    return ch >= 48 /* CharacterCodes._0 */ && ch <= 55 /* CharacterCodes._7 */;
}
exports.isOctalDigit = isOctalDigit;
function couldStartTrivia(text, pos) {
    // Keep in sync with skipTrivia
    var ch = text.charCodeAt(pos);
    switch (ch) {
        case 13 /* CharacterCodes.carriageReturn */:
        case 10 /* CharacterCodes.lineFeed */:
        case 9 /* CharacterCodes.tab */:
        case 11 /* CharacterCodes.verticalTab */:
        case 12 /* CharacterCodes.formFeed */:
        case 32 /* CharacterCodes.space */:
        case 47 /* CharacterCodes.slash */:
        // starts of normal trivia
        // falls through
        case 60 /* CharacterCodes.lessThan */:
        case 124 /* CharacterCodes.bar */:
        case 61 /* CharacterCodes.equals */:
        case 62 /* CharacterCodes.greaterThan */:
            // Starts of conflict marker trivia
            return true;
        case 35 /* CharacterCodes.hash */:
            // Only if its the beginning can we have #! trivia
            return pos === 0;
        default:
            return ch > 127 /* CharacterCodes.maxAsciiCharacter */;
    }
}
exports.couldStartTrivia = couldStartTrivia;
/** @internal */
function skipTrivia(text, pos, stopAfterLineBreak, stopAtComments, inJSDoc) {
    if ((0, ts_1.positionIsSynthesized)(pos)) {
        return pos;
    }
    var canConsumeStar = false;
    // Keep in sync with couldStartTrivia
    while (true) {
        var ch = text.charCodeAt(pos);
        switch (ch) {
            case 13 /* CharacterCodes.carriageReturn */:
                if (text.charCodeAt(pos + 1) === 10 /* CharacterCodes.lineFeed */) {
                    pos++;
                }
            // falls through
            case 10 /* CharacterCodes.lineFeed */:
                pos++;
                if (stopAfterLineBreak) {
                    return pos;
                }
                canConsumeStar = !!inJSDoc;
                continue;
            case 9 /* CharacterCodes.tab */:
            case 11 /* CharacterCodes.verticalTab */:
            case 12 /* CharacterCodes.formFeed */:
            case 32 /* CharacterCodes.space */:
                pos++;
                continue;
            case 47 /* CharacterCodes.slash */:
                if (stopAtComments) {
                    break;
                }
                if (text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {
                    pos += 2;
                    while (pos < text.length) {
                        if (isLineBreak(text.charCodeAt(pos))) {
                            break;
                        }
                        pos++;
                    }
                    canConsumeStar = false;
                    continue;
                }
                if (text.charCodeAt(pos + 1) === 42 /* CharacterCodes.asterisk */) {
                    pos += 2;
                    while (pos < text.length) {
                        if (text.charCodeAt(pos) === 42 /* CharacterCodes.asterisk */ && text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {
                            pos += 2;
                            break;
                        }
                        pos++;
                    }
                    canConsumeStar = false;
                    continue;
                }
                break;
            case 60 /* CharacterCodes.lessThan */:
            case 124 /* CharacterCodes.bar */:
            case 61 /* CharacterCodes.equals */:
            case 62 /* CharacterCodes.greaterThan */:
                if (isConflictMarkerTrivia(text, pos)) {
                    pos = scanConflictMarkerTrivia(text, pos);
                    canConsumeStar = false;
                    continue;
                }
                break;
            case 35 /* CharacterCodes.hash */:
                if (pos === 0 && isShebangTrivia(text, pos)) {
                    pos = scanShebangTrivia(text, pos);
                    canConsumeStar = false;
                    continue;
                }
                break;
            case 42 /* CharacterCodes.asterisk */:
                if (canConsumeStar) {
                    pos++;
                    canConsumeStar = false;
                    continue;
                }
                break;
            default:
                if (ch > 127 /* CharacterCodes.maxAsciiCharacter */ && (isWhiteSpaceLike(ch))) {
                    pos++;
                    continue;
                }
                break;
        }
        return pos;
    }
}
exports.skipTrivia = skipTrivia;
// All conflict markers consist of the same character repeated seven times.  If it is
// a <<<<<<< or >>>>>>> marker then it is also followed by a space.
var mergeConflictMarkerLength = "<<<<<<<".length;
function isConflictMarkerTrivia(text, pos) {
    ts_1.Debug.assert(pos >= 0);
    // Conflict markers must be at the start of a line.
    if (pos === 0 || isLineBreak(text.charCodeAt(pos - 1))) {
        var ch = text.charCodeAt(pos);
        if ((pos + mergeConflictMarkerLength) < text.length) {
            for (var i = 0; i < mergeConflictMarkerLength; i++) {
                if (text.charCodeAt(pos + i) !== ch) {
                    return false;
                }
            }
            return ch === 61 /* CharacterCodes.equals */ ||
                text.charCodeAt(pos + mergeConflictMarkerLength) === 32 /* CharacterCodes.space */;
        }
    }
    return false;
}
function scanConflictMarkerTrivia(text, pos, error) {
    if (error) {
        error(ts_1.Diagnostics.Merge_conflict_marker_encountered, pos, mergeConflictMarkerLength);
    }
    var ch = text.charCodeAt(pos);
    var len = text.length;
    if (ch === 60 /* CharacterCodes.lessThan */ || ch === 62 /* CharacterCodes.greaterThan */) {
        while (pos < len && !isLineBreak(text.charCodeAt(pos))) {
            pos++;
        }
    }
    else {
        ts_1.Debug.assert(ch === 124 /* CharacterCodes.bar */ || ch === 61 /* CharacterCodes.equals */);
        // Consume everything from the start of a ||||||| or ======= marker to the start
        // of the next ======= or >>>>>>> marker.
        while (pos < len) {
            var currentChar = text.charCodeAt(pos);
            if ((currentChar === 61 /* CharacterCodes.equals */ || currentChar === 62 /* CharacterCodes.greaterThan */) && currentChar !== ch && isConflictMarkerTrivia(text, pos)) {
                break;
            }
            pos++;
        }
    }
    return pos;
}
var shebangTriviaRegex = /^#!.*/;
/** @internal */
function isShebangTrivia(text, pos) {
    // Shebangs check must only be done at the start of the file
    ts_1.Debug.assert(pos === 0);
    return shebangTriviaRegex.test(text);
}
exports.isShebangTrivia = isShebangTrivia;
/** @internal */
function scanShebangTrivia(text, pos) {
    var shebang = shebangTriviaRegex.exec(text)[0];
    pos = pos + shebang.length;
    return pos;
}
exports.scanShebangTrivia = scanShebangTrivia;
/**
 * Invokes a callback for each comment range following the provided position.
 *
 * Single-line comment ranges include the leading double-slash characters but not the ending
 * line break. Multi-line comment ranges include the leading slash-asterisk and trailing
 * asterisk-slash characters.
 *
 * @param reduce If true, accumulates the result of calling the callback in a fashion similar
 *      to reduceLeft. If false, iteration stops when the callback returns a truthy value.
 * @param text The source text to scan.
 * @param pos The position at which to start scanning.
 * @param trailing If false, whitespace is skipped until the first line break and comments
 *      between that location and the next token are returned. If true, comments occurring
 *      between the given position and the next line break are returned.
 * @param cb The callback to execute as each comment range is encountered.
 * @param state A state value to pass to each iteration of the callback.
 * @param initial An initial value to pass when accumulating results (when "reduce" is true).
 * @returns If "reduce" is true, the accumulated value. If "reduce" is false, the first truthy
 *      return value of the callback.
 */
function iterateCommentRanges(reduce, text, pos, trailing, cb, state, initial) {
    var pendingPos;
    var pendingEnd;
    var pendingKind;
    var pendingHasTrailingNewLine;
    var hasPendingCommentRange = false;
    var collecting = trailing;
    var accumulator = initial;
    if (pos === 0) {
        collecting = true;
        var shebang = getShebang(text);
        if (shebang) {
            pos = shebang.length;
        }
    }
    scan: while (pos >= 0 && pos < text.length) {
        var ch = text.charCodeAt(pos);
        switch (ch) {
            case 13 /* CharacterCodes.carriageReturn */:
                if (text.charCodeAt(pos + 1) === 10 /* CharacterCodes.lineFeed */) {
                    pos++;
                }
            // falls through
            case 10 /* CharacterCodes.lineFeed */:
                pos++;
                if (trailing) {
                    break scan;
                }
                collecting = true;
                if (hasPendingCommentRange) {
                    pendingHasTrailingNewLine = true;
                }
                continue;
            case 9 /* CharacterCodes.tab */:
            case 11 /* CharacterCodes.verticalTab */:
            case 12 /* CharacterCodes.formFeed */:
            case 32 /* CharacterCodes.space */:
                pos++;
                continue;
            case 47 /* CharacterCodes.slash */:
                var nextChar = text.charCodeAt(pos + 1);
                var hasTrailingNewLine = false;
                if (nextChar === 47 /* CharacterCodes.slash */ || nextChar === 42 /* CharacterCodes.asterisk */) {
                    var kind = nextChar === 47 /* CharacterCodes.slash */ ? 2 /* SyntaxKind.SingleLineCommentTrivia */ : 3 /* SyntaxKind.MultiLineCommentTrivia */;
                    var startPos = pos;
                    pos += 2;
                    if (nextChar === 47 /* CharacterCodes.slash */) {
                        while (pos < text.length) {
                            if (isLineBreak(text.charCodeAt(pos))) {
                                hasTrailingNewLine = true;
                                break;
                            }
                            pos++;
                        }
                    }
                    else {
                        while (pos < text.length) {
                            if (text.charCodeAt(pos) === 42 /* CharacterCodes.asterisk */ && text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {
                                pos += 2;
                                break;
                            }
                            pos++;
                        }
                    }
                    if (collecting) {
                        if (hasPendingCommentRange) {
                            accumulator = cb(pendingPos, pendingEnd, pendingKind, pendingHasTrailingNewLine, state, accumulator);
                            if (!reduce && accumulator) {
                                // If we are not reducing and we have a truthy result, return it.
                                return accumulator;
                            }
                        }
                        pendingPos = startPos;
                        pendingEnd = pos;
                        pendingKind = kind;
                        pendingHasTrailingNewLine = hasTrailingNewLine;
                        hasPendingCommentRange = true;
                    }
                    continue;
                }
                break scan;
            default:
                if (ch > 127 /* CharacterCodes.maxAsciiCharacter */ && (isWhiteSpaceLike(ch))) {
                    if (hasPendingCommentRange && isLineBreak(ch)) {
                        pendingHasTrailingNewLine = true;
                    }
                    pos++;
                    continue;
                }
                break scan;
        }
    }
    if (hasPendingCommentRange) {
        accumulator = cb(pendingPos, pendingEnd, pendingKind, pendingHasTrailingNewLine, state, accumulator);
    }
    return accumulator;
}
function forEachLeadingCommentRange(text, pos, cb, state) {
    return iterateCommentRanges(/*reduce*/ false, text, pos, /*trailing*/ false, cb, state);
}
exports.forEachLeadingCommentRange = forEachLeadingCommentRange;
function forEachTrailingCommentRange(text, pos, cb, state) {
    return iterateCommentRanges(/*reduce*/ false, text, pos, /*trailing*/ true, cb, state);
}
exports.forEachTrailingCommentRange = forEachTrailingCommentRange;
function reduceEachLeadingCommentRange(text, pos, cb, state, initial) {
    return iterateCommentRanges(/*reduce*/ true, text, pos, /*trailing*/ false, cb, state, initial);
}
exports.reduceEachLeadingCommentRange = reduceEachLeadingCommentRange;
function reduceEachTrailingCommentRange(text, pos, cb, state, initial) {
    return iterateCommentRanges(/*reduce*/ true, text, pos, /*trailing*/ true, cb, state, initial);
}
exports.reduceEachTrailingCommentRange = reduceEachTrailingCommentRange;
function appendCommentRange(pos, end, kind, hasTrailingNewLine, _state, comments) {
    if (comments === void 0) { comments = []; }
    comments.push({ kind: kind, pos: pos, end: end, hasTrailingNewLine: hasTrailingNewLine });
    return comments;
}
function getLeadingCommentRanges(text, pos) {
    return reduceEachLeadingCommentRange(text, pos, appendCommentRange, /*state*/ undefined, /*initial*/ undefined);
}
exports.getLeadingCommentRanges = getLeadingCommentRanges;
function getTrailingCommentRanges(text, pos) {
    return reduceEachTrailingCommentRange(text, pos, appendCommentRange, /*state*/ undefined, /*initial*/ undefined);
}
exports.getTrailingCommentRanges = getTrailingCommentRanges;
/** Optionally, get the shebang */
function getShebang(text) {
    var match = shebangTriviaRegex.exec(text);
    if (match) {
        return match[0];
    }
}
exports.getShebang = getShebang;
function isIdentifierStart(ch, languageVersion) {
    return ch >= 65 /* CharacterCodes.A */ && ch <= 90 /* CharacterCodes.Z */ || ch >= 97 /* CharacterCodes.a */ && ch <= 122 /* CharacterCodes.z */ ||
        ch === 36 /* CharacterCodes.$ */ || ch === 95 /* CharacterCodes._ */ ||
        ch > 127 /* CharacterCodes.maxAsciiCharacter */ && isUnicodeIdentifierStart(ch, languageVersion);
}
exports.isIdentifierStart = isIdentifierStart;
function isIdentifierPart(ch, languageVersion, identifierVariant) {
    return ch >= 65 /* CharacterCodes.A */ && ch <= 90 /* CharacterCodes.Z */ || ch >= 97 /* CharacterCodes.a */ && ch <= 122 /* CharacterCodes.z */ ||
        ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */ || ch === 36 /* CharacterCodes.$ */ || ch === 95 /* CharacterCodes._ */ ||
        // "-" and ":" are valid in JSX Identifiers
        (identifierVariant === 1 /* LanguageVariant.JSX */ ? (ch === 45 /* CharacterCodes.minus */ || ch === 58 /* CharacterCodes.colon */) : false) ||
        ch > 127 /* CharacterCodes.maxAsciiCharacter */ && isUnicodeIdentifierPart(ch, languageVersion);
}
exports.isIdentifierPart = isIdentifierPart;
/** @internal */
function isIdentifierText(name, languageVersion, identifierVariant) {
    var ch = codePointAt(name, 0);
    if (!isIdentifierStart(ch, languageVersion)) {
        return false;
    }
    for (var i = charSize(ch); i < name.length; i += charSize(ch)) {
        if (!isIdentifierPart(ch = codePointAt(name, i), languageVersion, identifierVariant)) {
            return false;
        }
    }
    return true;
}
exports.isIdentifierText = isIdentifierText;
// Creates a scanner over a (possibly unspecified) range of a piece of text.
function createScanner(languageVersion, skipTrivia, languageVariant, textInitial, onError, start, length) {
    if (languageVariant === void 0) { languageVariant = 0 /* LanguageVariant.Standard */; }
    // Why var? It avoids TDZ checks in the runtime which can be costly.
    // See: https://github.com/microsoft/TypeScript/issues/52924
    /* eslint-disable no-var */
    var text = textInitial;
    // Current position (end position of text of current token)
    var pos;
    // end of text
    var end;
    // Start position of whitespace before current token
    var fullStartPos;
    // Start position of text of current token
    var tokenStart;
    var token;
    var tokenValue;
    var tokenFlags;
    var commentDirectives;
    var inJSDocType = 0;
    setText(text, start, length);
    var scanner = {
        getTokenFullStart: function () { return fullStartPos; },
        getStartPos: function () { return fullStartPos; },
        getTokenEnd: function () { return pos; },
        getTextPos: function () { return pos; },
        getToken: function () { return token; },
        getTokenStart: function () { return tokenStart; },
        getTokenPos: function () { return tokenStart; },
        getTokenText: function () { return text.substring(tokenStart, pos); },
        getTokenValue: function () { return tokenValue; },
        hasUnicodeEscape: function () { return (tokenFlags & 1024 /* TokenFlags.UnicodeEscape */) !== 0; },
        hasExtendedUnicodeEscape: function () { return (tokenFlags & 8 /* TokenFlags.ExtendedUnicodeEscape */) !== 0; },
        hasPrecedingLineBreak: function () { return (tokenFlags & 1 /* TokenFlags.PrecedingLineBreak */) !== 0; },
        hasPrecedingJSDocComment: function () { return (tokenFlags & 2 /* TokenFlags.PrecedingJSDocComment */) !== 0; },
        isIdentifier: function () { return token === 80 /* SyntaxKind.Identifier */ || token > 118 /* SyntaxKind.LastReservedWord */; },
        isReservedWord: function () { return token >= 83 /* SyntaxKind.FirstReservedWord */ && token <= 118 /* SyntaxKind.LastReservedWord */; },
        isUnterminated: function () { return (tokenFlags & 4 /* TokenFlags.Unterminated */) !== 0; },
        getCommentDirectives: function () { return commentDirectives; },
        getNumericLiteralFlags: function () { return tokenFlags & 25584 /* TokenFlags.NumericLiteralFlags */; },
        getTokenFlags: function () { return tokenFlags; },
        reScanGreaterToken: reScanGreaterToken,
        reScanAsteriskEqualsToken: reScanAsteriskEqualsToken,
        reScanSlashToken: reScanSlashToken,
        reScanTemplateToken: reScanTemplateToken,
        reScanTemplateHeadOrNoSubstitutionTemplate: reScanTemplateHeadOrNoSubstitutionTemplate,
        scanJsxIdentifier: scanJsxIdentifier,
        scanJsxAttributeValue: scanJsxAttributeValue,
        reScanJsxAttributeValue: reScanJsxAttributeValue,
        reScanJsxToken: reScanJsxToken,
        reScanLessThanToken: reScanLessThanToken,
        reScanHashToken: reScanHashToken,
        reScanQuestionToken: reScanQuestionToken,
        reScanInvalidIdentifier: reScanInvalidIdentifier,
        scanJsxToken: scanJsxToken,
        scanJsDocToken: scanJsDocToken,
        scanJSDocCommentTextToken: scanJSDocCommentTextToken,
        scan: scan,
        getText: getText,
        clearCommentDirectives: clearCommentDirectives,
        setText: setText,
        setScriptTarget: setScriptTarget,
        setLanguageVariant: setLanguageVariant,
        setOnError: setOnError,
        resetTokenState: resetTokenState,
        setTextPos: resetTokenState,
        setInJSDocType: setInJSDocType,
        tryScan: tryScan,
        lookAhead: lookAhead,
        scanRange: scanRange,
    };
    /* eslint-enable no-var */
    if (ts_1.Debug.isDebugging) {
        Object.defineProperty(scanner, "__debugShowCurrentPositionInText", {
            get: function () {
                var text = scanner.getText();
                return text.slice(0, scanner.getTokenFullStart()) + "║" + text.slice(scanner.getTokenFullStart());
            },
        });
    }
    return scanner;
    function error(message, errPos, length, arg0) {
        if (errPos === void 0) { errPos = pos; }
        if (onError) {
            var oldPos = pos;
            pos = errPos;
            onError(message, length || 0, arg0);
            pos = oldPos;
        }
    }
    function scanNumberFragment() {
        var start = pos;
        var allowSeparator = false;
        var isPreviousTokenSeparator = false;
        var result = "";
        while (true) {
            var ch = text.charCodeAt(pos);
            if (ch === 95 /* CharacterCodes._ */) {
                tokenFlags |= 512 /* TokenFlags.ContainsSeparator */;
                if (allowSeparator) {
                    allowSeparator = false;
                    isPreviousTokenSeparator = true;
                    result += text.substring(start, pos);
                }
                else {
                    tokenFlags |= 16384 /* TokenFlags.ContainsInvalidSeparator */;
                    if (isPreviousTokenSeparator) {
                        error(ts_1.Diagnostics.Multiple_consecutive_numeric_separators_are_not_permitted, pos, 1);
                    }
                    else {
                        error(ts_1.Diagnostics.Numeric_separators_are_not_allowed_here, pos, 1);
                    }
                }
                pos++;
                start = pos;
                continue;
            }
            if (isDigit(ch)) {
                allowSeparator = true;
                isPreviousTokenSeparator = false;
                pos++;
                continue;
            }
            break;
        }
        if (text.charCodeAt(pos - 1) === 95 /* CharacterCodes._ */) {
            tokenFlags |= 16384 /* TokenFlags.ContainsInvalidSeparator */;
            error(ts_1.Diagnostics.Numeric_separators_are_not_allowed_here, pos - 1, 1);
        }
        return result + text.substring(start, pos);
    }
    // Extract from Section 12.9.3
    // NumericLiteral ::=
    //     | DecimalLiteral
    //     | DecimalBigIntegerLiteral
    //     | NonDecimalIntegerLiteral 'n'?
    //     | LegacyOctalIntegerLiteral
    // DecimalBigIntegerLiteral ::=
    //     | '0n'
    //     | [1-9] DecimalDigits? 'n'
    //     | [1-9] '_' DecimalDigits 'n'
    // DecimalLiteral ::=
    //     | DecimalIntegerLiteral? '.' DecimalDigits? ExponentPart?
    //     | '.' DecimalDigits ExponentPart?
    //     | DecimalIntegerLiteral ExponentPart?
    // DecimalIntegerLiteral ::=
    //     | '0'
    //     | [1-9] '_'? DecimalDigits
    //     | NonOctalDecimalIntegerLiteral
    // LegacyOctalIntegerLiteral ::= '0' [0-7]+
    // NonOctalDecimalIntegerLiteral ::= '0' [0-7]* [89] [0-9]*
    function scanNumber() {
        var start = pos;
        var mainFragment;
        if (text.charCodeAt(pos) === 48 /* CharacterCodes._0 */) {
            pos++;
            if (text.charCodeAt(pos) === 95 /* CharacterCodes._ */) {
                tokenFlags |= 512 /* TokenFlags.ContainsSeparator */ | 16384 /* TokenFlags.ContainsInvalidSeparator */;
                error(ts_1.Diagnostics.Numeric_separators_are_not_allowed_here, pos, 1);
                // treat it as a normal number literal
                pos--;
                mainFragment = scanNumberFragment();
            }
            // Separators are not allowed in the below cases
            else if (!scanDigits()) {
                // NonOctalDecimalIntegerLiteral, emit error later
                // Separators in decimal and exponent parts are still allowed according to the spec
                tokenFlags |= 8192 /* TokenFlags.ContainsLeadingZero */;
                mainFragment = "" + +tokenValue;
            }
            else if (!tokenValue) {
                // a single zero
                mainFragment = "0";
            }
            else {
                // LegacyOctalIntegerLiteral
                tokenValue = "" + parseInt(tokenValue, 8);
                tokenFlags |= 32 /* TokenFlags.Octal */;
                var withMinus = token === 41 /* SyntaxKind.MinusToken */;
                var literal = (withMinus ? "-" : "") + "0o" + (+tokenValue).toString(8);
                if (withMinus)
                    start--;
                error(ts_1.Diagnostics.Octal_literals_are_not_allowed_Use_the_syntax_0, start, pos - start, literal);
                return { type: 9 /* SyntaxKind.NumericLiteral */, value: tokenValue };
            }
        }
        else {
            mainFragment = scanNumberFragment();
        }
        var decimalFragment;
        var scientificFragment;
        if (text.charCodeAt(pos) === 46 /* CharacterCodes.dot */) {
            pos++;
            decimalFragment = scanNumberFragment();
        }
        var end = pos;
        if (text.charCodeAt(pos) === 69 /* CharacterCodes.E */ || text.charCodeAt(pos) === 101 /* CharacterCodes.e */) {
            pos++;
            tokenFlags |= 16 /* TokenFlags.Scientific */;
            if (text.charCodeAt(pos) === 43 /* CharacterCodes.plus */ || text.charCodeAt(pos) === 45 /* CharacterCodes.minus */)
                pos++;
            var preNumericPart = pos;
            var finalFragment = scanNumberFragment();
            if (!finalFragment) {
                error(ts_1.Diagnostics.Digit_expected);
            }
            else {
                scientificFragment = text.substring(end, preNumericPart) + finalFragment;
                end = pos;
            }
        }
        var result;
        if (tokenFlags & 512 /* TokenFlags.ContainsSeparator */) {
            result = mainFragment;
            if (decimalFragment) {
                result += "." + decimalFragment;
            }
            if (scientificFragment) {
                result += scientificFragment;
            }
        }
        else {
            result = text.substring(start, end); // No need to use all the fragments; no _ removal needed
        }
        if (tokenFlags & 8192 /* TokenFlags.ContainsLeadingZero */) {
            error(ts_1.Diagnostics.Decimals_with_leading_zeros_are_not_allowed, start, end - start);
            // if a literal has a leading zero, it must not be bigint
            return { type: 9 /* SyntaxKind.NumericLiteral */, value: "" + +result };
        }
        if (decimalFragment !== undefined || tokenFlags & 16 /* TokenFlags.Scientific */) {
            checkForIdentifierStartAfterNumericLiteral(start, decimalFragment === undefined && !!(tokenFlags & 16 /* TokenFlags.Scientific */));
            return {
                type: 9 /* SyntaxKind.NumericLiteral */,
                value: "" + +result // if value is not an integer, it can be safely coerced to a number
            };
        }
        else {
            tokenValue = result;
            var type = checkBigIntSuffix(); // if value is an integer, check whether it is a bigint
            checkForIdentifierStartAfterNumericLiteral(start);
            return { type: type, value: tokenValue };
        }
    }
    function checkForIdentifierStartAfterNumericLiteral(numericStart, isScientific) {
        if (!isIdentifierStart(codePointAt(text, pos), languageVersion)) {
            return;
        }
        var identifierStart = pos;
        var length = scanIdentifierParts().length;
        if (length === 1 && text[identifierStart] === "n") {
            if (isScientific) {
                error(ts_1.Diagnostics.A_bigint_literal_cannot_use_exponential_notation, numericStart, identifierStart - numericStart + 1);
            }
            else {
                error(ts_1.Diagnostics.A_bigint_literal_must_be_an_integer, numericStart, identifierStart - numericStart + 1);
            }
        }
        else {
            error(ts_1.Diagnostics.An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal, identifierStart, length);
            pos = identifierStart;
        }
    }
    function scanDigits() {
        var start = pos;
        var isOctal = true;
        while (isDigit(text.charCodeAt(pos))) {
            if (!isOctalDigit(text.charCodeAt(pos))) {
                isOctal = false;
            }
            pos++;
        }
        tokenValue = text.substring(start, pos);
        return isOctal;
    }
    /**
     * Scans the given number of hexadecimal digits in the text,
     * returning -1 if the given number is unavailable.
     */
    function scanExactNumberOfHexDigits(count, canHaveSeparators) {
        var valueString = scanHexDigits(/*minCount*/ count, /*scanAsManyAsPossible*/ false, canHaveSeparators);
        return valueString ? parseInt(valueString, 16) : -1;
    }
    /**
     * Scans as many hexadecimal digits as are available in the text,
     * returning "" if the given number of digits was unavailable.
     */
    function scanMinimumNumberOfHexDigits(count, canHaveSeparators) {
        return scanHexDigits(/*minCount*/ count, /*scanAsManyAsPossible*/ true, canHaveSeparators);
    }
    function scanHexDigits(minCount, scanAsManyAsPossible, canHaveSeparators) {
        var valueChars = [];
        var allowSeparator = false;
        var isPreviousTokenSeparator = false;
        while (valueChars.length < minCount || scanAsManyAsPossible) {
            var ch = text.charCodeAt(pos);
            if (canHaveSeparators && ch === 95 /* CharacterCodes._ */) {
                tokenFlags |= 512 /* TokenFlags.ContainsSeparator */;
                if (allowSeparator) {
                    allowSeparator = false;
                    isPreviousTokenSeparator = true;
                }
                else if (isPreviousTokenSeparator) {
                    error(ts_1.Diagnostics.Multiple_consecutive_numeric_separators_are_not_permitted, pos, 1);
                }
                else {
                    error(ts_1.Diagnostics.Numeric_separators_are_not_allowed_here, pos, 1);
                }
                pos++;
                continue;
            }
            allowSeparator = canHaveSeparators;
            if (ch >= 65 /* CharacterCodes.A */ && ch <= 70 /* CharacterCodes.F */) {
                ch += 97 /* CharacterCodes.a */ - 65 /* CharacterCodes.A */; // standardize hex literals to lowercase
            }
            else if (!((ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */) ||
                (ch >= 97 /* CharacterCodes.a */ && ch <= 102 /* CharacterCodes.f */))) {
                break;
            }
            valueChars.push(ch);
            pos++;
            isPreviousTokenSeparator = false;
        }
        if (valueChars.length < minCount) {
            valueChars = [];
        }
        if (text.charCodeAt(pos - 1) === 95 /* CharacterCodes._ */) {
            error(ts_1.Diagnostics.Numeric_separators_are_not_allowed_here, pos - 1, 1);
        }
        return String.fromCharCode.apply(String, valueChars);
    }
    function scanString(jsxAttributeString) {
        if (jsxAttributeString === void 0) { jsxAttributeString = false; }
        var quote = text.charCodeAt(pos);
        pos++;
        var result = "";
        var start = pos;
        while (true) {
            if (pos >= end) {
                result += text.substring(start, pos);
                tokenFlags |= 4 /* TokenFlags.Unterminated */;
                error(ts_1.Diagnostics.Unterminated_string_literal);
                break;
            }
            var ch = text.charCodeAt(pos);
            if (ch === quote) {
                result += text.substring(start, pos);
                pos++;
                break;
            }
            if (ch === 92 /* CharacterCodes.backslash */ && !jsxAttributeString) {
                result += text.substring(start, pos);
                result += scanEscapeSequence(/*shouldEmitInvalidEscapeError*/ true);
                start = pos;
                continue;
            }
            if (isLineBreak(ch) && !jsxAttributeString) {
                result += text.substring(start, pos);
                tokenFlags |= 4 /* TokenFlags.Unterminated */;
                error(ts_1.Diagnostics.Unterminated_string_literal);
                break;
            }
            pos++;
        }
        return result;
    }
    /**
     * Sets the current 'tokenValue' and returns a NoSubstitutionTemplateLiteral or
     * a literal component of a TemplateExpression.
     */
    function scanTemplateAndSetTokenValue(shouldEmitInvalidEscapeError) {
        var startedWithBacktick = text.charCodeAt(pos) === 96 /* CharacterCodes.backtick */;
        pos++;
        var start = pos;
        var contents = "";
        var resultingToken;
        while (true) {
            if (pos >= end) {
                contents += text.substring(start, pos);
                tokenFlags |= 4 /* TokenFlags.Unterminated */;
                error(ts_1.Diagnostics.Unterminated_template_literal);
                resultingToken = startedWithBacktick ? 15 /* SyntaxKind.NoSubstitutionTemplateLiteral */ : 18 /* SyntaxKind.TemplateTail */;
                break;
            }
            var currChar = text.charCodeAt(pos);
            // '`'
            if (currChar === 96 /* CharacterCodes.backtick */) {
                contents += text.substring(start, pos);
                pos++;
                resultingToken = startedWithBacktick ? 15 /* SyntaxKind.NoSubstitutionTemplateLiteral */ : 18 /* SyntaxKind.TemplateTail */;
                break;
            }
            // '${'
            if (currChar === 36 /* CharacterCodes.$ */ && pos + 1 < end && text.charCodeAt(pos + 1) === 123 /* CharacterCodes.openBrace */) {
                contents += text.substring(start, pos);
                pos += 2;
                resultingToken = startedWithBacktick ? 16 /* SyntaxKind.TemplateHead */ : 17 /* SyntaxKind.TemplateMiddle */;
                break;
            }
            // Escape character
            if (currChar === 92 /* CharacterCodes.backslash */) {
                contents += text.substring(start, pos);
                contents += scanEscapeSequence(shouldEmitInvalidEscapeError);
                start = pos;
                continue;
            }
            // Speculated ECMAScript 6 Spec 11.8.6.1:
            // <CR><LF> and <CR> LineTerminatorSequences are normalized to <LF> for Template Values
            if (currChar === 13 /* CharacterCodes.carriageReturn */) {
                contents += text.substring(start, pos);
                pos++;
                if (pos < end && text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {
                    pos++;
                }
                contents += "\n";
                start = pos;
                continue;
            }
            pos++;
        }
        ts_1.Debug.assert(resultingToken !== undefined);
        tokenValue = contents;
        return resultingToken;
    }
    // Extract from Section A.1
    // EscapeSequence ::
    //     | CharacterEscapeSequence
    //     | 0 (?![0-9])
    //     | LegacyOctalEscapeSequence
    //     | NonOctalDecimalEscapeSequence
    //     | HexEscapeSequence
    //     | UnicodeEscapeSequence
    // LegacyOctalEscapeSequence ::=
    //     | '0' (?=[89])
    //     | [1-7] (?![0-7])
    //     | [0-3] [0-7] (?![0-7])
    //     | [4-7] [0-7]
    //     | [0-3] [0-7] [0-7]
    // NonOctalDecimalEscapeSequence ::= [89]
    function scanEscapeSequence(shouldEmitInvalidEscapeError) {
        var start = pos;
        pos++;
        if (pos >= end) {
            error(ts_1.Diagnostics.Unexpected_end_of_text);
            return "";
        }
        var ch = text.charCodeAt(pos);
        pos++;
        switch (ch) {
            case 48 /* CharacterCodes._0 */:
                // Although '0' preceding any digit is treated as LegacyOctalEscapeSequence,
                // '\08' should separately be interpreted as '\0' + '8'.
                if (pos >= end || !isDigit(text.charCodeAt(pos))) {
                    return "\0";
                }
            // '\01', '\011'
            // falls through
            case 49 /* CharacterCodes._1 */:
            case 50 /* CharacterCodes._2 */:
            case 51 /* CharacterCodes._3 */:
                // '\1', '\17', '\177'
                if (pos < end && isOctalDigit(text.charCodeAt(pos))) {
                    pos++;
                }
            // '\17', '\177'
            // falls through
            case 52 /* CharacterCodes._4 */:
            case 53 /* CharacterCodes._5 */:
            case 54 /* CharacterCodes._6 */:
            case 55 /* CharacterCodes._7 */:
                // '\4', '\47' but not '\477'
                if (pos < end && isOctalDigit(text.charCodeAt(pos))) {
                    pos++;
                }
                // '\47'
                tokenFlags |= 2048 /* TokenFlags.ContainsInvalidEscape */;
                if (shouldEmitInvalidEscapeError) {
                    var code = parseInt(text.substring(start + 1, pos), 8);
                    error(ts_1.Diagnostics.Octal_escape_sequences_are_not_allowed_Use_the_syntax_0, start, pos - start, "\\x" + (0, ts_1.padLeft)(code.toString(16), 2, "0"));
                    return String.fromCharCode(code);
                }
                return text.substring(start, pos);
            case 56 /* CharacterCodes._8 */:
            case 57 /* CharacterCodes._9 */:
                // the invalid '\8' and '\9'
                tokenFlags |= 2048 /* TokenFlags.ContainsInvalidEscape */;
                if (shouldEmitInvalidEscapeError) {
                    error(ts_1.Diagnostics.Escape_sequence_0_is_not_allowed, start, pos - start, text.substring(start, pos));
                    return String.fromCharCode(ch);
                }
                return text.substring(start, pos);
            case 98 /* CharacterCodes.b */:
                return "\b";
            case 116 /* CharacterCodes.t */:
                return "\t";
            case 110 /* CharacterCodes.n */:
                return "\n";
            case 118 /* CharacterCodes.v */:
                return "\v";
            case 102 /* CharacterCodes.f */:
                return "\f";
            case 114 /* CharacterCodes.r */:
                return "\r";
            case 39 /* CharacterCodes.singleQuote */:
                return "\'";
            case 34 /* CharacterCodes.doubleQuote */:
                return "\"";
            case 117 /* CharacterCodes.u */:
                if (pos < end && text.charCodeAt(pos) === 123 /* CharacterCodes.openBrace */) {
                    // '\u{DDDDDDDD}'
                    pos++;
                    var escapedValueString = scanMinimumNumberOfHexDigits(1, /*canHaveSeparators*/ false);
                    var escapedValue = escapedValueString ? parseInt(escapedValueString, 16) : -1;
                    // '\u{Not Code Point' or '\u{CodePoint'
                    if (escapedValue < 0) {
                        tokenFlags |= 2048 /* TokenFlags.ContainsInvalidEscape */;
                        if (shouldEmitInvalidEscapeError) {
                            error(ts_1.Diagnostics.Hexadecimal_digit_expected);
                        }
                        return text.substring(start, pos);
                    }
                    if (!isCodePoint(escapedValue)) {
                        tokenFlags |= 2048 /* TokenFlags.ContainsInvalidEscape */;
                        if (shouldEmitInvalidEscapeError) {
                            error(ts_1.Diagnostics.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive);
                        }
                        return text.substring(start, pos);
                    }
                    if (pos >= end) {
                        tokenFlags |= 2048 /* TokenFlags.ContainsInvalidEscape */;
                        if (shouldEmitInvalidEscapeError) {
                            error(ts_1.Diagnostics.Unexpected_end_of_text);
                        }
                        return text.substring(start, pos);
                    }
                    if (text.charCodeAt(pos) !== 125 /* CharacterCodes.closeBrace */) {
                        tokenFlags |= 2048 /* TokenFlags.ContainsInvalidEscape */;
                        if (shouldEmitInvalidEscapeError) {
                            error(ts_1.Diagnostics.Unterminated_Unicode_escape_sequence);
                        }
                        return text.substring(start, pos);
                    }
                    pos++;
                    tokenFlags |= 8 /* TokenFlags.ExtendedUnicodeEscape */;
                    return utf16EncodeAsString(escapedValue);
                }
                // '\uDDDD'
                for (; pos < start + 6; pos++) {
                    if (!(pos < end && isHexDigit(text.charCodeAt(pos)))) {
                        tokenFlags |= 2048 /* TokenFlags.ContainsInvalidEscape */;
                        if (shouldEmitInvalidEscapeError) {
                            error(ts_1.Diagnostics.Hexadecimal_digit_expected);
                        }
                        return text.substring(start, pos);
                    }
                }
                tokenFlags |= 1024 /* TokenFlags.UnicodeEscape */;
                return String.fromCharCode(parseInt(text.substring(start + 2, pos), 16));
            case 120 /* CharacterCodes.x */:
                // '\xDD'
                for (; pos < start + 4; pos++) {
                    if (!(pos < end && isHexDigit(text.charCodeAt(pos)))) {
                        tokenFlags |= 2048 /* TokenFlags.ContainsInvalidEscape */;
                        if (shouldEmitInvalidEscapeError) {
                            error(ts_1.Diagnostics.Hexadecimal_digit_expected);
                        }
                        return text.substring(start, pos);
                    }
                }
                tokenFlags |= 4096 /* TokenFlags.HexEscape */;
                return String.fromCharCode(parseInt(text.substring(start + 2, pos), 16));
            // when encountering a LineContinuation (i.e. a backslash and a line terminator sequence),
            // the line terminator is interpreted to be "the empty code unit sequence".
            case 13 /* CharacterCodes.carriageReturn */:
                if (pos < end && text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {
                    pos++;
                }
            // falls through
            case 10 /* CharacterCodes.lineFeed */:
            case 8232 /* CharacterCodes.lineSeparator */:
            case 8233 /* CharacterCodes.paragraphSeparator */:
                return "";
            default:
                return String.fromCharCode(ch);
        }
    }
    function scanExtendedUnicodeEscape() {
        var escapedValueString = scanMinimumNumberOfHexDigits(1, /*canHaveSeparators*/ false);
        var escapedValue = escapedValueString ? parseInt(escapedValueString, 16) : -1;
        var isInvalidExtendedEscape = false;
        // Validate the value of the digit
        if (escapedValue < 0) {
            error(ts_1.Diagnostics.Hexadecimal_digit_expected);
            isInvalidExtendedEscape = true;
        }
        else if (escapedValue > 0x10FFFF) {
            error(ts_1.Diagnostics.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive);
            isInvalidExtendedEscape = true;
        }
        if (pos >= end) {
            error(ts_1.Diagnostics.Unexpected_end_of_text);
            isInvalidExtendedEscape = true;
        }
        else if (text.charCodeAt(pos) === 125 /* CharacterCodes.closeBrace */) {
            // Only swallow the following character up if it's a '}'.
            pos++;
        }
        else {
            error(ts_1.Diagnostics.Unterminated_Unicode_escape_sequence);
            isInvalidExtendedEscape = true;
        }
        if (isInvalidExtendedEscape) {
            return "";
        }
        return utf16EncodeAsString(escapedValue);
    }
    // Current character is known to be a backslash. Check for Unicode escape of the form '\uXXXX'
    // and return code point value if valid Unicode escape is found. Otherwise return -1.
    function peekUnicodeEscape() {
        if (pos + 5 < end && text.charCodeAt(pos + 1) === 117 /* CharacterCodes.u */) {
            var start_1 = pos;
            pos += 2;
            var value = scanExactNumberOfHexDigits(4, /*canHaveSeparators*/ false);
            pos = start_1;
            return value;
        }
        return -1;
    }
    function peekExtendedUnicodeEscape() {
        if (codePointAt(text, pos + 1) === 117 /* CharacterCodes.u */ && codePointAt(text, pos + 2) === 123 /* CharacterCodes.openBrace */) {
            var start_2 = pos;
            pos += 3;
            var escapedValueString = scanMinimumNumberOfHexDigits(1, /*canHaveSeparators*/ false);
            var escapedValue = escapedValueString ? parseInt(escapedValueString, 16) : -1;
            pos = start_2;
            return escapedValue;
        }
        return -1;
    }
    function scanIdentifierParts() {
        var result = "";
        var start = pos;
        while (pos < end) {
            var ch = codePointAt(text, pos);
            if (isIdentifierPart(ch, languageVersion)) {
                pos += charSize(ch);
            }
            else if (ch === 92 /* CharacterCodes.backslash */) {
                ch = peekExtendedUnicodeEscape();
                if (ch >= 0 && isIdentifierPart(ch, languageVersion)) {
                    pos += 3;
                    tokenFlags |= 8 /* TokenFlags.ExtendedUnicodeEscape */;
                    result += scanExtendedUnicodeEscape();
                    start = pos;
                    continue;
                }
                ch = peekUnicodeEscape();
                if (!(ch >= 0 && isIdentifierPart(ch, languageVersion))) {
                    break;
                }
                tokenFlags |= 1024 /* TokenFlags.UnicodeEscape */;
                result += text.substring(start, pos);
                result += utf16EncodeAsString(ch);
                // Valid Unicode escape is always six characters
                pos += 6;
                start = pos;
            }
            else {
                break;
            }
        }
        result += text.substring(start, pos);
        return result;
    }
    function getIdentifierToken() {
        // Reserved words are between 2 and 12 characters long and start with a lowercase letter
        var len = tokenValue.length;
        if (len >= 2 && len <= 12) {
            var ch = tokenValue.charCodeAt(0);
            if (ch >= 97 /* CharacterCodes.a */ && ch <= 122 /* CharacterCodes.z */) {
                var keyword = textToKeyword.get(tokenValue);
                if (keyword !== undefined) {
                    return token = keyword;
                }
            }
        }
        return token = 80 /* SyntaxKind.Identifier */;
    }
    function scanBinaryOrOctalDigits(base) {
        var value = "";
        // For counting number of digits; Valid binaryIntegerLiteral must have at least one binary digit following B or b.
        // Similarly valid octalIntegerLiteral must have at least one octal digit following o or O.
        var separatorAllowed = false;
        var isPreviousTokenSeparator = false;
        while (true) {
            var ch = text.charCodeAt(pos);
            // Numeric separators are allowed anywhere within a numeric literal, except not at the beginning, or following another separator
            if (ch === 95 /* CharacterCodes._ */) {
                tokenFlags |= 512 /* TokenFlags.ContainsSeparator */;
                if (separatorAllowed) {
                    separatorAllowed = false;
                    isPreviousTokenSeparator = true;
                }
                else if (isPreviousTokenSeparator) {
                    error(ts_1.Diagnostics.Multiple_consecutive_numeric_separators_are_not_permitted, pos, 1);
                }
                else {
                    error(ts_1.Diagnostics.Numeric_separators_are_not_allowed_here, pos, 1);
                }
                pos++;
                continue;
            }
            separatorAllowed = true;
            if (!isDigit(ch) || ch - 48 /* CharacterCodes._0 */ >= base) {
                break;
            }
            value += text[pos];
            pos++;
            isPreviousTokenSeparator = false;
        }
        if (text.charCodeAt(pos - 1) === 95 /* CharacterCodes._ */) {
            // Literal ends with underscore - not allowed
            error(ts_1.Diagnostics.Numeric_separators_are_not_allowed_here, pos - 1, 1);
        }
        return value;
    }
    function checkBigIntSuffix() {
        if (text.charCodeAt(pos) === 110 /* CharacterCodes.n */) {
            tokenValue += "n";
            // Use base 10 instead of base 2 or base 8 for shorter literals
            if (tokenFlags & 384 /* TokenFlags.BinaryOrOctalSpecifier */) {
                tokenValue = (0, ts_1.parsePseudoBigInt)(tokenValue) + "n";
            }
            pos++;
            return 10 /* SyntaxKind.BigIntLiteral */;
        }
        else { // not a bigint, so can convert to number in simplified form
            // Number() may not support 0b or 0o, so use parseInt() instead
            var numericValue = tokenFlags & 128 /* TokenFlags.BinarySpecifier */
                ? parseInt(tokenValue.slice(2), 2) // skip "0b"
                : tokenFlags & 256 /* TokenFlags.OctalSpecifier */
                    ? parseInt(tokenValue.slice(2), 8) // skip "0o"
                    : +tokenValue;
            tokenValue = "" + numericValue;
            return 9 /* SyntaxKind.NumericLiteral */;
        }
    }
    function scan() {
        var _a;
        fullStartPos = pos;
        tokenFlags = 0 /* TokenFlags.None */;
        var asteriskSeen = false;
        while (true) {
            tokenStart = pos;
            if (pos >= end) {
                return token = 1 /* SyntaxKind.EndOfFileToken */;
            }
            var ch = codePointAt(text, pos);
            if (pos === 0) {
                // If a file wasn't valid text at all, it will usually be apparent at
                // position 0 because UTF-8 decode will fail and produce U+FFFD.
                // If that happens, just issue one error and refuse to try to scan further;
                // this is likely a binary file that cannot be parsed
                if (ch === 65533 /* CharacterCodes.replacementCharacter */) {
                    // Jump to the end of the file and fail.
                    error(ts_1.Diagnostics.File_appears_to_be_binary);
                    pos = end;
                    return token = 8 /* SyntaxKind.NonTextFileMarkerTrivia */;
                }
                // Special handling for shebang
                if (ch === 35 /* CharacterCodes.hash */ && isShebangTrivia(text, pos)) {
                    pos = scanShebangTrivia(text, pos);
                    if (skipTrivia) {
                        continue;
                    }
                    else {
                        return token = 6 /* SyntaxKind.ShebangTrivia */;
                    }
                }
            }
            switch (ch) {
                case 10 /* CharacterCodes.lineFeed */:
                case 13 /* CharacterCodes.carriageReturn */:
                    tokenFlags |= 1 /* TokenFlags.PrecedingLineBreak */;
                    if (skipTrivia) {
                        pos++;
                        continue;
                    }
                    else {
                        if (ch === 13 /* CharacterCodes.carriageReturn */ && pos + 1 < end && text.charCodeAt(pos + 1) === 10 /* CharacterCodes.lineFeed */) {
                            // consume both CR and LF
                            pos += 2;
                        }
                        else {
                            pos++;
                        }
                        return token = 4 /* SyntaxKind.NewLineTrivia */;
                    }
                case 9 /* CharacterCodes.tab */:
                case 11 /* CharacterCodes.verticalTab */:
                case 12 /* CharacterCodes.formFeed */:
                case 32 /* CharacterCodes.space */:
                case 160 /* CharacterCodes.nonBreakingSpace */:
                case 5760 /* CharacterCodes.ogham */:
                case 8192 /* CharacterCodes.enQuad */:
                case 8193 /* CharacterCodes.emQuad */:
                case 8194 /* CharacterCodes.enSpace */:
                case 8195 /* CharacterCodes.emSpace */:
                case 8196 /* CharacterCodes.threePerEmSpace */:
                case 8197 /* CharacterCodes.fourPerEmSpace */:
                case 8198 /* CharacterCodes.sixPerEmSpace */:
                case 8199 /* CharacterCodes.figureSpace */:
                case 8200 /* CharacterCodes.punctuationSpace */:
                case 8201 /* CharacterCodes.thinSpace */:
                case 8202 /* CharacterCodes.hairSpace */:
                case 8203 /* CharacterCodes.zeroWidthSpace */:
                case 8239 /* CharacterCodes.narrowNoBreakSpace */:
                case 8287 /* CharacterCodes.mathematicalSpace */:
                case 12288 /* CharacterCodes.ideographicSpace */:
                case 65279 /* CharacterCodes.byteOrderMark */:
                    if (skipTrivia) {
                        pos++;
                        continue;
                    }
                    else {
                        while (pos < end && isWhiteSpaceSingleLine(text.charCodeAt(pos))) {
                            pos++;
                        }
                        return token = 5 /* SyntaxKind.WhitespaceTrivia */;
                    }
                case 33 /* CharacterCodes.exclamation */:
                    if (text.charCodeAt(pos + 1) === 61 /* CharacterCodes.equals */) {
                        if (text.charCodeAt(pos + 2) === 61 /* CharacterCodes.equals */) {
                            return pos += 3, token = 38 /* SyntaxKind.ExclamationEqualsEqualsToken */;
                        }
                        return pos += 2, token = 36 /* SyntaxKind.ExclamationEqualsToken */;
                    }
                    pos++;
                    return token = 54 /* SyntaxKind.ExclamationToken */;
                case 34 /* CharacterCodes.doubleQuote */:
                case 39 /* CharacterCodes.singleQuote */:
                    tokenValue = scanString();
                    return token = 11 /* SyntaxKind.StringLiteral */;
                case 96 /* CharacterCodes.backtick */:
                    return token = scanTemplateAndSetTokenValue(/*shouldEmitInvalidEscapeError*/ false);
                case 37 /* CharacterCodes.percent */:
                    if (text.charCodeAt(pos + 1) === 61 /* CharacterCodes.equals */) {
                        return pos += 2, token = 70 /* SyntaxKind.PercentEqualsToken */;
                    }
                    pos++;
                    return token = 45 /* SyntaxKind.PercentToken */;
                case 38 /* CharacterCodes.ampersand */:
                    if (text.charCodeAt(pos + 1) === 38 /* CharacterCodes.ampersand */) {
                        if (text.charCodeAt(pos + 2) === 61 /* CharacterCodes.equals */) {
                            return pos += 3, token = 77 /* SyntaxKind.AmpersandAmpersandEqualsToken */;
                        }
                        return pos += 2, token = 56 /* SyntaxKind.AmpersandAmpersandToken */;
                    }
                    if (text.charCodeAt(pos + 1) === 61 /* CharacterCodes.equals */) {
                        return pos += 2, token = 74 /* SyntaxKind.AmpersandEqualsToken */;
                    }
                    pos++;
                    return token = 51 /* SyntaxKind.AmpersandToken */;
                case 40 /* CharacterCodes.openParen */:
                    pos++;
                    return token = 21 /* SyntaxKind.OpenParenToken */;
                case 41 /* CharacterCodes.closeParen */:
                    pos++;
                    return token = 22 /* SyntaxKind.CloseParenToken */;
                case 42 /* CharacterCodes.asterisk */:
                    if (text.charCodeAt(pos + 1) === 61 /* CharacterCodes.equals */) {
                        return pos += 2, token = 67 /* SyntaxKind.AsteriskEqualsToken */;
                    }
                    if (text.charCodeAt(pos + 1) === 42 /* CharacterCodes.asterisk */) {
                        if (text.charCodeAt(pos + 2) === 61 /* CharacterCodes.equals */) {
                            return pos += 3, token = 68 /* SyntaxKind.AsteriskAsteriskEqualsToken */;
                        }
                        return pos += 2, token = 43 /* SyntaxKind.AsteriskAsteriskToken */;
                    }
                    pos++;
                    if (inJSDocType && !asteriskSeen && (tokenFlags & 1 /* TokenFlags.PrecedingLineBreak */)) {
                        // decoration at the start of a JSDoc comment line
                        asteriskSeen = true;
                        continue;
                    }
                    return token = 42 /* SyntaxKind.AsteriskToken */;
                case 43 /* CharacterCodes.plus */:
                    if (text.charCodeAt(pos + 1) === 43 /* CharacterCodes.plus */) {
                        return pos += 2, token = 46 /* SyntaxKind.PlusPlusToken */;
                    }
                    if (text.charCodeAt(pos + 1) === 61 /* CharacterCodes.equals */) {
                        return pos += 2, token = 65 /* SyntaxKind.PlusEqualsToken */;
                    }
                    pos++;
                    return token = 40 /* SyntaxKind.PlusToken */;
                case 44 /* CharacterCodes.comma */:
                    pos++;
                    return token = 28 /* SyntaxKind.CommaToken */;
                case 45 /* CharacterCodes.minus */:
                    if (text.charCodeAt(pos + 1) === 45 /* CharacterCodes.minus */) {
                        return pos += 2, token = 47 /* SyntaxKind.MinusMinusToken */;
                    }
                    if (text.charCodeAt(pos + 1) === 61 /* CharacterCodes.equals */) {
                        return pos += 2, token = 66 /* SyntaxKind.MinusEqualsToken */;
                    }
                    pos++;
                    return token = 41 /* SyntaxKind.MinusToken */;
                case 46 /* CharacterCodes.dot */:
                    if (isDigit(text.charCodeAt(pos + 1))) {
                        tokenValue = scanNumber().value;
                        return token = 9 /* SyntaxKind.NumericLiteral */;
                    }
                    if (text.charCodeAt(pos + 1) === 46 /* CharacterCodes.dot */ && text.charCodeAt(pos + 2) === 46 /* CharacterCodes.dot */) {
                        return pos += 3, token = 26 /* SyntaxKind.DotDotDotToken */;
                    }
                    pos++;
                    return token = 25 /* SyntaxKind.DotToken */;
                case 47 /* CharacterCodes.slash */:
                    // Single-line comment
                    if (text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {
                        pos += 2;
                        while (pos < end) {
                            if (isLineBreak(text.charCodeAt(pos))) {
                                break;
                            }
                            pos++;
                        }
                        commentDirectives = appendIfCommentDirective(commentDirectives, text.slice(tokenStart, pos), commentDirectiveRegExSingleLine, tokenStart);
                        if (skipTrivia) {
                            continue;
                        }
                        else {
                            return token = 2 /* SyntaxKind.SingleLineCommentTrivia */;
                        }
                    }
                    // Multi-line comment
                    if (text.charCodeAt(pos + 1) === 42 /* CharacterCodes.asterisk */) {
                        pos += 2;
                        if (text.charCodeAt(pos) === 42 /* CharacterCodes.asterisk */ && text.charCodeAt(pos + 1) !== 47 /* CharacterCodes.slash */) {
                            tokenFlags |= 2 /* TokenFlags.PrecedingJSDocComment */;
                        }
                        var commentClosed = false;
                        var lastLineStart = tokenStart;
                        while (pos < end) {
                            var ch_1 = text.charCodeAt(pos);
                            if (ch_1 === 42 /* CharacterCodes.asterisk */ && text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {
                                pos += 2;
                                commentClosed = true;
                                break;
                            }
                            pos++;
                            if (isLineBreak(ch_1)) {
                                lastLineStart = pos;
                                tokenFlags |= 1 /* TokenFlags.PrecedingLineBreak */;
                            }
                        }
                        commentDirectives = appendIfCommentDirective(commentDirectives, text.slice(lastLineStart, pos), commentDirectiveRegExMultiLine, lastLineStart);
                        if (!commentClosed) {
                            error(ts_1.Diagnostics.Asterisk_Slash_expected);
                        }
                        if (skipTrivia) {
                            continue;
                        }
                        else {
                            if (!commentClosed) {
                                tokenFlags |= 4 /* TokenFlags.Unterminated */;
                            }
                            return token = 3 /* SyntaxKind.MultiLineCommentTrivia */;
                        }
                    }
                    if (text.charCodeAt(pos + 1) === 61 /* CharacterCodes.equals */) {
                        return pos += 2, token = 69 /* SyntaxKind.SlashEqualsToken */;
                    }
                    pos++;
                    return token = 44 /* SyntaxKind.SlashToken */;
                case 48 /* CharacterCodes._0 */:
                    if (pos + 2 < end && (text.charCodeAt(pos + 1) === 88 /* CharacterCodes.X */ || text.charCodeAt(pos + 1) === 120 /* CharacterCodes.x */)) {
                        pos += 2;
                        tokenValue = scanMinimumNumberOfHexDigits(1, /*canHaveSeparators*/ true);
                        if (!tokenValue) {
                            error(ts_1.Diagnostics.Hexadecimal_digit_expected);
                            tokenValue = "0";
                        }
                        tokenValue = "0x" + tokenValue;
                        tokenFlags |= 64 /* TokenFlags.HexSpecifier */;
                        return token = checkBigIntSuffix();
                    }
                    else if (pos + 2 < end && (text.charCodeAt(pos + 1) === 66 /* CharacterCodes.B */ || text.charCodeAt(pos + 1) === 98 /* CharacterCodes.b */)) {
                        pos += 2;
                        tokenValue = scanBinaryOrOctalDigits(/* base */ 2);
                        if (!tokenValue) {
                            error(ts_1.Diagnostics.Binary_digit_expected);
                            tokenValue = "0";
                        }
                        tokenValue = "0b" + tokenValue;
                        tokenFlags |= 128 /* TokenFlags.BinarySpecifier */;
                        return token = checkBigIntSuffix();
                    }
                    else if (pos + 2 < end && (text.charCodeAt(pos + 1) === 79 /* CharacterCodes.O */ || text.charCodeAt(pos + 1) === 111 /* CharacterCodes.o */)) {
                        pos += 2;
                        tokenValue = scanBinaryOrOctalDigits(/* base */ 8);
                        if (!tokenValue) {
                            error(ts_1.Diagnostics.Octal_digit_expected);
                            tokenValue = "0";
                        }
                        tokenValue = "0o" + tokenValue;
                        tokenFlags |= 256 /* TokenFlags.OctalSpecifier */;
                        return token = checkBigIntSuffix();
                    }
                // falls through
                case 49 /* CharacterCodes._1 */:
                case 50 /* CharacterCodes._2 */:
                case 51 /* CharacterCodes._3 */:
                case 52 /* CharacterCodes._4 */:
                case 53 /* CharacterCodes._5 */:
                case 54 /* CharacterCodes._6 */:
                case 55 /* CharacterCodes._7 */:
                case 56 /* CharacterCodes._8 */:
                case 57 /* CharacterCodes._9 */:
                    (_a = scanNumber(), token = _a.type, tokenValue = _a.value);
                    return token;
                case 58 /* CharacterCodes.colon */:
                    pos++;
                    return token = 59 /* SyntaxKind.ColonToken */;
                case 59 /* CharacterCodes.semicolon */:
                    pos++;
                    return token = 27 /* SyntaxKind.SemicolonToken */;
                case 60 /* CharacterCodes.lessThan */:
                    if (isConflictMarkerTrivia(text, pos)) {
                        pos = scanConflictMarkerTrivia(text, pos, error);
                        if (skipTrivia) {
                            continue;
                        }
                        else {
                            return token = 7 /* SyntaxKind.ConflictMarkerTrivia */;
                        }
                    }
                    if (text.charCodeAt(pos + 1) === 60 /* CharacterCodes.lessThan */) {
                        if (text.charCodeAt(pos + 2) === 61 /* CharacterCodes.equals */) {
                            return pos += 3, token = 71 /* SyntaxKind.LessThanLessThanEqualsToken */;
                        }
                        return pos += 2, token = 48 /* SyntaxKind.LessThanLessThanToken */;
                    }
                    if (text.charCodeAt(pos + 1) === 61 /* CharacterCodes.equals */) {
                        return pos += 2, token = 33 /* SyntaxKind.LessThanEqualsToken */;
                    }
                    if (languageVariant === 1 /* LanguageVariant.JSX */ &&
                        text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */ &&
                        text.charCodeAt(pos + 2) !== 42 /* CharacterCodes.asterisk */) {
                        return pos += 2, token = 31 /* SyntaxKind.LessThanSlashToken */;
                    }
                    pos++;
                    return token = 30 /* SyntaxKind.LessThanToken */;
                case 61 /* CharacterCodes.equals */:
                    if (isConflictMarkerTrivia(text, pos)) {
                        pos = scanConflictMarkerTrivia(text, pos, error);
                        if (skipTrivia) {
                            continue;
                        }
                        else {
                            return token = 7 /* SyntaxKind.ConflictMarkerTrivia */;
                        }
                    }
                    if (text.charCodeAt(pos + 1) === 61 /* CharacterCodes.equals */) {
                        if (text.charCodeAt(pos + 2) === 61 /* CharacterCodes.equals */) {
                            return pos += 3, token = 37 /* SyntaxKind.EqualsEqualsEqualsToken */;
                        }
                        return pos += 2, token = 35 /* SyntaxKind.EqualsEqualsToken */;
                    }
                    if (text.charCodeAt(pos + 1) === 62 /* CharacterCodes.greaterThan */) {
                        return pos += 2, token = 39 /* SyntaxKind.EqualsGreaterThanToken */;
                    }
                    pos++;
                    return token = 64 /* SyntaxKind.EqualsToken */;
                case 62 /* CharacterCodes.greaterThan */:
                    if (isConflictMarkerTrivia(text, pos)) {
                        pos = scanConflictMarkerTrivia(text, pos, error);
                        if (skipTrivia) {
                            continue;
                        }
                        else {
                            return token = 7 /* SyntaxKind.ConflictMarkerTrivia */;
                        }
                    }
                    pos++;
                    return token = 32 /* SyntaxKind.GreaterThanToken */;
                case 63 /* CharacterCodes.question */:
                    if (text.charCodeAt(pos + 1) === 46 /* CharacterCodes.dot */ && !isDigit(text.charCodeAt(pos + 2))) {
                        return pos += 2, token = 29 /* SyntaxKind.QuestionDotToken */;
                    }
                    if (text.charCodeAt(pos + 1) === 63 /* CharacterCodes.question */) {
                        if (text.charCodeAt(pos + 2) === 61 /* CharacterCodes.equals */) {
                            return pos += 3, token = 78 /* SyntaxKind.QuestionQuestionEqualsToken */;
                        }
                        return pos += 2, token = 61 /* SyntaxKind.QuestionQuestionToken */;
                    }
                    pos++;
                    return token = 58 /* SyntaxKind.QuestionToken */;
                case 91 /* CharacterCodes.openBracket */:
                    pos++;
                    return token = 23 /* SyntaxKind.OpenBracketToken */;
                case 93 /* CharacterCodes.closeBracket */:
                    pos++;
                    return token = 24 /* SyntaxKind.CloseBracketToken */;
                case 94 /* CharacterCodes.caret */:
                    if (text.charCodeAt(pos + 1) === 61 /* CharacterCodes.equals */) {
                        return pos += 2, token = 79 /* SyntaxKind.CaretEqualsToken */;
                    }
                    pos++;
                    return token = 53 /* SyntaxKind.CaretToken */;
                case 123 /* CharacterCodes.openBrace */:
                    pos++;
                    return token = 19 /* SyntaxKind.OpenBraceToken */;
                case 124 /* CharacterCodes.bar */:
                    if (isConflictMarkerTrivia(text, pos)) {
                        pos = scanConflictMarkerTrivia(text, pos, error);
                        if (skipTrivia) {
                            continue;
                        }
                        else {
                            return token = 7 /* SyntaxKind.ConflictMarkerTrivia */;
                        }
                    }
                    if (text.charCodeAt(pos + 1) === 124 /* CharacterCodes.bar */) {
                        if (text.charCodeAt(pos + 2) === 61 /* CharacterCodes.equals */) {
                            return pos += 3, token = 76 /* SyntaxKind.BarBarEqualsToken */;
                        }
                        return pos += 2, token = 57 /* SyntaxKind.BarBarToken */;
                    }
                    if (text.charCodeAt(pos + 1) === 61 /* CharacterCodes.equals */) {
                        return pos += 2, token = 75 /* SyntaxKind.BarEqualsToken */;
                    }
                    pos++;
                    return token = 52 /* SyntaxKind.BarToken */;
                case 125 /* CharacterCodes.closeBrace */:
                    pos++;
                    return token = 20 /* SyntaxKind.CloseBraceToken */;
                case 126 /* CharacterCodes.tilde */:
                    pos++;
                    return token = 55 /* SyntaxKind.TildeToken */;
                case 64 /* CharacterCodes.at */:
                    pos++;
                    return token = 60 /* SyntaxKind.AtToken */;
                case 92 /* CharacterCodes.backslash */:
                    var extendedCookedChar = peekExtendedUnicodeEscape();
                    if (extendedCookedChar >= 0 && isIdentifierStart(extendedCookedChar, languageVersion)) {
                        pos += 3;
                        tokenFlags |= 8 /* TokenFlags.ExtendedUnicodeEscape */;
                        tokenValue = scanExtendedUnicodeEscape() + scanIdentifierParts();
                        return token = getIdentifierToken();
                    }
                    var cookedChar = peekUnicodeEscape();
                    if (cookedChar >= 0 && isIdentifierStart(cookedChar, languageVersion)) {
                        pos += 6;
                        tokenFlags |= 1024 /* TokenFlags.UnicodeEscape */;
                        tokenValue = String.fromCharCode(cookedChar) + scanIdentifierParts();
                        return token = getIdentifierToken();
                    }
                    error(ts_1.Diagnostics.Invalid_character);
                    pos++;
                    return token = 0 /* SyntaxKind.Unknown */;
                case 35 /* CharacterCodes.hash */:
                    if (pos !== 0 && text[pos + 1] === "!") {
                        error(ts_1.Diagnostics.can_only_be_used_at_the_start_of_a_file);
                        pos++;
                        return token = 0 /* SyntaxKind.Unknown */;
                    }
                    var charAfterHash = codePointAt(text, pos + 1);
                    if (charAfterHash === 92 /* CharacterCodes.backslash */) {
                        pos++;
                        var extendedCookedChar_1 = peekExtendedUnicodeEscape();
                        if (extendedCookedChar_1 >= 0 && isIdentifierStart(extendedCookedChar_1, languageVersion)) {
                            pos += 3;
                            tokenFlags |= 8 /* TokenFlags.ExtendedUnicodeEscape */;
                            tokenValue = "#" + scanExtendedUnicodeEscape() + scanIdentifierParts();
                            return token = 81 /* SyntaxKind.PrivateIdentifier */;
                        }
                        var cookedChar_1 = peekUnicodeEscape();
                        if (cookedChar_1 >= 0 && isIdentifierStart(cookedChar_1, languageVersion)) {
                            pos += 6;
                            tokenFlags |= 1024 /* TokenFlags.UnicodeEscape */;
                            tokenValue = "#" + String.fromCharCode(cookedChar_1) + scanIdentifierParts();
                            return token = 81 /* SyntaxKind.PrivateIdentifier */;
                        }
                        pos--;
                    }
                    if (isIdentifierStart(charAfterHash, languageVersion)) {
                        pos++;
                        // We're relying on scanIdentifier's behavior and adjusting the token kind after the fact.
                        // Notably absent from this block is the fact that calling a function named "scanIdentifier",
                        // but identifiers don't include '#', and that function doesn't deal with it at all.
                        // This works because 'scanIdentifier' tries to reuse source characters and builds up substrings;
                        // however, it starts at the 'tokenPos' which includes the '#', and will "accidentally" prepend the '#' for us.
                        scanIdentifier(charAfterHash, languageVersion);
                    }
                    else {
                        tokenValue = "#";
                        error(ts_1.Diagnostics.Invalid_character, pos++, charSize(ch));
                    }
                    return token = 81 /* SyntaxKind.PrivateIdentifier */;
                default:
                    var identifierKind = scanIdentifier(ch, languageVersion);
                    if (identifierKind) {
                        return token = identifierKind;
                    }
                    else if (isWhiteSpaceSingleLine(ch)) {
                        pos += charSize(ch);
                        continue;
                    }
                    else if (isLineBreak(ch)) {
                        tokenFlags |= 1 /* TokenFlags.PrecedingLineBreak */;
                        pos += charSize(ch);
                        continue;
                    }
                    var size = charSize(ch);
                    error(ts_1.Diagnostics.Invalid_character, pos, size);
                    pos += size;
                    return token = 0 /* SyntaxKind.Unknown */;
            }
        }
    }
    function reScanInvalidIdentifier() {
        ts_1.Debug.assert(token === 0 /* SyntaxKind.Unknown */, "'reScanInvalidIdentifier' should only be called when the current token is 'SyntaxKind.Unknown'.");
        pos = tokenStart = fullStartPos;
        tokenFlags = 0;
        var ch = codePointAt(text, pos);
        var identifierKind = scanIdentifier(ch, 99 /* ScriptTarget.ESNext */);
        if (identifierKind) {
            return token = identifierKind;
        }
        pos += charSize(ch);
        return token; // Still `SyntaKind.Unknown`
    }
    function scanIdentifier(startCharacter, languageVersion) {
        var ch = startCharacter;
        if (isIdentifierStart(ch, languageVersion)) {
            pos += charSize(ch);
            while (pos < end && isIdentifierPart(ch = codePointAt(text, pos), languageVersion))
                pos += charSize(ch);
            tokenValue = text.substring(tokenStart, pos);
            if (ch === 92 /* CharacterCodes.backslash */) {
                tokenValue += scanIdentifierParts();
            }
            return getIdentifierToken();
        }
    }
    function reScanGreaterToken() {
        if (token === 32 /* SyntaxKind.GreaterThanToken */) {
            if (text.charCodeAt(pos) === 62 /* CharacterCodes.greaterThan */) {
                if (text.charCodeAt(pos + 1) === 62 /* CharacterCodes.greaterThan */) {
                    if (text.charCodeAt(pos + 2) === 61 /* CharacterCodes.equals */) {
                        return pos += 3, token = 73 /* SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken */;
                    }
                    return pos += 2, token = 50 /* SyntaxKind.GreaterThanGreaterThanGreaterThanToken */;
                }
                if (text.charCodeAt(pos + 1) === 61 /* CharacterCodes.equals */) {
                    return pos += 2, token = 72 /* SyntaxKind.GreaterThanGreaterThanEqualsToken */;
                }
                pos++;
                return token = 49 /* SyntaxKind.GreaterThanGreaterThanToken */;
            }
            if (text.charCodeAt(pos) === 61 /* CharacterCodes.equals */) {
                pos++;
                return token = 34 /* SyntaxKind.GreaterThanEqualsToken */;
            }
        }
        return token;
    }
    function reScanAsteriskEqualsToken() {
        ts_1.Debug.assert(token === 67 /* SyntaxKind.AsteriskEqualsToken */, "'reScanAsteriskEqualsToken' should only be called on a '*='");
        pos = tokenStart + 1;
        return token = 64 /* SyntaxKind.EqualsToken */;
    }
    function reScanSlashToken() {
        if (token === 44 /* SyntaxKind.SlashToken */ || token === 69 /* SyntaxKind.SlashEqualsToken */) {
            var p = tokenStart + 1;
            var inEscape = false;
            var inCharacterClass = false;
            while (true) {
                // If we reach the end of a file, or hit a newline, then this is an unterminated
                // regex.  Report error and return what we have so far.
                if (p >= end) {
                    tokenFlags |= 4 /* TokenFlags.Unterminated */;
                    error(ts_1.Diagnostics.Unterminated_regular_expression_literal);
                    break;
                }
                var ch = text.charCodeAt(p);
                if (isLineBreak(ch)) {
                    tokenFlags |= 4 /* TokenFlags.Unterminated */;
                    error(ts_1.Diagnostics.Unterminated_regular_expression_literal);
                    break;
                }
                if (inEscape) {
                    // Parsing an escape character;
                    // reset the flag and just advance to the next char.
                    inEscape = false;
                }
                else if (ch === 47 /* CharacterCodes.slash */ && !inCharacterClass) {
                    // A slash within a character class is permissible,
                    // but in general it signals the end of the regexp literal.
                    p++;
                    break;
                }
                else if (ch === 91 /* CharacterCodes.openBracket */) {
                    inCharacterClass = true;
                }
                else if (ch === 92 /* CharacterCodes.backslash */) {
                    inEscape = true;
                }
                else if (ch === 93 /* CharacterCodes.closeBracket */) {
                    inCharacterClass = false;
                }
                p++;
            }
            while (p < end && isIdentifierPart(text.charCodeAt(p), languageVersion)) {
                p++;
            }
            pos = p;
            tokenValue = text.substring(tokenStart, pos);
            token = 14 /* SyntaxKind.RegularExpressionLiteral */;
        }
        return token;
    }
    function appendIfCommentDirective(commentDirectives, text, commentDirectiveRegEx, lineStart) {
        var type = getDirectiveFromComment((0, ts_1.trimStringStart)(text), commentDirectiveRegEx);
        if (type === undefined) {
            return commentDirectives;
        }
        return (0, ts_1.append)(commentDirectives, {
            range: { pos: lineStart, end: pos },
            type: type,
        });
    }
    function getDirectiveFromComment(text, commentDirectiveRegEx) {
        var match = commentDirectiveRegEx.exec(text);
        if (!match) {
            return undefined;
        }
        switch (match[1]) {
            case "ts-expect-error":
                return 0 /* CommentDirectiveType.ExpectError */;
            case "ts-ignore":
                return 1 /* CommentDirectiveType.Ignore */;
        }
        return undefined;
    }
    /**
     * Unconditionally back up and scan a template expression portion.
     */
    function reScanTemplateToken(isTaggedTemplate) {
        pos = tokenStart;
        return token = scanTemplateAndSetTokenValue(!isTaggedTemplate);
    }
    function reScanTemplateHeadOrNoSubstitutionTemplate() {
        pos = tokenStart;
        return token = scanTemplateAndSetTokenValue(/*shouldEmitInvalidEscapeError*/ true);
    }
    function reScanJsxToken(allowMultilineJsxText) {
        if (allowMultilineJsxText === void 0) { allowMultilineJsxText = true; }
        pos = tokenStart = fullStartPos;
        return token = scanJsxToken(allowMultilineJsxText);
    }
    function reScanLessThanToken() {
        if (token === 48 /* SyntaxKind.LessThanLessThanToken */) {
            pos = tokenStart + 1;
            return token = 30 /* SyntaxKind.LessThanToken */;
        }
        return token;
    }
    function reScanHashToken() {
        if (token === 81 /* SyntaxKind.PrivateIdentifier */) {
            pos = tokenStart + 1;
            return token = 63 /* SyntaxKind.HashToken */;
        }
        return token;
    }
    function reScanQuestionToken() {
        ts_1.Debug.assert(token === 61 /* SyntaxKind.QuestionQuestionToken */, "'reScanQuestionToken' should only be called on a '??'");
        pos = tokenStart + 1;
        return token = 58 /* SyntaxKind.QuestionToken */;
    }
    function scanJsxToken(allowMultilineJsxText) {
        if (allowMultilineJsxText === void 0) { allowMultilineJsxText = true; }
        fullStartPos = tokenStart = pos;
        if (pos >= end) {
            return token = 1 /* SyntaxKind.EndOfFileToken */;
        }
        var char = text.charCodeAt(pos);
        if (char === 60 /* CharacterCodes.lessThan */) {
            if (text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {
                pos += 2;
                return token = 31 /* SyntaxKind.LessThanSlashToken */;
            }
            pos++;
            return token = 30 /* SyntaxKind.LessThanToken */;
        }
        if (char === 123 /* CharacterCodes.openBrace */) {
            pos++;
            return token = 19 /* SyntaxKind.OpenBraceToken */;
        }
        // First non-whitespace character on this line.
        var firstNonWhitespace = 0;
        // These initial values are special because the first line is:
        // firstNonWhitespace = 0 to indicate that we want leading whitespace,
        while (pos < end) {
            char = text.charCodeAt(pos);
            if (char === 123 /* CharacterCodes.openBrace */) {
                break;
            }
            if (char === 60 /* CharacterCodes.lessThan */) {
                if (isConflictMarkerTrivia(text, pos)) {
                    pos = scanConflictMarkerTrivia(text, pos, error);
                    return token = 7 /* SyntaxKind.ConflictMarkerTrivia */;
                }
                break;
            }
            if (char === 62 /* CharacterCodes.greaterThan */) {
                error(ts_1.Diagnostics.Unexpected_token_Did_you_mean_or_gt, pos, 1);
            }
            if (char === 125 /* CharacterCodes.closeBrace */) {
                error(ts_1.Diagnostics.Unexpected_token_Did_you_mean_or_rbrace, pos, 1);
            }
            // FirstNonWhitespace is 0, then we only see whitespaces so far. If we see a linebreak, we want to ignore that whitespaces.
            // i.e (- : whitespace)
            //      <div>----
            //      </div> becomes <div></div>
            //
            //      <div>----</div> becomes <div>----</div>
            if (isLineBreak(char) && firstNonWhitespace === 0) {
                firstNonWhitespace = -1;
            }
            else if (!allowMultilineJsxText && isLineBreak(char) && firstNonWhitespace > 0) {
                // Stop JsxText on each line during formatting. This allows the formatter to
                // indent each line correctly.
                break;
            }
            else if (!isWhiteSpaceLike(char)) {
                firstNonWhitespace = pos;
            }
            pos++;
        }
        tokenValue = text.substring(fullStartPos, pos);
        return firstNonWhitespace === -1 ? 13 /* SyntaxKind.JsxTextAllWhiteSpaces */ : 12 /* SyntaxKind.JsxText */;
    }
    // Scans a JSX identifier; these differ from normal identifiers in that
    // they allow dashes
    function scanJsxIdentifier() {
        if (tokenIsIdentifierOrKeyword(token)) {
            // An identifier or keyword has already been parsed - check for a `-` or a single instance of `:` and then append it and
            // everything after it to the token
            // Do note that this means that `scanJsxIdentifier` effectively _mutates_ the visible token without advancing to a new token
            // Any caller should be expecting this behavior and should only read the pos or token value after calling it.
            while (pos < end) {
                var ch = text.charCodeAt(pos);
                if (ch === 45 /* CharacterCodes.minus */) {
                    tokenValue += "-";
                    pos++;
                    continue;
                }
                var oldPos = pos;
                tokenValue += scanIdentifierParts(); // reuse `scanIdentifierParts` so unicode escapes are handled
                if (pos === oldPos) {
                    break;
                }
            }
            return getIdentifierToken();
        }
        return token;
    }
    function scanJsxAttributeValue() {
        fullStartPos = pos;
        switch (text.charCodeAt(pos)) {
            case 34 /* CharacterCodes.doubleQuote */:
            case 39 /* CharacterCodes.singleQuote */:
                tokenValue = scanString(/*jsxAttributeString*/ true);
                return token = 11 /* SyntaxKind.StringLiteral */;
            default:
                // If this scans anything other than `{`, it's a parse error.
                return scan();
        }
    }
    function reScanJsxAttributeValue() {
        pos = tokenStart = fullStartPos;
        return scanJsxAttributeValue();
    }
    function scanJSDocCommentTextToken(inBackticks) {
        fullStartPos = tokenStart = pos;
        tokenFlags = 0 /* TokenFlags.None */;
        if (pos >= end) {
            return token = 1 /* SyntaxKind.EndOfFileToken */;
        }
        for (var ch = text.charCodeAt(pos); pos < end && (!isLineBreak(ch) && ch !== 96 /* CharacterCodes.backtick */); ch = codePointAt(text, ++pos)) {
            if (!inBackticks) {
                if (ch === 123 /* CharacterCodes.openBrace */) {
                    break;
                }
                else if (ch === 64 /* CharacterCodes.at */
                    && pos - 1 >= 0 && isWhiteSpaceSingleLine(text.charCodeAt(pos - 1))
                    && !(pos + 1 < end && isWhiteSpaceLike(text.charCodeAt(pos + 1)))) {
                    // @ doesn't start a new tag inside ``, and elsewhere, only after whitespace and before non-whitespace
                    break;
                }
            }
        }
        if (pos === tokenStart) {
            return scanJsDocToken();
        }
        tokenValue = text.substring(tokenStart, pos);
        return token = 82 /* SyntaxKind.JSDocCommentTextToken */;
    }
    function scanJsDocToken() {
        fullStartPos = tokenStart = pos;
        tokenFlags = 0 /* TokenFlags.None */;
        if (pos >= end) {
            return token = 1 /* SyntaxKind.EndOfFileToken */;
        }
        var ch = codePointAt(text, pos);
        pos += charSize(ch);
        switch (ch) {
            case 9 /* CharacterCodes.tab */:
            case 11 /* CharacterCodes.verticalTab */:
            case 12 /* CharacterCodes.formFeed */:
            case 32 /* CharacterCodes.space */:
                while (pos < end && isWhiteSpaceSingleLine(text.charCodeAt(pos))) {
                    pos++;
                }
                return token = 5 /* SyntaxKind.WhitespaceTrivia */;
            case 64 /* CharacterCodes.at */:
                return token = 60 /* SyntaxKind.AtToken */;
            case 13 /* CharacterCodes.carriageReturn */:
                if (text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {
                    pos++;
                }
            // falls through
            case 10 /* CharacterCodes.lineFeed */:
                tokenFlags |= 1 /* TokenFlags.PrecedingLineBreak */;
                return token = 4 /* SyntaxKind.NewLineTrivia */;
            case 42 /* CharacterCodes.asterisk */:
                return token = 42 /* SyntaxKind.AsteriskToken */;
            case 123 /* CharacterCodes.openBrace */:
                return token = 19 /* SyntaxKind.OpenBraceToken */;
            case 125 /* CharacterCodes.closeBrace */:
                return token = 20 /* SyntaxKind.CloseBraceToken */;
            case 91 /* CharacterCodes.openBracket */:
                return token = 23 /* SyntaxKind.OpenBracketToken */;
            case 93 /* CharacterCodes.closeBracket */:
                return token = 24 /* SyntaxKind.CloseBracketToken */;
            case 60 /* CharacterCodes.lessThan */:
                return token = 30 /* SyntaxKind.LessThanToken */;
            case 62 /* CharacterCodes.greaterThan */:
                return token = 32 /* SyntaxKind.GreaterThanToken */;
            case 61 /* CharacterCodes.equals */:
                return token = 64 /* SyntaxKind.EqualsToken */;
            case 44 /* CharacterCodes.comma */:
                return token = 28 /* SyntaxKind.CommaToken */;
            case 46 /* CharacterCodes.dot */:
                return token = 25 /* SyntaxKind.DotToken */;
            case 96 /* CharacterCodes.backtick */:
                return token = 62 /* SyntaxKind.BacktickToken */;
            case 35 /* CharacterCodes.hash */:
                return token = 63 /* SyntaxKind.HashToken */;
            case 92 /* CharacterCodes.backslash */:
                pos--;
                var extendedCookedChar = peekExtendedUnicodeEscape();
                if (extendedCookedChar >= 0 && isIdentifierStart(extendedCookedChar, languageVersion)) {
                    pos += 3;
                    tokenFlags |= 8 /* TokenFlags.ExtendedUnicodeEscape */;
                    tokenValue = scanExtendedUnicodeEscape() + scanIdentifierParts();
                    return token = getIdentifierToken();
                }
                var cookedChar = peekUnicodeEscape();
                if (cookedChar >= 0 && isIdentifierStart(cookedChar, languageVersion)) {
                    pos += 6;
                    tokenFlags |= 1024 /* TokenFlags.UnicodeEscape */;
                    tokenValue = String.fromCharCode(cookedChar) + scanIdentifierParts();
                    return token = getIdentifierToken();
                }
                pos++;
                return token = 0 /* SyntaxKind.Unknown */;
        }
        if (isIdentifierStart(ch, languageVersion)) {
            var char = ch;
            while (pos < end && isIdentifierPart(char = codePointAt(text, pos), languageVersion) || text.charCodeAt(pos) === 45 /* CharacterCodes.minus */)
                pos += charSize(char);
            tokenValue = text.substring(tokenStart, pos);
            if (char === 92 /* CharacterCodes.backslash */) {
                tokenValue += scanIdentifierParts();
            }
            return token = getIdentifierToken();
        }
        else {
            return token = 0 /* SyntaxKind.Unknown */;
        }
    }
    function speculationHelper(callback, isLookahead) {
        var savePos = pos;
        var saveStartPos = fullStartPos;
        var saveTokenPos = tokenStart;
        var saveToken = token;
        var saveTokenValue = tokenValue;
        var saveTokenFlags = tokenFlags;
        var result = callback();
        // If our callback returned something 'falsy' or we're just looking ahead,
        // then unconditionally restore us to where we were.
        if (!result || isLookahead) {
            pos = savePos;
            fullStartPos = saveStartPos;
            tokenStart = saveTokenPos;
            token = saveToken;
            tokenValue = saveTokenValue;
            tokenFlags = saveTokenFlags;
        }
        return result;
    }
    function scanRange(start, length, callback) {
        var saveEnd = end;
        var savePos = pos;
        var saveStartPos = fullStartPos;
        var saveTokenPos = tokenStart;
        var saveToken = token;
        var saveTokenValue = tokenValue;
        var saveTokenFlags = tokenFlags;
        var saveErrorExpectations = commentDirectives;
        setText(text, start, length);
        var result = callback();
        end = saveEnd;
        pos = savePos;
        fullStartPos = saveStartPos;
        tokenStart = saveTokenPos;
        token = saveToken;
        tokenValue = saveTokenValue;
        tokenFlags = saveTokenFlags;
        commentDirectives = saveErrorExpectations;
        return result;
    }
    function lookAhead(callback) {
        return speculationHelper(callback, /*isLookahead*/ true);
    }
    function tryScan(callback) {
        return speculationHelper(callback, /*isLookahead*/ false);
    }
    function getText() {
        return text;
    }
    function clearCommentDirectives() {
        commentDirectives = undefined;
    }
    function setText(newText, start, length) {
        text = newText || "";
        end = length === undefined ? text.length : start + length;
        resetTokenState(start || 0);
    }
    function setOnError(errorCallback) {
        onError = errorCallback;
    }
    function setScriptTarget(scriptTarget) {
        languageVersion = scriptTarget;
    }
    function setLanguageVariant(variant) {
        languageVariant = variant;
    }
    function resetTokenState(position) {
        ts_1.Debug.assert(position >= 0);
        pos = position;
        fullStartPos = position;
        tokenStart = position;
        token = 0 /* SyntaxKind.Unknown */;
        tokenValue = undefined;
        tokenFlags = 0 /* TokenFlags.None */;
    }
    function setInJSDocType(inType) {
        inJSDocType += inType ? 1 : -1;
    }
}
exports.createScanner = createScanner;
/** @internal */
var codePointAt = String.prototype.codePointAt ? function (s, i) { return s.codePointAt(i); } : function codePointAt(str, i) {
    // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt
    var size = str.length;
    // Account for out-of-bounds indices:
    if (i < 0 || i >= size) {
        return undefined; // String.codePointAt returns `undefined` for OOB indexes
    }
    // Get the first code unit
    var first = str.charCodeAt(i);
    // check if it's the start of a surrogate pair
    if (first >= 0xD800 && first <= 0xDBFF && size > i + 1) { // high surrogate and there is a next code unit
        var second = str.charCodeAt(i + 1);
        if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
            // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
            return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
        }
    }
    return first;
};
/** @internal */
function charSize(ch) {
    if (ch >= 0x10000) {
        return 2;
    }
    return 1;
}
// Derived from the 10.1.1 UTF16Encoding of the ES6 Spec.
function utf16EncodeAsStringFallback(codePoint) {
    ts_1.Debug.assert(0x0 <= codePoint && codePoint <= 0x10FFFF);
    if (codePoint <= 65535) {
        return String.fromCharCode(codePoint);
    }
    var codeUnit1 = Math.floor((codePoint - 65536) / 1024) + 0xD800;
    var codeUnit2 = ((codePoint - 65536) % 1024) + 0xDC00;
    return String.fromCharCode(codeUnit1, codeUnit2);
}
var utf16EncodeAsStringWorker = String.fromCodePoint ? function (codePoint) { return String.fromCodePoint(codePoint); } : utf16EncodeAsStringFallback;
/** @internal */
function utf16EncodeAsString(codePoint) {
    return utf16EncodeAsStringWorker(codePoint);
}
exports.utf16EncodeAsString = utf16EncodeAsString;
